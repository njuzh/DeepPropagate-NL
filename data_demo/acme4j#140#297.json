[{"index": "0", "file": "/root/repos/repos25/acme4j/acme4j-it/src/main/java/org/shredzone/acme4j/it/BammBammClient.java", "methodName": "org.shredzone.acme4j.it.BammBammClient.BammBammClient", "methodParameterType": "String#", "methodParameterName": "baseUrl#", "methodBody": "public BammBammClient(String baseUrl) {\n        this.baseUrl = Objects.requireNonNull(baseUrl) + '/';\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#CharacterLiteral#InfixExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(CharacterLiteral)CharacterLiteral)InfixExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new BammBamm client.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1", "file": "/root/repos/repos25/acme4j/acme4j-it/src/main/java/org/shredzone/acme4j/it/BammBammClient.java", "methodName": "org.shredzone.acme4j.it.BammBammClient.httpAddToken", "methodParameterType": "String#String#", "methodParameterName": "token#challenge#", "methodBody": "public void httpAddToken(String token, String challenge) throws IOException {\n        JSONBuilder jb = new JSONBuilder();\n        jb.put(\"token\", token);\n        jb.put(\"content\", challenge);\n        sendRequest(\"add-http01\", jb.toString());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a HTTP token.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "org.shredzone.acme4j.toolbox.JSONBuilder.put", "org.shredzone.acme4j.toolbox.JSONBuilder.toString", "org.shredzone.acme4j.it.BammBammClient.sendRequest"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.toString": "Returns a JSON string representation of the current state."}, {"org.shredzone.acme4j.it.BammBammClient.sendRequest": "Sends a request to the pebble-challtestsrv."}]}, {"index": "2", "file": "/root/repos/repos25/acme4j/acme4j-it/src/main/java/org/shredzone/acme4j/it/BammBammClient.java", "methodName": "org.shredzone.acme4j.it.BammBammClient.httpRemoveToken", "methodParameterType": "String#", "methodParameterName": "token#", "methodBody": "public void httpRemoveToken(String token) throws IOException {\n        JSONBuilder jb = new JSONBuilder();\n        jb.put(\"token\", token);\n        sendRequest(\"del-http01\", jb.toString());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Removes a HTTP token.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "org.shredzone.acme4j.toolbox.JSONBuilder.put", "org.shredzone.acme4j.toolbox.JSONBuilder.toString", "org.shredzone.acme4j.it.BammBammClient.sendRequest"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.toString": "Returns a JSON string representation of the current state."}, {"org.shredzone.acme4j.it.BammBammClient.sendRequest": "Sends a request to the pebble-challtestsrv."}]}, {"index": "3", "file": "/root/repos/repos25/acme4j/acme4j-it/src/main/java/org/shredzone/acme4j/it/BammBammClient.java", "methodName": "org.shredzone.acme4j.it.BammBammClient.dnsAddARecord", "methodParameterType": "String#String#", "methodParameterName": "domain#ip#", "methodBody": "public void dnsAddARecord(String domain, String ip) throws IOException {\n        JSONBuilder jb = new JSONBuilder();\n        jb.put(\"host\", domain);\n        jb.array(\"addresses\", Arrays.asList(ip));\n        sendRequest(\"add-a\", jb.toString());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds an A Record to the DNS. Only one A Record is supported per domain. If another A Record is set, it will replace the existing one.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "org.shredzone.acme4j.toolbox.JSONBuilder.put", "java.util.Arrays.asList", "org.shredzone.acme4j.toolbox.JSONBuilder.array", "org.shredzone.acme4j.toolbox.JSONBuilder.toString", "org.shredzone.acme4j.it.BammBammClient.sendRequest"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object"], ["java.lang.Object[]"], ["java.lang.String", "java.util.Collection"], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.array": "Puts an array."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.toString": "Returns a JSON string representation of the current state."}, {"org.shredzone.acme4j.it.BammBammClient.sendRequest": "Sends a request to the pebble-challtestsrv."}]}, {"index": "4", "file": "/root/repos/repos25/acme4j/acme4j-it/src/main/java/org/shredzone/acme4j/it/BammBammClient.java", "methodName": "org.shredzone.acme4j.it.BammBammClient.dnsRemoveARecord", "methodParameterType": "String#", "methodParameterName": "domain#", "methodBody": "public void dnsRemoveARecord(String domain) throws IOException {\n        JSONBuilder jb = new JSONBuilder();\n        jb.put(\"host\", domain);\n        sendRequest(\"clear-a\", jb.toString());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Removes an A Record from the DNS.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "org.shredzone.acme4j.toolbox.JSONBuilder.put", "org.shredzone.acme4j.toolbox.JSONBuilder.toString", "org.shredzone.acme4j.it.BammBammClient.sendRequest"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.toString": "Returns a JSON string representation of the current state."}, {"org.shredzone.acme4j.it.BammBammClient.sendRequest": "Sends a request to the pebble-challtestsrv."}]}, {"index": "5", "file": "/root/repos/repos25/acme4j/acme4j-it/src/main/java/org/shredzone/acme4j/it/BammBammClient.java", "methodName": "org.shredzone.acme4j.it.BammBammClient.dnsAddTxtRecord", "methodParameterType": "String#String#", "methodParameterName": "domain#txt#", "methodBody": "public void dnsAddTxtRecord(String domain, String txt) throws IOException {\n        JSONBuilder jb = new JSONBuilder();\n        jb.put(\"host\", domain + '.');\n        jb.put(\"value\", txt);\n        sendRequest(\"set-txt\", jb.toString());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#CharacterLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a TXT Record to the DNS. Only one TXT Record is supported per domain. If another TXT Record is set, it will replace the existing one.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.shredzone.acme4j.toolbox.JSONBuilder.put", "org.shredzone.acme4j.toolbox.JSONBuilder.toString", "org.shredzone.acme4j.it.BammBammClient.sendRequest"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["char"], [""], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.toString": "Returns a JSON string representation of the current state."}, {"org.shredzone.acme4j.it.BammBammClient.sendRequest": "Sends a request to the pebble-challtestsrv."}]}, {"index": "6", "file": "/root/repos/repos25/acme4j/acme4j-it/src/main/java/org/shredzone/acme4j/it/BammBammClient.java", "methodName": "org.shredzone.acme4j.it.BammBammClient.dnsRemoveTxtRecord", "methodParameterType": "String#", "methodParameterName": "domain#", "methodBody": "public void dnsRemoveTxtRecord(String domain) throws IOException {\n        JSONBuilder jb = new JSONBuilder();\n        jb.put(\"host\", domain + '.');\n        sendRequest(\"clear-txt\", jb.toString());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#CharacterLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Removes a TXT Record from the DNS.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.shredzone.acme4j.toolbox.JSONBuilder.put", "org.shredzone.acme4j.toolbox.JSONBuilder.toString", "org.shredzone.acme4j.it.BammBammClient.sendRequest"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["char"], [""], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.toString": "Returns a JSON string representation of the current state."}, {"org.shredzone.acme4j.it.BammBammClient.sendRequest": "Sends a request to the pebble-challtestsrv."}]}, {"index": "7", "file": "/root/repos/repos25/acme4j/acme4j-it/src/main/java/org/shredzone/acme4j/it/BammBammClient.java", "methodName": "org.shredzone.acme4j.it.BammBammClient.tlsAlpnAddCertificate", "methodParameterType": "String#String#", "methodParameterName": "domain#keyauth#", "methodBody": "public void tlsAlpnAddCertificate(String domain, String keyauth) throws IOException {\n        JSONBuilder jb = new JSONBuilder();\n        jb.put(\"host\", domain);\n        jb.put(\"content\", keyauth);\n        sendRequest(\"add-tlsalpn01\", jb.toString());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a certificate for TLS-ALPN tests.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "org.shredzone.acme4j.toolbox.JSONBuilder.put", "org.shredzone.acme4j.toolbox.JSONBuilder.toString", "org.shredzone.acme4j.it.BammBammClient.sendRequest"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.toString": "Returns a JSON string representation of the current state."}, {"org.shredzone.acme4j.it.BammBammClient.sendRequest": "Sends a request to the pebble-challtestsrv."}]}, {"index": "8", "file": "/root/repos/repos25/acme4j/acme4j-it/src/main/java/org/shredzone/acme4j/it/BammBammClient.java", "methodName": "org.shredzone.acme4j.it.BammBammClient.tlsAlpnRemoveCertificate", "methodParameterType": "String#", "methodParameterName": "domain#", "methodBody": "public void tlsAlpnRemoveCertificate(String domain) throws IOException {\n        JSONBuilder jb = new JSONBuilder();\n        jb.put(\"host\", domain);\n        sendRequest(\"del-tlsalpn01\", jb.toString());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Removes a certificate.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "org.shredzone.acme4j.toolbox.JSONBuilder.put", "org.shredzone.acme4j.toolbox.JSONBuilder.toString", "org.shredzone.acme4j.it.BammBammClient.sendRequest"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.toString": "Returns a JSON string representation of the current state."}, {"org.shredzone.acme4j.it.BammBammClient.sendRequest": "Sends a request to the pebble-challtestsrv."}]}, {"index": "9", "file": "/root/repos/repos25/acme4j/acme4j-it/src/main/java/org/shredzone/acme4j/it/BammBammClient.java", "methodName": "org.shredzone.acme4j.it.BammBammClient.sendRequest", "methodParameterType": "String#String#", "methodParameterName": "call#body#", "methodBody": "private void sendRequest(String call, String body) throws IOException {\n        try {\n            HttpPost httppost = new HttpPost(baseUrl + call);\n            httppost.setEntity(new StringEntity(body, ContentType.APPLICATION_JSON));\n\n            HttpResponse response = CLIENT.execute(httppost);\n\n            EntityUtils.consume(response.getEntity());\n\n            if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n                throw new IOException(response.getStatusLine().getReasonPhrase());\n            }\n        } catch (ClientProtocolException ex) {\n            throw new IOException(ex);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#InfixExpression#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Sends a request to the pebble-challtestsrv.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.http.client.methods.HttpPost.<init>", "org.apache.http.entity.StringEntity.<init>", "org.apache.http.client.methods.HttpPost.setEntity", "org.apache.http.client.HttpClient.execute", "org.apache.http.HttpResponse.getEntity", "org.apache.http.util.EntityUtils.consume", "org.apache.http.HttpResponse.getStatusLine", "org.apache.http.StatusLine.getStatusCode", "org.apache.http.StatusLine.getReasonPhrase", "java.io.IOException.<init>", "java.io.IOException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String", "org.apache.http.entity.ContentType"], ["org.apache.http.HttpEntity"], ["org.apache.http.client.methods.HttpUriRequest"], [""], ["org.apache.http.HttpEntity"], [""], [""], [""], ["java.lang.String"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "10", "file": "/root/repos/repos25/acme4j/acme4j-example/src/main/java/org/shredzone/acme4j/ClientTest.java", "methodName": "org.shredzone.acme4j.ClientTest.fetchCertificate", "methodParameterType": "Collection<String>#", "methodParameterName": "domains#", "methodBody": "public void fetchCertificate(Collection<String> domains) throws IOException, AcmeException {\n        // Load the user key file. If there is no key file, create a new one.\n        KeyPair userKeyPair = loadOrCreateUserKeyPair();\n\n        // Create a session for Let's Encrypt.\n        // Use \"acme://letsencrypt.org\" for production server\n        Session session = new Session(\"acme://letsencrypt.org/staging\");\n\n        // Get the Account.\n        // If there is no account yet, create a new one.\n        Account acct = findOrRegisterAccount(session, userKeyPair);\n\n        // Load or create a key pair for the domains. This should not be the userKeyPair!\n        KeyPair domainKeyPair = loadOrCreateDomainKeyPair();\n\n        // Order the certificate\n        Order order = acct.newOrder().domains(domains).create();\n\n        // Perform all required authorizations\n        for (Authorization auth : order.getAuthorizations()) {\n            authorize(auth);\n        }\n\n        // Generate a CSR for all of the domains, and sign it with the domain key pair.\n        CSRBuilder csrb = new CSRBuilder();\n        csrb.addDomains(domains);\n        csrb.sign(domainKeyPair);\n\n        // Write the CSR to a file, for later use.\n        try (Writer out = new FileWriter(DOMAIN_CSR_FILE)) {\n            csrb.write(out);\n        }\n\n        // Order the certificate\n        order.execute(csrb.getEncoded());\n\n        // Wait for the order to complete\n        try {\n            int attempts = 10;\n            while (order.getStatus() != Status.VALID && attempts-- > 0) {\n                // Did the order fail?\n                if (order.getStatus() == Status.INVALID) {\n                    throw new AcmeException(\"Order failed... Giving up.\");\n                }\n\n                // Wait for a few seconds\n                Thread.sleep(3000L);\n\n                // Then update the status\n                order.update();\n            }\n        } catch (InterruptedException ex) {\n            LOG.error(\"interrupted\", ex);\n            Thread.currentThread().interrupt();\n        }\n\n        // Get the certificate\n        Certificate certificate = order.getCertificate();\n\n        LOG.info(\"Success! The certificate for domains {} has been generated!\", domains);\n        LOG.info(\"Certificate URL: {}\", certificate.getLocation());\n\n        // Write a combined file containing the certificate and chain.\n        try (FileWriter fw = new FileWriter(DOMAIN_CHAIN_FILE)) {\n            certificate.writeCertificate(fw);\n        }\n\n        // That's all! Configure your web server to use the DOMAIN_KEY_FILE and\n        // DOMAIN_CHAIN_FILE for the requested domans.\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Generates a certificate for the given domains. Also takes care for the registration process.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "11", "file": "/root/repos/repos25/acme4j/acme4j-example/src/main/java/org/shredzone/acme4j/ClientTest.java", "methodName": "org.shredzone.acme4j.ClientTest.loadOrCreateUserKeyPair", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private KeyPair loadOrCreateUserKeyPair() throws IOException {\n        if (USER_KEY_FILE.exists()) {\n            // If there is a key file, read it\n            try (FileReader fr = new FileReader(USER_KEY_FILE)) {\n                return KeyPairUtils.readKeyPair(fr);\n            }\n\n        } else {\n            // If there is none, create a new key pair and save it\n            KeyPair userKeyPair = KeyPairUtils.createKeyPair(KEY_SIZE);\n            try (FileWriter fw = new FileWriter(USER_KEY_FILE)) {\n                KeyPairUtils.writeKeyPair(userKeyPair, fw);\n            }\n            return userKeyPair;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)TryStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Loads a user key pair from  {@value #USER_KEY_FILE}. If the file does not exist, a new key pair is generated and saved. <p> Keep this key pair in a safe place! In a production environment, you will not be able to access your account again if you should lose the key pair.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "12", "file": "/root/repos/repos25/acme4j/acme4j-example/src/main/java/org/shredzone/acme4j/ClientTest.java", "methodName": "org.shredzone.acme4j.ClientTest.loadOrCreateDomainKeyPair", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private KeyPair loadOrCreateDomainKeyPair() throws IOException {\n        if (DOMAIN_KEY_FILE.exists()) {\n            try (FileReader fr = new FileReader(DOMAIN_KEY_FILE)) {\n                return KeyPairUtils.readKeyPair(fr);\n            }\n        } else {\n            KeyPair domainKeyPair = KeyPairUtils.createKeyPair(KEY_SIZE);\n            try (FileWriter fw = new FileWriter(DOMAIN_KEY_FILE)) {\n                KeyPairUtils.writeKeyPair(domainKeyPair, fw);\n            }\n            return domainKeyPair;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)TryStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Loads a domain key pair from  {@value #DOMAIN_KEY_FILE}. If the file does not exist, a new key pair is generated and saved.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "13", "file": "/root/repos/repos25/acme4j/acme4j-example/src/main/java/org/shredzone/acme4j/ClientTest.java", "methodName": "org.shredzone.acme4j.ClientTest.findOrRegisterAccount", "methodParameterType": "Session#KeyPair#", "methodParameterName": "session#accountKey#", "methodBody": "private Account findOrRegisterAccount(Session session, KeyPair accountKey) throws AcmeException {\n        // Ask the user to accept the TOS, if server provides us with a link.\n        URI tos = session.getMetadata().getTermsOfService();\n        if (tos != null) {\n            acceptAgreement(tos);\n        }\n\n        Account account = new AccountBuilder()\n                        .agreeToTermsOfService()\n                        .useKeyPair(accountKey)\n                        .create(session);\n        LOG.info(\"Registered a new user, URL: {}\", account.getLocation());\n\n        return account;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Finds your  {@link Account} at the ACME server. It will be found by your user'spublic key. If your key is not known to the server yet, a new account will be created. <p> This is a simple way of finding your  {@link Account}. A better way is to get the URL and KeyIdentifier of your new account with  {@link Account#getLocation()}{@link Session#getKeyIdentifier()} and store it somewhere. If you need to getaccess to your account later, reconnect to it via {@link Account#bind(Session,URI)} by using the stored location.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "14", "file": "/root/repos/repos25/acme4j/acme4j-example/src/main/java/org/shredzone/acme4j/ClientTest.java", "methodName": "org.shredzone.acme4j.ClientTest.authorize", "methodParameterType": "Authorization#", "methodParameterName": "auth#", "methodBody": "private void authorize(Authorization auth) throws AcmeException {\n        LOG.info(\"Authorization for domain {}\", auth.getIdentifier().getDomain());\n\n        // The authorization is already valid. No need to process a challenge.\n        if (auth.getStatus() == Status.VALID) {\n            return;\n        }\n\n        // Find the desired challenge and prepare it.\n        Challenge challenge = null;\n        switch (CHALLENGE_TYPE) {\n            case HTTP:\n                challenge = httpChallenge(auth);\n                break;\n\n            case DNS:\n                challenge = dnsChallenge(auth);\n                break;\n        }\n\n        if (challenge == null) {\n            throw new AcmeException(\"No challenge found\");\n        }\n\n        // If the challenge is already verified, there's no need to execute it again.\n        if (challenge.getStatus() == Status.VALID) {\n            return;\n        }\n\n        // Now trigger the challenge.\n        challenge.trigger();\n\n        // Poll for the challenge to complete.\n        try {\n            int attempts = 10;\n            while (challenge.getStatus() != Status.VALID && attempts-- > 0) {\n                // Did the authorization fail?\n                if (challenge.getStatus() == Status.INVALID) {\n                    throw new AcmeException(\"Challenge failed... Giving up.\");\n                }\n\n                // Wait for a few seconds\n                Thread.sleep(3000L);\n\n                // Then update the status\n                challenge.update();\n            }\n        } catch (InterruptedException ex) {\n            LOG.error(\"interrupted\", ex);\n            Thread.currentThread().interrupt();\n        }\n\n        // All reattempts are used up and there is still no valid authorization?\n        if (challenge.getStatus() != Status.VALID) {\n            throw new AcmeException(\"Failed to pass the challenge for domain \"\n                    + auth.getIdentifier().getDomain() + \", ... Giving up.\");\n        }\n\n        LOG.info(\"Challenge has been completed. Remember to remove the validation resource.\");\n        completeChallenge(\"Challenge has been completed.\\nYou can remove the resource again now.\");\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#SwitchStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)SwitchStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Authorize a domain. It will be associated with your account, so you will be able to retrieve a signed certificate for the domain later.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "15", "file": "/root/repos/repos25/acme4j/acme4j-example/src/main/java/org/shredzone/acme4j/ClientTest.java", "methodName": "org.shredzone.acme4j.ClientTest.httpChallenge", "methodParameterType": "Authorization#", "methodParameterName": "auth#", "methodBody": "public Challenge httpChallenge(Authorization auth) throws AcmeException {\n        // Find a single http-01 challenge\n        Http01Challenge challenge = auth.findChallenge(Http01Challenge.class);\n        if (challenge == null) {\n            throw new AcmeException(\"Found no \" + Http01Challenge.TYPE + \" challenge, don't know what to do...\");\n        }\n\n        // Output the challenge, wait for acknowledge...\n        LOG.info(\"Please create a file in your web server's base directory.\");\n        LOG.info(\"It must be reachable at: http://{}/.well-known/acme-challenge/{}\",\n                    auth.getIdentifier().getDomain(), challenge.getToken());\n        LOG.info(\"File name: {}\", challenge.getToken());\n        LOG.info(\"Content: {}\", challenge.getAuthorization());\n        LOG.info(\"The file must not contain any leading or trailing whitespaces or line breaks!\");\n        LOG.info(\"If you're ready, dismiss the dialog...\");\n\n        StringBuilder message = new StringBuilder();\n        message.append(\"Please create a file in your web server's base directory.\\n\\n\");\n        message.append(\"http://\")\n                    .append(auth.getIdentifier().getDomain())\n                    .append(\"/.well-known/acme-challenge/\")\n                    .append(challenge.getToken())\n                    .append(\"\\n\\n\");\n        message.append(\"Content:\\n\\n\");\n        message.append(challenge.getAuthorization());\n        acceptChallenge(message.toString());\n\n        return challenge;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#QualifiedName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Prepares a HTTP challenge. <p> The verification of this challenge expects a file with a certain content to be reachable at a given path under the domain to be tested. <p> This example outputs instructions that need to be executed manually. In a production environment, you would rather generate this file automatically, or maybe use a servlet that returns  {@link Http01Challenge#getAuthorization()}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "16", "file": "/root/repos/repos25/acme4j/acme4j-example/src/main/java/org/shredzone/acme4j/ClientTest.java", "methodName": "org.shredzone.acme4j.ClientTest.dnsChallenge", "methodParameterType": "Authorization#", "methodParameterName": "auth#", "methodBody": "public Challenge dnsChallenge(Authorization auth) throws AcmeException {\n        // Find a single dns-01 challenge\n        Dns01Challenge challenge = auth.findChallenge(Dns01Challenge.TYPE);\n        if (challenge == null) {\n            throw new AcmeException(\"Found no \" + Dns01Challenge.TYPE + \" challenge, don't know what to do...\");\n        }\n\n        // Output the challenge, wait for acknowledge...\n        LOG.info(\"Please create a TXT record:\");\n        LOG.info(\"_acme-challenge.{}. IN TXT {}\",\n                    auth.getIdentifier().getDomain(), challenge.getDigest());\n        LOG.info(\"If you're ready, dismiss the dialog...\");\n\n        StringBuilder message = new StringBuilder();\n        message.append(\"Please create a TXT record:\\n\\n\");\n        message.append(\"_acme-challenge.\")\n                    .append(auth.getIdentifier().getDomain())\n                    .append(\". IN TXT \")\n                    .append(challenge.getDigest());\n        acceptChallenge(message.toString());\n\n        return challenge;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#QualifiedName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Prepares a DNS challenge. <p> The verification of this challenge expects a TXT record with a certain content. <p> This example outputs instructions that need to be executed manually. In a production environment, you would rather configure your DNS automatically.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "17", "file": "/root/repos/repos25/acme4j/acme4j-example/src/main/java/org/shredzone/acme4j/ClientTest.java", "methodName": "org.shredzone.acme4j.ClientTest.acceptChallenge", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public void acceptChallenge(String message) throws AcmeException {\n        int option = JOptionPane.showConfirmDialog(null,\n                        message,\n                        \"Prepare Challenge\",\n                        JOptionPane.OK_CANCEL_OPTION);\n        if (option == JOptionPane.CANCEL_OPTION) {\n            throw new AcmeException(\"User cancelled the challenge\");\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#PrimitiveType#SimpleName#SimpleName#SimpleName#NullLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Presents the instructions for preparing the challenge validation, and waits for dismissal. If the user cancelled the dialog, an exception is thrown.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "18", "file": "/root/repos/repos25/acme4j/acme4j-example/src/main/java/org/shredzone/acme4j/ClientTest.java", "methodName": "org.shredzone.acme4j.ClientTest.completeChallenge", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public void completeChallenge(String message) throws AcmeException {\n        JOptionPane.showMessageDialog(null,\n                        message,\n                        \"Complete Challenge\",\n                        JOptionPane.INFORMATION_MESSAGE);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Presents the instructions for removing the challenge validation, and waits for dismissal.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "19", "file": "/root/repos/repos25/acme4j/acme4j-example/src/main/java/org/shredzone/acme4j/ClientTest.java", "methodName": "org.shredzone.acme4j.ClientTest.acceptAgreement", "methodParameterType": "URI#", "methodParameterName": "agreement#", "methodBody": "public void acceptAgreement(URI agreement) throws AcmeException {\n        int option = JOptionPane.showConfirmDialog(null,\n                        \"Do you accept the Terms of Service?\\n\\n\" + agreement,\n                        \"Accept ToS\",\n                        JOptionPane.YES_NO_OPTION);\n        if (option == JOptionPane.NO_OPTION) {\n            throw new AcmeException(\"User did not accept Terms of Service\");\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#PrimitiveType#SimpleName#SimpleName#SimpleName#NullLiteral#StringLiteral#SimpleName#InfixExpression#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Presents the user a link to the Terms of Service, and asks for confirmation. If the user denies confirmation, an exception is thrown.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "20", "file": "/root/repos/repos25/acme4j/acme4j-example/src/main/java/org/shredzone/acme4j/ClientTest.java", "methodName": "org.shredzone.acme4j.ClientTest.main", "methodParameterType": "String#", "methodParameterName": "args#", "methodBody": "public static void main(String... args) {\n        if (args.length == 0) {\n            System.err.println(\"Usage: ClientTest <domain>...\");\n            System.exit(1);\n        }\n\n        LOG.info(\"Starting up...\");\n\n        Security.addProvider(new BouncyCastleProvider());\n\n        Collection<String> domains = Arrays.asList(args);\n        try {\n            ClientTest ct = new ClientTest();\n            ct.fetchCertificate(domains);\n        } catch (Exception ex) {\n            LOG.error(\"Failed to get a certificate for domains \" + domains, ex);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Invokes this example.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "21", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/AcmeJsonResource.java", "methodName": "org.shredzone.acme4j.AcmeJsonResource.AcmeJsonResource", "methodParameterType": "Login#URL#", "methodParameterName": "login#location#", "methodBody": "protected AcmeJsonResource(Login login, URL location) {\n        super(login, location);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Create a new  {@link AcmeJsonResource}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "22", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/AcmeJsonResource.java", "methodName": "org.shredzone.acme4j.AcmeJsonResource.getJSON", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public JSON getJSON() {\n        if (data == null) {\n            try {\n                update();\n            } catch (AcmeRetryAfterException ex) {\n                // ignore... The object was still updated.\n                LOG.debug(\"Retry-After\", ex);\n            } catch (AcmeException ex) {\n                throw new AcmeLazyLoadingException(this, ex);\n            }\n        }\n        return data;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the JSON representation of the resource data. <p> If there is no data,  {@link #update()} is invoked to fetch it from the server.<p> This method can be used to read proprietary data from the resources.", "call_func_name": ["org.shredzone.acme4j.AcmeJsonResource.update", "org.slf4j.Logger.debug", "org.shredzone.acme4j.exception.AcmeLazyLoadingException.<init>"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Throwable"], ["org.shredzone.acme4j.AcmeResource", "org.shredzone.acme4j.exception.AcmeException"]], "passed_comments": [{"org.shredzone.acme4j.AcmeJsonResource.update": "Updates this resource, by fetching the current resource data from the server."}]}, {"index": "23", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/AcmeJsonResource.java", "methodName": "org.shredzone.acme4j.AcmeJsonResource.setJSON", "methodParameterType": "JSON#", "methodParameterName": "data#", "methodBody": "protected void setJSON(JSON data) {\n        this.data = Objects.requireNonNull(data, \"data\");\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the JSON representation of the resource data.", "call_func_name": ["java.util.Objects.requireNonNull"], "call_func_parameter": [["java.lang.Object", "java.lang.String"]], "passed_comments": "/"}, {"index": "24", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/AcmeJsonResource.java", "methodName": "org.shredzone.acme4j.AcmeJsonResource.isValid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected boolean isValid() {\n        return data != null;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if this resource is valid.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "25", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/AcmeJsonResource.java", "methodName": "org.shredzone.acme4j.AcmeJsonResource.invalidate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected void invalidate() {\n        data = null;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Invalidates the state of this resource. Enforces an  {@link #update()} when{@link #getJSON()} is invoked.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "26", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/AcmeJsonResource.java", "methodName": "org.shredzone.acme4j.AcmeJsonResource.update", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void update() throws AcmeException {\n        String resourceType = getClass().getSimpleName();\n        LOG.debug(\"update {}\", resourceType);\n        try (Connection conn = getSession().connect()) {\n            conn.sendSignedPostAsGetRequest(getLocation(), getLogin());\n            setJSON(conn.readJsonResponse());\n            conn.handleRetryAfter(resourceType + \" is not completed yet\");\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Updates this resource, by fetching the current resource data from the server.", "call_func_name": ["java.lang.Object.getClass", "java.lang.Class.getSimpleName", "org.slf4j.Logger.debug", "org.shredzone.acme4j.AcmeJsonResource.getSession", "org.shredzone.acme4j.Session.connect", "org.shredzone.acme4j.AcmeJsonResource.getLocation", "org.shredzone.acme4j.AcmeJsonResource.getLogin", "org.shredzone.acme4j.connector.Connection.sendSignedPostAsGetRequest", "org.shredzone.acme4j.connector.Connection.readJsonResponse", "org.shredzone.acme4j.AcmeJsonResource.setJSON", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.shredzone.acme4j.connector.Connection.handleRetryAfter", "org.shredzone.acme4j.connector.Connection.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.Object"], [""], [""], [""], [""], ["java.net.URL", "org.shredzone.acme4j.Login"], [""], ["org.shredzone.acme4j.toolbox.JSON"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.Session.connect": "Returns a new  {@link Connection} to the ACME server."}, {"org.shredzone.acme4j.connector.Connection.sendSignedPostAsGetRequest": "Sends a signed POST-as-GET request. Requires a  {@link Login} for the session and{@link KeyPair}. The  {@link Login} account location is sent in a \"kid\" protectedheader. <p> If the server does not return a 200 class status code, an  {@link AcmeException} israised matching the error."}, {"org.shredzone.acme4j.connector.Connection.readJsonResponse": "Reads a server response as JSON data."}, {"org.shredzone.acme4j.AcmeJsonResource.setJSON": "Sets the JSON representation of the resource data."}, {"org.shredzone.acme4j.connector.Connection.handleRetryAfter": "Throws an  {@link AcmeRetryAfterException} if the last status was HTTP Accepted anda Retry-After header was received."}, {"org.shredzone.acme4j.connector.Connection.close": "Closes the  {@link Connection}, releasing all resources."}]}, {"index": "27", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JSONBuilder.java", "methodName": "org.shredzone.acme4j.toolbox.JSONBuilder.put", "methodParameterType": "String#Object#", "methodParameterName": "key#value#", "methodBody": "public JSONBuilder put(String key, @Nullable Object value) {\n        data.put(Objects.requireNonNull(key, \"key\"), value);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Puts a property. If a property with the key exists, it will be replaced.", "call_func_name": ["java.util.Objects.requireNonNull", "java.util.Map.put"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "28", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JSONBuilder.java", "methodName": "org.shredzone.acme4j.toolbox.JSONBuilder.put", "methodParameterType": "String#Instant#", "methodParameterName": "key#value#", "methodBody": "public JSONBuilder put(String key, @Nullable Instant value) {\n        if (value == null) {\n            put(key, (Object) null);\n            return this;\n        }\n\n        put(key, DateTimeFormatter.ISO_INSTANT.format(value));\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#NullLiteral#CastExpression#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral)CastExpression)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Puts an  {@link Instant} to the JSON. If a property with the key exists, it will bereplaced.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSONBuilder.put", "java.time.format.DateTimeFormatter.format"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.time.temporal.TemporalAccessor"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}]}, {"index": "29", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JSONBuilder.java", "methodName": "org.shredzone.acme4j.toolbox.JSONBuilder.put", "methodParameterType": "String#Duration#", "methodParameterName": "key#value#", "methodBody": "public JSONBuilder put(String key, @Nullable Duration value) {\n        if (value == null) {\n            put(key, (Object) null);\n            return this;\n        }\n\n        put(key, value.getSeconds());\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#NullLiteral#CastExpression#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral)CastExpression)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Puts a  {@link Duration} to the JSON. If a property with the key exists, it will bereplaced.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSONBuilder.put", "java.time.Duration.getSeconds", "java.lang.Long.valueOf"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], [""], ["long"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}]}, {"index": "30", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JSONBuilder.java", "methodName": "org.shredzone.acme4j.toolbox.JSONBuilder.putBase64", "methodParameterType": "String#byte[]#", "methodParameterName": "key#data#", "methodBody": "public JSONBuilder putBase64(String key, byte[] data) {\n        return put(key, base64UrlEncode(data));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Puts binary data to the JSON. The data is base64 url encoded.", "call_func_name": ["org.shredzone.acme4j.toolbox.AcmeUtils.base64UrlEncode", "org.shredzone.acme4j.toolbox.JSONBuilder.put"], "call_func_parameter": [["byte[]"], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.AcmeUtils.base64UrlEncode": "Base64 encodes the given byte array, using URL style encoding."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}]}, {"index": "31", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JSONBuilder.java", "methodName": "org.shredzone.acme4j.toolbox.JSONBuilder.putKey", "methodParameterType": "String#PublicKey#", "methodParameterName": "key#publickey#", "methodBody": "public JSONBuilder putKey(String key, PublicKey publickey) {\n        Objects.requireNonNull(publickey, \"publickey\");\n\n        data.put(key, JoseUtils.publicKeyToJWK(publickey));\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Puts a  {@link Key} into the claim. The key is serializied as JWK.", "call_func_name": ["java.util.Objects.requireNonNull", "org.shredzone.acme4j.toolbox.JoseUtils.publicKeyToJWK", "java.util.Map.put"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], ["java.security.PublicKey"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JoseUtils.publicKeyToJWK": "Converts a  {@link PublicKey} to a JOSE JWK structure."}]}, {"index": "32", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JSONBuilder.java", "methodName": "org.shredzone.acme4j.toolbox.JSONBuilder.object", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public JSONBuilder object(String key) {\n        JSONBuilder subBuilder = new JSONBuilder();\n        data.put(key, subBuilder.data);\n        return subBuilder;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates an object for the given key.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "java.util.Map.put"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "33", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JSONBuilder.java", "methodName": "org.shredzone.acme4j.toolbox.JSONBuilder.array", "methodParameterType": "String#Collection<?>#", "methodParameterName": "key#values#", "methodBody": "public JSONBuilder array(String key, Collection<?> values) {\n        data.put(key, values);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Puts an array.", "call_func_name": ["java.util.Map.put"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "34", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JSONBuilder.java", "methodName": "org.shredzone.acme4j.toolbox.JSONBuilder.toMap", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, Object> toMap() {\n        return Collections.unmodifiableMap(data);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a  {@link Map} representation of the current state.", "call_func_name": ["java.util.Collections.unmodifiableMap"], "call_func_parameter": [["java.util.Map"]], "passed_comments": "/"}, {"index": "35", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JSONBuilder.java", "methodName": "org.shredzone.acme4j.toolbox.JSONBuilder.toJSON", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public JSON toJSON() {\n        return JSON.parse(toString());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a  {@link JSON} representation of the current state.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSONBuilder.toString", "org.shredzone.acme4j.toolbox.JSON.parse"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSONBuilder.toString": "Returns a JSON string representation of the current state."}, {"org.shredzone.acme4j.toolbox.JSON.parse": "Parses JSON from a String."}]}, {"index": "36", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JSONBuilder.java", "methodName": "org.shredzone.acme4j.toolbox.JSONBuilder.toString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String toString() {\n        return JsonUtil.toJson(data);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a JSON string representation of the current state.", "call_func_name": ["org.jose4j.json.JsonUtil.toJson"], "call_func_parameter": [["java.util.Map"]], "passed_comments": "/"}, {"index": "37", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/AcmeUtils.java", "methodName": "org.shredzone.acme4j.toolbox.AcmeUtils.sha256hash", "methodParameterType": "String#", "methodParameterName": "z#", "methodBody": "public static byte[] sha256hash(String z) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            md.update(z.getBytes(\"UTF-8\"));\n            return md.digest();\n        } catch (NoSuchAlgorithmException | UnsupportedEncodingException ex) {\n            throw new AcmeProtocolException(\"Could not compute hash\", ex);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Computes a SHA-256 hash of the given string.", "call_func_name": ["java.security.MessageDigest.getInstance", "java.lang.String.getBytes", "java.security.MessageDigest.update", "java.security.MessageDigest.digest", "org.shredzone.acme4j.exception.AcmeProtocolException.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["byte[]"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "38", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/AcmeUtils.java", "methodName": "org.shredzone.acme4j.toolbox.AcmeUtils.hexEncode", "methodParameterType": "byte[]#", "methodParameterName": "data#", "methodBody": "public static String hexEncode(byte[] data) {\n        char[] result = new char[data.length * 2];\n        for (int ix = 0; ix < data.length; ix++) {\n            int val = data[ix] & 0xFF;\n            result[ix * 2] = HEX[val >>> 4];\n            result[ix * 2 + 1] = HEX[val & 0x0F];\n        }\n        return new String(result);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Hex encodes the given byte array.", "call_func_name": ["java.lang.String.<init>"], "call_func_parameter": [["char[]"]], "passed_comments": "/"}, {"index": "39", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/AcmeUtils.java", "methodName": "org.shredzone.acme4j.toolbox.AcmeUtils.base64UrlEncode", "methodParameterType": "byte[]#", "methodParameterName": "data#", "methodBody": "public static String base64UrlEncode(byte[] data) {\n        return URL_ENCODER.encodeToString(data);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Base64 encodes the given byte array, using URL style encoding.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "40", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/AcmeUtils.java", "methodName": "org.shredzone.acme4j.toolbox.AcmeUtils.base64UrlDecode", "methodParameterType": "String#", "methodParameterName": "base64#", "methodBody": "public static byte[] base64UrlDecode(String base64) {\n        return URL_DECODER.decode(base64);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Base64 decodes to a byte array, using URL style encoding.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "41", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/AcmeUtils.java", "methodName": "org.shredzone.acme4j.toolbox.AcmeUtils.isValidBase64Url", "methodParameterType": "String#", "methodParameterName": "base64#", "methodBody": "public static boolean isValidBase64Url(@Nullable String base64) {\n        return base64 != null && BASE64URL_PATTERN.matcher(base64).matches();\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Validates that the given  {@link String} is a valid base64url encoded value.", "call_func_name": ["java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches"], "call_func_parameter": [["java.lang.CharSequence"], [""]], "passed_comments": "/"}, {"index": "42", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/AcmeUtils.java", "methodName": "org.shredzone.acme4j.toolbox.AcmeUtils.toAce", "methodParameterType": "String#", "methodParameterName": "domain#", "methodBody": "public static String toAce(String domain) {\n        Objects.requireNonNull(domain, \"domain\");\n        return IDN.toASCII(domain.trim()).toLowerCase();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "ASCII encodes a domain name. <p> The conversion is done as described in <a href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a>. Additionally, all leading and trailing white spaces are trimmed, and the result is lowercased. <p> It is safe to pass in ACE encoded domains, they will be returned unchanged.", "call_func_name": ["java.util.Objects.requireNonNull", "java.lang.String.trim", "java.net.IDN.toASCII", "java.lang.String.toLowerCase"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], [""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "43", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/AcmeUtils.java", "methodName": "org.shredzone.acme4j.toolbox.AcmeUtils.parseTimestamp", "methodParameterType": "String#", "methodParameterName": "str#", "methodBody": "public static Instant parseTimestamp(String str) {\n        Matcher m = DATE_PATTERN.matcher(str);\n        if (!m.matches()) {\n            throw new IllegalArgumentException(\"Illegal date: \" + str);\n        }\n\n        int year = Integer.parseInt(m.group(1));\n        int month = Integer.parseInt(m.group(2));\n        int dom = Integer.parseInt(m.group(3));\n        int hour = Integer.parseInt(m.group(4));\n        int minute = Integer.parseInt(m.group(5));\n        int second = Integer.parseInt(m.group(6));\n\n        StringBuilder msStr = new StringBuilder();\n        if (m.group(7) != null) {\n            msStr.append(m.group(7));\n        }\n        while (msStr.length() < 3) {\n            msStr.append('0');\n        }\n        int ms = Integer.parseInt(msStr.toString());\n\n        String tz = m.group(8);\n        if (\"Z\".equalsIgnoreCase(tz)) {\n            tz = \"GMT\";\n        } else {\n            tz = TZ_PATTERN.matcher(tz).replaceAll(\"GMT$1$2:$3\");\n        }\n\n        return ZonedDateTime.of(\n                year, month, dom, hour, minute, second, ms * 1_000_000,\n                ZoneId.of(tz)).toInstant();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#WhileStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(WhileStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block)WhileStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Parses a RFC 3339 formatted date.", "call_func_name": ["java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "java.util.regex.Matcher.group", "java.lang.Integer.parseInt", "java.lang.StringBuilder.length", "java.lang.StringBuilder.append", "java.lang.String.equalsIgnoreCase", "java.util.regex.Matcher.replaceAll", "java.time.ZoneId.of", "java.time.ZonedDateTime.of", "java.time.ZonedDateTime.toInstant"], "call_func_parameter": [["java.lang.CharSequence"], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], ["int"], ["java.lang.String"], [""], ["char"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["int", "int", "int", "int", "int", "int", "int", "java.time.ZoneId"], [""]], "passed_comments": "/"}, {"index": "44", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/AcmeUtils.java", "methodName": "org.shredzone.acme4j.toolbox.AcmeUtils.stripErrorPrefix", "methodParameterType": "String#", "methodParameterName": "type#", "methodBody": "@CheckForNull\n    public static String stripErrorPrefix(@Nullable String type) {\n        if (type != null && type.startsWith(ACME_ERROR_PREFIX)) {\n            return type.substring(ACME_ERROR_PREFIX.length());\n        } else {\n            return null;\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#NullLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Strips the acme error prefix from the error string. <p> For example, for \"urn:ietf:params:acme:error:unauthorized\", \"unauthorized\" is returned.", "call_func_name": ["java.lang.String.startsWith", "java.lang.String.length", "java.lang.String.substring"], "call_func_parameter": [["java.lang.String"], [""], ["int"]], "passed_comments": "/"}, {"index": "45", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/AcmeUtils.java", "methodName": "org.shredzone.acme4j.toolbox.AcmeUtils.writeToPem", "methodParameterType": "byte[]#PemLabel#Writer#", "methodParameterName": "encoded#label#out#", "methodBody": "public static void writeToPem(byte[] encoded, PemLabel label, @WillNotClose Writer out)\n                throws IOException {\n        out.append(\"-----BEGIN \").append(label.toString()).append(\"-----\\n\");\n        out.append(new String(PEM_ENCODER.encode(encoded), StandardCharsets.US_ASCII));\n        out.append(\"\\n-----END \").append(label.toString()).append(\"-----\\n\");\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Writes an encoded key or certificate to a file in PEM format.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "46", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/AcmeUtils.java", "methodName": "org.shredzone.acme4j.toolbox.AcmeUtils.getContentType", "methodParameterType": "String#", "methodParameterName": "header#", "methodBody": "@CheckForNull\n    public static String getContentType(@Nullable String header) {\n        if (header != null) {\n            Matcher m = CONTENT_TYPE_PATTERN.matcher(header);\n            if (m.matches()) {\n                String charset = m.group(3);\n                if (charset != null && !\"utf-8\".equalsIgnoreCase(charset)) {\n                    throw new AcmeProtocolException(\"Unsupported charset \" + charset);\n                }\n                return m.group(1).trim().toLowerCase();\n            }\n        }\n        return null;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#StringLiteral#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extracts the content type of a Content-Type header.", "call_func_name": ["java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "java.util.regex.Matcher.group", "java.lang.String.equalsIgnoreCase", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.shredzone.acme4j.exception.AcmeProtocolException.<init>", "java.lang.String.trim", "java.lang.String.toLowerCase"], "call_func_parameter": [["java.lang.CharSequence"], [""], ["int"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], [""]], "passed_comments": "/"}, {"index": "47", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/AcmeUtils.java", "methodName": "org.shredzone.acme4j.toolbox.AcmeUtils.validateContact", "methodParameterType": "URI#", "methodParameterName": "contact#", "methodBody": "public static void validateContact(URI contact) {\n        if (\"mailto\".equalsIgnoreCase(contact.getScheme())) {\n            String address = contact.toString().substring(7);\n            if (MAIL_PATTERN.matcher(address).find()) {\n                throw new IllegalArgumentException(\n                        \"multiple recipients or hfields are not allowed: \" + contact);\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Validates a contact  {@link URI}.", "call_func_name": ["java.net.URI.getScheme", "java.lang.String.equalsIgnoreCase", "java.net.URI.toString", "java.lang.String.substring", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.find", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["int"], ["java.lang.CharSequence"], [""], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "48", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JSON.java", "methodName": "org.shredzone.acme4j.toolbox.JSON.JSON", "methodParameterType": "Map<String,Object>#", "methodParameterName": "data#", "methodBody": "private JSON(Map<String, Object> data) {\n        this(\"\", data);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#StringLiteral#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link JSON} root object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "49", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JSON.java", "methodName": "org.shredzone.acme4j.toolbox.JSON.JSON", "methodParameterType": "String#Map<String,Object>#", "methodParameterName": "path#data#", "methodBody": "private JSON(String path, Map<String, Object> data) {\n        this.path = path;\n        this.data = data;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link JSON} branch object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "50", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JSON.java", "methodName": "org.shredzone.acme4j.toolbox.JSON.parse", "methodParameterType": "InputStream#", "methodParameterName": "in#", "methodBody": "public static JSON parse(@WillClose InputStream in) throws IOException {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(in, \"utf-8\"))) {\n            String json = reader.lines().map(String::trim).collect(joining());\n            return parse(json);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#StringLiteral#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Parses JSON from an  {@link InputStream}.", "call_func_name": ["java.io.InputStreamReader.<init>", "java.io.BufferedReader.<init>", "java.io.BufferedReader.lines", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Collectors.joining", "java.util.stream.Stream.collect", "org.shredzone.acme4j.toolbox.JSON.parse", "java.io.BufferedReader.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [["java.io.InputStream", "java.lang.String"], ["java.io.Reader"], [""], [""], ["java.util.function.Function"], [""], ["java.util.stream.Collector"], ["java.lang.String"], [""], ["java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.parse": "Parses JSON from a String."}]}, {"index": "51", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JSON.java", "methodName": "org.shredzone.acme4j.toolbox.JSON.parse", "methodParameterType": "String#", "methodParameterName": "json#", "methodBody": "public static JSON parse(String json) {\n        try {\n            return new JSON(JsonUtil.parseJson(json));\n        } catch (JoseException ex) {\n            throw new AcmeProtocolException(\"Bad JSON: \" + json, ex);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Parses JSON from a String.", "call_func_name": ["org.jose4j.json.JsonUtil.parseJson", "org.shredzone.acme4j.toolbox.JSON.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.shredzone.acme4j.exception.AcmeProtocolException.<init>"], "call_func_parameter": [["java.lang.String"], ["java.util.Map"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "52", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JSON.java", "methodName": "org.shredzone.acme4j.toolbox.JSON.empty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static JSON empty() {\n        return EMPTY_JSON;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a  {@link JSON} of an empty document.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "53", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JSON.java", "methodName": "org.shredzone.acme4j.toolbox.JSON.keySet", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Set<String> keySet() {\n        return Collections.unmodifiableSet(data.keySet());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a set of all keys of this object.", "call_func_name": ["java.util.Map.keySet", "java.util.Collections.unmodifiableSet"], "call_func_parameter": [[""], ["java.util.Set"]], "passed_comments": "/"}, {"index": "54", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JSON.java", "methodName": "org.shredzone.acme4j.toolbox.JSON.contains", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public boolean contains(String key) {\n        return data.containsKey(key);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if this object contains the given key.", "call_func_name": ["java.util.Map.containsKey"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "55", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JSON.java", "methodName": "org.shredzone.acme4j.toolbox.JSON.get", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public Value get(String key) {\n        return new Value(\n                path.isEmpty() ? key : path + '.' + key,\n                data.get(key));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#CharacterLiteral#SimpleName#InfixExpression#ConditionalExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName)InfixExpression)ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the  {@link Value} of the given key.", "call_func_name": ["java.lang.String.isEmpty", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.Map.get"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["char"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "56", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JSON.java", "methodName": "org.shredzone.acme4j.toolbox.JSON.toString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String toString() {\n        return JsonUtil.toJson(data);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the content as JSON string.", "call_func_name": ["org.jose4j.json.JsonUtil.toJson"], "call_func_parameter": [["java.util.Map"]], "passed_comments": "/"}, {"index": "57", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JSON.java", "methodName": "org.shredzone.acme4j.toolbox.JSON.toMap", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String,Object> toMap() {\n        return Collections.unmodifiableMap(data);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the content as unmodifiable Map.", "call_func_name": ["java.util.Collections.unmodifiableMap"], "call_func_parameter": [["java.util.Map"]], "passed_comments": "/"}, {"index": "58", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JSON.java", "methodName": "org.shredzone.acme4j.toolbox.JSON.writeObject", "methodParameterType": "ObjectOutputStream#", "methodParameterName": "out#", "methodBody": "private void writeObject(ObjectOutputStream out) throws IOException {\n        out.writeUTF(JsonUtil.toJson(data));\n        out.defaultWriteObject();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Serialize the data map in JSON.", "call_func_name": ["org.jose4j.json.JsonUtil.toJson", "java.io.ObjectOutputStream.writeUTF", "java.io.ObjectOutputStream.defaultWriteObject"], "call_func_parameter": [["java.util.Map"], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "59", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JSON.java", "methodName": "org.shredzone.acme4j.toolbox.JSON.readObject", "methodParameterType": "ObjectInputStream#", "methodParameterName": "in#", "methodBody": "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n        try {\n            data = new HashMap<>(JsonUtil.parseJson(in.readUTF()));\n            in.defaultReadObject();\n        } catch (JoseException ex) {\n            throw new AcmeProtocolException(\"Cannot deserialize\", ex);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Deserialize the JSON representation of the data map.", "call_func_name": ["java.io.ObjectInputStream.readUTF", "org.jose4j.json.JsonUtil.parseJson", "java.util.HashMap.<init>", "java.io.ObjectInputStream.defaultReadObject", "org.shredzone.acme4j.exception.AcmeProtocolException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.util.Map"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "60", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JoseUtils.java", "methodName": "org.shredzone.acme4j.toolbox.JoseUtils.createJoseRequest", "methodParameterType": "URL#KeyPair#JSONBuilder#String#String#", "methodParameterName": "url#keypair#payload#nonce#kid#", "methodBody": "public static JSONBuilder createJoseRequest(URL url, KeyPair keypair,\n            @Nullable JSONBuilder payload, @Nullable String nonce, @Nullable String kid) {\n        try {\n            PublicJsonWebKey jwk = PublicJsonWebKey.Factory.newPublicJwk(keypair.getPublic());\n\n            JsonWebSignature jws = new JsonWebSignature();\n            jws.getHeaders().setObjectHeaderValue(\"url\", url);\n\n            if (kid != null) {\n                jws.getHeaders().setObjectHeaderValue(\"kid\", kid);\n            } else {\n                jws.getHeaders().setJwkHeaderValue(\"jwk\", jwk);\n            }\n\n            if (nonce != null) {\n                jws.getHeaders().setObjectHeaderValue(\"nonce\", nonce);\n            }\n\n            jws.setPayload(payload != null ? payload.toString() : \"\");\n            jws.setAlgorithmHeaderValue(keyAlgorithm(jwk));\n            jws.setKey(keypair.getPrivate());\n            jws.sign();\n\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"{} {}\", payload != null ? \"POST\" : \"POST-as-GET\", url);\n                if (payload != null) {\n                    LOG.debug(\"  Payload: {}\", payload);\n                }\n                LOG.debug(\"  JWS Header: {}\", jws.getHeaders().getFullHeaderAsJsonString());\n            }\n\n            JSONBuilder jb = new JSONBuilder();\n            jb.put(\"protected\", jws.getHeaders().getEncodedHeader());\n            jb.put(\"payload\", jws.getEncodedPayload());\n            jb.put(\"signature\", jws.getEncodedSignature());\n            return jb;\n        } catch (JoseException ex) {\n            throw new IllegalArgumentException(\"Could not create a JOSE request\", ex);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#StringLiteral#ConditionalExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#NullLiteral#InfixExpression#StringLiteral#StringLiteral#ConditionalExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)ConditionalExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ConditionalExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Creates an ACME JOSE request.", "call_func_name": ["java.security.KeyPair.getPublic", "org.jose4j.jws.JsonWebSignature.<init>", "org.jose4j.jws.JsonWebSignature.getHeaders", "org.jose4j.jwx.Headers.setObjectHeaderValue", "org.jose4j.jwx.Headers.setJwkHeaderValue", "org.shredzone.acme4j.toolbox.JSONBuilder.toString", "org.jose4j.jws.JsonWebSignature.setPayload", "org.shredzone.acme4j.toolbox.JoseUtils.keyAlgorithm", "org.jose4j.jws.JsonWebSignature.setAlgorithmHeaderValue", "java.security.KeyPair.getPrivate", "org.jose4j.jws.JsonWebSignature.setKey", "org.jose4j.jws.JsonWebSignature.sign", "org.slf4j.Logger.isDebugEnabled", "org.slf4j.Logger.debug", "org.slf4j.Logger.debug", "org.jose4j.jwx.Headers.getFullHeaderAsJsonString", "org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "org.jose4j.jwx.Headers.getEncodedHeader", "org.shredzone.acme4j.toolbox.JSONBuilder.put", "org.jose4j.jws.JsonWebSignature.getEncodedPayload", "org.jose4j.jws.JsonWebSignature.getEncodedSignature", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [[""], [""], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "org.jose4j.jwk.JsonWebKey"], [""], ["java.lang.String"], ["org.jose4j.jwk.JsonWebKey"], ["java.lang.String"], [""], ["java.security.Key"], [""], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.Object"], [""], [""], [""], ["java.lang.String", "java.lang.Object"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSONBuilder.toString": "Returns a JSON string representation of the current state."}, {"org.shredzone.acme4j.toolbox.JoseUtils.keyAlgorithm": "Analyzes the key used in the  {@link JsonWebKey}, and returns the key algorithm identifier for  {@link JsonWebSignature}."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}]}, {"index": "61", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JoseUtils.java", "methodName": "org.shredzone.acme4j.toolbox.JoseUtils.createExternalAccountBinding", "methodParameterType": "String#PublicKey#SecretKey#URL#", "methodParameterName": "kid#accountKey#macKey#resource#", "methodBody": "public static Map<String, Object> createExternalAccountBinding(String kid,\n            PublicKey accountKey, SecretKey macKey, URL resource) {\n        try {\n            PublicJsonWebKey keyJwk = PublicJsonWebKey.Factory.newPublicJwk(accountKey);\n\n            JsonWebSignature innerJws = new JsonWebSignature();\n            innerJws.setPayload(keyJwk.toJson());\n            innerJws.getHeaders().setObjectHeaderValue(\"url\", resource);\n            innerJws.getHeaders().setObjectHeaderValue(\"kid\", kid);\n            innerJws.setAlgorithmHeaderValue(macKeyAlgorithm(macKey));\n            innerJws.setKey(macKey);\n            innerJws.setDoKeyValidation(false);\n            innerJws.sign();\n\n            JSONBuilder outerClaim = new JSONBuilder();\n            outerClaim.put(\"protected\", innerJws.getHeaders().getEncodedHeader());\n            outerClaim.put(\"signature\", innerJws.getEncodedSignature());\n            outerClaim.put(\"payload\", innerJws.getEncodedPayload());\n            return outerClaim.toMap();\n        } catch (JoseException ex) {\n            throw new IllegalArgumentException(\"Could not create external account binding\", ex);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Creates a JSON structure for external account binding.", "call_func_name": ["org.jose4j.jws.JsonWebSignature.<init>", "org.jose4j.jwk.PublicJsonWebKey.toJson", "org.jose4j.jws.JsonWebSignature.setPayload", "org.jose4j.jws.JsonWebSignature.getHeaders", "org.jose4j.jwx.Headers.setObjectHeaderValue", "org.shredzone.acme4j.toolbox.JoseUtils.macKeyAlgorithm", "org.jose4j.jws.JsonWebSignature.setAlgorithmHeaderValue", "org.jose4j.jws.JsonWebSignature.setKey", "org.jose4j.jws.JsonWebSignature.setDoKeyValidation", "org.jose4j.jws.JsonWebSignature.sign", "org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "org.jose4j.jwx.Headers.getEncodedHeader", "org.shredzone.acme4j.toolbox.JSONBuilder.put", "org.jose4j.jws.JsonWebSignature.getEncodedSignature", "org.jose4j.jws.JsonWebSignature.getEncodedPayload", "org.shredzone.acme4j.toolbox.JSONBuilder.toMap", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Object"], ["javax.crypto.SecretKey"], ["java.lang.String"], ["java.security.Key"], ["boolean"], [""], [""], [""], ["java.lang.String", "java.lang.Object"], [""], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JoseUtils.macKeyAlgorithm": "Analyzes the  {@link SecretKey}, and returns the key algorithm identifier for  {@link JsonWebSignature}."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.toMap": "Returns a  {@link Map} representation of the current state."}]}, {"index": "62", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JoseUtils.java", "methodName": "org.shredzone.acme4j.toolbox.JoseUtils.publicKeyToJWK", "methodParameterType": "PublicKey#", "methodParameterName": "key#", "methodBody": "public static Map<String, Object> publicKeyToJWK(PublicKey key) {\n        try {\n            return PublicJsonWebKey.Factory.newPublicJwk(key)\n                    .toParams(JsonWebKey.OutputControlLevel.PUBLIC_ONLY);\n        } catch (JoseException ex) {\n            throw new IllegalArgumentException(\"Bad public key\", ex);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Converts a  {@link PublicKey} to a JOSE JWK structure.", "call_func_name": ["java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "63", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JoseUtils.java", "methodName": "org.shredzone.acme4j.toolbox.JoseUtils.jwkToPublicKey", "methodParameterType": "Map<String,Object>#", "methodParameterName": "jwk#", "methodBody": "public static PublicKey jwkToPublicKey(Map<String, Object> jwk) {\n        try {\n            return PublicJsonWebKey.Factory.newPublicJwk(jwk).getPublicKey();\n        } catch (JoseException ex) {\n            throw new IllegalArgumentException(\"Bad JWK\", ex);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Converts a JOSE JWK structure to a  {@link PublicKey}.", "call_func_name": ["org.jose4j.jwk.PublicJsonWebKey.getPublicKey", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "64", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JoseUtils.java", "methodName": "org.shredzone.acme4j.toolbox.JoseUtils.thumbprint", "methodParameterType": "PublicKey#", "methodParameterName": "key#", "methodBody": "public static byte[] thumbprint(PublicKey key) {\n        try {\n            PublicJsonWebKey jwk = PublicJsonWebKey.Factory.newPublicJwk(key);\n            return jwk.calculateThumbprint(\"SHA-256\");\n        } catch (JoseException ex) {\n            throw new IllegalArgumentException(\"Bad public key\", ex);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Computes a thumbprint of the given public key.", "call_func_name": ["org.jose4j.jwk.PublicJsonWebKey.calculateThumbprint", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "65", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JoseUtils.java", "methodName": "org.shredzone.acme4j.toolbox.JoseUtils.keyAlgorithm", "methodParameterType": "JsonWebKey#", "methodParameterName": "jwk#", "methodBody": "public static String keyAlgorithm(JsonWebKey jwk) {\n        if (jwk instanceof EllipticCurveJsonWebKey) {\n            EllipticCurveJsonWebKey ecjwk = (EllipticCurveJsonWebKey) jwk;\n\n            switch (ecjwk.getCurveName()) {\n                case \"P-256\":\n                    return AlgorithmIdentifiers.ECDSA_USING_P256_CURVE_AND_SHA256;\n\n                case \"P-384\":\n                    return AlgorithmIdentifiers.ECDSA_USING_P384_CURVE_AND_SHA384;\n\n                case \"P-521\":\n                    return AlgorithmIdentifiers.ECDSA_USING_P521_CURVE_AND_SHA512;\n\n                default:\n                    throw new IllegalArgumentException(\"Unknown EC name \"\n                            + ecjwk.getCurveName());\n            }\n\n        } else if (jwk instanceof RsaJsonWebKey) {\n            return AlgorithmIdentifiers.RSA_USING_SHA256;\n\n        } else {\n            throw new IllegalArgumentException(\"Unknown algorithm \" + jwk.getAlgorithm());\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#StringLiteral#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#StringLiteral#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#StringLiteral#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#SwitchCase#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#SwitchStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(StringLiteral)StringLiteral)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase(StringLiteral)StringLiteral)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase(StringLiteral)StringLiteral)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)SwitchStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Analyzes the key used in the  {@link JsonWebKey}, and returns the key algorithm identifier for  {@link JsonWebSignature}.", "call_func_name": ["org.jose4j.jwk.EllipticCurveJsonWebKey.getCurveName", "java.lang.String.hashCode", "java.lang.String.equals", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "org.jose4j.jwk.JsonWebKey.getAlgorithm"], "call_func_parameter": [[""], [""], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "66", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/toolbox/JoseUtils.java", "methodName": "org.shredzone.acme4j.toolbox.JoseUtils.macKeyAlgorithm", "methodParameterType": "SecretKey#", "methodParameterName": "macKey#", "methodBody": "public static String macKeyAlgorithm(SecretKey macKey) {\n        if (!\"HMAC\".equals(macKey.getAlgorithm())) {\n            throw new IllegalArgumentException(\"Bad algorithm: \" + macKey.getAlgorithm());\n        }\n\n        int size = macKey.getEncoded().length * 8;\n        switch (size) {\n            case 256:\n                return AlgorithmIdentifiers.HMAC_SHA256;\n\n            case 384:\n                return AlgorithmIdentifiers.HMAC_SHA384;\n\n            case 512:\n                return AlgorithmIdentifiers.HMAC_SHA512;\n\n            default:\n                throw new IllegalArgumentException(\"Bad key size: \" + size);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#NumberLiteral#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#NumberLiteral#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#SwitchCase#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Analyzes the  {@link SecretKey}, and returns the key algorithm identifier for  {@link JsonWebSignature}.", "call_func_name": ["javax.crypto.SecretKey.getAlgorithm", "java.lang.String.equals", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "javax.crypto.SecretKey.getEncoded", "java.lang.StringBuilder.append"], "call_func_parameter": [[""], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["int"]], "passed_comments": "/"}, {"index": "67", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/provider/AcmeProvider.java", "methodName": "org.shredzone.acme4j.provider.AcmeProvider.accepts", "methodParameterType": "URI#", "methodParameterName": "serverUri#", "methodBody": "boolean accepts(URI serverUri);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Checks if this provider accepts the given server URI.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "68", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/provider/AcmeProvider.java", "methodName": "org.shredzone.acme4j.provider.AcmeProvider.resolve", "methodParameterType": "URI#", "methodParameterName": "serverUri#", "methodBody": "URL resolve(URI serverUri);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Resolves the server URI and returns the matching directory URL.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "69", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/provider/AcmeProvider.java", "methodName": "org.shredzone.acme4j.provider.AcmeProvider.connect", "methodParameterType": "URI#", "methodParameterName": "serverUri#", "methodBody": "Connection connect(URI serverUri);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Creates a  {@link Connection} for communication with the ACME server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "70", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/provider/AcmeProvider.java", "methodName": "org.shredzone.acme4j.provider.AcmeProvider.directory", "methodParameterType": "Session#URI#", "methodParameterName": "session#serverUri#", "methodBody": "JSON directory(Session session, URI serverUri) throws AcmeException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns the provider's directory. The structure must contain resource URLs, and may optionally contain metadata. <p> The default implementation resolves the server URI and fetches the directory via HTTP request. Subclasses may override this method, e.g. if the directory is static.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "71", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/provider/AcmeProvider.java", "methodName": "org.shredzone.acme4j.provider.AcmeProvider.createChallenge", "methodParameterType": "Login#JSON#", "methodParameterName": "login#data#", "methodBody": "@CheckForNull\n    Challenge createChallenge(Login login, JSON data);", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Creates a  {@link Challenge} instance for the given challenge data.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "72", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/provider/pebble/PebbleHttpConnector.java", "methodName": "org.shredzone.acme4j.provider.pebble.PebbleHttpConnector.createSocketFactory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected synchronized SSLSocketFactory createSocketFactory() throws IOException {\n        if (sslSocketFactory == null) {\n            try (InputStream in = getClass().getResourceAsStream(\"/org/shredzone/acme4j/provider/pebble/pebble.truststore\")) {\n                KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n                keystore.load(in, \"acme4j\".toCharArray());\n\n                TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n                tmf.init(keystore);\n\n                SSLContext ctx = SSLContext.getInstance(\"TLS\");\n                ctx.init(null, tmf.getTrustManagers(), null);\n\n                sslSocketFactory = ctx.getSocketFactory();\n            } catch (KeyStoreException | CertificateException | NoSuchAlgorithmException\n                            | KeyManagementException ex) {\n                throw new IOException(\"Could not create truststore\", ex);\n            }\n        }\n        return sslSocketFactory;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#MethodInvocation#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Lazily creates an  {@link SSLSocketFactory} that exclusively accepts the Pebblecertificate.", "call_func_name": ["java.lang.Object.getClass", "java.lang.Class.getResourceAsStream", "java.security.KeyStore.getDefaultType", "java.security.KeyStore.getInstance", "java.lang.String.toCharArray", "java.security.KeyStore.load", "javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm", "javax.net.ssl.TrustManagerFactory.getInstance", "javax.net.ssl.TrustManagerFactory.init", "javax.net.ssl.SSLContext.getInstance", "javax.net.ssl.TrustManagerFactory.getTrustManagers", "javax.net.ssl.SSLContext.init", "javax.net.ssl.SSLContext.getSocketFactory", "java.io.InputStream.close", "java.lang.Throwable.addSuppressed", "java.io.IOException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.io.InputStream", "char[]"], [""], ["java.lang.String"], ["java.security.KeyStore"], ["java.lang.String"], [""], ["javax.net.ssl.KeyManager[]", "javax.net.ssl.TrustManager[]", "java.security.SecureRandom"], [""], [""], ["java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "73", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/provider/pebble/PebbleAcmeProvider.java", "methodName": "org.shredzone.acme4j.provider.pebble.PebbleAcmeProvider.parsePath", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "private URL parsePath(String path) throws MalformedURLException {\n        Matcher m = HOST_PATTERN.matcher(path);\n        if (m.matches()) {\n            String host = m.group(1);\n            int port = 14000;\n            if (m.group(2) != null) {\n                port = Integer.parseInt(m.group(2));\n            }\n            return new URL(\"https\", host, port, \"/dir\");\n        } else {\n            throw new IllegalArgumentException(\"Invalid Pebble host/port: \" + path);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#StringLiteral#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)ClassInstanceCreation)ReturnStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Parses the server URI path and returns the server's base URL.", "call_func_name": ["java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "java.util.regex.Matcher.group", "java.lang.Integer.parseInt", "java.net.URL.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.CharSequence"], [""], ["int"], ["java.lang.String"], ["java.lang.String", "java.lang.String", "int", "java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "74", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/provider/AbstractAcmeProvider.java", "methodName": "org.shredzone.acme4j.provider.AbstractAcmeProvider.createChallenge", "methodParameterType": "Login#JSON#", "methodParameterName": "login#data#", "methodBody": "@Override\n    public Challenge createChallenge(Login login, JSON data) {\n        Objects.requireNonNull(login, \"login\");\n        Objects.requireNonNull(data, \"data\");\n\n        String type = data.get(\"type\").asString();\n\n        BiFunction<Login, JSON, Challenge> constructor = CHALLENGES.get(type);\n        if (constructor != null) {\n            return constructor.apply(login, data);\n        }\n\n        if (data.contains(\"token\")) {\n            return new TokenChallenge(login, data);\n        } else {\n            return new Challenge(login, data);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}<p> This implementation handles the standard challenge types. For unknown types, generic  {@link Challenge} or {@link TokenChallenge} instances are created.<p> Custom provider implementations may override this method to provide challenges that are unique to the provider.", "call_func_name": ["java.util.Objects.requireNonNull", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.Map.get", "java.util.function.BiFunction.apply", "org.shredzone.acme4j.toolbox.JSON.contains", "org.shredzone.acme4j.challenge.TokenChallenge.<init>", "org.shredzone.acme4j.challenge.Challenge.<init>"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], ["java.lang.String"], ["java.lang.Object"], ["java.lang.Object", "java.lang.Object"], ["java.lang.String"], ["org.shredzone.acme4j.Login", "org.shredzone.acme4j.toolbox.JSON"], ["org.shredzone.acme4j.Login", "org.shredzone.acme4j.toolbox.JSON"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}, {"org.shredzone.acme4j.toolbox.JSON.contains": "Checks if this object contains the given key."}]}, {"index": "75", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/provider/AbstractAcmeProvider.java", "methodName": "org.shredzone.acme4j.provider.AbstractAcmeProvider.createHttpConnector", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected HttpConnector createHttpConnector() {\n        return new HttpConnector();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a  {@link HttpConnector}. <p> Subclasses may override this method to configure the  {@link HttpConnector}.", "call_func_name": ["org.shredzone.acme4j.connector.HttpConnector.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "76", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/TrimmingInputStream.java", "methodName": "org.shredzone.acme4j.connector.TrimmingInputStream.TrimmingInputStream", "methodParameterType": "InputStream#", "methodParameterName": "in#", "methodBody": "public TrimmingInputStream(InputStream in) {\n        this.in = in;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link TrimmingInputStream}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "77", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/TrimmingInputStream.java", "methodName": "org.shredzone.acme4j.connector.TrimmingInputStream.isLineSeparator", "methodParameterType": "int#", "methodParameterName": "ch#", "methodBody": "private static boolean isLineSeparator(int ch) {\n        return ch == '\\n' || ch == '\\r';\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#CharacterLiteral#InfixExpression#SimpleName#CharacterLiteral#InfixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the character is a line separator.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "78", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/NetworkSettings.java", "methodName": "org.shredzone.acme4j.connector.NetworkSettings.getProxy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Proxy getProxy() {\n        return proxy;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the  {@link Proxy} to be used for connections.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "79", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/NetworkSettings.java", "methodName": "org.shredzone.acme4j.connector.NetworkSettings.setProxy", "methodParameterType": "Proxy#", "methodParameterName": "proxy#", "methodBody": "public void setProxy(@Nullable Proxy proxy) {\n        this.proxy = proxy != null ? proxy : Proxy.NO_PROXY;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#ConditionalExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConditionalExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets a  {@link Proxy} that is to be used for all connections. If {@code null}, {@link Proxy#NO_PROXY} is used, which is also the default.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "80", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/NetworkSettings.java", "methodName": "org.shredzone.acme4j.connector.NetworkSettings.getTimeout", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Duration getTimeout() {\n        return timeout;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the current network timeout.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "81", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/NetworkSettings.java", "methodName": "org.shredzone.acme4j.connector.NetworkSettings.setTimeout", "methodParameterType": "Duration#", "methodParameterName": "timeout#", "methodBody": "public void setTimeout(Duration timeout) {\n        if (timeout == null || timeout.isNegative() || timeout.isZero()) {\n            throw new IllegalArgumentException(\"Timeout must be positive\");\n        }\n        if (timeout.toMillis() > Integer.MAX_VALUE) {\n            throw new IllegalArgumentException(\"Timeout is out of range\");\n        }\n\n        this.timeout = timeout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the network timeout to be used for connections. Defaults to 10 seconds.", "call_func_name": ["java.time.Duration.isNegative", "java.time.Duration.isZero", "java.lang.IllegalArgumentException.<init>", "java.time.Duration.toMillis"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "82", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/ResourceIterator.java", "methodName": "org.shredzone.acme4j.connector.ResourceIterator.ResourceIterator", "methodParameterType": "Login#String#URL#BiFunction<Login,URL,T>#", "methodParameterName": "login#field#start#creator#", "methodBody": "public ResourceIterator(Login login, String field, @Nullable URL start, BiFunction<Login, URL, T> creator) {\n        this.login = Objects.requireNonNull(login, \"login\");\n        this.field = Objects.requireNonNull(field, \"field\");\n        this.nextUrl = start;\n        this.creator = Objects.requireNonNull(creator, \"creator\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link ResourceIterator}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "83", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/ResourceIterator.java", "methodName": "org.shredzone.acme4j.connector.ResourceIterator.hasNext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public boolean hasNext() {\n        if (eol) {\n            return false;\n        }\n\n        if (urlList.isEmpty()) {\n            fetch();\n        }\n\n        if (urlList.isEmpty()) {\n            eol = true;\n        }\n\n        return !urlList.isEmpty();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if there is another object in the result.", "call_func_name": ["java.util.Deque.isEmpty", "org.shredzone.acme4j.connector.ResourceIterator.fetch"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.shredzone.acme4j.connector.ResourceIterator.fetch": "Fetches the next batch of URLs. Handles exceptions. Does nothing if there is no URL of the next batch."}]}, {"index": "84", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/ResourceIterator.java", "methodName": "org.shredzone.acme4j.connector.ResourceIterator.next", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public T next() {\n        if (!eol && urlList.isEmpty()) {\n            fetch();\n        }\n\n        URL next = urlList.poll();\n        if (next == null) {\n            eol = true;\n            throw new NoSuchElementException(\"no more \" + field);\n        }\n\n        return creator.apply(login, next);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#PrefixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the next object of the result.", "call_func_name": ["org.shredzone.acme4j.connector.ResourceIterator.next"], "call_func_parameter": [[""]], "passed_comments": [{"org.shredzone.acme4j.connector.ResourceIterator.next": "Returns the next object of the result."}]}, {"index": "85", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/ResourceIterator.java", "methodName": "org.shredzone.acme4j.connector.ResourceIterator.remove", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void remove() {\n        throw new UnsupportedOperationException(\"cannot remove \" + field);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Unsupported operation, only here to satisfy the  {@link Iterator} interface.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.UnsupportedOperationException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "86", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/ResourceIterator.java", "methodName": "org.shredzone.acme4j.connector.ResourceIterator.fetch", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void fetch() {\n        if (nextUrl == null) {\n            return;\n        }\n\n        try {\n            readAndQueue();\n        } catch (AcmeException ex) {\n            throw new AcmeProtocolException(\"failed to read next set of \" + field, ex);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Fetches the next batch of URLs. Handles exceptions. Does nothing if there is no URL of the next batch.", "call_func_name": ["org.shredzone.acme4j.connector.ResourceIterator.readAndQueue", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.shredzone.acme4j.exception.AcmeProtocolException.<init>"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.connector.ResourceIterator.readAndQueue": "Reads the next batch of URLs from the server, and fills the queue with the URLs. If there is a \"next\" header, it is used for the next batch of URLs."}]}, {"index": "87", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/ResourceIterator.java", "methodName": "org.shredzone.acme4j.connector.ResourceIterator.readAndQueue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void readAndQueue() throws AcmeException {\n        Session session = login.getSession();\n        try (Connection conn = session.connect()) {\n            conn.sendSignedPostAsGetRequest(nextUrl, login);\n            fillUrlList(conn.readJsonResponse());\n\n            nextUrl = conn.getLinks(\"next\").stream().findFirst().orElse(null);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Reads the next batch of URLs from the server, and fills the queue with the URLs. If there is a \"next\" header, it is used for the next batch of URLs.", "call_func_name": ["org.shredzone.acme4j.Login.getSession", "org.shredzone.acme4j.Session.connect", "org.shredzone.acme4j.connector.Connection.sendSignedPostAsGetRequest", "org.shredzone.acme4j.connector.Connection.readJsonResponse", "org.shredzone.acme4j.connector.ResourceIterator.fillUrlList", "org.shredzone.acme4j.connector.Connection.getLinks", "java.util.Collection.stream", "java.util.stream.Stream.findFirst", "java.util.Optional.orElse", "org.shredzone.acme4j.connector.Connection.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [[""], [""], ["java.net.URL", "org.shredzone.acme4j.Login"], [""], ["org.shredzone.acme4j.toolbox.JSON"], ["java.lang.String"], [""], [""], ["java.lang.Object"], [""], ["java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.Login.getSession": "Gets the  {@link Session} that is used."}, {"org.shredzone.acme4j.Session.connect": "Returns a new  {@link Connection} to the ACME server."}, {"org.shredzone.acme4j.connector.Connection.sendSignedPostAsGetRequest": "Sends a signed POST-as-GET request. Requires a  {@link Login} for the session and{@link KeyPair}. The  {@link Login} account location is sent in a \"kid\" protectedheader. <p> If the server does not return a 200 class status code, an  {@link AcmeException} israised matching the error."}, {"org.shredzone.acme4j.connector.Connection.readJsonResponse": "Reads a server response as JSON data."}, {"org.shredzone.acme4j.connector.ResourceIterator.fillUrlList": "Fills the url list with the URLs found in the desired field."}, {"org.shredzone.acme4j.connector.Connection.getLinks": "Gets one or more relation links from the header. The result is expected to be an URL. <p> Relative links are resolved against the last request's URL."}, {"org.shredzone.acme4j.connector.Connection.close": "Closes the  {@link Connection}, releasing all resources."}]}, {"index": "88", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/ResourceIterator.java", "methodName": "org.shredzone.acme4j.connector.ResourceIterator.fillUrlList", "methodParameterType": "JSON#", "methodParameterName": "json#", "methodBody": "private void fillUrlList(JSON json) {\n        json.get(field).asArray().stream()\n                .map(JSON.Value::asURL)\n                .forEach(urlList::add);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Fills the url list with the URLs found in the desired field.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.lang.Object.getClass", "java.util.function.Consumer.accept", "java.util.stream.Stream.forEach"], "call_func_parameter": [["java.lang.String"], [""], ["java.util.function.Function"], [""], ["java.util.Deque"], ["java.util.function.Consumer"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "89", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/HttpConnector.java", "methodName": "org.shredzone.acme4j.connector.HttpConnector.defaultUserAgent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static String defaultUserAgent() {\n        return USER_AGENT;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the default User-Agent to be used.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "90", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/HttpConnector.java", "methodName": "org.shredzone.acme4j.connector.HttpConnector.openConnection", "methodParameterType": "URL#NetworkSettings#", "methodParameterName": "url#settings#", "methodBody": "public HttpURLConnection openConnection(URL url, NetworkSettings settings) throws IOException {\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection(settings.getProxy());\n        configure(conn, settings);\n        return conn;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Opens a  {@link HttpURLConnection} to the given {@link URL}.", "call_func_name": ["org.shredzone.acme4j.connector.NetworkSettings.getProxy", "java.net.URL.openConnection", "org.shredzone.acme4j.connector.HttpConnector.configure"], "call_func_parameter": [[""], ["java.net.Proxy"], ["java.net.HttpURLConnection", "org.shredzone.acme4j.connector.NetworkSettings"]], "passed_comments": [{"org.shredzone.acme4j.connector.NetworkSettings.getProxy": "Gets the  {@link Proxy} to be used for connections."}, {"org.shredzone.acme4j.connector.HttpConnector.configure": "Configures the new  {@link HttpURLConnection}. <p> The  {@link HttpURLConnection} is already preconfigured with a reasonable timeout,disabled caches and a User-Agent header. Subclasses can override this method to change the configuration."}]}, {"index": "91", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/HttpConnector.java", "methodName": "org.shredzone.acme4j.connector.HttpConnector.configure", "methodParameterType": "HttpURLConnection#NetworkSettings#", "methodParameterName": "conn#settings#", "methodBody": "@OverridingMethodsMustInvokeSuper\n    protected void configure(HttpURLConnection conn, NetworkSettings settings) {\n        int timeout = (int) settings.getTimeout().toMillis();\n        conn.setConnectTimeout(timeout);\n        conn.setReadTimeout(timeout);\n        conn.setUseCaches(false);\n        conn.setRequestProperty(\"User-Agent\", USER_AGENT);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Configures the new  {@link HttpURLConnection}. <p> The  {@link HttpURLConnection} is already preconfigured with a reasonable timeout,disabled caches and a User-Agent header. Subclasses can override this method to change the configuration.", "call_func_name": ["org.shredzone.acme4j.connector.NetworkSettings.getTimeout", "java.time.Duration.toMillis", "java.net.HttpURLConnection.setConnectTimeout", "java.net.HttpURLConnection.setReadTimeout", "java.net.HttpURLConnection.setUseCaches", "java.net.HttpURLConnection.setRequestProperty"], "call_func_parameter": [[""], [""], ["int"], ["int"], ["boolean"], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.connector.NetworkSettings.getTimeout": "Gets the current network timeout."}]}, {"index": "92", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java", "methodName": "org.shredzone.acme4j.connector.DefaultConnection.DefaultConnection", "methodParameterType": "HttpConnector#", "methodParameterName": "httpConnector#", "methodBody": "public DefaultConnection(HttpConnector httpConnector) {\n        this.httpConnector = Objects.requireNonNull(httpConnector, \"httpConnector\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link DefaultConnection}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "93", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java", "methodName": "org.shredzone.acme4j.connector.DefaultConnection.sendRequest", "methodParameterType": "URL#Session#String#", "methodParameterName": "url#session#accept#", "methodBody": "protected int sendRequest(URL url, Session session, String accept) throws AcmeException {\n        Objects.requireNonNull(url, \"url\");\n        Objects.requireNonNull(session, \"session\");\n        Objects.requireNonNull(accept, \"accept\");\n        assertConnectionIsClosed();\n\n        LOG.debug(\"GET {}\", url);\n\n        try {\n            conn = httpConnector.openConnection(url, session.networkSettings());\n            conn.setRequestMethod(\"GET\");\n            conn.setRequestProperty(ACCEPT_HEADER, accept);\n            conn.setRequestProperty(ACCEPT_CHARSET_HEADER, DEFAULT_CHARSET);\n            conn.setRequestProperty(ACCEPT_LANGUAGE_HEADER, session.getLocale().toLanguageTag());\n            conn.setDoOutput(false);\n\n            conn.connect();\n\n            logHeaders();\n\n            String nonce = getNonce();\n            if (nonce != null) {\n                session.setNonce(nonce);\n            }\n\n            int rc = conn.getResponseCode();\n            if (rc != HttpURLConnection.HTTP_OK && rc != HttpURLConnection.HTTP_CREATED) {\n                throwAcmeException();\n            }\n            return rc;\n        } catch (IOException ex) {\n            throw new AcmeNetworkException(ex);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Sends an unsigned GET request.", "call_func_name": ["java.util.Objects.requireNonNull", "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsClosed", "org.slf4j.Logger.debug", "org.shredzone.acme4j.Session.networkSettings", "org.shredzone.acme4j.connector.HttpConnector.openConnection", "java.net.HttpURLConnection.setRequestMethod", "java.net.HttpURLConnection.setRequestProperty", "org.shredzone.acme4j.Session.getLocale", "java.util.Locale.toLanguageTag", "java.net.HttpURLConnection.setDoOutput", "java.net.HttpURLConnection.connect", "org.shredzone.acme4j.connector.DefaultConnection.logHeaders", "org.shredzone.acme4j.connector.DefaultConnection.getNonce", "org.shredzone.acme4j.Session.setNonce", "java.net.HttpURLConnection.getResponseCode", "org.shredzone.acme4j.connector.DefaultConnection.throwAcmeException", "org.shredzone.acme4j.exception.AcmeNetworkException.<init>"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], [""], ["java.lang.String", "java.lang.Object"], [""], ["java.net.URL", "org.shredzone.acme4j.connector.NetworkSettings"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], [""], [""], ["boolean"], [""], [""], [""], ["java.lang.String"], [""], [""], ["java.io.IOException"]], "passed_comments": [{"org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsClosed": "Asserts that the connection is currently closed. Throws an exception if not."}, {"org.shredzone.acme4j.Session.networkSettings": "Returns the current  {@link NetworkSettings}."}, {"org.shredzone.acme4j.connector.HttpConnector.openConnection": "Opens a  {@link HttpURLConnection} to the given {@link URL}."}, {"org.shredzone.acme4j.Session.getLocale": "Gets the current locale of this session."}, {"org.shredzone.acme4j.connector.DefaultConnection.logHeaders": "Log all HTTP headers in debug mode."}, {"org.shredzone.acme4j.Session.setNonce": "Sets the base64 encoded nonce received by the server."}, {"org.shredzone.acme4j.connector.DefaultConnection.throwAcmeException": "Throws an  {@link AcmeException}. This method throws an exception that tries to explain the error as precisely as possible."}]}, {"index": "94", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java", "methodName": "org.shredzone.acme4j.connector.DefaultConnection.sendSignedRequest", "methodParameterType": "URL#JSONBuilder#Session#KeyPair#URL#String#", "methodParameterName": "url#claims#session#keypair#accountLocation#accept#", "methodBody": "protected int sendSignedRequest(URL url, @Nullable JSONBuilder claims, Session session,\n                KeyPair keypair, @Nullable URL accountLocation, String accept) throws AcmeException {\n        Objects.requireNonNull(url, \"url\");\n        Objects.requireNonNull(session, \"session\");\n        Objects.requireNonNull(keypair, \"keypair\");\n        Objects.requireNonNull(accept, \"accept\");\n        assertConnectionIsClosed();\n\n        int attempt = 1;\n        while (true) {\n            try {\n                return performRequest(url, claims, session, keypair, accountLocation, accept);\n            } catch (AcmeServerException ex) {\n                if (!BAD_NONCE_ERROR.equals(ex.getType())) {\n                    throw ex;\n                }\n                if (attempt == MAX_ATTEMPTS) {\n                    throw ex;\n                }\n                LOG.info(\"Bad Replay Nonce, trying again (attempt {}/{})\", attempt, MAX_ATTEMPTS);\n                attempt++;\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#BooleanLiteral#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#CatchClause#TryStatement#Block#WhileStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(BooleanLiteral)BooleanLiteral(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)CatchClause)TryStatement)Block)WhileStatement)Block)MethodDeclaration", "methodDoc": "Sends a signed POST request.", "call_func_name": ["java.util.Objects.requireNonNull", "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsClosed", "org.shredzone.acme4j.connector.DefaultConnection.performRequest", "org.shredzone.acme4j.exception.AcmeServerException.getType", "java.net.URI.equals", "java.lang.Integer.valueOf", "org.slf4j.Logger.info"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], [""], ["java.net.URL", "org.shredzone.acme4j.toolbox.JSONBuilder", "org.shredzone.acme4j.Session", "java.security.KeyPair", "java.net.URL", "java.lang.String"], [""], ["java.lang.Object"], ["int"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsClosed": "Asserts that the connection is currently closed. Throws an exception if not."}, {"org.shredzone.acme4j.connector.DefaultConnection.performRequest": "Performs the POST request."}, {"org.shredzone.acme4j.exception.AcmeServerException.getType": "Returns the error type."}]}, {"index": "95", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java", "methodName": "org.shredzone.acme4j.connector.DefaultConnection.performRequest", "methodParameterType": "URL#JSONBuilder#Session#KeyPair#URL#String#", "methodParameterName": "url#claims#session#keypair#accountLocation#accept#", "methodBody": "private int performRequest(URL url, @Nullable JSONBuilder claims, Session session,\n                KeyPair keypair, @Nullable URL accountLocation, String accept)\n                throws AcmeException {\n        try {\n            if (session.getNonce() == null) {\n                resetNonce(session);\n            }\n\n            conn = httpConnector.openConnection(url, session.networkSettings());\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(ACCEPT_HEADER, accept);\n            conn.setRequestProperty(ACCEPT_CHARSET_HEADER, DEFAULT_CHARSET);\n            conn.setRequestProperty(ACCEPT_LANGUAGE_HEADER, session.getLocale().toLanguageTag());\n            conn.setRequestProperty(CONTENT_TYPE_HEADER, \"application/jose+json\");\n            conn.setDoOutput(true);\n\n            JSONBuilder jose = JoseUtils.createJoseRequest(\n                    url,\n                    keypair,\n                    claims,\n                    session.getNonce(),\n                    accountLocation != null ? accountLocation.toString() : null\n            );\n\n            byte[] outputData = jose.toString().getBytes(StandardCharsets.UTF_8);\n\n            conn.setFixedLengthStreamingMode(outputData.length);\n            conn.connect();\n\n            try (OutputStream out = conn.getOutputStream()) {\n                out.write(outputData);\n            }\n\n            logHeaders();\n\n            session.setNonce(getNonce());\n\n            int rc = conn.getResponseCode();\n            if (rc != HttpURLConnection.HTTP_OK && rc != HttpURLConnection.HTTP_CREATED) {\n                throwAcmeException();\n            }\n            return rc;\n        } catch (IOException ex) {\n            throw new AcmeNetworkException(ex);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Performs the POST request.", "call_func_name": ["org.shredzone.acme4j.Session.getNonce", "org.shredzone.acme4j.connector.DefaultConnection.resetNonce", "org.shredzone.acme4j.Session.networkSettings", "org.shredzone.acme4j.connector.HttpConnector.openConnection", "java.net.HttpURLConnection.setRequestMethod", "java.net.HttpURLConnection.setRequestProperty", "org.shredzone.acme4j.Session.getLocale", "java.util.Locale.toLanguageTag", "java.net.HttpURLConnection.setDoOutput", "java.net.URL.toString", "org.shredzone.acme4j.toolbox.JoseUtils.createJoseRequest", "org.shredzone.acme4j.toolbox.JSONBuilder.toString", "java.lang.String.getBytes", "java.net.HttpURLConnection.setFixedLengthStreamingMode", "java.net.HttpURLConnection.connect", "java.net.HttpURLConnection.getOutputStream", "java.io.OutputStream.write", "java.io.OutputStream.close", "java.lang.Throwable.addSuppressed", "org.shredzone.acme4j.connector.DefaultConnection.logHeaders", "org.shredzone.acme4j.connector.DefaultConnection.getNonce", "org.shredzone.acme4j.Session.setNonce", "java.net.HttpURLConnection.getResponseCode", "org.shredzone.acme4j.connector.DefaultConnection.throwAcmeException", "org.shredzone.acme4j.exception.AcmeNetworkException.<init>"], "call_func_parameter": [[""], ["org.shredzone.acme4j.Session"], [""], ["java.net.URL", "org.shredzone.acme4j.connector.NetworkSettings"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], [""], [""], ["boolean"], [""], ["java.net.URL", "java.security.KeyPair", "org.shredzone.acme4j.toolbox.JSONBuilder", "java.lang.String", "java.lang.String"], [""], ["java.nio.charset.Charset"], ["int"], [""], [""], ["byte[]"], [""], ["java.lang.Throwable"], [""], [""], ["java.lang.String"], [""], [""], ["java.io.IOException"]], "passed_comments": [{"org.shredzone.acme4j.Session.getNonce": "Gets the last base64 encoded nonce, or  {@code null} if the session is new."}, {"org.shredzone.acme4j.Session.networkSettings": "Returns the current  {@link NetworkSettings}."}, {"org.shredzone.acme4j.connector.HttpConnector.openConnection": "Opens a  {@link HttpURLConnection} to the given {@link URL}."}, {"org.shredzone.acme4j.Session.getLocale": "Gets the current locale of this session."}, {"org.shredzone.acme4j.toolbox.JoseUtils.createJoseRequest": "Creates an ACME JOSE request."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.toString": "Returns a JSON string representation of the current state."}, {"org.shredzone.acme4j.connector.DefaultConnection.logHeaders": "Log all HTTP headers in debug mode."}, {"org.shredzone.acme4j.Session.setNonce": "Sets the base64 encoded nonce received by the server."}, {"org.shredzone.acme4j.connector.DefaultConnection.throwAcmeException": "Throws an  {@link AcmeException}. This method throws an exception that tries to explain the error as precisely as possible."}]}, {"index": "96", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java", "methodName": "org.shredzone.acme4j.connector.DefaultConnection.getRetryAfterHeader", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private Optional<Instant> getRetryAfterHeader() {\n        // See RFC 2616 section 14.37\n        String header = conn.getHeaderField(RETRY_AFTER_HEADER);\n        if (header != null) {\n            try {\n                // delta-seconds\n                if (header.matches(\"^\\\\d+$\")) {\n                    int delta = Integer.parseInt(header);\n                    long date = conn.getHeaderFieldDate(DATE_HEADER, System.currentTimeMillis());\n                    return Optional.of(Instant.ofEpochMilli(date).plusSeconds(delta));\n                }\n\n                // HTTP-date\n                long date = conn.getHeaderFieldDate(RETRY_AFTER_HEADER, 0L);\n                if (date != 0) {\n                    return Optional.of(Instant.ofEpochMilli(date));\n                }\n            } catch (Exception ex) {\n                throw new AcmeProtocolException(\"Bad retry-after header value: \" + header, ex);\n            }\n        }\n\n        return Optional.empty();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the instant sent with the Retry-After header.", "call_func_name": ["java.net.HttpURLConnection.getHeaderField", "java.lang.String.matches", "java.lang.Integer.parseInt", "java.lang.System.currentTimeMillis", "java.net.HttpURLConnection.getHeaderFieldDate", "java.time.Instant.ofEpochMilli", "java.time.Instant.plusSeconds", "java.util.Optional.of", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.shredzone.acme4j.exception.AcmeProtocolException.<init>", "java.util.Optional.empty"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String", "long"], ["long"], ["long"], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Throwable"], [""]], "passed_comments": "/"}, {"index": "97", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java", "methodName": "org.shredzone.acme4j.connector.DefaultConnection.throwAcmeException", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void throwAcmeException() throws AcmeException {\n        try {\n            String contentType = AcmeUtils.getContentType(conn.getHeaderField(CONTENT_TYPE_HEADER));\n            if (!MIME_JSON_PROBLEM.equals(contentType)) {\n                throw new AcmeException(\"HTTP \" + conn.getResponseCode() + \": \" + conn.getResponseMessage());\n            }\n\n            Problem problem = new Problem(readJsonResponse(), conn.getURL());\n\n            String error = AcmeUtils.stripErrorPrefix(problem.getType().toString());\n\n            if (\"unauthorized\".equals(error)) {\n                throw new AcmeUnauthorizedException(problem);\n            }\n\n            if (\"userActionRequired\".equals(error)) {\n                URI tos = collectLinks(\"terms-of-service\").stream()\n                        .findFirst()\n                        .map(this::resolveUri)\n                        .orElse(null);\n                throw new AcmeUserActionRequiredException(problem, tos);\n            }\n\n            if (\"rateLimited\".equals(error)) {\n                Optional<Instant> retryAfter = getRetryAfterHeader();\n                Collection<URL> rateLimits = getLinks(\"help\");\n                throw new AcmeRateLimitedException(problem, retryAfter.orElse(null), rateLimits);\n            }\n\n            throw new AcmeServerException(problem);\n        } catch (IOException ex) {\n            throw new AcmeNetworkException(ex);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Throws an  {@link AcmeException}. This method throws an exception that tries to explain the error as precisely as possible.", "call_func_name": ["java.net.HttpURLConnection.getHeaderField", "org.shredzone.acme4j.toolbox.AcmeUtils.getContentType", "java.lang.String.equals", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.net.HttpURLConnection.getResponseCode", "java.lang.StringBuilder.append", "java.net.HttpURLConnection.getResponseMessage", "java.lang.StringBuilder.toString", "org.shredzone.acme4j.exception.AcmeException.<init>", "org.shredzone.acme4j.connector.DefaultConnection.readJsonResponse", "java.net.HttpURLConnection.getURL", "org.shredzone.acme4j.Problem.<init>", "org.shredzone.acme4j.Problem.getType", "java.net.URI.toString", "org.shredzone.acme4j.toolbox.AcmeUtils.stripErrorPrefix", "org.shredzone.acme4j.exception.AcmeUnauthorizedException.<init>", "org.shredzone.acme4j.connector.DefaultConnection.collectLinks", "java.util.Collection.stream", "java.util.stream.Stream.findFirst", "java.util.function.Function.apply", "java.util.Optional.map", "java.util.Optional.orElse", "org.shredzone.acme4j.exception.AcmeUserActionRequiredException.<init>", "org.shredzone.acme4j.connector.DefaultConnection.getRetryAfterHeader", "org.shredzone.acme4j.connector.DefaultConnection.getLinks", "org.shredzone.acme4j.exception.AcmeRateLimitedException.<init>", "org.shredzone.acme4j.exception.AcmeServerException.<init>", "org.shredzone.acme4j.exception.AcmeNetworkException.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["int"], [""], [""], ["java.lang.String"], [""], [""], ["org.shredzone.acme4j.toolbox.JSON", "java.net.URL"], [""], [""], ["java.lang.String"], ["org.shredzone.acme4j.Problem"], ["java.lang.String"], [""], [""], ["org.shredzone.acme4j.connector.DefaultConnection"], ["java.util.function.Function"], ["java.lang.Object"], ["org.shredzone.acme4j.Problem", "java.net.URI"], [""], ["java.lang.String"], ["org.shredzone.acme4j.Problem", "java.time.Instant", "java.util.Collection"], ["org.shredzone.acme4j.Problem"], ["java.io.IOException"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.AcmeUtils.getContentType": "Extracts the content type of a Content-Type header."}, {"org.shredzone.acme4j.Problem.getType": "Returns the problem type. It is always an absolute URI."}, {"org.shredzone.acme4j.toolbox.AcmeUtils.stripErrorPrefix": "Strips the acme error prefix from the error string. <p> For example, for \"urn:ietf:params:acme:error:unauthorized\", \"unauthorized\" is returned."}, {"org.shredzone.acme4j.connector.DefaultConnection.collectLinks": "Collects links of the given relation."}, {"org.shredzone.acme4j.connector.DefaultConnection.getRetryAfterHeader": "Gets the instant sent with the Retry-After header."}]}, {"index": "98", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java", "methodName": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void assertConnectionIsOpen() {\n        if (conn == null) {\n            throw new IllegalStateException(\"Not connected.\");\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Asserts that the connection is currently open. Throws an exception if not.", "call_func_name": ["java.lang.IllegalStateException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "99", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java", "methodName": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsClosed", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void assertConnectionIsClosed() {\n        if (conn != null) {\n            throw new IllegalStateException(\"Previous connection is not closed.\");\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Asserts that the connection is currently closed. Throws an exception if not.", "call_func_name": ["java.lang.IllegalStateException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "100", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java", "methodName": "org.shredzone.acme4j.connector.DefaultConnection.logHeaders", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void logHeaders() {\n        if (!LOG.isDebugEnabled()) {\n            return;\n        }\n\n        conn.getHeaderFields().forEach((key, headers) ->\n            headers.forEach(value ->\n                LOG.debug(\"HEADER {}: {}\", key, value)\n            )\n        );\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Log all HTTP headers in debug mode.", "call_func_name": ["org.slf4j.Logger.isDebugEnabled", "java.net.HttpURLConnection.getHeaderFields", "java.util.function.BiConsumer.accept", "java.util.Map.forEach"], "call_func_parameter": [[""], [""], [""], ["java.util.function.BiConsumer"]], "passed_comments": "/"}, {"index": "101", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java", "methodName": "org.shredzone.acme4j.connector.DefaultConnection.collectLinks", "methodParameterType": "String#", "methodParameterName": "relation#", "methodBody": "private Collection<String> collectLinks(String relation) {\n        assertConnectionIsOpen();\n\n        List<String> result = new ArrayList<>();\n\n        List<String> links = conn.getHeaderFields().get(LINK_HEADER);\n        if (links != null) {\n            Pattern p = Pattern.compile(\"<(.*?)>\\\\s*;\\\\s*rel=\\\"?\"+ Pattern.quote(relation) + \"\\\"?\");\n            for (String link : links) {\n                Matcher m = p.matcher(link);\n                if (m.matches()) {\n                    String location = m.group(1);\n                    LOG.debug(\"Link: {} -> {}\", relation, location);\n                    result.add(location);\n                }\n            }\n        }\n\n        return result;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Collects links of the given relation.", "call_func_name": ["org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen", "java.util.ArrayList.<init>", "java.net.HttpURLConnection.getHeaderFields", "java.util.Map.get", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.util.regex.Pattern.quote", "java.lang.StringBuilder.toString", "java.util.regex.Pattern.compile", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "java.util.regex.Matcher.group", "org.slf4j.Logger.debug", "java.util.List.add"], "call_func_parameter": [[""], [""], [""], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.CharSequence"], [""], ["int"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen": "Asserts that the connection is currently open. Throws an exception if not."}]}, {"index": "102", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java", "methodName": "org.shredzone.acme4j.connector.DefaultConnection.resolveRelative", "methodParameterType": "String#", "methodParameterName": "link#", "methodBody": "@CheckForNull\n    private URL resolveRelative(@Nullable String link) {\n        if (link == null) {\n            return null;\n        }\n\n        assertConnectionIsOpen();\n        try {\n            return new URL(conn.getURL(), link);\n        } catch (MalformedURLException ex) {\n            throw new AcmeProtocolException(\"Cannot resolve relative link: \" + link, ex);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Resolves a relative link against the connection's last URL.", "call_func_name": ["org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen", "java.net.HttpURLConnection.getURL", "java.net.URL.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.shredzone.acme4j.exception.AcmeProtocolException.<init>"], "call_func_parameter": [[""], [""], ["java.net.URL", "java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen": "Asserts that the connection is currently open. Throws an exception if not."}]}, {"index": "103", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java", "methodName": "org.shredzone.acme4j.connector.DefaultConnection.resolveUri", "methodParameterType": "String#", "methodParameterName": "uri#", "methodBody": "@CheckForNull\n    private URI resolveUri(@Nullable String uri) {\n        if (uri == null) {\n            return null;\n        }\n\n        try {\n            return conn.getURL().toURI().resolve(uri);\n        } catch (URISyntaxException ex) {\n            throw new AcmeProtocolException(\"Invalid URI\", ex);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(TryStatement(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Resolves a relative URI against the connection's last URL.", "call_func_name": ["java.net.HttpURLConnection.getURL", "java.net.URL.toURI", "java.net.URI.resolve", "org.shredzone.acme4j.exception.AcmeProtocolException.<init>"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "104", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/Connection.java", "methodName": "org.shredzone.acme4j.connector.Connection.resetNonce", "methodParameterType": "Session#", "methodParameterName": "session#", "methodBody": "void resetNonce(Session session) throws AcmeException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Resets the session nonce, by fetching a new one.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "105", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/Connection.java", "methodName": "org.shredzone.acme4j.connector.Connection.sendRequest", "methodParameterType": "URL#Session#", "methodParameterName": "url#session#", "methodBody": "void sendRequest(URL url, Session session) throws AcmeException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sends a simple GET request. <p> If the response code was not  {@link HttpURLConnection#HTTP_OK}, an {@link AcmeException} matching the error is raised.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "106", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/Connection.java", "methodName": "org.shredzone.acme4j.connector.Connection.sendCertificateRequest", "methodParameterType": "URL#Login#", "methodParameterName": "url#login#", "methodBody": "int sendCertificateRequest(URL url, Login login) throws AcmeException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sends a signed POST-as-GET request for a certificate resource. Requires a {@link Login} for the session and {@link KeyPair}. The  {@link Login} accountlocation is sent in a \"kid\" protected header. <p> If the server does not return a 200 class status code, an  {@link AcmeException} israised matching the error.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "107", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/Connection.java", "methodName": "org.shredzone.acme4j.connector.Connection.sendSignedPostAsGetRequest", "methodParameterType": "URL#Login#", "methodParameterName": "url#login#", "methodBody": "int sendSignedPostAsGetRequest(URL url, Login login) throws AcmeException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sends a signed POST-as-GET request. Requires a  {@link Login} for the session and{@link KeyPair}. The  {@link Login} account location is sent in a \"kid\" protectedheader. <p> If the server does not return a 200 class status code, an  {@link AcmeException} israised matching the error.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "108", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/Connection.java", "methodName": "org.shredzone.acme4j.connector.Connection.sendSignedRequest", "methodParameterType": "URL#JSONBuilder#Login#", "methodParameterName": "url#claims#login#", "methodBody": "int sendSignedRequest(URL url, JSONBuilder claims, Login login) throws AcmeException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sends a signed POST request. Requires a  {@link Login} for the session and{@link KeyPair}. The  {@link Login} account location is sent in a \"kid\" protectedheader. <p> If the server does not return a 200 class status code, an  {@link AcmeException} israised matching the error.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "109", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/Connection.java", "methodName": "org.shredzone.acme4j.connector.Connection.sendSignedRequest", "methodParameterType": "URL#JSONBuilder#Session#KeyPair#", "methodParameterName": "url#claims#session#keypair#", "methodBody": "int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair)\n                throws AcmeException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sends a signed POST request. Only requires a  {@link Session}. The  {@link KeyPair}is sent in a \"jwk\" protected header field. <p> If the server does not return a 200 class status code, an  {@link AcmeException} israised matching the error.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "110", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/Connection.java", "methodName": "org.shredzone.acme4j.connector.Connection.readJsonResponse", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "JSON readJsonResponse() throws AcmeException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reads a server response as JSON data.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "111", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/Connection.java", "methodName": "org.shredzone.acme4j.connector.Connection.readCertificates", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<X509Certificate> readCertificates() throws AcmeException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reads a certificate and its issuers.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "112", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/Connection.java", "methodName": "org.shredzone.acme4j.connector.Connection.handleRetryAfter", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "void handleRetryAfter(String message) throws AcmeException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Throws an  {@link AcmeRetryAfterException} if the last status was HTTP Accepted anda Retry-After header was received.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "113", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/Connection.java", "methodName": "org.shredzone.acme4j.connector.Connection.getNonce", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    String getNonce();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets the nonce from the nonce header.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "114", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/Connection.java", "methodName": "org.shredzone.acme4j.connector.Connection.getLocation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    URL getLocation();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets a location from the  {@code Location} header.<p> Relative links are resolved against the last request's URL.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "115", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/Connection.java", "methodName": "org.shredzone.acme4j.connector.Connection.getLinks", "methodParameterType": "String#", "methodParameterName": "relation#", "methodBody": "Collection<URL> getLinks(String relation);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Gets one or more relation links from the header. The result is expected to be an URL. <p> Relative links are resolved against the last request's URL.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "116", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/connector/Connection.java", "methodName": "org.shredzone.acme4j.connector.Connection.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    void close();", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Closes the  {@link Connection}, releasing all resources.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "117", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Metadata.java", "methodName": "org.shredzone.acme4j.Metadata.Metadata", "methodParameterType": "JSON#", "methodParameterName": "meta#", "methodBody": "public Metadata(JSON meta) {\n        this.meta = meta;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link Metadata} instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "118", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Metadata.java", "methodName": "org.shredzone.acme4j.Metadata.getTermsOfService", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public URI getTermsOfService() {\n        return meta.get(\"termsOfService\").map(Value::asURI).orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an  {@link URI} to the current terms of service, or {@code null} if notavailable.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.Optional.orElse"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "119", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Metadata.java", "methodName": "org.shredzone.acme4j.Metadata.getWebsite", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public URL getWebsite() {\n        return meta.get(\"website\").map(Value::asURL).orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an  {@link URL} to a website providing more information about the ACMEserver.  {@code null} if not available.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.Optional.orElse"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "120", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Metadata.java", "methodName": "org.shredzone.acme4j.Metadata.getCaaIdentities", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Collection<String> getCaaIdentities() {\n        return meta.get(\"caaIdentities\")\n                .asArray()\n                .stream()\n                .map(Value::asString)\n                .collect(toList());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a collection of hostnames, which the ACME server recognises as referring to itself for the purposes of CAA record validation. Empty if not available.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect"], "call_func_parameter": [["java.lang.String"], [""], ["java.util.function.Function"], [""], ["java.util.stream.Collector"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "121", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Metadata.java", "methodName": "org.shredzone.acme4j.Metadata.isExternalAccountRequired", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isExternalAccountRequired() {\n        return meta.get(\"externalAccountRequired\").map(Value::asBoolean).orElse(false);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether an external account is required by this CA.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.lang.Boolean.valueOf", "java.util.Optional.orElse", "java.lang.Boolean.booleanValue"], "call_func_parameter": [["java.lang.String"], [""], ["boolean"], ["java.lang.Object"], [""]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "122", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Metadata.java", "methodName": "org.shredzone.acme4j.Metadata.isStarEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isStarEnabled() {\n        return meta.get(\"star-enabled\").map(Value::asBoolean).orElse(false);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the CA supports short-term auto renewal of certificates.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.lang.Boolean.valueOf", "java.util.Optional.orElse", "java.lang.Boolean.booleanValue"], "call_func_parameter": [["java.lang.String"], [""], ["boolean"], ["java.lang.Object"], [""]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "123", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Metadata.java", "methodName": "org.shredzone.acme4j.Metadata.getStarMinCertValidity", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Duration getStarMinCertValidity() {\n        return meta.get(\"star-min-cert-validity\").map(Value::asDuration).orElse(null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the minimum acceptable value for the maximum validity of a certificate before auto renewal.  {@code null} if the CA does not support short-term autorenewal.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.Optional.orElse"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "124", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Metadata.java", "methodName": "org.shredzone.acme4j.Metadata.getStarMaxRenewal", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Duration getStarMaxRenewal() {\n        return meta.get(\"star-max-renewal\").map(Value::asDuration).orElse(null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the maximum delta between recurrent end date and recurrent start date. {@code null} if the CA does not support short-term auto renewal.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.Optional.orElse"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "125", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Metadata.java", "methodName": "org.shredzone.acme4j.Metadata.isStarCertificateGetAllowed", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isStarCertificateGetAllowed() {\n        return meta.get(\"star-allow-certificate-get\").map(Value::asBoolean).orElse(false);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the CA also allows to fetch STAR certificates via GET request.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.lang.Boolean.valueOf", "java.util.Optional.orElse", "java.lang.Boolean.booleanValue"], "call_func_parameter": [["java.lang.String"], [""], ["boolean"], ["java.lang.Object"], [""]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "126", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Metadata.java", "methodName": "org.shredzone.acme4j.Metadata.getJSON", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public JSON getJSON() {\n        return meta;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the JSON representation of the metadata. This is useful for reading proprietary metadata properties.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "127", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/AcmeResource.java", "methodName": "org.shredzone.acme4j.AcmeResource.AcmeResource", "methodParameterType": "Login#URL#", "methodParameterName": "login#location#", "methodBody": "protected AcmeResource(Login login, URL location) {\n        this.location = Objects.requireNonNull(location, \"location\");\n        rebind(login);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create a new  {@link AcmeResource}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "128", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/AcmeResource.java", "methodName": "org.shredzone.acme4j.AcmeResource.getLogin", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected Login getLogin() {\n        if (login == null) {\n            throw new IllegalStateException(\"Use rebind() for binding this object to a login.\");\n        }\n        return login;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the  {@link Login} this resource is bound with.", "call_func_name": ["java.lang.IllegalStateException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "129", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/AcmeResource.java", "methodName": "org.shredzone.acme4j.AcmeResource.getSession", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected Session getSession() {\n        return getLogin().getSession();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the  {@link Session} this resource is bound with.", "call_func_name": ["org.shredzone.acme4j.AcmeResource.getLogin", "org.shredzone.acme4j.Login.getSession"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.shredzone.acme4j.AcmeResource.getLogin": "Gets the  {@link Login} this resource is bound with."}, {"org.shredzone.acme4j.Login.getSession": "Gets the  {@link Session} that is used."}]}, {"index": "130", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/AcmeResource.java", "methodName": "org.shredzone.acme4j.AcmeResource.rebind", "methodParameterType": "Login#", "methodParameterName": "login#", "methodBody": "public void rebind(Login login) {\n        if (this.login != null) {\n            throw new IllegalStateException(\"Resource is already bound to a login\");\n        }\n        this.login = Objects.requireNonNull(login, \"login\");\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Rebinds this resource to a  {@link Login}. <p> Logins are not serialized, because they contain volatile session data and also a private key. After de-serialization of an  {@link AcmeResource}, use this method to rebind it to a  {@link Login}.", "call_func_name": ["java.lang.IllegalStateException.<init>", "java.util.Objects.requireNonNull"], "call_func_parameter": [["java.lang.String"], ["java.lang.Object", "java.lang.String"]], "passed_comments": "/"}, {"index": "131", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/AcmeResource.java", "methodName": "org.shredzone.acme4j.AcmeResource.getLocation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public URL getLocation() {\n        return location;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the resource's location.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "132", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Identifier.java", "methodName": "org.shredzone.acme4j.Identifier.Identifier", "methodParameterType": "String#String#", "methodParameterName": "type#value#", "methodBody": "public Identifier(String type, String value) {\n        this.type = requireNonNull(type, KEY_TYPE);\n        this.value = requireNonNull(value, KEY_VALUE);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link Identifier}. <p> This is a generic constructor for identifiers. Refer to the documentation of your CA to find out about the accepted identifier types and values. <p> Note that for DNS identifiers, no ASCII encoding of unicode domain takes place here. Use  {@link #dns(String)} instead.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "133", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Identifier.java", "methodName": "org.shredzone.acme4j.Identifier.Identifier", "methodParameterType": "JSON#", "methodParameterName": "json#", "methodBody": "public Identifier(JSON json) {\n        this(json.get(KEY_TYPE).asString(), json.get(KEY_VALUE).asString());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link Identifier} from the given {@link JSON} structure.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "134", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Identifier.java", "methodName": "org.shredzone.acme4j.Identifier.dns", "methodParameterType": "String#", "methodParameterName": "domain#", "methodBody": "public static Identifier dns(String domain) {\n        return new Identifier(TYPE_DNS, toAce(domain));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new DNS identifier for the given domain name.", "call_func_name": ["org.shredzone.acme4j.toolbox.AcmeUtils.toAce", "org.shredzone.acme4j.Identifier.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.AcmeUtils.toAce": "ASCII encodes a domain name. <p> The conversion is done as described in <a href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a>. Additionally, all leading and trailing white spaces are trimmed, and the result is lowercased. <p> It is safe to pass in ACE encoded domains, they will be returned unchanged."}]}, {"index": "135", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Identifier.java", "methodName": "org.shredzone.acme4j.Identifier.ip", "methodParameterType": "InetAddress#", "methodParameterName": "ip#", "methodBody": "public static Identifier ip(InetAddress ip) {\n        return new Identifier(TYPE_IP, ip.getHostAddress());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new IP identifier for the given  {@link InetAddress}.", "call_func_name": ["java.net.InetAddress.getHostAddress", "org.shredzone.acme4j.Identifier.<init>"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "136", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Identifier.java", "methodName": "org.shredzone.acme4j.Identifier.ip", "methodParameterType": "String#", "methodParameterName": "ip#", "methodBody": "public static Identifier ip(String ip) {\n        try {\n            return ip(InetAddress.getByName(ip));\n        } catch (UnknownHostException ex) {\n            throw new IllegalArgumentException(\"Bad IP: \" + ip, ex);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Creates a new IP identifier for the given  {@link InetAddress}.", "call_func_name": ["java.net.InetAddress.getByName", "org.shredzone.acme4j.Identifier.ip", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String"], ["java.net.InetAddress"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.Identifier.ip": "Creates a new IP identifier for the given  {@link InetAddress}."}]}, {"index": "137", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Identifier.java", "methodName": "org.shredzone.acme4j.Identifier.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getType() {\n        return type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the identifier type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "138", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Identifier.java", "methodName": "org.shredzone.acme4j.Identifier.getValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getValue() {\n        return value;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the identifier value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "139", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Identifier.java", "methodName": "org.shredzone.acme4j.Identifier.getDomain", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDomain() {\n        if (!TYPE_DNS.equals(type)) {\n            throw new AcmeProtocolException(\"expected 'dns' identifier, but found '\" + type + \"'\");\n        }\n        return value;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the domain name if this is a DNS identifier.", "call_func_name": ["java.lang.String.equals", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.shredzone.acme4j.exception.AcmeProtocolException.<init>"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "140", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Identifier.java", "methodName": "org.shredzone.acme4j.Identifier.getIP", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public InetAddress getIP() {\n        if (!TYPE_IP.equals(type)) {\n            throw new AcmeProtocolException(\"expected 'ip' identifier, but found '\" + type + \"'\");\n        }\n        try {\n            return InetAddress.getByName(value);\n        } catch (UnknownHostException ex) {\n            throw new AcmeProtocolException(\"bad ip identifier value\", ex);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Returns the IP address if this is an IP identifier.", "call_func_name": ["java.lang.String.equals", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.shredzone.acme4j.exception.AcmeProtocolException.<init>", "java.net.InetAddress.getByName", "org.shredzone.acme4j.exception.AcmeProtocolException.<init>"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "141", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Identifier.java", "methodName": "org.shredzone.acme4j.Identifier.toMap", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, Object> toMap() {\n        return new JSONBuilder().put(KEY_TYPE, type).put(KEY_VALUE, value).toMap();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the identifier as JSON map.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "org.shredzone.acme4j.toolbox.JSONBuilder.put", "org.shredzone.acme4j.toolbox.JSONBuilder.toMap"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object"], [""]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.toMap": "Returns a  {@link Map} representation of the current state."}]}, {"index": "142", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/OrderBuilder.java", "methodName": "org.shredzone.acme4j.OrderBuilder.OrderBuilder", "methodParameterType": "Login#", "methodParameterName": "login#", "methodBody": "protected OrderBuilder(Login login) {\n        this.login = login;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create a new  {@link OrderBuilder}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "143", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/OrderBuilder.java", "methodName": "org.shredzone.acme4j.OrderBuilder.domain", "methodParameterType": "String#", "methodParameterName": "domain#", "methodBody": "public OrderBuilder domain(String domain) {\n        return identifier(Identifier.dns(domain));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Adds a domain name to the order.", "call_func_name": ["org.shredzone.acme4j.Identifier.dns", "org.shredzone.acme4j.OrderBuilder.identifier"], "call_func_parameter": [["java.lang.String"], ["org.shredzone.acme4j.Identifier"]], "passed_comments": [{"org.shredzone.acme4j.Identifier.dns": "Creates a new DNS identifier for the given domain name."}, {"org.shredzone.acme4j.OrderBuilder.identifier": "Adds an  {@link Identifier} to the order."}]}, {"index": "144", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/OrderBuilder.java", "methodName": "org.shredzone.acme4j.OrderBuilder.domains", "methodParameterType": "String#", "methodParameterName": "domains#", "methodBody": "public OrderBuilder domains(String... domains) {\n        for (String domain : requireNonNull(domains, \"domains\")) {\n            domain(domain);\n        }\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Adds domain names to the order.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "145", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/OrderBuilder.java", "methodName": "org.shredzone.acme4j.OrderBuilder.domains", "methodParameterType": "Collection<String>#", "methodParameterName": "domains#", "methodBody": "public OrderBuilder domains(Collection<String> domains) {\n        requireNonNull(domains, \"domains\").forEach(this::domain);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Adds a collection of domain names to the order.", "call_func_name": ["java.util.Objects.requireNonNull", "java.util.function.Consumer.accept", "java.util.Collection.forEach"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], ["org.shredzone.acme4j.OrderBuilder"], ["java.util.function.Consumer"]], "passed_comments": "/"}, {"index": "146", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/OrderBuilder.java", "methodName": "org.shredzone.acme4j.OrderBuilder.identifier", "methodParameterType": "Identifier#", "methodParameterName": "identifier#", "methodBody": "public OrderBuilder identifier(Identifier identifier) {\n        identifierSet.add(requireNonNull(identifier, \"identifier\"));\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Adds an  {@link Identifier} to the order.", "call_func_name": ["java.util.Objects.requireNonNull", "java.util.Set.add"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "147", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/OrderBuilder.java", "methodName": "org.shredzone.acme4j.OrderBuilder.identifiers", "methodParameterType": "Collection<Identifier>#", "methodParameterName": "identifiers#", "methodBody": "public OrderBuilder identifiers(Collection<Identifier> identifiers) {\n        requireNonNull(identifiers, \"identifiers\").forEach(this::identifier);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Adds a collection of  {@link Identifier} to the order.", "call_func_name": ["java.util.Objects.requireNonNull", "java.util.function.Consumer.accept", "java.util.Collection.forEach"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], ["org.shredzone.acme4j.OrderBuilder"], ["java.util.function.Consumer"]], "passed_comments": "/"}, {"index": "148", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/OrderBuilder.java", "methodName": "org.shredzone.acme4j.OrderBuilder.notBefore", "methodParameterType": "Instant#", "methodParameterName": "notBefore#", "methodBody": "public OrderBuilder notBefore(Instant notBefore) {\n        if (recurrent) {\n            throw new IllegalArgumentException(\"cannot combine notBefore with recurrent\");\n        }\n        this.notBefore = requireNonNull(notBefore, \"notBefore\");\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets a \"not before\" date in the certificate. May be ignored by the CA.", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "java.util.Objects.requireNonNull"], "call_func_parameter": [["java.lang.String"], ["java.lang.Object", "java.lang.String"]], "passed_comments": "/"}, {"index": "149", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/OrderBuilder.java", "methodName": "org.shredzone.acme4j.OrderBuilder.notAfter", "methodParameterType": "Instant#", "methodParameterName": "notAfter#", "methodBody": "public OrderBuilder notAfter(Instant notAfter) {\n        if (recurrent) {\n            throw new IllegalArgumentException(\"cannot combine notAfter with recurrent\");\n        }\n        this.notAfter = requireNonNull(notAfter, \"notAfter\");\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets a \"not after\" date in the certificate. May be ignored by the CA.", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "java.util.Objects.requireNonNull"], "call_func_parameter": [["java.lang.String"], ["java.lang.Object", "java.lang.String"]], "passed_comments": "/"}, {"index": "150", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/OrderBuilder.java", "methodName": "org.shredzone.acme4j.OrderBuilder.recurrent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public OrderBuilder recurrent() {\n        if (notBefore != null || notAfter != null) {\n            throw new IllegalArgumentException(\"cannot combine notBefore/notAfter with recurrent\");\n        }\n        this.recurrent = true;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enables short-term automatic renewal of the certificate. Must be supported by the CA. <p> Recurrent renewals cannot be combined with  {@link #notBefore(Instant)} or{@link #notAfter(Instant)}.", "call_func_name": ["java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "151", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/OrderBuilder.java", "methodName": "org.shredzone.acme4j.OrderBuilder.recurrentStart", "methodParameterType": "Instant#", "methodParameterName": "start#", "methodBody": "public OrderBuilder recurrentStart(Instant start) {\n        recurrent();\n        this.recurrentStart = requireNonNull(start, \"start\");\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets the earliest date of validity of the first issued certificate. If not set, the start date is the earliest possible date. <p> Implies  {@link #recurrent()}.", "call_func_name": ["org.shredzone.acme4j.OrderBuilder.recurrent", "java.util.Objects.requireNonNull"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.OrderBuilder.recurrent": "Enables short-term automatic renewal of the certificate. Must be supported by the CA. <p> Recurrent renewals cannot be combined with  {@link #notBefore(Instant)} or{@link #notAfter(Instant)}."}]}, {"index": "152", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/OrderBuilder.java", "methodName": "org.shredzone.acme4j.OrderBuilder.recurrentEnd", "methodParameterType": "Instant#", "methodParameterName": "end#", "methodBody": "public OrderBuilder recurrentEnd(Instant end) {\n        recurrent();\n        this.recurrentEnd = requireNonNull(end, \"end\");\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets the latest date of validity of the last issued certificate. If not set, the CA's default is used. <p> Implies  {@link #recurrent()}.", "call_func_name": ["org.shredzone.acme4j.OrderBuilder.recurrent", "java.util.Objects.requireNonNull"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.OrderBuilder.recurrent": "Enables short-term automatic renewal of the certificate. Must be supported by the CA. <p> Recurrent renewals cannot be combined with  {@link #notBefore(Instant)} or{@link #notAfter(Instant)}."}]}, {"index": "153", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/OrderBuilder.java", "methodName": "org.shredzone.acme4j.OrderBuilder.recurrentCertificateValidity", "methodParameterType": "Duration#", "methodParameterName": "duration#", "methodBody": "public OrderBuilder recurrentCertificateValidity(Duration duration) {\n        recurrent();\n        this.recurrentValidity = requireNonNull(duration, \"duration\");\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets the maximum validity period of each certificate. If not set, the CA's default is used. <p> Implies  {@link #recurrent()}.", "call_func_name": ["org.shredzone.acme4j.OrderBuilder.recurrent", "java.util.Objects.requireNonNull"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.OrderBuilder.recurrent": "Enables short-term automatic renewal of the certificate. Must be supported by the CA. <p> Recurrent renewals cannot be combined with  {@link #notBefore(Instant)} or{@link #notAfter(Instant)}."}]}, {"index": "154", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/OrderBuilder.java", "methodName": "org.shredzone.acme4j.OrderBuilder.recurrentCertificatePredate", "methodParameterType": "Duration#", "methodParameterName": "duration#", "methodBody": "public OrderBuilder recurrentCertificatePredate(Duration duration) {\n        recurrent();\n        this.recurrentPredate = requireNonNull(duration, \"duration\");\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets the amount of pre-dating each certificate. If not set, the CA's default (0) is used. <p> Implies  {@link #recurrent()}.", "call_func_name": ["org.shredzone.acme4j.OrderBuilder.recurrent", "java.util.Objects.requireNonNull"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.OrderBuilder.recurrent": "Enables short-term automatic renewal of the certificate. Must be supported by the CA. <p> Recurrent renewals cannot be combined with  {@link #notBefore(Instant)} or{@link #notAfter(Instant)}."}]}, {"index": "155", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/OrderBuilder.java", "methodName": "org.shredzone.acme4j.OrderBuilder.recurrentEnableGet", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public OrderBuilder recurrentEnableGet() {\n        recurrent();\n        this.recurrentGet = true;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Announces that the client wishes to fetch the recurring certificate via GET request. If not used, the STAR certificate can only be fetched via POST-as-GET request.  {@link Metadata#isStarCertificateGetAllowed()} must return {@code true} inorder for this option to work. <p> This option is only needed if you plan to fetch the STAR certificate via other means than by using acme4j. <p> Implies  {@link #recurrent()}.", "call_func_name": ["org.shredzone.acme4j.OrderBuilder.recurrent"], "call_func_parameter": [[""]], "passed_comments": [{"org.shredzone.acme4j.OrderBuilder.recurrent": "Enables short-term automatic renewal of the certificate. Must be supported by the CA. <p> Recurrent renewals cannot be combined with  {@link #notBefore(Instant)} or{@link #notAfter(Instant)}."}]}, {"index": "156", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/OrderBuilder.java", "methodName": "org.shredzone.acme4j.OrderBuilder.create", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Order create() throws AcmeException {\n        if (identifierSet.isEmpty()) {\n            throw new IllegalArgumentException(\"At least one identifer is required\");\n        }\n\n        Session session = login.getSession();\n\n        if (recurrent && !session.getMetadata().isStarEnabled()) {\n            throw new AcmeException(\"CA does not support short-term automatic renewals\");\n        }\n\n        LOG.debug(\"create\");\n        try (Connection conn = session.connect()) {\n            JSONBuilder claims = new JSONBuilder();\n            claims.array(\"identifiers\", identifierSet.stream().map(Identifier::toMap).collect(toList()));\n\n            if (notBefore != null) {\n                claims.put(\"notBefore\", notBefore);\n            }\n            if (notAfter != null) {\n                claims.put(\"notAfter\", notAfter);\n            }\n\n            if (recurrent) {\n                claims.put(\"recurrent\", true);\n                if (recurrentStart != null) {\n                    claims.put(\"recurrent-start-date\", recurrentStart);\n                }\n                if (recurrentStart != null) {\n                    claims.put(\"recurrent-end-date\", recurrentEnd);\n                }\n                if (recurrentValidity != null) {\n                    claims.put(\"recurrent-certificate-validity\", recurrentValidity);\n                }\n                if (recurrentPredate != null) {\n                    claims.put(\"recurrent-certificate-predate\", recurrentPredate);\n                }\n                if (recurrentGet) {\n                    claims.put(\"recurrent-certificate-get\", recurrentGet);\n                }\n            }\n\n            conn.sendSignedRequest(session.resourceUrl(Resource.NEW_ORDER), claims, login);\n\n            URL orderLocation = conn.getLocation();\n            if (orderLocation == null) {\n                throw new AcmeProtocolException(\"Server did not provide an order location\");\n            }\n\n            Order order = new Order(login, orderLocation);\n            order.setJSON(conn.readJsonResponse());\n            return order;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#StringLiteral#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Sends a new order to the server, and returns an  {@link Order} object.", "call_func_name": ["java.util.Set.isEmpty", "java.lang.IllegalArgumentException.<init>", "org.shredzone.acme4j.Login.getSession", "org.shredzone.acme4j.Session.getMetadata", "org.shredzone.acme4j.Metadata.isStarEnabled", "org.shredzone.acme4j.exception.AcmeException.<init>", "org.slf4j.Logger.debug", "org.shredzone.acme4j.Session.connect", "org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "java.util.Set.stream", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect", "org.shredzone.acme4j.toolbox.JSONBuilder.array", "org.shredzone.acme4j.toolbox.JSONBuilder.put", "java.lang.Boolean.valueOf", "org.shredzone.acme4j.toolbox.JSONBuilder.put", "org.shredzone.acme4j.toolbox.JSONBuilder.put", "org.shredzone.acme4j.Session.resourceUrl", "org.shredzone.acme4j.connector.Connection.sendSignedRequest", "org.shredzone.acme4j.connector.Connection.getLocation", "org.shredzone.acme4j.exception.AcmeProtocolException.<init>", "org.shredzone.acme4j.Order.<init>", "org.shredzone.acme4j.connector.Connection.readJsonResponse", "org.shredzone.acme4j.Order.setJSON", "org.shredzone.acme4j.connector.Connection.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], [""], ["java.lang.String"], ["java.lang.String"], [""], [""], [""], [""], ["java.util.function.Function"], [""], ["java.util.stream.Collector"], ["java.lang.String", "java.util.Collection"], ["java.lang.String", "java.time.Instant"], ["boolean"], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.time.Duration"], ["org.shredzone.acme4j.connector.Resource"], ["java.net.URL", "org.shredzone.acme4j.toolbox.JSONBuilder", "org.shredzone.acme4j.Login"], [""], ["java.lang.String"], ["org.shredzone.acme4j.Login", "java.net.URL"], [""], ["org.shredzone.acme4j.toolbox.JSON"], [""], ["java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.Login.getSession": "Gets the  {@link Session} that is used."}, {"org.shredzone.acme4j.Session.getMetadata": "Gets the metadata of the provider's directory. This may involve connecting to the server and getting a directory. The result is cached."}, {"org.shredzone.acme4j.Metadata.isStarEnabled": "Returns whether the CA supports short-term auto renewal of certificates."}, {"org.shredzone.acme4j.Session.connect": "Returns a new  {@link Connection} to the ACME server."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.array": "Puts an array."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts an  {@link Instant} to the JSON. If a property with the key exists, it will bereplaced."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a  {@link Duration} to the JSON. If a property with the key exists, it will bereplaced."}, {"org.shredzone.acme4j.Session.resourceUrl": "Gets the  {@link URL} of the given {@link Resource}. This may involve connecting to the server and getting a directory. The result is cached."}, {"org.shredzone.acme4j.connector.Connection.sendSignedRequest": "Sends a signed POST request. Requires a  {@link Login} for the session and{@link KeyPair}. The  {@link Login} account location is sent in a \"kid\" protectedheader. <p> If the server does not return a 200 class status code, an  {@link AcmeException} israised matching the error."}, {"org.shredzone.acme4j.connector.Connection.getLocation": "Gets a location from the  {@code Location} header.<p> Relative links are resolved against the last request's URL."}, {"org.shredzone.acme4j.connector.Connection.readJsonResponse": "Reads a server response as JSON data."}, {"org.shredzone.acme4j.connector.Connection.close": "Closes the  {@link Connection}, releasing all resources."}]}, {"index": "157", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Login.java", "methodName": "org.shredzone.acme4j.Login.Login", "methodParameterType": "URL#KeyPair#Session#", "methodParameterName": "accountLocation#keyPair#session#", "methodBody": "public Login(URL accountLocation, KeyPair keyPair, Session session) {\n        this.accountLocation = Objects.requireNonNull(accountLocation, \"accountLocation\");\n        this.keyPair = Objects.requireNonNull(keyPair, \"keyPair\");\n        this.session = Objects.requireNonNull(session, \"session\");\n        this.account = new Account(this);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ThisExpression#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link Login}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "158", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Login.java", "methodName": "org.shredzone.acme4j.Login.getSession", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Session getSession() {\n        return session;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the  {@link Session} that is used.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "159", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Login.java", "methodName": "org.shredzone.acme4j.Login.getKeyPair", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public KeyPair getKeyPair() {\n        return keyPair;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the  {@link KeyPair} of the ACME account.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "160", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Login.java", "methodName": "org.shredzone.acme4j.Login.getAccountLocation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public URL getAccountLocation() {\n        return accountLocation;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the location  {@link URL} of the account.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "161", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Login.java", "methodName": "org.shredzone.acme4j.Login.getAccount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Account getAccount() {\n        return account;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the  {@link Account} that is bound to this login.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "162", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Login.java", "methodName": "org.shredzone.acme4j.Login.bindAuthorization", "methodParameterType": "URL#", "methodParameterName": "location#", "methodBody": "public Authorization bindAuthorization(URL location) {\n        return new Authorization(this, requireNonNull(location, \"location\"));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance of  {@link Authorization} and binds it to this login.", "call_func_name": ["java.util.Objects.requireNonNull", "org.shredzone.acme4j.Authorization.<init>"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], ["org.shredzone.acme4j.Login", "java.net.URL"]], "passed_comments": "/"}, {"index": "163", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Login.java", "methodName": "org.shredzone.acme4j.Login.bindCertificate", "methodParameterType": "URL#", "methodParameterName": "location#", "methodBody": "public Certificate bindCertificate(URL location) {\n        return new Certificate(this, requireNonNull(location, \"location\"));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance of  {@link Certificate} and binds it to this login.", "call_func_name": ["java.util.Objects.requireNonNull", "org.shredzone.acme4j.Certificate.<init>"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], ["org.shredzone.acme4j.Login", "java.net.URL"]], "passed_comments": "/"}, {"index": "164", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Login.java", "methodName": "org.shredzone.acme4j.Login.bindOrder", "methodParameterType": "URL#", "methodParameterName": "location#", "methodBody": "public Order bindOrder(URL location) {\n        return new Order(this, requireNonNull(location, \"location\"));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance of  {@link Order} and binds it to this login.", "call_func_name": ["java.util.Objects.requireNonNull", "org.shredzone.acme4j.Order.<init>"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], ["org.shredzone.acme4j.Login", "java.net.URL"]], "passed_comments": "/"}, {"index": "165", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Login.java", "methodName": "org.shredzone.acme4j.Login.bindChallenge", "methodParameterType": "URL#", "methodParameterName": "location#", "methodBody": "public Challenge bindChallenge(URL location) {\n        try {\n            Connection connect = session.connect();\n            connect.sendSignedPostAsGetRequest(location, this);\n            return createChallenge(connect.readJsonResponse());\n        } catch (AcmeException ex) {\n            throw new AcmeLazyLoadingException(Challenge.class, location, ex);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance of  {@link Challenge} and binds it to this login.", "call_func_name": ["org.shredzone.acme4j.Session.connect", "org.shredzone.acme4j.connector.Connection.sendSignedPostAsGetRequest", "org.shredzone.acme4j.connector.Connection.readJsonResponse", "org.shredzone.acme4j.Login.createChallenge", "org.shredzone.acme4j.exception.AcmeLazyLoadingException.<init>"], "call_func_parameter": [[""], ["java.net.URL", "org.shredzone.acme4j.Login"], [""], ["org.shredzone.acme4j.toolbox.JSON"], ["java.lang.Class", "java.net.URL", "org.shredzone.acme4j.exception.AcmeException"]], "passed_comments": [{"org.shredzone.acme4j.Session.connect": "Returns a new  {@link Connection} to the ACME server."}, {"org.shredzone.acme4j.connector.Connection.sendSignedPostAsGetRequest": "Sends a signed POST-as-GET request. Requires a  {@link Login} for the session and{@link KeyPair}. The  {@link Login} account location is sent in a \"kid\" protectedheader. <p> If the server does not return a 200 class status code, an  {@link AcmeException} israised matching the error."}, {"org.shredzone.acme4j.connector.Connection.readJsonResponse": "Reads a server response as JSON data."}, {"org.shredzone.acme4j.Login.createChallenge": "Creates a  {@link Challenge} instance for the given challenge data."}]}, {"index": "166", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Login.java", "methodName": "org.shredzone.acme4j.Login.createChallenge", "methodParameterType": "JSON#", "methodParameterName": "data#", "methodBody": "public Challenge createChallenge(JSON data) {\n        Challenge challenge = session.provider().createChallenge(this, data);\n        if (challenge == null) {\n            throw new AcmeProtocolException(\"Could not create challenge for: \" + data);\n        }\n        return challenge;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a  {@link Challenge} instance for the given challenge data.", "call_func_name": ["org.shredzone.acme4j.Session.provider", "org.shredzone.acme4j.provider.AcmeProvider.createChallenge", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.shredzone.acme4j.exception.AcmeProtocolException.<init>"], "call_func_parameter": [[""], ["org.shredzone.acme4j.Login", "org.shredzone.acme4j.toolbox.JSON"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.Session.provider": "Returns the  {@link AcmeProvider} that is used for this session."}, {"org.shredzone.acme4j.provider.AcmeProvider.createChallenge": "Creates a  {@link Challenge} instance for the given challenge data."}]}, {"index": "167", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Login.java", "methodName": "org.shredzone.acme4j.Login.setKeyPair", "methodParameterType": "KeyPair#", "methodParameterName": "keyPair#", "methodBody": "protected void setKeyPair(KeyPair keyPair) {\n        this.keyPair = Objects.requireNonNull(keyPair, \"keyPair\");\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets a different  {@link KeyPair}.", "call_func_name": ["java.util.Objects.requireNonNull"], "call_func_parameter": [["java.lang.Object", "java.lang.String"]], "passed_comments": "/"}, {"index": "168", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Session.java", "methodName": "org.shredzone.acme4j.Session.Session", "methodParameterType": "String#", "methodParameterName": "serverUri#", "methodBody": "public Session(String serverUri) {\n        this(URI.create(serverUri));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link Session}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "169", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Session.java", "methodName": "org.shredzone.acme4j.Session.Session", "methodParameterType": "URI#", "methodParameterName": "serverUri#", "methodBody": "public Session(URI serverUri) {\n        this.serverUri = Objects.requireNonNull(serverUri, \"serverUri\");\n\n        if (GENERIC_PROVIDER.accepts(serverUri)) {\n            provider = GENERIC_PROVIDER;\n            return;\n        }\n\n        final URI localServerUri = serverUri;\n\n        Iterable<AcmeProvider> providers = ServiceLoader.load(AcmeProvider.class);\n        provider = StreamSupport.stream(providers.spliterator(), false)\n            .filter(p -> p.accepts(localServerUri))\n            .reduce((a, b) -> {\n                    throw new IllegalArgumentException(\"Both ACME providers \"\n                        + a.getClass().getSimpleName() + \" and \"\n                        + b.getClass().getSimpleName() + \" accept \"\n                        + localServerUri + \". Please check your classpath.\");\n                })\n            .orElseThrow(() -> new IllegalArgumentException(\"No ACME provider found for \" + localServerUri));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#Assignment#ExpressionStatement#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#LambdaExpression#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)LambdaExpression)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link Session}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "170", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Session.java", "methodName": "org.shredzone.acme4j.Session.Session", "methodParameterType": "URI#AcmeProvider#", "methodParameterName": "serverUri#provider#", "methodBody": "public Session(URI serverUri, AcmeProvider provider) {\n        this.serverUri = Objects.requireNonNull(serverUri, \"serverUri\");\n        this.provider = Objects.requireNonNull(provider, \"provider\");\n\n        if (!provider.accepts(serverUri)) {\n            throw new IllegalArgumentException(\"Provider does not accept \" + serverUri);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link Session} using the given {@link AcmeProvider}. <p> This constructor should only be used for testing purposes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "171", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Session.java", "methodName": "org.shredzone.acme4j.Session.login", "methodParameterType": "URL#KeyPair#", "methodParameterName": "accountLocation#accountKeyPair#", "methodBody": "public Login login(URL accountLocation, KeyPair accountKeyPair) {\n        return new Login(accountLocation, accountKeyPair, this);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#ThisExpression#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Logs into an existing account.", "call_func_name": ["org.shredzone.acme4j.Login.<init>"], "call_func_parameter": [["java.net.URL", "java.security.KeyPair", "org.shredzone.acme4j.Session"]], "passed_comments": "/"}, {"index": "172", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Session.java", "methodName": "org.shredzone.acme4j.Session.getServerUri", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public URI getServerUri() {\n        return serverUri;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the ACME server  {@link URI} of this session.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "173", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Session.java", "methodName": "org.shredzone.acme4j.Session.getNonce", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public String getNonce() {\n        return nonce;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the last base64 encoded nonce, or  {@code null} if the session is new.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "174", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Session.java", "methodName": "org.shredzone.acme4j.Session.setNonce", "methodParameterType": "String#", "methodParameterName": "nonce#", "methodBody": "public void setNonce(@Nullable String nonce) {\n        this.nonce = nonce;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the base64 encoded nonce received by the server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "175", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Session.java", "methodName": "org.shredzone.acme4j.Session.getLocale", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Locale getLocale() {\n        return locale;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the current locale of this session.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "176", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Session.java", "methodName": "org.shredzone.acme4j.Session.setLocale", "methodParameterType": "Locale#", "methodParameterName": "locale#", "methodBody": "public void setLocale(@Nullable Locale locale) {\n        this.locale = locale != null ? locale : Locale.getDefault();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the locale used in this session. The locale is passed to the server as Accept-Language header. The server <em>may</em> respond with localized messages.", "call_func_name": ["java.util.Locale.getDefault"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "177", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Session.java", "methodName": "org.shredzone.acme4j.Session.getProxy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public Proxy getProxy() {\n        return networkSettings.getProxy();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the  {@link Proxy} to be used for connections.", "call_func_name": ["org.shredzone.acme4j.connector.NetworkSettings.getProxy"], "call_func_parameter": [[""]], "passed_comments": [{"org.shredzone.acme4j.connector.NetworkSettings.getProxy": "Gets the  {@link Proxy} to be used for connections."}]}, {"index": "178", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Session.java", "methodName": "org.shredzone.acme4j.Session.setProxy", "methodParameterType": "Proxy#", "methodParameterName": "proxy#", "methodBody": "@Deprecated\n    public void setProxy(@Nullable Proxy proxy) {\n        networkSettings.setProxy(proxy);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets a  {@link Proxy} that is to be used for all connections. If {@code null}, {@link Proxy#NO_PROXY} is used, which is also the default.", "call_func_name": ["org.shredzone.acme4j.connector.NetworkSettings.setProxy"], "call_func_parameter": [["java.net.Proxy"]], "passed_comments": [{"org.shredzone.acme4j.connector.NetworkSettings.setProxy": "Sets a  {@link Proxy} that is to be used for all connections. If {@code null}, {@link Proxy#NO_PROXY} is used, which is also the default."}]}, {"index": "179", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Session.java", "methodName": "org.shredzone.acme4j.Session.networkSettings", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public NetworkSettings networkSettings() {\n        return networkSettings;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the current  {@link NetworkSettings}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "180", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Session.java", "methodName": "org.shredzone.acme4j.Session.provider", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AcmeProvider provider() {\n        return provider;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the  {@link AcmeProvider} that is used for this session.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "181", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Session.java", "methodName": "org.shredzone.acme4j.Session.connect", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Connection connect() {\n        return provider.connect(getServerUri());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a new  {@link Connection} to the ACME server.", "call_func_name": ["org.shredzone.acme4j.Session.getServerUri", "org.shredzone.acme4j.provider.AcmeProvider.connect"], "call_func_parameter": [[""], ["java.net.URI"]], "passed_comments": [{"org.shredzone.acme4j.Session.getServerUri": "Gets the ACME server  {@link URI} of this session."}, {"org.shredzone.acme4j.provider.AcmeProvider.connect": "Creates a  {@link Connection} for communication with the ACME server."}]}, {"index": "182", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Session.java", "methodName": "org.shredzone.acme4j.Session.resourceUrl", "methodParameterType": "Resource#", "methodParameterName": "resource#", "methodBody": "public URL resourceUrl(Resource resource) throws AcmeException {\n        readDirectory();\n        URL result = resourceMap.get().get(Objects.requireNonNull(resource, \"resource\"));\n        if (result == null) {\n            throw new AcmeException(\"Server does not offer \" + resource.path());\n        }\n        return result;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the  {@link URL} of the given {@link Resource}. This may involve connecting to the server and getting a directory. The result is cached.", "call_func_name": ["org.shredzone.acme4j.Session.readDirectory", "java.util.concurrent.atomic.AtomicReference.get", "java.util.Objects.requireNonNull", "java.util.Map.get", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.shredzone.acme4j.connector.Resource.path", "java.lang.StringBuilder.toString", "org.shredzone.acme4j.exception.AcmeException.<init>"], "call_func_parameter": [[""], [""], ["java.lang.Object", "java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], [""], [""], ["java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.Session.readDirectory": "Reads the provider's directory, then rebuild the resource map. The response is cached."}]}, {"index": "183", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Session.java", "methodName": "org.shredzone.acme4j.Session.getMetadata", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Metadata getMetadata() throws AcmeException {\n        readDirectory();\n        return metadata.get();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the metadata of the provider's directory. This may involve connecting to the server and getting a directory. The result is cached.", "call_func_name": ["org.shredzone.acme4j.Session.readDirectory", "java.util.concurrent.atomic.AtomicReference.get"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.shredzone.acme4j.Session.readDirectory": "Reads the provider's directory, then rebuild the resource map. The response is cached."}]}, {"index": "184", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Session.java", "methodName": "org.shredzone.acme4j.Session.readDirectory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void readDirectory() throws AcmeException {\n        synchronized (this) {\n            Instant now = Instant.now();\n            if (directoryCacheExpiry != null && directoryCacheExpiry.isAfter(now)) {\n                return;\n            }\n            directoryCacheExpiry = now.plus(Duration.ofHours(1));\n        }\n\n        JSON directoryJson = provider().directory(this, getServerUri());\n\n        Value meta = directoryJson.get(\"meta\");\n        if (meta.isPresent()) {\n            metadata.set(new Metadata(meta.asObject()));\n        } else {\n            metadata.set(new Metadata(JSON.empty()));\n        }\n\n        Map<Resource, URL> map = new EnumMap<>(Resource.class);\n        for (Resource res : Resource.values()) {\n            directoryJson.get(res.path())\n                    .map(Value::asURL)\n                    .ifPresent(url -> map.put(res, url));\n        }\n\n        resourceMap.set(map);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SynchronizedStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#TypeLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(SynchronizedStatement(ThisExpression)ThisExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)SynchronizedStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ThisExpression)ThisExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Reads the provider's directory, then rebuild the resource map. The response is cached.", "call_func_name": ["java.time.Instant.now", "java.time.Instant.isAfter", "java.time.Duration.ofHours", "java.time.Instant.plus", "org.shredzone.acme4j.Session.provider", "org.shredzone.acme4j.Session.getServerUri", "org.shredzone.acme4j.provider.AcmeProvider.directory", "org.shredzone.acme4j.toolbox.JSON.get", "org.shredzone.acme4j.Metadata.<init>", "java.util.concurrent.atomic.AtomicReference.set", "org.shredzone.acme4j.toolbox.JSON.empty", "java.util.EnumMap.<init>", "org.shredzone.acme4j.connector.Resource.values", "org.shredzone.acme4j.connector.Resource.path", "java.util.function.Function.apply", "java.util.function.Consumer.accept", "java.util.Optional.ifPresent"], "call_func_parameter": [[""], ["java.time.Instant"], ["long"], ["java.time.temporal.TemporalAmount"], [""], [""], ["org.shredzone.acme4j.Session", "java.net.URI"], ["java.lang.String"], ["org.shredzone.acme4j.toolbox.JSON"], ["java.lang.Object"], [""], ["java.lang.Class"], [""], [""], [""], ["java.util.Map", "org.shredzone.acme4j.connector.Resource"], ["java.util.function.Consumer"]], "passed_comments": [{"org.shredzone.acme4j.Session.provider": "Returns the  {@link AcmeProvider} that is used for this session."}, {"org.shredzone.acme4j.Session.getServerUri": "Gets the ACME server  {@link URI} of this session."}, {"org.shredzone.acme4j.provider.AcmeProvider.directory": "Returns the provider's directory. The structure must contain resource URLs, and may optionally contain metadata. <p> The default implementation resolves the server URI and fetches the directory via HTTP request. Subclasses may override this method, e.g. if the directory is static."}, {"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}, {"org.shredzone.acme4j.toolbox.JSON.empty": "Returns a  {@link JSON} of an empty document."}]}, {"index": "185", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Account.java", "methodName": "org.shredzone.acme4j.Account.getTermsOfServiceAgreed", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public Boolean getTermsOfServiceAgreed() {\n        return getJSON().get(KEY_TOS_AGREED).map(Value::asBoolean).orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns if the user agreed to the terms of service.", "call_func_name": ["org.shredzone.acme4j.Account.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.Optional.orElse"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "186", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Account.java", "methodName": "org.shredzone.acme4j.Account.getContacts", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<URI> getContacts() {\n        return Collections.unmodifiableList(getJSON().get(KEY_CONTACT)\n                    .asArray()\n                    .stream()\n                    .map(JSON.Value::asURI)\n                    .collect(toList()));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "List of contact addresses (emails, phone numbers etc).", "call_func_name": ["org.shredzone.acme4j.Account.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect", "java.util.Collections.unmodifiableList"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.util.function.Function"], [""], ["java.util.stream.Collector"], ["java.util.List"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "187", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Account.java", "methodName": "org.shredzone.acme4j.Account.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Status getStatus() {\n        return getJSON().get(KEY_STATUS).asStatus();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the current status of the account. <p> Possible values are:  {@link Status#VALID},  {@link Status#DEACTIVATED}, {@link Status#REVOKED}.", "call_func_name": ["org.shredzone.acme4j.Account.getJSON", "org.shredzone.acme4j.toolbox.JSON.get"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "188", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Account.java", "methodName": "org.shredzone.acme4j.Account.hasExternalAccountBinding", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean hasExternalAccountBinding() {\n        return getJSON().contains(KEY_EXTERNAL_ACCOUNT_BINDING);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns  {@code true} if the account is bound to an external non-ACME account.", "call_func_name": ["org.shredzone.acme4j.Account.getJSON", "org.shredzone.acme4j.toolbox.JSON.contains"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.contains": "Checks if this object contains the given key."}]}, {"index": "189", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Account.java", "methodName": "org.shredzone.acme4j.Account.getKeyIdentifier", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public String getKeyIdentifier() {\n        return getJSON().get(KEY_EXTERNAL_ACCOUNT_BINDING)\n                .optional().map(Value::asObject)\n                .map(j -> j.get(\"protected\")).map(Value::asEncodedObject)\n                .map(j -> j.get(\"kid\")).map(Value::asString)\n                .orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#StringLiteral#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#StringLiteral#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the key identifier of the external non-ACME account. If this account is not bound to an external account,  {@code null} is returned instead.", "call_func_name": ["org.shredzone.acme4j.Account.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.Optional.map", "java.util.Optional.orElse"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.util.function.Function"], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "190", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Account.java", "methodName": "org.shredzone.acme4j.Account.getOrders", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Iterator<Order> getOrders() {\n        URL ordersUrl = getJSON().get(KEY_ORDERS).asURL();\n        return new ResourceIterator<>(getLogin(), KEY_ORDERS, ordersUrl, Login::bindOrder);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an  {@link Iterator} of all {@link Order} belonging to this {@link Account}. <p> Using the iterator will initiate one or more requests to the ACME server.", "call_func_name": ["org.shredzone.acme4j.Account.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "org.shredzone.acme4j.Account.getLogin", "java.util.function.BiFunction.apply", "org.shredzone.acme4j.connector.ResourceIterator.<init>"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["org.shredzone.acme4j.Login", "java.lang.String", "java.net.URL", "java.util.function.BiFunction"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "191", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Account.java", "methodName": "org.shredzone.acme4j.Account.newOrder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public OrderBuilder newOrder() {\n        return new OrderBuilder(getLogin());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a builder for a new  {@link Order}.", "call_func_name": ["org.shredzone.acme4j.Account.getLogin", "org.shredzone.acme4j.OrderBuilder.<init>"], "call_func_parameter": [[""], ["org.shredzone.acme4j.Login"]], "passed_comments": "/"}, {"index": "192", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Account.java", "methodName": "org.shredzone.acme4j.Account.preAuthorizeDomain", "methodParameterType": "String#", "methodParameterName": "domain#", "methodBody": "public Authorization preAuthorizeDomain(String domain) throws AcmeException {\n        Objects.requireNonNull(domain, \"domain\");\n        if (domain.isEmpty()) {\n            throw new IllegalArgumentException(\"domain must not be empty\");\n        }\n        return preAuthorize(Identifier.dns(domain));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Pre-authorizes a domain. The CA will check if it accepts the domain for certification, and returns the necessary challenges. <p> Some servers may not allow pre-authorization. <p> It is not possible to pre-authorize wildcard domains.", "call_func_name": ["java.util.Objects.requireNonNull", "java.lang.String.isEmpty", "java.lang.IllegalArgumentException.<init>", "org.shredzone.acme4j.Identifier.dns", "org.shredzone.acme4j.Account.preAuthorize"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["org.shredzone.acme4j.Identifier"]], "passed_comments": [{"org.shredzone.acme4j.Identifier.dns": "Creates a new DNS identifier for the given domain name."}, {"org.shredzone.acme4j.Account.preAuthorize": "Pre-authorizes an  {@link Identifier}. The CA will check if it accepts the identifier for certification, and returns the necessary challenges. <p> Some servers may not allow pre-authorization. <p> It is not possible to pre-authorize wildcard domains."}]}, {"index": "193", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Account.java", "methodName": "org.shredzone.acme4j.Account.preAuthorize", "methodParameterType": "Identifier#", "methodParameterName": "identifier#", "methodBody": "public Authorization preAuthorize(Identifier identifier) throws AcmeException {\n        Objects.requireNonNull(identifier, \"identifier\");\n\n        URL newAuthzUrl = getSession().resourceUrl(Resource.NEW_AUTHZ);\n\n        LOG.debug(\"preAuthorize {}\", identifier);\n        try (Connection conn = getSession().connect()) {\n            JSONBuilder claims = new JSONBuilder();\n            claims.put(\"identifier\", identifier.toMap());\n\n            conn.sendSignedRequest(newAuthzUrl, claims, getLogin());\n\n            URL authLocation = conn.getLocation();\n            if (authLocation == null) {\n                throw new AcmeProtocolException(\"Server did not provide an authorization location\");\n            }\n\n            Authorization auth = getLogin().bindAuthorization(authLocation);\n            auth.setJSON(conn.readJsonResponse());\n            return auth;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Pre-authorizes an  {@link Identifier}. The CA will check if it accepts the identifier for certification, and returns the necessary challenges. <p> Some servers may not allow pre-authorization. <p> It is not possible to pre-authorize wildcard domains.", "call_func_name": ["java.util.Objects.requireNonNull", "org.shredzone.acme4j.Account.getSession", "org.shredzone.acme4j.Session.resourceUrl", "org.slf4j.Logger.debug", "org.shredzone.acme4j.Session.connect", "org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "org.shredzone.acme4j.Identifier.toMap", "org.shredzone.acme4j.toolbox.JSONBuilder.put", "org.shredzone.acme4j.Account.getLogin", "org.shredzone.acme4j.connector.Connection.sendSignedRequest", "org.shredzone.acme4j.connector.Connection.getLocation", "org.shredzone.acme4j.exception.AcmeProtocolException.<init>", "org.shredzone.acme4j.Login.bindAuthorization", "org.shredzone.acme4j.connector.Connection.readJsonResponse", "org.shredzone.acme4j.Authorization.setJSON", "org.shredzone.acme4j.connector.Connection.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], [""], ["org.shredzone.acme4j.connector.Resource"], ["java.lang.String", "java.lang.Object"], [""], [""], [""], ["java.lang.String", "java.lang.Object"], [""], ["java.net.URL", "org.shredzone.acme4j.toolbox.JSONBuilder", "org.shredzone.acme4j.Login"], [""], ["java.lang.String"], ["java.net.URL"], [""], ["org.shredzone.acme4j.toolbox.JSON"], [""], ["java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.Session.resourceUrl": "Gets the  {@link URL} of the given {@link Resource}. This may involve connecting to the server and getting a directory. The result is cached."}, {"org.shredzone.acme4j.Session.connect": "Returns a new  {@link Connection} to the ACME server."}, {"org.shredzone.acme4j.Identifier.toMap": "Returns the identifier as JSON map."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}, {"org.shredzone.acme4j.connector.Connection.sendSignedRequest": "Sends a signed POST request. Requires a  {@link Login} for the session and{@link KeyPair}. The  {@link Login} account location is sent in a \"kid\" protectedheader. <p> If the server does not return a 200 class status code, an  {@link AcmeException} israised matching the error."}, {"org.shredzone.acme4j.connector.Connection.getLocation": "Gets a location from the  {@code Location} header.<p> Relative links are resolved against the last request's URL."}, {"org.shredzone.acme4j.Login.bindAuthorization": "Creates a new instance of  {@link Authorization} and binds it to this login."}, {"org.shredzone.acme4j.connector.Connection.readJsonResponse": "Reads a server response as JSON data."}, {"org.shredzone.acme4j.connector.Connection.close": "Closes the  {@link Connection}, releasing all resources."}]}, {"index": "194", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Account.java", "methodName": "org.shredzone.acme4j.Account.changeKey", "methodParameterType": "KeyPair#", "methodParameterName": "newKeyPair#", "methodBody": "public void changeKey(KeyPair newKeyPair) throws AcmeException {\n        Objects.requireNonNull(newKeyPair, \"newKeyPair\");\n        if (Arrays.equals(getLogin().getKeyPair().getPrivate().getEncoded(),\n                        newKeyPair.getPrivate().getEncoded())) {\n            throw new IllegalArgumentException(\"newKeyPair must actually be a new key pair\");\n        }\n\n        LOG.debug(\"key-change\");\n\n        try (Connection conn = getSession().connect()) {\n            URL keyChangeUrl = getSession().resourceUrl(Resource.KEY_CHANGE);\n\n            JSONBuilder payloadClaim = new JSONBuilder();\n            payloadClaim.put(\"account\", getLocation());\n            payloadClaim.putKey(\"oldKey\", getLogin().getKeyPair().getPublic());\n\n            JSONBuilder jose = JoseUtils.createJoseRequest(keyChangeUrl, newKeyPair,\n                    payloadClaim, null, null);\n\n            conn.sendSignedRequest(keyChangeUrl, jose, getLogin());\n\n            getLogin().setKeyPair(newKeyPair);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Changes the  {@link KeyPair} associated with the account.<p> After a successful call, the new key pair is used in the bound  {@link Session}, and the old key pair can be disposed of.", "call_func_name": ["java.util.Objects.requireNonNull", "org.shredzone.acme4j.Account.getLogin", "org.shredzone.acme4j.Login.getKeyPair", "java.security.KeyPair.getPrivate", "java.security.PrivateKey.getEncoded", "java.util.Arrays.equals", "java.lang.IllegalArgumentException.<init>", "org.slf4j.Logger.debug", "org.shredzone.acme4j.Account.getSession", "org.shredzone.acme4j.Session.connect", "org.shredzone.acme4j.Session.resourceUrl", "org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "org.shredzone.acme4j.Account.getLocation", "org.shredzone.acme4j.toolbox.JSONBuilder.put", "java.security.KeyPair.getPublic", "org.shredzone.acme4j.toolbox.JSONBuilder.putKey", "org.shredzone.acme4j.toolbox.JoseUtils.createJoseRequest", "org.shredzone.acme4j.connector.Connection.sendSignedRequest", "org.shredzone.acme4j.Login.setKeyPair", "org.shredzone.acme4j.connector.Connection.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], [""], [""], [""], [""], ["byte[]", "byte[]"], ["java.lang.String"], ["java.lang.String"], [""], [""], ["org.shredzone.acme4j.connector.Resource"], [""], [""], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String", "java.security.PublicKey"], ["java.net.URL", "java.security.KeyPair", "org.shredzone.acme4j.toolbox.JSONBuilder", "java.lang.String", "java.lang.String"], ["java.net.URL", "org.shredzone.acme4j.toolbox.JSONBuilder", "org.shredzone.acme4j.Login"], ["java.security.KeyPair"], [""], ["java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.Login.getKeyPair": "Gets the  {@link KeyPair} of the ACME account."}, {"org.shredzone.acme4j.Session.connect": "Returns a new  {@link Connection} to the ACME server."}, {"org.shredzone.acme4j.Session.resourceUrl": "Gets the  {@link URL} of the given {@link Resource}. This may involve connecting to the server and getting a directory. The result is cached."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.putKey": "Puts a  {@link Key} into the claim. The key is serializied as JWK."}, {"org.shredzone.acme4j.toolbox.JoseUtils.createJoseRequest": "Creates an ACME JOSE request."}, {"org.shredzone.acme4j.connector.Connection.sendSignedRequest": "Sends a signed POST request. Requires a  {@link Login} for the session and{@link KeyPair}. The  {@link Login} account location is sent in a \"kid\" protectedheader. <p> If the server does not return a 200 class status code, an  {@link AcmeException} israised matching the error."}, {"org.shredzone.acme4j.Login.setKeyPair": "Sets a different  {@link KeyPair}."}, {"org.shredzone.acme4j.connector.Connection.close": "Closes the  {@link Connection}, releasing all resources."}]}, {"index": "195", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Account.java", "methodName": "org.shredzone.acme4j.Account.deactivate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void deactivate() throws AcmeException {\n        LOG.debug(\"deactivate\");\n        try (Connection conn = getSession().connect()) {\n            JSONBuilder claims = new JSONBuilder();\n            claims.put(KEY_STATUS, \"deactivated\");\n\n            conn.sendSignedRequest(getLocation(), claims, getLogin());\n            setJSON(conn.readJsonResponse());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Permanently deactivates an account. Related certificates may still be valid after account deactivation, and need to be revoked separately if neccessary. <p> A deactivated account cannot be reactivated!", "call_func_name": ["org.slf4j.Logger.debug", "org.shredzone.acme4j.Account.getSession", "org.shredzone.acme4j.Session.connect", "org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "org.shredzone.acme4j.toolbox.JSONBuilder.put", "org.shredzone.acme4j.Account.getLocation", "org.shredzone.acme4j.Account.getLogin", "org.shredzone.acme4j.connector.Connection.sendSignedRequest", "org.shredzone.acme4j.connector.Connection.readJsonResponse", "org.shredzone.acme4j.Account.setJSON", "org.shredzone.acme4j.connector.Connection.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], ["java.lang.String", "java.lang.Object"], [""], [""], ["java.net.URL", "org.shredzone.acme4j.toolbox.JSONBuilder", "org.shredzone.acme4j.Login"], [""], ["org.shredzone.acme4j.toolbox.JSON"], [""], ["java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.Session.connect": "Returns a new  {@link Connection} to the ACME server."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}, {"org.shredzone.acme4j.connector.Connection.sendSignedRequest": "Sends a signed POST request. Requires a  {@link Login} for the session and{@link KeyPair}. The  {@link Login} account location is sent in a \"kid\" protectedheader. <p> If the server does not return a 200 class status code, an  {@link AcmeException} israised matching the error."}, {"org.shredzone.acme4j.connector.Connection.readJsonResponse": "Reads a server response as JSON data."}, {"org.shredzone.acme4j.connector.Connection.close": "Closes the  {@link Connection}, releasing all resources."}]}, {"index": "196", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Account.java", "methodName": "org.shredzone.acme4j.Account.modify", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public EditableAccount modify() {\n        return new EditableAccount();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Modifies the account data of the account.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "197", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Order.java", "methodName": "org.shredzone.acme4j.Order.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Status getStatus() {\n        return getJSON().get(\"status\").asStatus();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the current status of the order. <p> Possible values are:  {@link Status#PENDING},  {@link Status#READY}, {@link Status#PROCESSING},  {@link Status#VALID},  {@link Status#INVALID}.", "call_func_name": ["org.shredzone.acme4j.Order.getJSON", "org.shredzone.acme4j.toolbox.JSON.get"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "198", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Order.java", "methodName": "org.shredzone.acme4j.Order.getError", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public Problem getError() {\n        return getJSON().get(\"error\").map(v -> v.asProblem(getLocation())).orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a  {@link Problem} document if the order failed.", "call_func_name": ["org.shredzone.acme4j.Order.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.Optional.orElse"], "call_func_parameter": [[""], ["java.lang.String"], ["org.shredzone.acme4j.Order"], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "199", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Order.java", "methodName": "org.shredzone.acme4j.Order.getExpires", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public Instant getExpires() {\n        return getJSON().get(\"expires\").map(Value::asInstant).orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the expiry date of the authorization, if set by the server.", "call_func_name": ["org.shredzone.acme4j.Order.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.Optional.orElse"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "200", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Order.java", "methodName": "org.shredzone.acme4j.Order.getIdentifiers", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<Identifier> getIdentifiers() {\n        return Collections.unmodifiableList(getJSON().get(\"identifiers\")\n                    .asArray()\n                    .stream()\n                    .map(Value::asIdentifier)\n                    .collect(toList()));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the list of  {@link Identifier} to be ordered.", "call_func_name": ["org.shredzone.acme4j.Order.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect", "java.util.Collections.unmodifiableList"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.util.function.Function"], [""], ["java.util.stream.Collector"], ["java.util.List"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "201", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Order.java", "methodName": "org.shredzone.acme4j.Order.getNotBefore", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public Instant getNotBefore() {\n        return getJSON().get(\"notBefore\").map(Value::asInstant).orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the \"not before\" date that was used for the order, or  {@code null}.", "call_func_name": ["org.shredzone.acme4j.Order.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.Optional.orElse"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "202", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Order.java", "methodName": "org.shredzone.acme4j.Order.getNotAfter", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public Instant getNotAfter() {\n        return getJSON().get(\"notAfter\").map(Value::asInstant).orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the \"not after\" date that was used for the order, or  {@code null}.", "call_func_name": ["org.shredzone.acme4j.Order.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.Optional.orElse"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "203", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Order.java", "methodName": "org.shredzone.acme4j.Order.getAuthorizations", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<Authorization> getAuthorizations() {\n        Login login = getLogin();\n        return Collections.unmodifiableList(getJSON().get(\"authorizations\")\n                    .asArray()\n                    .stream()\n                    .map(Value::asURL)\n                    .map(login::bindAuthorization)\n                    .collect(toList()));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the  {@link Authorization} required for this order, in no specific order.", "call_func_name": ["org.shredzone.acme4j.Order.getLogin", "org.shredzone.acme4j.Order.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.lang.Object.getClass", "java.util.function.Function.apply", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect", "java.util.Collections.unmodifiableList"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["java.util.function.Function"], [""], ["org.shredzone.acme4j.Login"], [""], ["java.util.stream.Collector"], ["java.util.List"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "204", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Order.java", "methodName": "org.shredzone.acme4j.Order.getFinalizeLocation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public URL getFinalizeLocation() {\n        return getJSON().get(\"finalize\").asURL();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the location  {@link URL} of where to send the finalization call to.<p> For internal purposes. Use  {@link #execute(byte[])} to finalize an order.", "call_func_name": ["org.shredzone.acme4j.Order.getJSON", "org.shredzone.acme4j.toolbox.JSON.get"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "205", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Order.java", "methodName": "org.shredzone.acme4j.Order.getCertificate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public Certificate getCertificate() {\n        return getJSON().get(\"certificate\")\n                    .map(Value::asURL)\n                    .map(getLogin()::bindCertificate)\n                    .orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the  {@link Certificate} if it is available. {@code null} otherwise.", "call_func_name": ["org.shredzone.acme4j.Order.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "org.shredzone.acme4j.Order.getLogin", "java.lang.Object.getClass", "java.util.function.Function.apply", "java.util.Optional.map", "java.util.Optional.orElse"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], [""], ["org.shredzone.acme4j.Login"], ["java.util.function.Function"], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "206", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Order.java", "methodName": "org.shredzone.acme4j.Order.getStarCertificate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public Certificate getStarCertificate() {\n        return getJSON().get(\"star-certificate\")\n                    .map(Value::asURL)\n                    .map(getLogin()::bindCertificate)\n                    .orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the STAR extension's  {@link Certificate} if it is available. {@code null}otherwise.", "call_func_name": ["org.shredzone.acme4j.Order.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "org.shredzone.acme4j.Order.getLogin", "java.lang.Object.getClass", "java.util.function.Function.apply", "java.util.Optional.map", "java.util.Optional.orElse"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], [""], ["org.shredzone.acme4j.Login"], ["java.util.function.Function"], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "207", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Order.java", "methodName": "org.shredzone.acme4j.Order.execute", "methodParameterType": "byte[]#", "methodParameterName": "csr#", "methodBody": "public void execute(byte[] csr) throws AcmeException {\n        LOG.debug(\"finalize\");\n        try (Connection conn = getSession().connect()) {\n            JSONBuilder claims = new JSONBuilder();\n            claims.putBase64(\"csr\", csr);\n\n            conn.sendSignedRequest(getFinalizeLocation(), claims, getLogin());\n        }\n        invalidate();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#TryStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Finalizes the order, by providing a CSR. <p> After a successful finalization, the certificate is available at {@link #getCertificate()}. <p> Even though the ACME protocol uses the term \"finalize an order\", this method is called  {@link #execute(byte[])} to avoid confusion with the general{@link Object#finalize()} method.", "call_func_name": ["org.slf4j.Logger.debug", "org.shredzone.acme4j.Order.getSession", "org.shredzone.acme4j.Session.connect", "org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "org.shredzone.acme4j.toolbox.JSONBuilder.putBase64", "org.shredzone.acme4j.Order.getFinalizeLocation", "org.shredzone.acme4j.Order.getLogin", "org.shredzone.acme4j.connector.Connection.sendSignedRequest", "org.shredzone.acme4j.connector.Connection.close", "java.lang.Throwable.addSuppressed", "org.shredzone.acme4j.Order.invalidate"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], ["java.lang.String", "byte[]"], [""], [""], ["java.net.URL", "org.shredzone.acme4j.toolbox.JSONBuilder", "org.shredzone.acme4j.Login"], [""], ["java.lang.Throwable"], [""]], "passed_comments": [{"org.shredzone.acme4j.Session.connect": "Returns a new  {@link Connection} to the ACME server."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.putBase64": "Puts binary data to the JSON. The data is base64 url encoded."}, {"org.shredzone.acme4j.Order.getFinalizeLocation": "Gets the location  {@link URL} of where to send the finalization call to.<p> For internal purposes. Use  {@link #execute(byte[])} to finalize an order."}, {"org.shredzone.acme4j.connector.Connection.sendSignedRequest": "Sends a signed POST request. Requires a  {@link Login} for the session and{@link KeyPair}. The  {@link Login} account location is sent in a \"kid\" protectedheader. <p> If the server does not return a 200 class status code, an  {@link AcmeException} israised matching the error."}, {"org.shredzone.acme4j.connector.Connection.close": "Closes the  {@link Connection}, releasing all resources."}]}, {"index": "208", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Order.java", "methodName": "org.shredzone.acme4j.Order.isRecurrent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isRecurrent() {\n        return getJSON().get(\"recurrent\")\n                    .optional()\n                    .map(Value::asBoolean)\n                    .orElse(false);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if this order is recurrent, according to the ACME STAR specifications.", "call_func_name": ["org.shredzone.acme4j.Order.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.Optional.map", "java.lang.Boolean.valueOf", "java.util.Optional.orElse", "java.lang.Boolean.booleanValue"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.util.function.Function"], ["boolean"], ["java.lang.Object"], [""]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "209", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Order.java", "methodName": "org.shredzone.acme4j.Order.getRecurrentStart", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public Instant getRecurrentStart() {\n        return getJSON().get(\"recurrent-start-date\")\n                    .optional()\n                    .map(Value::asInstant)\n                    .orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the earliest date of validity of the first certificate issued, or {@code null}.", "call_func_name": ["org.shredzone.acme4j.Order.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.Optional.map", "java.util.Optional.orElse"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.util.function.Function"], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "210", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Order.java", "methodName": "org.shredzone.acme4j.Order.getRecurrentEnd", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public Instant getRecurrentEnd() {\n        return getJSON().get(\"recurrent-end-date\")\n                    .optional()\n                    .map(Value::asInstant)\n                    .orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the latest date of validity of the last certificate issued, or {@code null}.", "call_func_name": ["org.shredzone.acme4j.Order.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.Optional.map", "java.util.Optional.orElse"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.util.function.Function"], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "211", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Order.java", "methodName": "org.shredzone.acme4j.Order.getRecurrentCertificateValidity", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public Duration getRecurrentCertificateValidity() {\n        return getJSON().get(\"recurrent-certificate-validity\")\n                    .optional()\n                    .map(Value::asDuration)\n                    .orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the maximum validity period of each certificate, or  {@code null}.", "call_func_name": ["org.shredzone.acme4j.Order.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.Optional.map", "java.util.Optional.orElse"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.util.function.Function"], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "212", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Order.java", "methodName": "org.shredzone.acme4j.Order.getRecurrentCertificatePredate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public Duration getRecurrentCertificatePredate() {\n        return getJSON().get(\"recurrent-certificate-predate\")\n                .optional()\n                .map(Value::asDuration)\n                .orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the predate period of each certificate, or  {@code null}.", "call_func_name": ["org.shredzone.acme4j.Order.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.Optional.map", "java.util.Optional.orElse"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.util.function.Function"], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "213", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Order.java", "methodName": "org.shredzone.acme4j.Order.isRecurrentGetEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isRecurrentGetEnabled() {\n        return getJSON().get(\"recurrent-certificate-get\")\n                    .optional()\n                    .map(Value::asBoolean)\n                    .orElse(false);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns  {@code true} if STAR certificates from this order can also be fetched viaGET requests.", "call_func_name": ["org.shredzone.acme4j.Order.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.Optional.map", "java.lang.Boolean.valueOf", "java.util.Optional.orElse", "java.lang.Boolean.booleanValue"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.util.function.Function"], ["boolean"], ["java.lang.Object"], [""]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "214", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Order.java", "methodName": "org.shredzone.acme4j.Order.cancelRecurrent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void cancelRecurrent() throws AcmeException {\n        if (!getSession().getMetadata().isStarEnabled()) {\n            throw new AcmeException(\"CA does not support short-term automatic renewals\");\n        }\n\n        LOG.debug(\"cancel\");\n        try (Connection conn = getSession().connect()) {\n            JSONBuilder claims = new JSONBuilder();\n            claims.put(\"status\", \"canceled\");\n\n            conn.sendSignedRequest(getLocation(), claims, getLogin());\n            setJSON(conn.readJsonResponse());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Cancels a recurrent order.", "call_func_name": ["org.shredzone.acme4j.Order.getSession", "org.shredzone.acme4j.Session.getMetadata", "org.shredzone.acme4j.Metadata.isStarEnabled", "org.shredzone.acme4j.exception.AcmeException.<init>", "org.slf4j.Logger.debug", "org.shredzone.acme4j.Session.connect", "org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "org.shredzone.acme4j.toolbox.JSONBuilder.put", "org.shredzone.acme4j.Order.getLocation", "org.shredzone.acme4j.Order.getLogin", "org.shredzone.acme4j.connector.Connection.sendSignedRequest", "org.shredzone.acme4j.connector.Connection.readJsonResponse", "org.shredzone.acme4j.Order.setJSON", "org.shredzone.acme4j.connector.Connection.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.Object"], [""], [""], ["java.net.URL", "org.shredzone.acme4j.toolbox.JSONBuilder", "org.shredzone.acme4j.Login"], [""], ["org.shredzone.acme4j.toolbox.JSON"], [""], ["java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.Session.getMetadata": "Gets the metadata of the provider's directory. This may involve connecting to the server and getting a directory. The result is cached."}, {"org.shredzone.acme4j.Metadata.isStarEnabled": "Returns whether the CA supports short-term auto renewal of certificates."}, {"org.shredzone.acme4j.Session.connect": "Returns a new  {@link Connection} to the ACME server."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}, {"org.shredzone.acme4j.connector.Connection.sendSignedRequest": "Sends a signed POST request. Requires a  {@link Login} for the session and{@link KeyPair}. The  {@link Login} account location is sent in a \"kid\" protectedheader. <p> If the server does not return a 200 class status code, an  {@link AcmeException} israised matching the error."}, {"org.shredzone.acme4j.connector.Connection.readJsonResponse": "Reads a server response as JSON data."}, {"org.shredzone.acme4j.connector.Connection.close": "Closes the  {@link Connection}, releasing all resources."}]}, {"index": "215", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Problem.java", "methodName": "org.shredzone.acme4j.Problem.Problem", "methodParameterType": "JSON#URL#", "methodParameterName": "problem#baseUrl#", "methodBody": "public Problem(JSON problem, URL baseUrl) {\n        this.problemJson = problem;\n        this.baseUrl = baseUrl;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link Problem} object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "216", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Problem.java", "methodName": "org.shredzone.acme4j.Problem.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public URI getType() {\n        return problemJson.get(\"type\")\n                    .map(Value::asString)\n                    .map(it -> {\n                        try {\n                            return baseUrl.toURI().resolve(it);\n                        } catch (URISyntaxException ex) {\n                            throw new IllegalArgumentException(\"Bad base URL\", ex);\n                        }\n                    })\n                    .orElseThrow(() -> new AcmeProtocolException(\"Problem without type\"));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(TryStatement(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the problem type. It is always an absolute URI.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.function.Function.apply", "java.util.Optional.map", "java.util.function.Supplier.get", "java.util.Optional.orElseThrow"], "call_func_parameter": [["java.lang.String"], [""], ["org.shredzone.acme4j.Problem"], ["java.util.function.Function"], [""], ["java.util.function.Supplier"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "217", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Problem.java", "methodName": "org.shredzone.acme4j.Problem.getTitle", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public String getTitle() {\n        return problemJson.get(\"title\").map(Value::asString).orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a short, human-readable summary of the problem. The text may be localized if supported by the server.  {@code null} if the server did not provide a title.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.Optional.orElse"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "218", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Problem.java", "methodName": "org.shredzone.acme4j.Problem.getDetail", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public String getDetail() {\n        return problemJson.get(\"detail\").map(Value::asString).orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a detailed and specific human-readable explanation of the problem. The text may be localized if supported by the server.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.Optional.orElse"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "219", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Problem.java", "methodName": "org.shredzone.acme4j.Problem.getInstance", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public URI getInstance() {\n        return problemJson.get(\"instance\")\n                        .map(Value::asString)\n                        .map(it ->  {\n                            try {\n                                return baseUrl.toURI().resolve(it);\n                            } catch (URISyntaxException ex) {\n                                throw new IllegalArgumentException(\"Bad base URL\", ex);\n                            }\n                        })\n                        .orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#LambdaExpression#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(TryStatement(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an URI that identifies the specific occurence of the problem. It is always an absolute URI.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.function.Function.apply", "java.util.Optional.map", "java.util.Optional.orElse"], "call_func_parameter": [["java.lang.String"], [""], ["org.shredzone.acme4j.Problem"], ["java.util.function.Function"], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "220", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Problem.java", "methodName": "org.shredzone.acme4j.Problem.getIdentifier", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public Identifier getIdentifier() {\n        return problemJson.get(\"identifier\")\n                        .optional()\n                        .map(Value::asIdentifier)\n                        .orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the  {@link Identifier} this problem relates to. May be {@code null}.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.Optional.map", "java.util.Optional.orElse"], "call_func_parameter": [["java.lang.String"], [""], ["java.util.function.Function"], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "221", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Problem.java", "methodName": "org.shredzone.acme4j.Problem.getSubProblems", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<Problem> getSubProblems() {\n        return unmodifiableList(\n                problemJson.get(\"subproblems\")\n                        .asArray()\n                        .stream()\n                        .map(o -> o.asProblem(baseUrl))\n                        .collect(toList())\n        );\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a list of sub-problems. May be empty, but is never  {@code null}.", "call_func_name": ["org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect", "java.util.Collections.unmodifiableList"], "call_func_parameter": [["java.lang.String"], ["org.shredzone.acme4j.Problem"], ["java.util.function.Function"], [""], ["java.util.stream.Collector"], ["java.util.List"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "222", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Problem.java", "methodName": "org.shredzone.acme4j.Problem.asJSON", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public JSON asJSON() {\n        return problemJson;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the problem as  {@link JSON} object, to access other fields.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "223", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Problem.java", "methodName": "org.shredzone.acme4j.Problem.toString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n\n        if (getDetail() != null) {\n            sb.append(getDetail());\n        } else if (getTitle() != null) {\n            sb.append(getTitle());\n        } else {\n            sb.append(getType());\n        }\n\n        List<Problem> subproblems = getSubProblems();\n\n        if (!subproblems.isEmpty()) {\n            sb.append(\" (\");\n            boolean first = true;\n            for (Problem sub : subproblems) {\n                if (!first) {\n                    sb.append(\" \u2012 \");\n                }\n                sb.append(sub.toString());\n                first = false;\n            }\n            sb.append(')');\n        }\n\n        return sb.toString();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a human-readable description of the problem, that is as specific as possible. The description may be localized if supported by the server. <p> If  {@link #getSubProblems()} exist, they will be appended.<p> Technically, it returns  {@link #getDetail()}. If not set,  {@link #getTitle()} isreturned instead. As a last resort,  {@link #getType()} is returned.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "224", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeLazyLoadingException.java", "methodName": "org.shredzone.acme4j.exception.AcmeLazyLoadingException.AcmeLazyLoadingException", "methodParameterType": "AcmeResource#AcmeException#", "methodParameterName": "resource#cause#", "methodBody": "public AcmeLazyLoadingException(AcmeResource resource, AcmeException cause) {\n        this(requireNonNull(resource).getClass(), requireNonNull(resource).getLocation(), cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link AcmeLazyLoadingException}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "225", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeLazyLoadingException.java", "methodName": "org.shredzone.acme4j.exception.AcmeLazyLoadingException.AcmeLazyLoadingException", "methodParameterType": "Class<? extends AcmeResource>#URL#AcmeException#", "methodParameterName": "type#location#cause#", "methodBody": "public AcmeLazyLoadingException(Class<? extends AcmeResource> type, URL location, AcmeException cause) {\n        super(requireNonNull(type).getSimpleName() + \" \" + requireNonNull(location), requireNonNull(cause));\n        this.type = type;\n        this.location = location;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link AcmeLazyLoadingException}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "226", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeLazyLoadingException.java", "methodName": "org.shredzone.acme4j.exception.AcmeLazyLoadingException.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class<? extends AcmeResource> getType() {\n        return type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the  {@link AcmeResource} type of the resource that could not be loaded.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "227", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeLazyLoadingException.java", "methodName": "org.shredzone.acme4j.exception.AcmeLazyLoadingException.getLocation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public URL getLocation() {\n        return location;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the location of the resource that could not be loaded.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "228", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeServerException.java", "methodName": "org.shredzone.acme4j.exception.AcmeServerException.AcmeServerException", "methodParameterType": "Problem#", "methodParameterName": "problem#", "methodBody": "public AcmeServerException(Problem problem) {\n        super(Objects.requireNonNull(problem).toString());\n        this.problem = problem;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link AcmeServerException}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "229", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeServerException.java", "methodName": "org.shredzone.acme4j.exception.AcmeServerException.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public URI getType() {\n        return problem.getType();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the error type.", "call_func_name": ["org.shredzone.acme4j.Problem.getType"], "call_func_parameter": [[""]], "passed_comments": [{"org.shredzone.acme4j.Problem.getType": "Returns the problem type. It is always an absolute URI."}]}, {"index": "230", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeServerException.java", "methodName": "org.shredzone.acme4j.exception.AcmeServerException.getProblem", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Problem getProblem() {\n        return problem;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the  {@link Problem} that caused the exception", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "231", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeException.java", "methodName": "org.shredzone.acme4j.exception.AcmeException.AcmeException", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AcmeException() {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a generic  {@link AcmeException}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "232", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeException.java", "methodName": "org.shredzone.acme4j.exception.AcmeException.AcmeException", "methodParameterType": "String#", "methodParameterName": "msg#", "methodBody": "public AcmeException(String msg) {\n        super(msg);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a generic  {@link AcmeException}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "233", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeException.java", "methodName": "org.shredzone.acme4j.exception.AcmeException.AcmeException", "methodParameterType": "String#Throwable#", "methodParameterName": "msg#cause#", "methodBody": "public AcmeException(String msg, Throwable cause) {\n        super(msg, cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a generic  {@link AcmeException}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "234", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeUnauthorizedException.java", "methodName": "org.shredzone.acme4j.exception.AcmeUnauthorizedException.AcmeUnauthorizedException", "methodParameterType": "Problem#", "methodParameterName": "problem#", "methodBody": "public AcmeUnauthorizedException(Problem problem) {\n        super(problem);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link AcmeUnauthorizedException}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "235", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeUserActionRequiredException.java", "methodName": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException.AcmeUserActionRequiredException", "methodParameterType": "Problem#URI#", "methodParameterName": "problem#tosUri#", "methodBody": "public AcmeUserActionRequiredException(Problem problem, @Nullable URI tosUri) {\n        super(problem);\n        this.tosUri = tosUri;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link AcmeUserActionRequiredException}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "236", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeUserActionRequiredException.java", "methodName": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException.getTermsOfServiceUri", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public URI getTermsOfServiceUri() {\n        return tosUri;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the  {@link URI} of the terms-of-service document to accept, or {@code null}if the server did not provide a link to such a document.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "237", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeUserActionRequiredException.java", "methodName": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException.getInstance", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public URL getInstance() {\n        URI instance = getProblem().getInstance();\n\n        if (instance == null) {\n            throw new AcmeProtocolException(\"Instance URL required, but missing.\");\n        }\n\n        try {\n            return instance.toURL();\n        } catch (MalformedURLException ex) {\n            throw new AcmeProtocolException(\"Bad instance URL: \" + instance.toString(), ex);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Returns the  {@link URL} of a document that gives instructions on the actions tobe taken by a human.", "call_func_name": ["org.shredzone.acme4j.exception.AcmeUserActionRequiredException.getProblem", "org.shredzone.acme4j.Problem.getInstance", "org.shredzone.acme4j.exception.AcmeProtocolException.<init>", "java.net.URI.toURL", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.net.URI.toString", "java.lang.StringBuilder.toString", "org.shredzone.acme4j.exception.AcmeProtocolException.<init>"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.Problem.getInstance": "Returns an URI that identifies the specific occurence of the problem. It is always an absolute URI."}]}, {"index": "238", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeNetworkException.java", "methodName": "org.shredzone.acme4j.exception.AcmeNetworkException.AcmeNetworkException", "methodParameterType": "IOException#", "methodParameterName": "cause#", "methodBody": "public AcmeNetworkException(IOException cause) {\n        super(\"Network error\", cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#StringLiteral#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Create a new  {@link AcmeNetworkException}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "239", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeRateLimitedException.java", "methodName": "org.shredzone.acme4j.exception.AcmeRateLimitedException.AcmeRateLimitedException", "methodParameterType": "Problem#Instant#Collection<URL>#", "methodParameterName": "problem#retryAfter#documents#", "methodBody": "public AcmeRateLimitedException(Problem problem, @Nullable Instant retryAfter,\n                @Nullable Collection<URL> documents) {\n        super(problem);\n        this.retryAfter = retryAfter;\n        this.documents =\n                documents != null ? Collections.unmodifiableCollection(documents) : null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link AcmeRateLimitedException}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "240", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeRateLimitedException.java", "methodName": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getRetryAfter", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public Instant getRetryAfter() {\n        return retryAfter;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the moment the request is expected to succeed again.  {@code null} if thismoment is not known.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "241", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeRateLimitedException.java", "methodName": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getDocuments", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public Collection<URL> getDocuments() {\n        return documents;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Collection of URLs pointing to documents about the rate limit that was hit. {@code null} if the server did not provide such URLs.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "242", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeProtocolException.java", "methodName": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException", "methodParameterType": "String#", "methodParameterName": "msg#", "methodBody": "public AcmeProtocolException(String msg) {\n        super(msg);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link AcmeProtocolException}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "243", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeProtocolException.java", "methodName": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException", "methodParameterType": "String#Throwable#", "methodParameterName": "msg#cause#", "methodBody": "public AcmeProtocolException(String msg, Throwable cause) {\n        super(msg, cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link AcmeProtocolException}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "244", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeRetryAfterException.java", "methodName": "org.shredzone.acme4j.exception.AcmeRetryAfterException.AcmeRetryAfterException", "methodParameterType": "String#Instant#", "methodParameterName": "msg#retryAfter#", "methodBody": "public AcmeRetryAfterException(String msg, Instant retryAfter) {\n        super(msg);\n        this.retryAfter = Objects.requireNonNull(retryAfter);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link AcmeRetryAfterException}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "245", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeRetryAfterException.java", "methodName": "org.shredzone.acme4j.exception.AcmeRetryAfterException.getRetryAfter", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Instant getRetryAfter() {\n        return retryAfter;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the retry-after date returned by the server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "246", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/challenge/TokenChallenge.java", "methodName": "org.shredzone.acme4j.challenge.TokenChallenge.TokenChallenge", "methodParameterType": "Login#JSON#", "methodParameterName": "login#data#", "methodBody": "public TokenChallenge(Login login, JSON data) {\n        super(login, data);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new generic  {@link TokenChallenge} object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "247", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/challenge/TokenChallenge.java", "methodName": "org.shredzone.acme4j.challenge.TokenChallenge.getToken", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected String getToken() {\n        String token = getJSON().get(KEY_TOKEN).asString();\n        if (!AcmeUtils.isValidBase64Url(token)) {\n            throw new AcmeProtocolException(\"Invalid token: \" + token);\n        }\n        return token;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the token.", "call_func_name": ["org.shredzone.acme4j.challenge.TokenChallenge.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "org.shredzone.acme4j.toolbox.AcmeUtils.isValidBase64Url", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.shredzone.acme4j.exception.AcmeProtocolException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}, {"org.shredzone.acme4j.toolbox.AcmeUtils.isValidBase64Url": "Validates that the given  {@link String} is a valid base64url encoded value."}]}, {"index": "248", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/challenge/TokenChallenge.java", "methodName": "org.shredzone.acme4j.challenge.TokenChallenge.getAuthorization", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAuthorization() {\n        PublicKey pk = getLogin().getKeyPair().getPublic();\n        return getToken() + '.' + base64UrlEncode(JoseUtils.thumbprint(pk));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#MethodInvocation#CharacterLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(CharacterLiteral)CharacterLiteral(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the authorization string. <p> The default is  {@code token + '.' + base64url(jwkThumbprint)}. Subclasses may override this method if a different algorithm is used.", "call_func_name": ["org.shredzone.acme4j.challenge.TokenChallenge.getLogin", "org.shredzone.acme4j.Login.getKeyPair", "java.security.KeyPair.getPublic", "java.lang.StringBuilder.<init>", "org.shredzone.acme4j.challenge.TokenChallenge.getToken", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "org.shredzone.acme4j.toolbox.JoseUtils.thumbprint", "org.shredzone.acme4j.toolbox.AcmeUtils.base64UrlEncode", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.lang.String"], ["char"], ["java.security.PublicKey"], ["byte[]"], [""]], "passed_comments": [{"org.shredzone.acme4j.Login.getKeyPair": "Gets the  {@link KeyPair} of the ACME account."}, {"org.shredzone.acme4j.challenge.TokenChallenge.getToken": "Gets the token."}, {"org.shredzone.acme4j.toolbox.JoseUtils.thumbprint": "Computes a thumbprint of the given public key."}, {"org.shredzone.acme4j.toolbox.AcmeUtils.base64UrlEncode": "Base64 encodes the given byte array, using URL style encoding."}]}, {"index": "249", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/challenge/TlsAlpn01Challenge.java", "methodName": "org.shredzone.acme4j.challenge.TlsAlpn01Challenge.TlsAlpn01Challenge", "methodParameterType": "Login#JSON#", "methodParameterName": "login#data#", "methodBody": "public TlsAlpn01Challenge(Login login, JSON data) {\n        super(login, data);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new generic  {@link TlsAlpn01Challenge} object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "250", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/challenge/TlsAlpn01Challenge.java", "methodName": "org.shredzone.acme4j.challenge.TlsAlpn01Challenge.getAcmeValidation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public byte[] getAcmeValidation() {\n        return sha256hash(getAuthorization());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the value that is to be used as  {@code acmeValidation} extension inthe test certificate.", "call_func_name": ["org.shredzone.acme4j.challenge.TlsAlpn01Challenge.getAuthorization", "org.shredzone.acme4j.toolbox.AcmeUtils.sha256hash"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.AcmeUtils.sha256hash": "Computes a SHA-256 hash of the given string."}]}, {"index": "251", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/challenge/Http01Challenge.java", "methodName": "org.shredzone.acme4j.challenge.Http01Challenge.Http01Challenge", "methodParameterType": "Login#JSON#", "methodParameterName": "login#data#", "methodBody": "public Http01Challenge(Login login, JSON data) {\n        super(login, data);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new generic  {@link Http01Challenge} object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "252", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/challenge/Http01Challenge.java", "methodName": "org.shredzone.acme4j.challenge.Http01Challenge.getToken", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getToken() {\n        return super.getToken();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SuperMethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SuperMethodInvocation(SimpleName)SimpleName)SuperMethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the token to be used for this challenge.", "call_func_name": ["org.shredzone.acme4j.challenge.TokenChallenge.getToken"], "call_func_parameter": [[""]], "passed_comments": [{"org.shredzone.acme4j.challenge.TokenChallenge.getToken": "Gets the token."}]}, {"index": "253", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/challenge/Challenge.java", "methodName": "org.shredzone.acme4j.challenge.Challenge.Challenge", "methodParameterType": "Login#JSON#", "methodParameterName": "login#data#", "methodBody": "public Challenge(Login login, JSON data) {\n        super(login, data.get(KEY_URL).asURL());\n        setJSON(data);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SuperConstructorInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)SuperConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new generic  {@link Challenge} object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "254", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/challenge/Challenge.java", "methodName": "org.shredzone.acme4j.challenge.Challenge.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getType() {\n        return getJSON().get(KEY_TYPE).asString();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the challenge type by name (e.g. \"http-01\").", "call_func_name": ["org.shredzone.acme4j.challenge.Challenge.getJSON", "org.shredzone.acme4j.toolbox.JSON.get"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "255", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/challenge/Challenge.java", "methodName": "org.shredzone.acme4j.challenge.Challenge.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Status getStatus() {\n        return getJSON().get(KEY_STATUS).asStatus();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the current status of the challenge. <p> Possible values are:  {@link Status#PENDING},  {@link Status#PROCESSING}, {@link Status#VALID},  {@link Status#INVALID}.", "call_func_name": ["org.shredzone.acme4j.challenge.Challenge.getJSON", "org.shredzone.acme4j.toolbox.JSON.get"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "256", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/challenge/Challenge.java", "methodName": "org.shredzone.acme4j.challenge.Challenge.getValidated", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public Instant getValidated() {\n        return getJSON().get(KEY_VALIDATED).map(Value::asInstant).orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the validation date, if returned by the server.", "call_func_name": ["org.shredzone.acme4j.challenge.Challenge.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.Optional.orElse"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "257", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/challenge/Challenge.java", "methodName": "org.shredzone.acme4j.challenge.Challenge.getError", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public Problem getError() {\n        return getJSON().get(KEY_ERROR)\n                    .map(it -> it.asProblem(getLocation()))\n                    .orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a reason why the challenge has failed in the past, if returned by the server. If there are multiple errors, they can be found in {@link Problem#getSubProblems()}.", "call_func_name": ["org.shredzone.acme4j.challenge.Challenge.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.Optional.orElse"], "call_func_parameter": [[""], ["java.lang.String"], ["org.shredzone.acme4j.challenge.Challenge"], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "258", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/challenge/Challenge.java", "methodName": "org.shredzone.acme4j.challenge.Challenge.prepareResponse", "methodParameterType": "JSONBuilder#", "methodParameterName": "response#", "methodBody": "protected void prepareResponse(JSONBuilder response) {\n        // Do nothing here...\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "Exports the response state, as preparation for triggering the challenge.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "259", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/challenge/Challenge.java", "methodName": "org.shredzone.acme4j.challenge.Challenge.acceptable", "methodParameterType": "String#", "methodParameterName": "type#", "methodBody": "protected boolean acceptable(String type) {\n        return type != null && !type.trim().isEmpty();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the type is acceptable to this challenge.", "call_func_name": ["java.lang.String.trim", "java.lang.String.isEmpty"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "260", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/challenge/Challenge.java", "methodName": "org.shredzone.acme4j.challenge.Challenge.trigger", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void trigger() throws AcmeException {\n        LOG.debug(\"trigger\");\n        try (Connection conn = getSession().connect()) {\n            JSONBuilder claims = new JSONBuilder();\n            prepareResponse(claims);\n\n            conn.sendSignedRequest(getLocation(), claims, getLogin());\n            setJSON(conn.readJsonResponse());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Triggers this  {@link Challenge}. The ACME server is requested to validate the response. Note that the validation is performed asynchronously by the ACME server. <p> If this method is invoked a second time, the ACME server is requested to retry the validation. This can be useful if the client state has changed, for example after a firewall rule has been updated.", "call_func_name": ["org.slf4j.Logger.debug", "org.shredzone.acme4j.challenge.Challenge.getSession", "org.shredzone.acme4j.Session.connect", "org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "org.shredzone.acme4j.challenge.Challenge.prepareResponse", "org.shredzone.acme4j.challenge.Challenge.getLocation", "org.shredzone.acme4j.challenge.Challenge.getLogin", "org.shredzone.acme4j.connector.Connection.sendSignedRequest", "org.shredzone.acme4j.connector.Connection.readJsonResponse", "org.shredzone.acme4j.challenge.Challenge.setJSON", "org.shredzone.acme4j.connector.Connection.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], ["org.shredzone.acme4j.toolbox.JSONBuilder"], [""], [""], ["java.net.URL", "org.shredzone.acme4j.toolbox.JSONBuilder", "org.shredzone.acme4j.Login"], [""], ["org.shredzone.acme4j.toolbox.JSON"], [""], ["java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.Session.connect": "Returns a new  {@link Connection} to the ACME server."}, {"org.shredzone.acme4j.challenge.Challenge.prepareResponse": "Exports the response state, as preparation for triggering the challenge."}, {"org.shredzone.acme4j.connector.Connection.sendSignedRequest": "Sends a signed POST request. Requires a  {@link Login} for the session and{@link KeyPair}. The  {@link Login} account location is sent in a \"kid\" protectedheader. <p> If the server does not return a 200 class status code, an  {@link AcmeException} israised matching the error."}, {"org.shredzone.acme4j.connector.Connection.readJsonResponse": "Reads a server response as JSON data."}, {"org.shredzone.acme4j.connector.Connection.close": "Closes the  {@link Connection}, releasing all resources."}]}, {"index": "261", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/challenge/Dns01Challenge.java", "methodName": "org.shredzone.acme4j.challenge.Dns01Challenge.Dns01Challenge", "methodParameterType": "Login#JSON#", "methodParameterName": "login#data#", "methodBody": "public Dns01Challenge(Login login, JSON data) {\n        super(login, data);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new generic  {@link Dns01Challenge} object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "262", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/challenge/Dns01Challenge.java", "methodName": "org.shredzone.acme4j.challenge.Dns01Challenge.getDigest", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDigest() {\n        return base64UrlEncode(sha256hash(getAuthorization()));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the digest string to be set in the domain's  {@code _acme-challenge} TXTrecord.", "call_func_name": ["org.shredzone.acme4j.challenge.Dns01Challenge.getAuthorization", "org.shredzone.acme4j.toolbox.AcmeUtils.sha256hash", "org.shredzone.acme4j.toolbox.AcmeUtils.base64UrlEncode"], "call_func_parameter": [[""], ["java.lang.String"], ["byte[]"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.AcmeUtils.sha256hash": "Computes a SHA-256 hash of the given string."}, {"org.shredzone.acme4j.toolbox.AcmeUtils.base64UrlEncode": "Base64 encodes the given byte array, using URL style encoding."}]}, {"index": "263", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java", "methodName": "org.shredzone.acme4j.Authorization.getIdentifier", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Identifier getIdentifier() {\n        return getJSON().get(\"identifier\").asIdentifier();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the  {@link Identifier} to be authorized.<p> For wildcard domain orders, the domain itself (without wildcard prefix) is returned here. To find out if this  {@link Authorization} is related to a wildcard domainorder, check the  {@link #isWildcard()} method.", "call_func_name": ["org.shredzone.acme4j.Authorization.getJSON", "org.shredzone.acme4j.toolbox.JSON.get"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "264", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java", "methodName": "org.shredzone.acme4j.Authorization.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Status getStatus() {\n        return getJSON().get(\"status\").asStatus();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the authorization status. <p> Possible values are:  {@link Status#PENDING},  {@link Status#VALID}, {@link Status#INVALID},  {@link Status#DEACTIVATED},  {@link Status#EXPIRED}, {@link Status#REVOKED}.", "call_func_name": ["org.shredzone.acme4j.Authorization.getJSON", "org.shredzone.acme4j.toolbox.JSON.get"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "265", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java", "methodName": "org.shredzone.acme4j.Authorization.getExpires", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CheckForNull\n    public Instant getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp)\n                    .orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the expiry date of the authorization, if set by the server.", "call_func_name": ["org.shredzone.acme4j.Authorization.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.Optional.map", "java.util.Optional.orElse"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.util.function.Function"], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "266", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java", "methodName": "org.shredzone.acme4j.Authorization.isWildcard", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isWildcard() {\n        return getJSON().get(\"wildcard\")\n                    .map(Value::asBoolean)\n                    .orElse(false);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns  {@code true} if this {@link Authorization} is related to a wildcard domain,{@code false} otherwise.", "call_func_name": ["org.shredzone.acme4j.Authorization.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.lang.Boolean.valueOf", "java.util.Optional.orElse", "java.lang.Boolean.booleanValue"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["boolean"], ["java.lang.Object"], [""]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "267", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java", "methodName": "org.shredzone.acme4j.Authorization.getChallenges", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<Challenge> getChallenges() {\n        Login login = getLogin();\n\n        return Collections.unmodifiableList(getJSON().get(\"challenges\")\n                    .asArray()\n                    .stream()\n                    .map(Value::asObject)\n                    .map(login::createChallenge)\n                    .collect(toList()));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets a list of all challenges offered by the server, in no specific order.", "call_func_name": ["org.shredzone.acme4j.Authorization.getLogin", "org.shredzone.acme4j.Authorization.getJSON", "org.shredzone.acme4j.toolbox.JSON.get", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.lang.Object.getClass", "java.util.function.Function.apply", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect", "java.util.Collections.unmodifiableList"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["java.util.function.Function"], [""], ["org.shredzone.acme4j.Login"], [""], ["java.util.stream.Collector"], ["java.util.List"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.JSON.get": "Returns the  {@link Value} of the given key."}]}, {"index": "268", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java", "methodName": "org.shredzone.acme4j.Authorization.findChallenge", "methodParameterType": "String#", "methodParameterName": "type#", "methodBody": "@CheckForNull\n    public <T extends Challenge> T findChallenge(final String type) {\n        return (T) getChallenges().stream()\n                .filter(ch -> type.equals(ch.getType()))\n                .reduce((a, b) -> {throw new AcmeProtocolException(\"Found more than one challenge of type \" + type);})\n                .orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#LambdaExpression#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Finds a  {@link Challenge} of the given type. Responding to this {@link Challenge}is sufficient for authorization. <p> {@link Authorization#findChallenge(Class)} should be preferred, as this variantis not type safe.", "call_func_name": ["org.shredzone.acme4j.Authorization.getChallenges", "java.util.List.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.function.BinaryOperator.apply", "java.util.stream.Stream.reduce", "java.util.Optional.orElse"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["java.util.function.Predicate"], ["java.lang.String"], ["java.util.function.BinaryOperator"], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.Authorization.getChallenges": "Gets a list of all challenges offered by the server, in no specific order."}]}, {"index": "269", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java", "methodName": "org.shredzone.acme4j.Authorization.findChallenge", "methodParameterType": "Class<T>#", "methodParameterName": "type#", "methodBody": "@CheckForNull\n    public <T extends Challenge> T findChallenge(Class<T> type) {\n        return getChallenges().stream()\n                .filter(type::isInstance)\n                .map(type::cast)\n                .reduce((a, b) -> {throw new AcmeProtocolException(\"Found more than one challenge of type \" + type.getName());})\n                .orElse(null);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#LambdaExpression#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Finds a  {@link Challenge} of the given class type. Responding to this {@link Challenge} is sufficient for authorization.", "call_func_name": ["org.shredzone.acme4j.Authorization.getChallenges", "java.util.List.stream", "java.lang.Object.getClass", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.function.BinaryOperator.apply", "java.util.stream.Stream.reduce", "java.util.Optional.orElse"], "call_func_parameter": [[""], [""], [""], ["java.lang.Class"], ["java.util.function.Predicate"], ["java.lang.Class"], ["java.util.function.Function"], ["java.lang.Class"], ["java.util.function.BinaryOperator"], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.Authorization.getChallenges": "Gets a list of all challenges offered by the server, in no specific order."}]}, {"index": "270", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java", "methodName": "org.shredzone.acme4j.Authorization.deactivate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void deactivate() throws AcmeException {\n        LOG.debug(\"deactivate\");\n        try (Connection conn = getSession().connect()) {\n            JSONBuilder claims = new JSONBuilder();\n            claims.put(\"status\", \"deactivated\");\n\n            conn.sendSignedRequest(getLocation(), claims, getLogin());\n            setJSON(conn.readJsonResponse());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Permanently deactivates the  {@link Authorization}.", "call_func_name": ["org.slf4j.Logger.debug", "org.shredzone.acme4j.Authorization.getSession", "org.shredzone.acme4j.Session.connect", "org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "org.shredzone.acme4j.toolbox.JSONBuilder.put", "org.shredzone.acme4j.Authorization.getLocation", "org.shredzone.acme4j.Authorization.getLogin", "org.shredzone.acme4j.connector.Connection.sendSignedRequest", "org.shredzone.acme4j.connector.Connection.readJsonResponse", "org.shredzone.acme4j.Authorization.setJSON", "org.shredzone.acme4j.connector.Connection.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], ["java.lang.String", "java.lang.Object"], [""], [""], ["java.net.URL", "org.shredzone.acme4j.toolbox.JSONBuilder", "org.shredzone.acme4j.Login"], [""], ["org.shredzone.acme4j.toolbox.JSON"], [""], ["java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.Session.connect": "Returns a new  {@link Connection} to the ACME server."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}, {"org.shredzone.acme4j.connector.Connection.sendSignedRequest": "Sends a signed POST request. Requires a  {@link Login} for the session and{@link KeyPair}. The  {@link Login} account location is sent in a \"kid\" protectedheader. <p> If the server does not return a 200 class status code, an  {@link AcmeException} israised matching the error."}, {"org.shredzone.acme4j.connector.Connection.readJsonResponse": "Reads a server response as JSON data."}, {"org.shredzone.acme4j.connector.Connection.close": "Closes the  {@link Connection}, releasing all resources."}]}, {"index": "271", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java", "methodName": "org.shredzone.acme4j.AccountBuilder.addContact", "methodParameterType": "URI#", "methodParameterName": "contact#", "methodBody": "public AccountBuilder addContact(URI contact) {\n        AcmeUtils.validateContact(contact);\n        contacts.add(contact);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add a contact URI to the list of contacts.", "call_func_name": ["org.shredzone.acme4j.toolbox.AcmeUtils.validateContact", "java.util.List.add"], "call_func_parameter": [["java.net.URI"], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.AcmeUtils.validateContact": "Validates a contact  {@link URI}."}]}, {"index": "272", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java", "methodName": "org.shredzone.acme4j.AccountBuilder.addContact", "methodParameterType": "String#", "methodParameterName": "contact#", "methodBody": "public AccountBuilder addContact(String contact) {\n        addContact(URI.create(contact));\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add a contact address to the list of contacts. <p> This is a convenience call for  {@link #addContact(URI)}.", "call_func_name": ["java.net.URI.create", "org.shredzone.acme4j.AccountBuilder.addContact"], "call_func_parameter": [["java.lang.String"], ["java.net.URI"]], "passed_comments": [{"org.shredzone.acme4j.AccountBuilder.addContact": "Add a contact URI to the list of contacts."}]}, {"index": "273", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java", "methodName": "org.shredzone.acme4j.AccountBuilder.addEmail", "methodParameterType": "String#", "methodParameterName": "email#", "methodBody": "public AccountBuilder addEmail(String email) {\n        addContact(\"mailto:\" + email);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add a email address to the list of contacts. <p> This is a convenience call for  {@link #addContact(String)} that doesn'trequire from you attach \"mailto\" scheme before email address.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.shredzone.acme4j.AccountBuilder.addContact"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.AccountBuilder.addContact": "Add a contact address to the list of contacts. <p> This is a convenience call for  {@link #addContact(URI)}."}]}, {"index": "274", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java", "methodName": "org.shredzone.acme4j.AccountBuilder.agreeToTermsOfService", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AccountBuilder agreeToTermsOfService() {\n        this.termsOfServiceAgreed = true;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Signals that the user agrees to the terms of service.", "call_func_name": ["java.lang.Boolean.valueOf"], "call_func_parameter": [["boolean"]], "passed_comments": "/"}, {"index": "275", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java", "methodName": "org.shredzone.acme4j.AccountBuilder.onlyExisting", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AccountBuilder onlyExisting() {\n        this.onlyExisting = true;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Signals that only an existing account should be returned. The server will not create a new account if the key is not known. This is useful if you only have your account's key pair available, but not your account's location URL.", "call_func_name": ["java.lang.Boolean.valueOf"], "call_func_parameter": [["boolean"]], "passed_comments": "/"}, {"index": "276", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java", "methodName": "org.shredzone.acme4j.AccountBuilder.useKeyPair", "methodParameterType": "KeyPair#", "methodParameterName": "keyPair#", "methodBody": "public AccountBuilder useKeyPair(KeyPair keyPair) {\n        this.keyPair = requireNonNull(keyPair, \"keyPair\");\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets the  {@link KeyPair} to be used for this account.", "call_func_name": ["java.util.Objects.requireNonNull"], "call_func_parameter": [["java.lang.Object", "java.lang.String"]], "passed_comments": "/"}, {"index": "277", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java", "methodName": "org.shredzone.acme4j.AccountBuilder.withKeyIdentifier", "methodParameterType": "String#SecretKey#", "methodParameterName": "kid#macKey#", "methodBody": "public AccountBuilder withKeyIdentifier(String kid, SecretKey macKey) {\n        if (kid != null && kid.isEmpty()) {\n            throw new IllegalArgumentException(\"kid must not be empty\");\n        }\n        this.macKey = requireNonNull(macKey, \"macKey\");\n        this.keyIdentifier = kid;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets a Key Identifier and MAC key provided by the CA. Use this if your CA requires an individual account identification, e.g. your customer number.", "call_func_name": ["java.lang.String.isEmpty", "java.lang.IllegalArgumentException.<init>", "java.util.Objects.requireNonNull"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object", "java.lang.String"]], "passed_comments": "/"}, {"index": "278", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java", "methodName": "org.shredzone.acme4j.AccountBuilder.withKeyIdentifier", "methodParameterType": "String#String#", "methodParameterName": "kid#encodedMacKey#", "methodBody": "public AccountBuilder withKeyIdentifier(String kid, String encodedMacKey) {\n        byte[] encodedKey = AcmeUtils.base64UrlDecode(requireNonNull(encodedMacKey, \"encodedMacKey\"));\n        return withKeyIdentifier(kid, new SecretKeySpec(encodedKey, \"HMAC\"));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#StringLiteral#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets a Key Identifier and MAC key provided by the CA. Use this if your CA requires an individual account identification, e.g. your customer number.", "call_func_name": ["java.util.Objects.requireNonNull", "org.shredzone.acme4j.toolbox.AcmeUtils.base64UrlDecode", "javax.crypto.spec.SecretKeySpec.<init>", "org.shredzone.acme4j.AccountBuilder.withKeyIdentifier"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], ["java.lang.String"], ["byte[]", "java.lang.String"], ["java.lang.String", "javax.crypto.SecretKey"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.AcmeUtils.base64UrlDecode": "Base64 decodes to a byte array, using URL style encoding."}, {"org.shredzone.acme4j.AccountBuilder.withKeyIdentifier": "Sets a Key Identifier and MAC key provided by the CA. Use this if your CA requires an individual account identification, e.g. your customer number."}]}, {"index": "279", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java", "methodName": "org.shredzone.acme4j.AccountBuilder.create", "methodParameterType": "Session#", "methodParameterName": "session#", "methodBody": "public Account create(Session session) throws AcmeException {\n        return createLogin(session).getAccount();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new account.", "call_func_name": ["org.shredzone.acme4j.AccountBuilder.createLogin", "org.shredzone.acme4j.Login.getAccount"], "call_func_parameter": [["org.shredzone.acme4j.Session"], [""]], "passed_comments": [{"org.shredzone.acme4j.AccountBuilder.createLogin": "Creates a new account. <p> This method returns a ready to use  {@link Login} for the new {@link Account}."}, {"org.shredzone.acme4j.Login.getAccount": "Gets the  {@link Account} that is bound to this login."}]}, {"index": "280", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java", "methodName": "org.shredzone.acme4j.AccountBuilder.createLogin", "methodParameterType": "Session#", "methodParameterName": "session#", "methodBody": "public Login createLogin(Session session) throws AcmeException {\n        requireNonNull(session, \"session\");\n\n        if (keyPair == null) {\n            throw new IllegalStateException(\"Use AccountBuilder.useKeyPair() to set the account's key pair.\");\n        }\n\n        LOG.debug(\"create\");\n\n        try (Connection conn = session.connect()) {\n            URL resourceUrl = session.resourceUrl(Resource.NEW_ACCOUNT);\n\n            JSONBuilder claims = new JSONBuilder();\n            if (!contacts.isEmpty()) {\n                claims.put(\"contact\", contacts);\n            }\n            if (termsOfServiceAgreed != null) {\n                claims.put(\"termsOfServiceAgreed\", termsOfServiceAgreed);\n            }\n            if (keyIdentifier != null) {\n                claims.put(\"externalAccountBinding\", JoseUtils.createExternalAccountBinding(\n                        keyIdentifier, keyPair.getPublic(), macKey, resourceUrl));\n            }\n            if (onlyExisting != null) {\n                claims.put(\"onlyReturnExisting\", onlyExisting);\n            }\n\n            conn.sendSignedRequest(resourceUrl, claims, session, keyPair);\n\n            URL location = conn.getLocation();\n            if (location == null) {\n                throw new AcmeProtocolException(\"Server did not provide an account location\");\n            }\n\n            Login login = new Login(location, keyPair, session);\n            login.getAccount().setJSON(conn.readJsonResponse());\n            return login;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Creates a new account. <p> This method returns a ready to use  {@link Login} for the new {@link Account}.", "call_func_name": ["java.util.Objects.requireNonNull", "java.lang.IllegalStateException.<init>", "org.slf4j.Logger.debug", "org.shredzone.acme4j.Session.connect", "org.shredzone.acme4j.Session.resourceUrl", "org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "java.util.List.isEmpty", "org.shredzone.acme4j.toolbox.JSONBuilder.put", "java.security.KeyPair.getPublic", "org.shredzone.acme4j.toolbox.JoseUtils.createExternalAccountBinding", "org.shredzone.acme4j.connector.Connection.sendSignedRequest", "org.shredzone.acme4j.connector.Connection.getLocation", "org.shredzone.acme4j.exception.AcmeProtocolException.<init>", "org.shredzone.acme4j.Login.<init>", "org.shredzone.acme4j.Login.getAccount", "org.shredzone.acme4j.connector.Connection.readJsonResponse", "org.shredzone.acme4j.Account.setJSON", "org.shredzone.acme4j.connector.Connection.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""], ["org.shredzone.acme4j.connector.Resource"], [""], [""], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String", "java.security.PublicKey", "javax.crypto.SecretKey", "java.net.URL"], ["java.net.URL", "org.shredzone.acme4j.toolbox.JSONBuilder", "org.shredzone.acme4j.Session", "java.security.KeyPair"], [""], ["java.lang.String"], ["java.net.URL", "java.security.KeyPair", "org.shredzone.acme4j.Session"], [""], [""], ["org.shredzone.acme4j.toolbox.JSON"], [""], ["java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.Session.connect": "Returns a new  {@link Connection} to the ACME server."}, {"org.shredzone.acme4j.Session.resourceUrl": "Gets the  {@link URL} of the given {@link Resource}. This may involve connecting to the server and getting a directory. The result is cached."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}, {"org.shredzone.acme4j.toolbox.JoseUtils.createExternalAccountBinding": "Creates a JSON structure for external account binding."}, {"org.shredzone.acme4j.connector.Connection.sendSignedRequest": "Sends a signed POST request. Only requires a  {@link Session}. The  {@link KeyPair}is sent in a \"jwk\" protected header field. <p> If the server does not return a 200 class status code, an  {@link AcmeException} israised matching the error."}, {"org.shredzone.acme4j.connector.Connection.getLocation": "Gets a location from the  {@code Location} header.<p> Relative links are resolved against the last request's URL."}, {"org.shredzone.acme4j.Login.getAccount": "Gets the  {@link Account} that is bound to this login."}, {"org.shredzone.acme4j.connector.Connection.readJsonResponse": "Reads a server response as JSON data."}, {"org.shredzone.acme4j.connector.Connection.close": "Closes the  {@link Connection}, releasing all resources."}]}, {"index": "281", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Certificate.java", "methodName": "org.shredzone.acme4j.Certificate.download", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void download() throws AcmeException {\n        if (certChain == null) {\n            LOG.debug(\"download\");\n            try (Connection conn = getSession().connect()) {\n                conn.sendCertificateRequest(getLocation(), getLogin());\n                alternates = new ArrayList<>(conn.getLinks(\"alternate\"));\n                certChain = new ArrayList<>(conn.readCertificates());\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#TryStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block)TryStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Downloads the certificate chain. <p> The certificate is downloaded lazily by the other methods. So usually there is no need to invoke this method, unless the download is to be enforced. If the certificate has been downloaded already, nothing will happen.", "call_func_name": ["org.slf4j.Logger.debug", "org.shredzone.acme4j.Certificate.getSession", "org.shredzone.acme4j.Session.connect", "org.shredzone.acme4j.Certificate.getLocation", "org.shredzone.acme4j.Certificate.getLogin", "org.shredzone.acme4j.connector.Connection.sendCertificateRequest", "org.shredzone.acme4j.connector.Connection.getLinks", "java.util.ArrayList.<init>", "org.shredzone.acme4j.connector.Connection.readCertificates", "org.shredzone.acme4j.connector.Connection.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], [""], ["java.net.URL", "org.shredzone.acme4j.Login"], ["java.lang.String"], ["java.util.Collection"], [""], [""], ["java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.Session.connect": "Returns a new  {@link Connection} to the ACME server."}, {"org.shredzone.acme4j.connector.Connection.sendCertificateRequest": "Sends a signed POST-as-GET request for a certificate resource. Requires a {@link Login} for the session and {@link KeyPair}. The  {@link Login} accountlocation is sent in a \"kid\" protected header. <p> If the server does not return a 200 class status code, an  {@link AcmeException} israised matching the error."}, {"org.shredzone.acme4j.connector.Connection.getLinks": "Gets one or more relation links from the header. The result is expected to be an URL. <p> Relative links are resolved against the last request's URL."}, {"org.shredzone.acme4j.connector.Connection.readCertificates": "Reads a certificate and its issuers."}, {"org.shredzone.acme4j.connector.Connection.close": "Closes the  {@link Connection}, releasing all resources."}]}, {"index": "282", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Certificate.java", "methodName": "org.shredzone.acme4j.Certificate.getCertificate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public X509Certificate getCertificate() {\n        lazyDownload();\n        return certChain.get(0);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the created certificate.", "call_func_name": ["org.shredzone.acme4j.Certificate.lazyDownload", "java.util.ArrayList.get"], "call_func_parameter": [[""], ["int"]], "passed_comments": [{"org.shredzone.acme4j.Certificate.lazyDownload": "Lazily downloads the certificate. Throws a runtime  {@link AcmeLazyLoadingException}if the download failed."}]}, {"index": "283", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Certificate.java", "methodName": "org.shredzone.acme4j.Certificate.getCertificateChain", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<X509Certificate> getCertificateChain() {\n        lazyDownload();\n        return unmodifiableList(certChain);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the created certificate and issuer chain.", "call_func_name": ["org.shredzone.acme4j.Certificate.lazyDownload", "java.util.Collections.unmodifiableList"], "call_func_parameter": [[""], ["java.util.List"]], "passed_comments": [{"org.shredzone.acme4j.Certificate.lazyDownload": "Lazily downloads the certificate. Throws a runtime  {@link AcmeLazyLoadingException}if the download failed."}]}, {"index": "284", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Certificate.java", "methodName": "org.shredzone.acme4j.Certificate.getAlternates", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<URL> getAlternates() {\n        lazyDownload();\n        if (alternates != null) {\n            return unmodifiableList(alternates);\n        } else {\n            return Collections.emptyList();\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Returns URLs to alternate certificate chains.", "call_func_name": ["org.shredzone.acme4j.Certificate.lazyDownload", "java.util.Collections.unmodifiableList", "java.util.Collections.emptyList"], "call_func_parameter": [[""], ["java.util.List"], [""]], "passed_comments": [{"org.shredzone.acme4j.Certificate.lazyDownload": "Lazily downloads the certificate. Throws a runtime  {@link AcmeLazyLoadingException}if the download failed."}]}, {"index": "285", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Certificate.java", "methodName": "org.shredzone.acme4j.Certificate.writeCertificate", "methodParameterType": "Writer#", "methodParameterName": "out#", "methodBody": "public void writeCertificate(@WillNotClose Writer out) throws IOException {\n        try {\n            for (X509Certificate cert : getCertificateChain()) {\n                AcmeUtils.writeToPem(cert.getEncoded(), AcmeUtils.PemLabel.CERTIFICATE, out);\n            }\n        } catch (CertificateEncodingException ex) {\n            throw new IOException(\"Encoding error\", ex);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Writes the certificate to the given writer. It is written in PEM format, with the end-entity cert coming first, followed by the intermediate ceritificates.", "call_func_name": ["org.shredzone.acme4j.Certificate.getCertificateChain", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.security.cert.X509Certificate.getEncoded", "java.io.IOException.<init>"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.Certificate.getCertificateChain": "Returns the created certificate and issuer chain."}]}, {"index": "286", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Certificate.java", "methodName": "org.shredzone.acme4j.Certificate.revoke", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void revoke() throws AcmeException {\n        revoke(null);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Revokes this certificate.", "call_func_name": ["org.shredzone.acme4j.Certificate.revoke"], "call_func_parameter": [["org.shredzone.acme4j.RevocationReason"]], "passed_comments": [{"org.shredzone.acme4j.Certificate.revoke": "Revokes this certificate."}]}, {"index": "287", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Certificate.java", "methodName": "org.shredzone.acme4j.Certificate.revoke", "methodParameterType": "RevocationReason#", "methodParameterName": "reason#", "methodBody": "public void revoke(@Nullable RevocationReason reason) throws AcmeException {\n        revoke(getLogin(), getCertificate(), reason);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Revokes this certificate.", "call_func_name": ["org.shredzone.acme4j.Certificate.getLogin", "org.shredzone.acme4j.Certificate.getCertificate", "org.shredzone.acme4j.Certificate.revoke"], "call_func_parameter": [[""], [""], ["org.shredzone.acme4j.Login", "java.security.cert.X509Certificate", "org.shredzone.acme4j.RevocationReason"]], "passed_comments": [{"org.shredzone.acme4j.Certificate.getCertificate": "Returns the created certificate."}, {"org.shredzone.acme4j.Certificate.revoke": "Revoke a certificate. This call is meant to be used for revoking certificates if only the account's key pair and the certificate itself is available."}]}, {"index": "288", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Certificate.java", "methodName": "org.shredzone.acme4j.Certificate.revoke", "methodParameterType": "Login#X509Certificate#RevocationReason#", "methodParameterName": "login#cert#reason#", "methodBody": "public static void revoke(Login login, X509Certificate cert, @Nullable RevocationReason reason)\n                throws AcmeException {\n        LOG.debug(\"revoke\");\n\n        Session session = login.getSession();\n\n        URL resUrl = session.resourceUrl(Resource.REVOKE_CERT);\n        if (resUrl == null) {\n            throw new AcmeException(\"Server does not allow certificate revocation\");\n        }\n\n        try (Connection conn = session.connect()) {\n            JSONBuilder claims = new JSONBuilder();\n            claims.putBase64(\"certificate\", cert.getEncoded());\n            if (reason != null) {\n                claims.put(\"reason\", reason.getReasonCode());\n            }\n\n            conn.sendSignedRequest(resUrl, claims, login);\n        } catch (CertificateEncodingException ex) {\n            throw new AcmeProtocolException(\"Invalid certificate\", ex);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Revoke a certificate. This call is meant to be used for revoking certificates if only the account's key pair and the certificate itself is available.", "call_func_name": ["org.slf4j.Logger.debug", "org.shredzone.acme4j.Login.getSession", "org.shredzone.acme4j.Session.resourceUrl", "org.shredzone.acme4j.exception.AcmeException.<init>", "org.shredzone.acme4j.Session.connect", "org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "java.security.cert.X509Certificate.getEncoded", "org.shredzone.acme4j.toolbox.JSONBuilder.putBase64", "org.shredzone.acme4j.RevocationReason.getReasonCode", "java.lang.Integer.valueOf", "org.shredzone.acme4j.toolbox.JSONBuilder.put", "org.shredzone.acme4j.connector.Connection.sendSignedRequest", "org.shredzone.acme4j.connector.Connection.close", "java.lang.Throwable.addSuppressed", "org.shredzone.acme4j.exception.AcmeProtocolException.<init>"], "call_func_parameter": [["java.lang.String"], [""], ["org.shredzone.acme4j.connector.Resource"], ["java.lang.String"], [""], [""], [""], ["java.lang.String", "byte[]"], [""], ["int"], ["java.lang.String", "java.lang.Object"], ["java.net.URL", "org.shredzone.acme4j.toolbox.JSONBuilder", "org.shredzone.acme4j.Login"], [""], ["java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.Login.getSession": "Gets the  {@link Session} that is used."}, {"org.shredzone.acme4j.Session.resourceUrl": "Gets the  {@link URL} of the given {@link Resource}. This may involve connecting to the server and getting a directory. The result is cached."}, {"org.shredzone.acme4j.Session.connect": "Returns a new  {@link Connection} to the ACME server."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.putBase64": "Puts binary data to the JSON. The data is base64 url encoded."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}, {"org.shredzone.acme4j.connector.Connection.sendSignedRequest": "Sends a signed POST request. Requires a  {@link Login} for the session and{@link KeyPair}. The  {@link Login} account location is sent in a \"kid\" protectedheader. <p> If the server does not return a 200 class status code, an  {@link AcmeException} israised matching the error."}, {"org.shredzone.acme4j.connector.Connection.close": "Closes the  {@link Connection}, releasing all resources."}]}, {"index": "289", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Certificate.java", "methodName": "org.shredzone.acme4j.Certificate.revoke", "methodParameterType": "Session#KeyPair#X509Certificate#RevocationReason#", "methodParameterName": "session#domainKeyPair#cert#reason#", "methodBody": "public static void revoke(Session session, KeyPair domainKeyPair, X509Certificate cert,\n            @Nullable RevocationReason reason) throws AcmeException {\n        LOG.debug(\"revoke using the domain key pair\");\n\n        URL resUrl = session.resourceUrl(Resource.REVOKE_CERT);\n        if (resUrl == null) {\n            throw new AcmeException(\"Server does not allow certificate revocation\");\n        }\n\n        try (Connection conn = session.connect()) {\n            JSONBuilder claims = new JSONBuilder();\n            claims.putBase64(\"certificate\", cert.getEncoded());\n            if (reason != null) {\n                claims.put(\"reason\", reason.getReasonCode());\n            }\n\n            conn.sendSignedRequest(resUrl, claims, session, domainKeyPair);\n        } catch (CertificateEncodingException ex) {\n            throw new AcmeProtocolException(\"Invalid certificate\", ex);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Revoke a certificate. This call is meant to be used for revoking certificates if the account's key pair was lost.", "call_func_name": ["org.slf4j.Logger.debug", "org.shredzone.acme4j.Session.resourceUrl", "org.shredzone.acme4j.exception.AcmeException.<init>", "org.shredzone.acme4j.Session.connect", "org.shredzone.acme4j.toolbox.JSONBuilder.<init>", "java.security.cert.X509Certificate.getEncoded", "org.shredzone.acme4j.toolbox.JSONBuilder.putBase64", "org.shredzone.acme4j.RevocationReason.getReasonCode", "java.lang.Integer.valueOf", "org.shredzone.acme4j.toolbox.JSONBuilder.put", "org.shredzone.acme4j.connector.Connection.sendSignedRequest", "org.shredzone.acme4j.connector.Connection.close", "java.lang.Throwable.addSuppressed", "org.shredzone.acme4j.exception.AcmeProtocolException.<init>"], "call_func_parameter": [["java.lang.String"], ["org.shredzone.acme4j.connector.Resource"], ["java.lang.String"], [""], [""], [""], ["java.lang.String", "byte[]"], [""], ["int"], ["java.lang.String", "java.lang.Object"], ["java.net.URL", "org.shredzone.acme4j.toolbox.JSONBuilder", "org.shredzone.acme4j.Session", "java.security.KeyPair"], [""], ["java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.Session.resourceUrl": "Gets the  {@link URL} of the given {@link Resource}. This may involve connecting to the server and getting a directory. The result is cached."}, {"org.shredzone.acme4j.Session.connect": "Returns a new  {@link Connection} to the ACME server."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.putBase64": "Puts binary data to the JSON. The data is base64 url encoded."}, {"org.shredzone.acme4j.toolbox.JSONBuilder.put": "Puts a property. If a property with the key exists, it will be replaced."}, {"org.shredzone.acme4j.connector.Connection.sendSignedRequest": "Sends a signed POST request. Only requires a  {@link Session}. The  {@link KeyPair}is sent in a \"jwk\" protected header field. <p> If the server does not return a 200 class status code, an  {@link AcmeException} israised matching the error."}, {"org.shredzone.acme4j.connector.Connection.close": "Closes the  {@link Connection}, releasing all resources."}]}, {"index": "290", "file": "/root/repos/repos25/acme4j/acme4j-client/src/main/java/org/shredzone/acme4j/Certificate.java", "methodName": "org.shredzone.acme4j.Certificate.lazyDownload", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void lazyDownload() {\n        try {\n            download();\n        } catch (AcmeException ex) {\n            throw new AcmeLazyLoadingException(this, ex);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Lazily downloads the certificate. Throws a runtime  {@link AcmeLazyLoadingException}if the download failed.", "call_func_name": ["org.shredzone.acme4j.Certificate.download", "org.shredzone.acme4j.exception.AcmeLazyLoadingException.<init>"], "call_func_parameter": [[""], ["org.shredzone.acme4j.AcmeResource", "org.shredzone.acme4j.exception.AcmeException"]], "passed_comments": [{"org.shredzone.acme4j.Certificate.download": "Downloads the certificate chain. <p> The certificate is downloaded lazily by the other methods. So usually there is no need to invoke this method, unless the download is to be enforced. If the certificate has been downloaded already, nothing will happen."}]}, {"index": "291", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/KeyPairUtils.java", "methodName": "org.shredzone.acme4j.util.KeyPairUtils.createKeyPair", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static KeyPair createKeyPair() {\n        return createECKeyPair(\"secp384r1\");\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new standard  {@link KeyPair}. <p> This method can be used if no specific key type is required. It returns a \"secp384r1\" ECDSA key pair.", "call_func_name": ["org.shredzone.acme4j.util.KeyPairUtils.createECKeyPair"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.util.KeyPairUtils.createECKeyPair": "Creates a new elliptic curve  {@link KeyPair}."}]}, {"index": "292", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/KeyPairUtils.java", "methodName": "org.shredzone.acme4j.util.KeyPairUtils.createKeyPair", "methodParameterType": "int#", "methodParameterName": "keysize#", "methodBody": "public static KeyPair createKeyPair(int keysize) {\n        try {\n            KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\n            keyGen.initialize(keysize);\n            return keyGen.generateKeyPair();\n        } catch (NoSuchAlgorithmException ex) {\n            throw new IllegalStateException(ex);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Creates a new RSA  {@link KeyPair}.", "call_func_name": ["java.security.KeyPairGenerator.getInstance", "java.security.KeyPairGenerator.initialize", "java.security.KeyPairGenerator.generateKeyPair", "java.lang.IllegalStateException.<init>"], "call_func_parameter": [["java.lang.String"], ["int"], [""], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "293", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/KeyPairUtils.java", "methodName": "org.shredzone.acme4j.util.KeyPairUtils.createECKeyPair", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public static KeyPair createECKeyPair(String name) {\n        try {\n            ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(name);\n            KeyPairGenerator g = KeyPairGenerator.getInstance(\"ECDSA\", \"BC\");\n            g.initialize(ecSpec, new SecureRandom());\n            return g.generateKeyPair();\n        } catch (NoSuchAlgorithmException | InvalidAlgorithmParameterException ex) {\n            throw new IllegalArgumentException(\"Invalid curve name \" + name, ex);\n        } catch (NoSuchProviderException ex) {\n            throw new IllegalStateException(ex);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Creates a new elliptic curve  {@link KeyPair}.", "call_func_name": ["org.bouncycastle.jce.ECNamedCurveTable.getParameterSpec", "java.security.KeyPairGenerator.getInstance", "java.security.SecureRandom.<init>", "java.security.KeyPairGenerator.initialize", "java.security.KeyPairGenerator.generateKeyPair", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "java.lang.IllegalStateException.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.String"], [""], ["java.security.spec.AlgorithmParameterSpec", "java.security.SecureRandom"], [""], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Throwable"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "294", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/KeyPairUtils.java", "methodName": "org.shredzone.acme4j.util.KeyPairUtils.readKeyPair", "methodParameterType": "Reader#", "methodParameterName": "r#", "methodBody": "public static KeyPair readKeyPair(@WillClose Reader r) throws IOException {\n        try (PEMParser parser = new PEMParser(r)) {\n            PEMKeyPair keyPair = (PEMKeyPair) parser.readObject();\n            return new JcaPEMKeyConverter().getKeyPair(keyPair);\n        } catch (PEMException ex) {\n            throw new IOException(\"Invalid PEM file\", ex);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Reads a  {@link KeyPair} from a PEM file.", "call_func_name": ["org.bouncycastle.openssl.PEMParser.<init>", "org.bouncycastle.openssl.PEMParser.readObject", "org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter.<init>", "org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter.getKeyPair", "org.bouncycastle.openssl.PEMParser.close", "java.lang.Throwable.addSuppressed", "java.io.IOException.<init>"], "call_func_parameter": [["java.io.Reader"], [""], [""], ["org.bouncycastle.openssl.PEMKeyPair"], [""], ["java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "295", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/KeyPairUtils.java", "methodName": "org.shredzone.acme4j.util.KeyPairUtils.writeKeyPair", "methodParameterType": "KeyPair#Writer#", "methodParameterName": "keypair#w#", "methodBody": "public static void writeKeyPair(KeyPair keypair, @WillClose Writer w) throws IOException {\n        try (JcaPEMWriter jw = new JcaPEMWriter(w)) {\n            jw.writeObject(keypair);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Writes a  {@link KeyPair} PEM file.", "call_func_name": ["org.bouncycastle.openssl.jcajce.JcaPEMWriter.<init>", "org.bouncycastle.openssl.jcajce.JcaPEMWriter.writeObject", "org.bouncycastle.openssl.jcajce.JcaPEMWriter.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [["java.io.Writer"], ["java.lang.Object"], [""], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "296", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CertificateUtils.java", "methodName": "org.shredzone.acme4j.util.CertificateUtils.readCSR", "methodParameterType": "InputStream#", "methodParameterName": "in#", "methodBody": "public static PKCS10CertificationRequest readCSR(@WillClose InputStream in) throws IOException {\n        try (PEMParser pemParser = new PEMParser(new InputStreamReader(in, StandardCharsets.US_ASCII))) {\n            Object parsedObj = pemParser.readObject();\n            if (!(parsedObj instanceof PKCS10CertificationRequest)) {\n                throw new IOException(\"Not a PKCS10 CSR\");\n            }\n            return (PKCS10CertificationRequest) parsedObj;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#PrefixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#CastExpression#ReturnStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ReturnStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Reads a CSR PEM file.", "call_func_name": ["java.io.InputStreamReader.<init>", "org.bouncycastle.openssl.PEMParser.<init>", "org.bouncycastle.openssl.PEMParser.readObject", "java.io.IOException.<init>", "org.bouncycastle.openssl.PEMParser.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [["java.io.InputStream", "java.nio.charset.Charset"], ["java.io.Reader"], [""], ["java.lang.String"], [""], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "297", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CertificateUtils.java", "methodName": "org.shredzone.acme4j.util.CertificateUtils.createTlsAlpn01Certificate", "methodParameterType": "KeyPair#Identifier#byte[]#", "methodParameterName": "keypair#id#acmeValidation#", "methodBody": "public static X509Certificate createTlsAlpn01Certificate(KeyPair keypair, Identifier id, byte[] acmeValidation)\n                throws IOException {\n        Objects.requireNonNull(keypair, \"keypair\");\n        Objects.requireNonNull(id, \"id\");\n        if (acmeValidation == null || acmeValidation.length != 32) {\n            throw new IllegalArgumentException(\"Bad acmeValidation parameter\");\n        }\n\n        final long now = System.currentTimeMillis();\n\n        X500Name issuer = new X500Name(\"CN=acme.invalid\");\n        BigInteger serial = BigInteger.valueOf(now);\n        Instant notBefore = Instant.ofEpochMilli(now);\n        Instant notAfter = notBefore.plus(Duration.ofDays(7));\n\n        JcaX509v3CertificateBuilder certBuilder = new JcaX509v3CertificateBuilder(\n                    issuer, serial, Date.from(notBefore), Date.from(notAfter),\n                    issuer, keypair.getPublic());\n\n        GeneralName[] gns = new GeneralName[1];\n\n        switch (id.getType()) {\n            case Identifier.TYPE_DNS:\n                gns[0] = new GeneralName(GeneralName.dNSName, id.getDomain());\n                break;\n\n            case Identifier.TYPE_IP:\n                gns[0] = new GeneralName(GeneralName.iPAddress, id.getIP().getHostAddress());\n                break;\n\n            default:\n                throw new IllegalArgumentException(\"Unsupported Identifier type \" + id.getType());\n        }\n        certBuilder.addExtension(Extension.subjectAlternativeName, false, new GeneralNames(gns));\n        certBuilder.addExtension(ACME_VALIDATION, true, new DEROctetString(acmeValidation));\n\n        return buildCertificate(certBuilder::build, keypair.getPrivate());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#NumberLiteral#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#BreakStatement#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#NumberLiteral#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#BreakStatement#SwitchCase#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#SwitchStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#BooleanLiteral#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)SwitchStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a self-signed  {@link X509Certificate} that can be used for the{@link TlsAlpn01Challenge}. The certificate is valid for 7 days.", "call_func_name": ["java.util.Objects.requireNonNull", "java.lang.IllegalArgumentException.<init>", "java.lang.System.currentTimeMillis", "org.bouncycastle.asn1.x500.X500Name.<init>", "java.math.BigInteger.valueOf", "java.time.Instant.ofEpochMilli", "java.time.Duration.ofDays", "java.time.Instant.plus", "java.util.Date.from", "java.security.KeyPair.getPublic", "org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder.<init>", "org.shredzone.acme4j.Identifier.getType", "java.lang.String.hashCode", "java.lang.String.equals", "org.shredzone.acme4j.Identifier.getDomain", "org.bouncycastle.asn1.x509.GeneralName.<init>", "org.shredzone.acme4j.Identifier.getIP", "java.net.InetAddress.getHostAddress", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.bouncycastle.asn1.x509.GeneralNames.<init>", "org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder.addExtension", "org.bouncycastle.asn1.DEROctetString.<init>", "java.lang.Object.getClass", "java.util.function.Function.apply", "java.security.KeyPair.getPrivate", "org.shredzone.acme4j.util.CertificateUtils.buildCertificate"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], ["long"], ["long"], ["long"], ["java.time.temporal.TemporalAmount"], ["java.time.Instant"], [""], ["org.bouncycastle.asn1.x500.X500Name", "java.math.BigInteger", "java.util.Date", "java.util.Date", "org.bouncycastle.asn1.x500.X500Name", "java.security.PublicKey"], [""], [""], ["java.lang.Object"], [""], ["int", "java.lang.String"], [""], [""], [""], ["java.lang.String"], [""], ["org.bouncycastle.asn1.x509.GeneralName[]"], ["org.bouncycastle.asn1.ASN1ObjectIdentifier", "boolean", "org.bouncycastle.asn1.ASN1Encodable"], ["byte[]"], [""], ["org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder"], [""], ["java.util.function.Function", "java.security.PrivateKey"]], "passed_comments": [{"org.shredzone.acme4j.Identifier.getType": "Returns the identifier type."}, {"org.shredzone.acme4j.Identifier.getDomain": "Returns the domain name if this is a DNS identifier."}, {"org.shredzone.acme4j.Identifier.getIP": "Returns the IP address if this is an IP identifier."}, {"org.shredzone.acme4j.util.CertificateUtils.buildCertificate": "Build a  {@link X509Certificate} from a builder."}]}, {"index": "298", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CertificateUtils.java", "methodName": "org.shredzone.acme4j.util.CertificateUtils.createTestRootCertificate", "methodParameterType": "String#Instant#Instant#KeyPair#", "methodParameterName": "subject#notBefore#notAfter#keypair#", "methodBody": "public static X509Certificate createTestRootCertificate(String subject,\n            Instant notBefore, Instant notAfter, KeyPair keypair) {\n        Objects.requireNonNull(subject, \"subject\");\n        Objects.requireNonNull(notBefore, \"notBefore\");\n        Objects.requireNonNull(notAfter, \"notAfter\");\n        Objects.requireNonNull(keypair, \"keypair\");\n\n        JcaX509v1CertificateBuilder certBuilder = new JcaX509v1CertificateBuilder(\n                new X500Name(subject),\n                BigInteger.valueOf(System.currentTimeMillis()),\n                Date.from(notBefore),\n                Date.from(notAfter),\n                new X500Name(subject),\n                keypair.getPublic()\n        );\n\n        return buildCertificate(certBuilder::build, keypair.getPrivate());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a self-signed root certificate. <p> The generated certificate is only meant for testing purposes!", "call_func_name": ["java.util.Objects.requireNonNull", "org.bouncycastle.asn1.x500.X500Name.<init>", "java.lang.System.currentTimeMillis", "java.math.BigInteger.valueOf", "java.util.Date.from", "java.security.KeyPair.getPublic", "org.bouncycastle.cert.jcajce.JcaX509v1CertificateBuilder.<init>", "java.lang.Object.getClass", "java.util.function.Function.apply", "java.security.KeyPair.getPrivate", "org.shredzone.acme4j.util.CertificateUtils.buildCertificate"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], ["java.lang.String"], [""], ["long"], ["java.time.Instant"], [""], ["org.bouncycastle.asn1.x500.X500Name", "java.math.BigInteger", "java.util.Date", "java.util.Date", "org.bouncycastle.asn1.x500.X500Name", "java.security.PublicKey"], [""], ["org.bouncycastle.cert.jcajce.JcaX509v1CertificateBuilder"], [""], ["java.util.function.Function", "java.security.PrivateKey"]], "passed_comments": [{"org.shredzone.acme4j.util.CertificateUtils.buildCertificate": "Build a  {@link X509Certificate} from a builder."}]}, {"index": "299", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CertificateUtils.java", "methodName": "org.shredzone.acme4j.util.CertificateUtils.createTestIntermediateCertificate", "methodParameterType": "String#Instant#Instant#PublicKey#X509Certificate#PrivateKey#", "methodParameterName": "subject#notBefore#notAfter#intermediatePublicKey#issuer#issuerPrivateKey#", "methodBody": "public static X509Certificate createTestIntermediateCertificate(String subject,\n            Instant notBefore, Instant notAfter, PublicKey intermediatePublicKey,\n            X509Certificate issuer, PrivateKey issuerPrivateKey) {\n        Objects.requireNonNull(subject, \"subject\");\n        Objects.requireNonNull(notBefore, \"notBefore\");\n        Objects.requireNonNull(notAfter, \"notAfter\");\n        Objects.requireNonNull(intermediatePublicKey, \"intermediatePublicKey\");\n        Objects.requireNonNull(issuer, \"issuer\");\n        Objects.requireNonNull(issuerPrivateKey, \"issuerPrivateKey\");\n\n        JcaX509v1CertificateBuilder certBuilder = new JcaX509v1CertificateBuilder(\n                new X500Name(issuer.getIssuerX500Principal().getName()),\n                BigInteger.valueOf(System.currentTimeMillis()),\n                Date.from(notBefore),\n                Date.from(notAfter),\n                new X500Name(subject),\n                intermediatePublicKey\n        );\n\n        return buildCertificate(certBuilder::build, issuerPrivateKey);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates an intermediate certificate that is signed by an issuer. <p> The generated certificate is only meant for testing purposes!", "call_func_name": ["java.util.Objects.requireNonNull", "java.security.cert.X509Certificate.getIssuerX500Principal", "javax.security.auth.x500.X500Principal.getName", "org.bouncycastle.asn1.x500.X500Name.<init>", "java.lang.System.currentTimeMillis", "java.math.BigInteger.valueOf", "java.util.Date.from", "org.bouncycastle.cert.jcajce.JcaX509v1CertificateBuilder.<init>", "java.lang.Object.getClass", "java.util.function.Function.apply", "org.shredzone.acme4j.util.CertificateUtils.buildCertificate"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], [""], [""], ["java.lang.String"], [""], ["long"], ["java.time.Instant"], ["org.bouncycastle.asn1.x500.X500Name", "java.math.BigInteger", "java.util.Date", "java.util.Date", "org.bouncycastle.asn1.x500.X500Name", "java.security.PublicKey"], [""], ["org.bouncycastle.cert.jcajce.JcaX509v1CertificateBuilder"], ["java.util.function.Function", "java.security.PrivateKey"]], "passed_comments": [{"org.shredzone.acme4j.util.CertificateUtils.buildCertificate": "Build a  {@link X509Certificate} from a builder."}]}, {"index": "300", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CertificateUtils.java", "methodName": "org.shredzone.acme4j.util.CertificateUtils.createTestCertificate", "methodParameterType": "PKCS10CertificationRequest#Instant#Instant#X509Certificate#PrivateKey#", "methodParameterName": "csr#notBefore#notAfter#issuer#issuerPrivateKey#", "methodBody": "public static X509Certificate createTestCertificate(PKCS10CertificationRequest csr,\n            Instant notBefore, Instant notAfter, X509Certificate issuer, PrivateKey issuerPrivateKey) {\n        Objects.requireNonNull(csr, \"csr\");\n        Objects.requireNonNull(notBefore, \"notBefore\");\n        Objects.requireNonNull(notAfter, \"notAfter\");\n        Objects.requireNonNull(issuer, \"issuer\");\n        Objects.requireNonNull(issuerPrivateKey, \"issuerPrivateKey\");\n\n        try {\n            JcaPKCS10CertificationRequest jcaCsr = new JcaPKCS10CertificationRequest(csr);\n\n            JcaX509v3CertificateBuilder certBuilder = new JcaX509v3CertificateBuilder(\n                    new X500Name(issuer.getIssuerX500Principal().getName()),\n                    BigInteger.valueOf(System.currentTimeMillis()),\n                    Date.from(notBefore),\n                    Date.from(notAfter),\n                    csr.getSubject(),\n                    jcaCsr.getPublicKey());\n\n            Attribute[] attr = csr.getAttributes(PKCSObjectIdentifiers.pkcs_9_at_extensionRequest);\n            if (attr.length > 0) {\n                ASN1Encodable[] extensions = attr[0].getAttrValues().toArray();\n                if (extensions.length > 0 && extensions[0] instanceof Extensions) {\n                    GeneralNames san = GeneralNames.fromExtensions((Extensions) extensions[0], Extension.subjectAlternativeName);\n                    certBuilder.addExtension(Extension.subjectAlternativeName, false, san);\n                }\n            }\n\n            return buildCertificate(certBuilder::build, issuerPrivateKey);\n        } catch (NoSuchAlgorithmException | InvalidKeyException | CertIOException ex) {\n            throw new IllegalArgumentException(\"Invalid CSR\", ex);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#NumberLiteral#ArrayAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#ArrayAccess#SimpleName#SimpleType#InstanceofExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#NumberLiteral#ArrayAccess#CastExpression#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(InstanceofExpression(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)CastExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Creates a signed end entity certificate from the given CSR. <p> This method is only meant for testing purposes! Do not use it in a real-world CA implementation. <p> Do not assume that real-world certificates have a similar structure. It's up to the discretion of the CA which distinguished names, validity dates, extensions and other parameters are transferred from the CSR to the generated certificate.", "call_func_name": ["java.util.Objects.requireNonNull", "org.bouncycastle.pkcs.jcajce.JcaPKCS10CertificationRequest.<init>", "java.security.cert.X509Certificate.getIssuerX500Principal", "javax.security.auth.x500.X500Principal.getName", "org.bouncycastle.asn1.x500.X500Name.<init>", "java.lang.System.currentTimeMillis", "java.math.BigInteger.valueOf", "java.util.Date.from", "org.bouncycastle.pkcs.PKCS10CertificationRequest.getSubject", "org.bouncycastle.pkcs.jcajce.JcaPKCS10CertificationRequest.getPublicKey", "org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder.<init>", "org.bouncycastle.pkcs.PKCS10CertificationRequest.getAttributes", "org.bouncycastle.asn1.pkcs.Attribute.getAttrValues", "org.bouncycastle.asn1.ASN1Set.toArray", "org.bouncycastle.asn1.x509.GeneralNames.fromExtensions", "org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder.addExtension", "java.lang.Object.getClass", "java.util.function.Function.apply", "org.shredzone.acme4j.util.CertificateUtils.buildCertificate", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], ["org.bouncycastle.pkcs.PKCS10CertificationRequest"], [""], [""], ["java.lang.String"], [""], ["long"], ["java.time.Instant"], [""], [""], ["org.bouncycastle.asn1.x500.X500Name", "java.math.BigInteger", "java.util.Date", "java.util.Date", "org.bouncycastle.asn1.x500.X500Name", "java.security.PublicKey"], ["org.bouncycastle.asn1.ASN1ObjectIdentifier"], [""], [""], ["org.bouncycastle.asn1.x509.Extensions", "org.bouncycastle.asn1.ASN1ObjectIdentifier"], ["org.bouncycastle.asn1.ASN1ObjectIdentifier", "boolean", "org.bouncycastle.asn1.ASN1Encodable"], [""], ["org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder"], ["java.util.function.Function", "java.security.PrivateKey"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.util.CertificateUtils.buildCertificate": "Build a  {@link X509Certificate} from a builder."}]}, {"index": "301", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CertificateUtils.java", "methodName": "org.shredzone.acme4j.util.CertificateUtils.buildCertificate", "methodParameterType": "Function<ContentSigner,X509CertificateHolder>#PrivateKey#", "methodParameterName": "builder#privateKey#", "methodBody": "private static X509Certificate buildCertificate(Function<ContentSigner, X509CertificateHolder> builder, PrivateKey privateKey) {\n        try {\n            JcaContentSignerBuilder signerBuilder = new JcaContentSignerBuilder(\"SHA256withRSA\");\n            byte[] cert = builder.apply(signerBuilder.build(privateKey)).getEncoded();\n            CertificateFactory certificateFactory = CertificateFactory.getInstance(\"X.509\");\n            return (X509Certificate) certificateFactory.generateCertificate(new ByteArrayInputStream(cert));\n        } catch (CertificateException | OperatorCreationException | IOException ex) {\n            throw new IllegalArgumentException(\"Could not build certificate\", ex);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#CastExpression#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)CastExpression)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Build a  {@link X509Certificate} from a builder.", "call_func_name": ["org.bouncycastle.operator.jcajce.JcaContentSignerBuilder.<init>", "org.bouncycastle.operator.jcajce.JcaContentSignerBuilder.build", "java.util.function.Function.apply", "org.bouncycastle.cert.X509CertificateHolder.getEncoded", "java.security.cert.CertificateFactory.getInstance", "java.io.ByteArrayInputStream.<init>", "java.security.cert.CertificateFactory.generateCertificate", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String"], ["java.security.PrivateKey"], ["java.lang.Object"], [""], ["java.lang.String"], ["byte[]"], ["java.io.InputStream"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "302", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CSRBuilder.java", "methodName": "org.shredzone.acme4j.util.CSRBuilder.addDomain", "methodParameterType": "String#", "methodParameterName": "domain#", "methodBody": "public void addDomain(String domain) {\n        String ace = toAce(requireNonNull(domain));\n        if (namelist.isEmpty()) {\n            namebuilder.addRDN(BCStyle.CN, ace);\n        }\n        namelist.add(ace);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a domain name to the CSR. The first domain name added will also be the <em>Common Name</em>. All domain names will be added as <em>Subject Alternative Name</em>. <p> IDN domain names are ACE encoded automatically. <p> For wildcard certificates, the domain name must be prefixed with  {@code \"", "call_func_name": ["java.util.Objects.requireNonNull", "org.shredzone.acme4j.toolbox.AcmeUtils.toAce", "java.util.List.isEmpty", "org.bouncycastle.asn1.x500.X500NameBuilder.addRDN", "java.util.List.add"], "call_func_parameter": [["java.lang.Object"], ["java.lang.String"], [""], ["org.bouncycastle.asn1.ASN1ObjectIdentifier", "java.lang.String"], ["java.lang.Object"]], "passed_comments": [{"org.shredzone.acme4j.toolbox.AcmeUtils.toAce": "ASCII encodes a domain name. <p> The conversion is done as described in <a href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a>. Additionally, all leading and trailing white spaces are trimmed, and the result is lowercased. <p> It is safe to pass in ACE encoded domains, they will be returned unchanged."}]}, {"index": "303", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CSRBuilder.java", "methodName": "org.shredzone.acme4j.util.CSRBuilder.addDomains", "methodParameterType": "Collection<String>#", "methodParameterName": "domains#", "methodBody": "public void addDomains(Collection<String> domains) {\n        domains.forEach(this::addDomain);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a  {@link Collection} of domains.<p> IDN domain names are ACE encoded automatically.", "call_func_name": ["java.util.function.Consumer.accept", "java.util.Collection.forEach"], "call_func_parameter": [["org.shredzone.acme4j.util.CSRBuilder"], ["java.util.function.Consumer"]], "passed_comments": "/"}, {"index": "304", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CSRBuilder.java", "methodName": "org.shredzone.acme4j.util.CSRBuilder.addDomains", "methodParameterType": "String#", "methodParameterName": "domains#", "methodBody": "public void addDomains(String... domains) {\n        Arrays.stream(domains).forEach(this::addDomain);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds multiple domain names. <p> IDN domain names are ACE encoded automatically.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "305", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CSRBuilder.java", "methodName": "org.shredzone.acme4j.util.CSRBuilder.addIP", "methodParameterType": "InetAddress#", "methodParameterName": "address#", "methodBody": "public void addIP(InetAddress address) {\n        iplist.add(requireNonNull(address));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds an  {@link InetAddress}. All IP addresses will be set as iPAddress <em>Subject Alternative Name</em>.", "call_func_name": ["java.util.Objects.requireNonNull", "java.util.List.add"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "306", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CSRBuilder.java", "methodName": "org.shredzone.acme4j.util.CSRBuilder.addIPs", "methodParameterType": "Collection<InetAddress>#", "methodParameterName": "ips#", "methodBody": "public void addIPs(Collection<InetAddress> ips) {\n        ips.forEach(this::addIP);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a  {@link Collection} of IP addresses.", "call_func_name": ["java.util.function.Consumer.accept", "java.util.Collection.forEach"], "call_func_parameter": [["org.shredzone.acme4j.util.CSRBuilder"], ["java.util.function.Consumer"]], "passed_comments": "/"}, {"index": "307", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CSRBuilder.java", "methodName": "org.shredzone.acme4j.util.CSRBuilder.addIPs", "methodParameterType": "InetAddress#", "methodParameterName": "ips#", "methodBody": "public void addIPs(InetAddress... ips) {\n        Arrays.stream(ips).forEach(this::addIP);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds multiple IP addresses.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "308", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CSRBuilder.java", "methodName": "org.shredzone.acme4j.util.CSRBuilder.addIdentifier", "methodParameterType": "Identifier#", "methodParameterName": "id#", "methodBody": "public void addIdentifier(Identifier id) {\n        requireNonNull(id);\n        if (Identifier.TYPE_DNS.equals(id.getType())) {\n            addDomain(id.getDomain());\n        } else if (Identifier.TYPE_IP.equals(id.getType())) {\n            addIP(id.getIP());\n        } else {\n            throw new IllegalArgumentException(\"Unknown identifier type: \" + id.getType());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Adds an  {@link Identifier}. Only DNS and IP types are supported.", "call_func_name": ["java.util.Objects.requireNonNull", "org.shredzone.acme4j.Identifier.getType", "java.lang.String.equals", "org.shredzone.acme4j.Identifier.getDomain", "org.shredzone.acme4j.util.CSRBuilder.addDomain", "org.shredzone.acme4j.Identifier.getIP", "org.shredzone.acme4j.util.CSRBuilder.addIP", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.net.InetAddress"], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": [{"org.shredzone.acme4j.Identifier.getType": "Returns the identifier type."}, {"org.shredzone.acme4j.Identifier.getDomain": "Returns the domain name if this is a DNS identifier."}, {"org.shredzone.acme4j.util.CSRBuilder.addDomain": "Adds a domain name to the CSR. The first domain name added will also be the <em>Common Name</em>. All domain names will be added as <em>Subject Alternative Name</em>. <p> IDN domain names are ACE encoded automatically. <p> For wildcard certificates, the domain name must be prefixed with  {@code \""}, {"org.shredzone.acme4j.Identifier.getIP": "Returns the IP address if this is an IP identifier."}, {"org.shredzone.acme4j.util.CSRBuilder.addIP": "Adds an  {@link InetAddress}. All IP addresses will be set as iPAddress <em>Subject Alternative Name</em>."}]}, {"index": "309", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CSRBuilder.java", "methodName": "org.shredzone.acme4j.util.CSRBuilder.addIdentifiers", "methodParameterType": "Collection<Identifier>#", "methodParameterName": "ids#", "methodBody": "public void addIdentifiers(Collection<Identifier> ids) {\n        ids.forEach(this::addIdentifier);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a  {@link Collection} of {@link Identifier}.", "call_func_name": ["java.util.function.Consumer.accept", "java.util.Collection.forEach"], "call_func_parameter": [["org.shredzone.acme4j.util.CSRBuilder"], ["java.util.function.Consumer"]], "passed_comments": "/"}, {"index": "310", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CSRBuilder.java", "methodName": "org.shredzone.acme4j.util.CSRBuilder.addIdentifiers", "methodParameterType": "Identifier#", "methodParameterName": "ids#", "methodBody": "public void addIdentifiers(Identifier... ids) {\n        Arrays.stream(ids).forEach(this::addIdentifier);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds multiple  {@link Identifier}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "311", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CSRBuilder.java", "methodName": "org.shredzone.acme4j.util.CSRBuilder.setOrganization", "methodParameterType": "String#", "methodParameterName": "o#", "methodBody": "public void setOrganization(String o) {\n        namebuilder.addRDN(BCStyle.O, requireNonNull(o));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the organization. <p> Note that it is at the discretion of the ACME server to accept this parameter.", "call_func_name": ["java.util.Objects.requireNonNull", "org.bouncycastle.asn1.x500.X500NameBuilder.addRDN"], "call_func_parameter": [["java.lang.Object"], ["org.bouncycastle.asn1.ASN1ObjectIdentifier", "java.lang.String"]], "passed_comments": "/"}, {"index": "312", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CSRBuilder.java", "methodName": "org.shredzone.acme4j.util.CSRBuilder.setOrganizationalUnit", "methodParameterType": "String#", "methodParameterName": "ou#", "methodBody": "public void setOrganizationalUnit(String ou) {\n        namebuilder.addRDN(BCStyle.OU, requireNonNull(ou));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the organizational unit. <p> Note that it is at the discretion of the ACME server to accept this parameter.", "call_func_name": ["java.util.Objects.requireNonNull", "org.bouncycastle.asn1.x500.X500NameBuilder.addRDN"], "call_func_parameter": [["java.lang.Object"], ["org.bouncycastle.asn1.ASN1ObjectIdentifier", "java.lang.String"]], "passed_comments": "/"}, {"index": "313", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CSRBuilder.java", "methodName": "org.shredzone.acme4j.util.CSRBuilder.setLocality", "methodParameterType": "String#", "methodParameterName": "l#", "methodBody": "public void setLocality(String l) {\n        namebuilder.addRDN(BCStyle.L, requireNonNull(l));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the city or locality. <p> Note that it is at the discretion of the ACME server to accept this parameter.", "call_func_name": ["java.util.Objects.requireNonNull", "org.bouncycastle.asn1.x500.X500NameBuilder.addRDN"], "call_func_parameter": [["java.lang.Object"], ["org.bouncycastle.asn1.ASN1ObjectIdentifier", "java.lang.String"]], "passed_comments": "/"}, {"index": "314", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CSRBuilder.java", "methodName": "org.shredzone.acme4j.util.CSRBuilder.setState", "methodParameterType": "String#", "methodParameterName": "st#", "methodBody": "public void setState(String st) {\n        namebuilder.addRDN(BCStyle.ST, requireNonNull(st));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the state or province. <p> Note that it is at the discretion of the ACME server to accept this parameter.", "call_func_name": ["java.util.Objects.requireNonNull", "org.bouncycastle.asn1.x500.X500NameBuilder.addRDN"], "call_func_parameter": [["java.lang.Object"], ["org.bouncycastle.asn1.ASN1ObjectIdentifier", "java.lang.String"]], "passed_comments": "/"}, {"index": "315", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CSRBuilder.java", "methodName": "org.shredzone.acme4j.util.CSRBuilder.setCountry", "methodParameterType": "String#", "methodParameterName": "c#", "methodBody": "public void setCountry(String c) {\n        namebuilder.addRDN(BCStyle.C, requireNonNull(c));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the country. <p> Note that it is at the discretion of the ACME server to accept this parameter.", "call_func_name": ["java.util.Objects.requireNonNull", "org.bouncycastle.asn1.x500.X500NameBuilder.addRDN"], "call_func_parameter": [["java.lang.Object"], ["org.bouncycastle.asn1.ASN1ObjectIdentifier", "java.lang.String"]], "passed_comments": "/"}, {"index": "316", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CSRBuilder.java", "methodName": "org.shredzone.acme4j.util.CSRBuilder.sign", "methodParameterType": "KeyPair#", "methodParameterName": "keypair#", "methodBody": "public void sign(KeyPair keypair) throws IOException {\n        Objects.requireNonNull(keypair, \"keypair\");\n        if (namelist.isEmpty() && iplist.isEmpty()) {\n            throw new IllegalStateException(\"No domain or IP address was set\");\n        }\n\n        try {\n            int ix = 0;\n            GeneralName[] gns = new GeneralName[namelist.size() + iplist.size()];\n            for (String name : namelist) {\n                gns[ix++] = new GeneralName(GeneralName.dNSName, name);\n            }\n            for (InetAddress ip : iplist) {\n                gns[ix++] = new GeneralName(GeneralName.iPAddress, ip.getHostAddress());\n            }\n            GeneralNames subjectAltName = new GeneralNames(gns);\n\n            PKCS10CertificationRequestBuilder p10Builder =\n                            new JcaPKCS10CertificationRequestBuilder(namebuilder.build(), keypair.getPublic());\n\n            ExtensionsGenerator extensionsGenerator = new ExtensionsGenerator();\n            extensionsGenerator.addExtension(Extension.subjectAlternativeName, false, subjectAltName);\n            p10Builder.addAttribute(PKCSObjectIdentifiers.pkcs_9_at_extensionRequest, extensionsGenerator.generate());\n\n            PrivateKey pk = keypair.getPrivate();\n            JcaContentSignerBuilder csBuilder = new JcaContentSignerBuilder(\n                            pk instanceof ECKey ? EC_SIGNATURE_ALG : SIGNATURE_ALG);\n            ContentSigner signer = csBuilder.build(pk);\n\n            csr = p10Builder.build(signer);\n        } catch (OperatorCreationException ex) {\n            throw new IOException(\"Could not generate CSR\", ex);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#ConditionalExpression#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block)EnhancedForStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ConditionalExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Signs the completed CSR.", "call_func_name": ["java.util.Objects.requireNonNull", "java.util.List.isEmpty", "java.lang.IllegalStateException.<init>", "java.util.List.size", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.bouncycastle.asn1.x509.GeneralName.<init>", "java.net.InetAddress.getHostAddress", "org.bouncycastle.asn1.x509.GeneralNames.<init>", "org.bouncycastle.asn1.x500.X500NameBuilder.build", "java.security.KeyPair.getPublic", "org.bouncycastle.pkcs.jcajce.JcaPKCS10CertificationRequestBuilder.<init>", "org.bouncycastle.asn1.x509.ExtensionsGenerator.<init>", "org.bouncycastle.asn1.x509.ExtensionsGenerator.addExtension", "org.bouncycastle.asn1.x509.ExtensionsGenerator.generate", "org.bouncycastle.pkcs.PKCS10CertificationRequestBuilder.addAttribute", "java.security.KeyPair.getPrivate", "org.bouncycastle.operator.jcajce.JcaContentSignerBuilder.<init>", "org.bouncycastle.operator.jcajce.JcaContentSignerBuilder.build", "org.bouncycastle.pkcs.PKCS10CertificationRequestBuilder.build", "java.io.IOException.<init>"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], [""], ["java.lang.String"], [""], [""], [""], [""], ["int", "java.lang.String"], [""], ["org.bouncycastle.asn1.x509.GeneralName[]"], [""], [""], ["org.bouncycastle.asn1.x500.X500Name", "java.security.PublicKey"], [""], ["org.bouncycastle.asn1.ASN1ObjectIdentifier", "boolean", "org.bouncycastle.asn1.ASN1Encodable"], [""], ["org.bouncycastle.asn1.ASN1ObjectIdentifier", "org.bouncycastle.asn1.ASN1Encodable"], [""], ["java.lang.String"], ["java.security.PrivateKey"], ["org.bouncycastle.operator.ContentSigner"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "317", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CSRBuilder.java", "methodName": "org.shredzone.acme4j.util.CSRBuilder.getCSR", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public PKCS10CertificationRequest getCSR() {\n        if (csr == null) {\n            throw new IllegalStateException(\"sign CSR first\");\n        }\n\n        return csr;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the PKCS#10 certification request.", "call_func_name": ["java.lang.IllegalStateException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "318", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CSRBuilder.java", "methodName": "org.shredzone.acme4j.util.CSRBuilder.getEncoded", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public byte[] getEncoded() throws IOException {\n        return getCSR().getEncoded();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets an encoded PKCS#10 certification request.", "call_func_name": ["org.shredzone.acme4j.util.CSRBuilder.getCSR", "org.bouncycastle.pkcs.PKCS10CertificationRequest.getEncoded"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.shredzone.acme4j.util.CSRBuilder.getCSR": "Gets the PKCS#10 certification request."}]}, {"index": "319", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CSRBuilder.java", "methodName": "org.shredzone.acme4j.util.CSRBuilder.write", "methodParameterType": "Writer#", "methodParameterName": "w#", "methodBody": "public void write(@WillClose Writer w) throws IOException {\n        if (csr == null) {\n            throw new IllegalStateException(\"sign CSR first\");\n        }\n\n        try (PemWriter pw = new PemWriter(w)) {\n            pw.writeObject(new PemObject(\"CERTIFICATE REQUEST\", getEncoded()));\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Writes the signed certificate request to a  {@link Writer}.", "call_func_name": ["java.lang.IllegalStateException.<init>", "org.bouncycastle.util.io.pem.PemWriter.<init>", "org.shredzone.acme4j.util.CSRBuilder.getEncoded", "org.bouncycastle.util.io.pem.PemObject.<init>", "org.bouncycastle.util.io.pem.PemWriter.writeObject", "org.bouncycastle.util.io.pem.PemWriter.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [["java.lang.String"], ["java.io.Writer"], [""], ["java.lang.String", "byte[]"], ["org.bouncycastle.util.io.pem.PemObjectGenerator"], [""], ["java.lang.Throwable"]], "passed_comments": [{"org.shredzone.acme4j.util.CSRBuilder.getEncoded": "Gets an encoded PKCS#10 certification request."}]}, {"index": "320", "file": "/root/repos/repos25/acme4j/acme4j-utils/src/main/java/org/shredzone/acme4j/util/CSRBuilder.java", "methodName": "org.shredzone.acme4j.util.CSRBuilder.write", "methodParameterType": "OutputStream#", "methodParameterName": "out#", "methodBody": "public void write(@WillClose OutputStream out) throws IOException {\n        write(new OutputStreamWriter(out, \"utf-8\"));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#StringLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Writes the signed certificate request to an  {@link OutputStream}.", "call_func_name": ["java.io.OutputStreamWriter.<init>", "org.shredzone.acme4j.util.CSRBuilder.write"], "call_func_parameter": [["java.io.OutputStream", "java.lang.String"], ["java.io.Writer"]], "passed_comments": [{"org.shredzone.acme4j.util.CSRBuilder.write": "Writes the signed certificate request to a  {@link Writer}."}]}]