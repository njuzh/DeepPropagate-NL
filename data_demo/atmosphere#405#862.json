[{"index": "0", "file": "/root/repos/repos2/atmosphere/modules/native/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.AtmosphereServlet", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AtmosphereServlet() {\n        this(false);\n    }", "AST": "Javadoc#Modifier#SimpleName#BooleanLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(BooleanLiteral)BooleanLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Create an Atmosphere Servlet.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1", "file": "/root/repos/repos2/atmosphere/modules/native/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.AtmosphereServlet", "methodParameterType": "boolean#", "methodParameterName": "isFilter#", "methodBody": "public AtmosphereServlet(boolean isFilter) {\n        this(isFilter, true);\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#BooleanLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Create an Atmosphere Servlet.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2", "file": "/root/repos/repos2/atmosphere/modules/native/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.AtmosphereServlet", "methodParameterType": "boolean#boolean#", "methodParameterName": "isFilter#autoDetectHandlers#", "methodBody": "public AtmosphereServlet(boolean isFilter, boolean autoDetectHandlers) {\n        initializer = new AtmosphereFrameworkInitializer(isFilter, autoDetectHandlers);\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create an Atmosphere Servlet.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3", "file": "/root/repos/repos2/atmosphere/modules/native/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.doHead", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "req#res#", "methodBody": "@Override\n    public void doHead(HttpServletRequest req, HttpServletResponse res)\n            throws IOException, ServletException {\n        doPost(req, res);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}", "call_func_name": ["org.atmosphere.cpr.AtmosphereServlet.doPost"], "call_func_parameter": [["javax.servlet.http.HttpServletRequest", "javax.servlet.http.HttpServletResponse"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereServlet.doPost": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}"}, {"org.atmosphere.cpr.AtmosphereServlet.doPost": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}."}]}, {"index": "4", "file": "/root/repos/repos2/atmosphere/modules/native/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.doOptions", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "req#res#", "methodBody": "@Override\n    public void doOptions(HttpServletRequest req, HttpServletResponse res)\n            throws IOException, ServletException {\n        doPost(req, res);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}", "call_func_name": ["org.atmosphere.cpr.AtmosphereServlet.doPost"], "call_func_parameter": [["javax.servlet.http.HttpServletRequest", "javax.servlet.http.HttpServletResponse"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereServlet.doPost": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}"}, {"org.atmosphere.cpr.AtmosphereServlet.doPost": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}."}]}, {"index": "5", "file": "/root/repos/repos2/atmosphere/modules/native/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.doTrace", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "req#res#", "methodBody": "@Override\n    public void doTrace(HttpServletRequest req, HttpServletResponse res)\n            throws IOException, ServletException {\n        doPost(req, res);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}", "call_func_name": ["org.atmosphere.cpr.AtmosphereServlet.doPost"], "call_func_parameter": [["javax.servlet.http.HttpServletRequest", "javax.servlet.http.HttpServletResponse"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereServlet.doPost": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}"}, {"org.atmosphere.cpr.AtmosphereServlet.doPost": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}."}]}, {"index": "6", "file": "/root/repos/repos2/atmosphere/modules/native/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.doDelete", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "req#res#", "methodBody": "@Override\n    public void doDelete(HttpServletRequest req, HttpServletResponse res)\n            throws IOException, ServletException {\n        doPost(req, res);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}", "call_func_name": ["org.atmosphere.cpr.AtmosphereServlet.doPost"], "call_func_parameter": [["javax.servlet.http.HttpServletRequest", "javax.servlet.http.HttpServletResponse"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereServlet.doPost": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}"}, {"org.atmosphere.cpr.AtmosphereServlet.doPost": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}."}]}, {"index": "7", "file": "/root/repos/repos2/atmosphere/modules/native/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.doPut", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "req#res#", "methodBody": "@Override\n    public void doPut(HttpServletRequest req, HttpServletResponse res)\n            throws IOException, ServletException {\n        doPost(req, res);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}", "call_func_name": ["org.atmosphere.cpr.AtmosphereServlet.doPost"], "call_func_parameter": [["javax.servlet.http.HttpServletRequest", "javax.servlet.http.HttpServletResponse"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereServlet.doPost": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}"}, {"org.atmosphere.cpr.AtmosphereServlet.doPost": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}."}]}, {"index": "8", "file": "/root/repos/repos2/atmosphere/modules/native/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.doGet", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "req#res#", "methodBody": "@Override\n    public void doGet(HttpServletRequest req, HttpServletResponse res)\n            throws IOException, ServletException {\n        doPost(req, res);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}", "call_func_name": ["org.atmosphere.cpr.AtmosphereServlet.doPost"], "call_func_parameter": [["javax.servlet.http.HttpServletRequest", "javax.servlet.http.HttpServletResponse"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereServlet.doPost": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}"}, {"org.atmosphere.cpr.AtmosphereServlet.doPost": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}."}]}, {"index": "9", "file": "/root/repos/repos2/atmosphere/modules/native/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.doPost", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "req#res#", "methodBody": "@Override\n    public void doPost(HttpServletRequest req, HttpServletResponse res)\n            throws IOException, ServletException {\n        initializer.framework().doCometSupport(AtmosphereRequestImpl.wrap(req), AtmosphereResponseImpl.wrap(res));\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}", "call_func_name": ["org.atmosphere.cpr.AtmosphereServlet.framework", "org.atmosphere.cpr.AtmosphereRequestImpl.wrap", "org.atmosphere.cpr.AtmosphereResponseImpl.wrap", "org.atmosphere.cpr.AtmosphereFramework.doCometSupport"], "call_func_parameter": [[""], ["javax.servlet.http.HttpServletRequest"], ["javax.servlet.http.HttpServletResponse"], ["org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequestImpl.wrap": "Wrap an  {@link HttpServletRequest}."}, {"org.atmosphere.cpr.AtmosphereResponseImpl.wrap": "Wrap an  {@link HttpServletResponse}"}, {"org.atmosphere.cpr.AtmosphereFramework.doCometSupport": "Invoke the proprietary  {@link AsyncSupport}."}]}, {"index": "10", "file": "/root/repos/repos2/atmosphere/modules/native/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.event", "methodParameterType": "CometEvent#", "methodParameterName": "cometEvent#", "methodBody": "public void event(CometEvent cometEvent) throws IOException, ServletException {\n        HttpServletRequest req = cometEvent.getHttpServletRequest();\n        HttpServletResponse res = cometEvent.getHttpServletResponse();\n        req.setAttribute(TomcatCometSupport.COMET_EVENT, cometEvent);\n\n        if (!initializer.framework().getAsyncSupport().supportWebSocket()) {\n            if (!initializer.framework().isCometSupportSpecified && !initializer.framework().isCometSupportConfigured.getAndSet(true)) {\n                synchronized (initializer.framework().asyncSupport) {\n                    if (!initializer.framework().asyncSupport.getClass().equals(TomcatCometSupport.class)) {\n                        AsyncSupport current = initializer.framework().asyncSupport;\n                        logger.warn(\"TomcatCometSupport is enabled, switching to it\");\n                        initializer.framework().asyncSupport = new TomcatCometSupport(initializer.framework().config);\n                        if (current instanceof AsynchronousProcessor) {\n                            ((AsynchronousProcessor) current).shutdown();\n                        }\n                        initializer.framework().asyncSupport.init(initializer.framework().config.getServletConfig());\n                    }\n                }\n            }\n        }\n\n        initializer.framework().doCometSupport(AtmosphereRequestImpl.wrap(req), AtmosphereResponseImpl.wrap(res));\n\n        String transport = cometEvent.getHttpServletRequest().getParameter(HeaderConfig.X_ATMOSPHERE_TRANSPORT);\n        if (transport != null && transport.equalsIgnoreCase(HeaderConfig.WEBSOCKET_TRANSPORT)) {\n            cometEvent.close();\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#BooleanLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SynchronizedStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(IfStatement(InfixExpression(PrefixExpression(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)PrefixExpression(PrefixExpression(MethodInvocation(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)PrefixExpression)InfixExpression(Block(SynchronizedStatement(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(Block(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)ClassInstanceCreation)Assignment)ExpressionStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)SynchronizedStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Hack to support Tomcat AIO like other WebServer. This method is invoked by Tomcat when it detect a  {@link Servlet} implements the interface{@link CometProcessor} without invoking {@link Servlet#service}", "call_func_name": ["org.apache.catalina.comet.CometEvent.getHttpServletRequest", "org.apache.catalina.comet.CometEvent.getHttpServletResponse", "javax.servlet.http.HttpServletRequest.setAttribute", "org.atmosphere.cpr.AtmosphereFrameworkInitializer.framework", "org.atmosphere.cpr.AtmosphereFramework.getAsyncSupport", "org.atmosphere.cpr.AsyncSupport.supportWebSocket", "java.util.concurrent.atomic.AtomicBoolean.getAndSet", "java.lang.Object.getClass", "java.lang.Object.equals", "org.slf4j.Logger.warn", "org.atmosphere.container.Tomcat7CometSupport.<init>", "org.atmosphere.cpr.AsynchronousProcessor.shutdown", "org.atmosphere.cpr.AtmosphereConfig.getServletConfig", "org.atmosphere.cpr.AsyncSupport.init", "org.atmosphere.cpr.AtmosphereRequestImpl.wrap", "org.atmosphere.cpr.AtmosphereResponseImpl.wrap", "org.atmosphere.cpr.AtmosphereFramework.doCometSupport", "javax.servlet.http.HttpServletRequest.getParameter", "java.lang.String.equalsIgnoreCase", "javax.servlet.http.HttpServletRequest.getHeaders", "java.util.Enumeration.hasMoreElements", "java.util.Enumeration.nextElement", "java.lang.String.toString", "java.lang.String.split", "java.lang.String.trim", "org.slf4j.Logger.trace", "org.apache.catalina.comet.CometEvent.close"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.Object"], [""], [""], [""], ["boolean"], [""], ["java.lang.Object"], ["java.lang.String"], ["org.atmosphere.cpr.AtmosphereConfig"], [""], [""], ["javax.servlet.ServletConfig"], ["javax.servlet.http.HttpServletRequest"], ["javax.servlet.http.HttpServletResponse"], ["org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Throwable"], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.getAsyncSupport": "Return the current  {@link AsyncSupport}."}, {"org.atmosphere.cpr.AsyncSupport.supportWebSocket": "Return true if this implementation supports the websocket protocol."}, {"org.atmosphere.cpr.AtmosphereConfig.getServletConfig": "Return the  {@link ServletConfig}."}, {"org.atmosphere.cpr.AsyncSupport.init": "Initialize the WebServer using the  {@link ServletConfig}"}, {"org.atmosphere.cpr.AtmosphereRequestImpl.wrap": "Wrap an  {@link HttpServletRequest}."}, {"org.atmosphere.cpr.AtmosphereResponseImpl.wrap": "Wrap an  {@link HttpServletResponse}"}, {"org.atmosphere.cpr.AtmosphereFramework.doCometSupport": "Invoke the proprietary  {@link AsyncSupport}."}]}, {"index": "11", "file": "/root/repos/repos2/atmosphere/modules/native/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.event", "methodParameterType": "org.apache.catalina.comet.CometEvent#", "methodParameterName": "cometEvent#", "methodBody": "public void event(org.apache.catalina.comet.CometEvent cometEvent) throws IOException, ServletException {\n        HttpServletRequest req = cometEvent.getHttpServletRequest();\n        HttpServletResponse res = cometEvent.getHttpServletResponse();\n        req.setAttribute(Tomcat7CometSupport.COMET_EVENT, cometEvent);\n\n        if (!initializer.framework().getAsyncSupport().supportWebSocket()) {\n            if (!initializer.framework().isCometSupportSpecified && !initializer.framework().isCometSupportConfigured.getAndSet(true)) {\n                synchronized (initializer.framework().asyncSupport) {\n                    if (!initializer.framework().asyncSupport.getClass().equals(Tomcat7CometSupport.class)) {\n                        AsyncSupport current = initializer.framework().asyncSupport;\n                        logger.warn(\"TomcatCometSupport7 is enabled, switching to it\");\n                        initializer.framework().asyncSupport = new Tomcat7CometSupport(initializer.framework().config);\n                        if (current instanceof AsynchronousProcessor) {\n                            ((AsynchronousProcessor) current).shutdown();\n                        }\n                        initializer.framework().asyncSupport.init(initializer.framework().config.getServletConfig());\n                    }\n                }\n            }\n        }\n\n        initializer.framework().doCometSupport(AtmosphereRequestImpl.wrap(req), AtmosphereResponseImpl.wrap(res));\n\n        // https://github.com/Atmosphere/atmosphere/issues/920\n        String transport = cometEvent.getHttpServletRequest().getParameter(HeaderConfig.X_ATMOSPHERE_TRANSPORT);\n        boolean webSocketSupported = (transport != null && transport.equalsIgnoreCase(HeaderConfig.WEBSOCKET_TRANSPORT));\n        if (!webSocketSupported) {\n            try {\n                Enumeration<String> connection = req.getHeaders(\"Connection\");\n                if (connection != null && connection.hasMoreElements()) {\n                    String[] e = connection.nextElement().toString().split(\",\");\n                    for (String upgrade : e) {\n                        if (upgrade.trim().equalsIgnoreCase(WEBSOCKET_UPGRADE)) {\n                            webSocketSupported = true;\n                            break;\n                        }\n                    }\n                }\n            } catch (Exception ex) {\n                logger.trace(\"\", ex);\n            }\n        }\n\n        if (webSocketSupported) {\n            cometEvent.close();\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#BooleanLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SynchronizedStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#ParenthesizedExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#BreakStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(IfStatement(InfixExpression(PrefixExpression(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)PrefixExpression(PrefixExpression(MethodInvocation(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)PrefixExpression)InfixExpression(Block(SynchronizedStatement(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(Block(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)ClassInstanceCreation)Assignment)ExpressionStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)SynchronizedStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression)ParenthesizedExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Hack to support Tomcat 7 AIO", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "12", "file": "/root/repos/repos2/atmosphere/modules/native/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.event", "methodParameterType": "HttpEvent#", "methodParameterName": "httpEvent#", "methodBody": "public void event(HttpEvent httpEvent) throws IOException, ServletException {\n        HttpServletRequest req = httpEvent.getHttpServletRequest();\n        HttpServletResponse res = httpEvent.getHttpServletResponse();\n        req.setAttribute(JBossWebCometSupport.HTTP_EVENT, httpEvent);\n\n        if (!initializer.framework().isCometSupportSpecified && !initializer.framework().isCometSupportConfigured.getAndSet(true)) {\n            synchronized (initializer.framework().asyncSupport) {\n                if (!initializer.framework().asyncSupport.getClass().equals(JBossWebCometSupport.class)\n                        && !initializer.framework().asyncSupport.getClass().equals(JBossAsyncSupportWithWebSocket.class)) {\n                    AsyncSupport current = initializer.framework().asyncSupport;\n                    logger.warn(\"JBossWebCometSupport is enabled, switching to it\");\n                    initializer.framework().asyncSupport = new JBossWebCometSupport(initializer.framework().config);\n                    if (current instanceof AsynchronousProcessor) {\n                        ((AsynchronousProcessor) current).shutdown();\n                    }\n                    initializer.framework().asyncSupport.init(initializer.framework().config.getServletConfig());\n                }\n            }\n        }\n\n        boolean isWebSocket = req.getHeader(\"Upgrade\") == null ? false : true;\n        if (isWebSocket && initializer.framework().asyncSupport.getClass().equals(JBossAsyncSupportWithWebSocket.class)) {\n            logger.trace(\"Dispatching websocket event: \" + httpEvent);\n            ((JBossAsyncSupportWithWebSocket) initializer.framework().asyncSupport).dispatch(httpEvent);\n        } else {\n            logger.trace(\"Dispatching comet event: \" + httpEvent);\n            initializer.framework().doCometSupport(AtmosphereRequestImpl.wrap(req), AtmosphereResponseImpl.wrap(res));\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#BooleanLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SynchronizedStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#NullLiteral#InfixExpression#BooleanLiteral#BooleanLiteral#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)PrefixExpression(PrefixExpression(MethodInvocation(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)PrefixExpression)InfixExpression(Block(SynchronizedStatement(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(Block(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(MethodInvocation(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)PrefixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)ClassInstanceCreation)Assignment)ExpressionStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)SynchronizedStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Hack to support JBossWeb AIO like other WebServer. This method is invoked by Tomcat when it detect a  {@link Servlet} implements the interface{@link HttpEventServlet} without invoking {@link Servlet#service}", "call_func_name": ["org.jboss.servlet.http.HttpEvent.getHttpServletRequest", "org.jboss.servlet.http.HttpEvent.getHttpServletResponse", "javax.servlet.http.HttpServletRequest.setAttribute", "org.atmosphere.cpr.AtmosphereFrameworkInitializer.framework", "java.util.concurrent.atomic.AtomicBoolean.getAndSet", "java.lang.Object.getClass", "java.lang.Object.equals", "org.slf4j.Logger.warn", "org.atmosphere.container.JBossWebCometSupport.<init>", "org.atmosphere.cpr.AsynchronousProcessor.shutdown", "org.atmosphere.cpr.AtmosphereConfig.getServletConfig", "org.atmosphere.cpr.AsyncSupport.init", "javax.servlet.http.HttpServletRequest.getHeader", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.slf4j.Logger.trace", "org.atmosphere.container.JBossAsyncSupportWithWebSocket.dispatch", "org.atmosphere.cpr.AtmosphereRequestImpl.wrap", "org.atmosphere.cpr.AtmosphereResponseImpl.wrap", "org.atmosphere.cpr.AtmosphereFramework.doCometSupport"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.Object"], [""], ["boolean"], [""], ["java.lang.Object"], ["java.lang.String"], ["org.atmosphere.cpr.AtmosphereConfig"], [""], [""], ["javax.servlet.ServletConfig"], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["org.jboss.servlet.http.HttpEvent"], ["javax.servlet.http.HttpServletRequest"], ["javax.servlet.http.HttpServletResponse"], ["org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.getServletConfig": "Return the  {@link ServletConfig}."}, {"org.atmosphere.cpr.AsyncSupport.init": "Initialize the WebServer using the  {@link ServletConfig}"}, {"org.atmosphere.container.JBossAsyncSupportWithWebSocket.dispatch": "@param httpEvent"}, {"org.atmosphere.cpr.AtmosphereRequestImpl.wrap": "Wrap an  {@link HttpServletRequest}."}, {"org.atmosphere.cpr.AtmosphereResponseImpl.wrap": "Wrap an  {@link HttpServletResponse}"}, {"org.atmosphere.cpr.AtmosphereFramework.doCometSupport": "Invoke the proprietary  {@link AsyncSupport}."}]}, {"index": "13", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/annotation/Processor.java", "methodName": "org.atmosphere.annotation.Processor.handle", "methodParameterType": "AtmosphereFramework#Class<T>#", "methodParameterName": "framework#annotatedClass#", "methodBody": "public void handle(final AtmosphereFramework framework, final Class<T> annotatedClass);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked by the  {@link org.atmosphere.cpr.AnnotationHandler} when an annotation is detected.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "14", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/JettyServlet30AsyncSupportWithWebSocket.java", "methodName": "org.atmosphere.container.JettyServlet30AsyncSupportWithWebSocket.getContainerName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContainerName() {\n        return config.getServletConfig().getServletContext().getServerInfo() + \" with WebSocket enabled.\";\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the container's name.", "call_func_name": ["java.lang.StringBuilder.<init>", "org.atmosphere.cpr.AtmosphereConfig.getServletConfig", "javax.servlet.ServletConfig.getServletContext", "javax.servlet.ServletContext.getServerInfo", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String"], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.getServletConfig": "Return the  {@link ServletConfig}."}]}, {"index": "15", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java", "methodName": "org.atmosphere.container.Servlet30CometSupport.getContainerName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getContainerName() {\n        return super.getContainerName() + \" using javax.servlet/3.0\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SuperMethodInvocation#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(SuperMethodInvocation(SimpleName)SimpleName)SuperMethodInvocation(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return \"javax.servlet\".", "call_func_name": ["java.lang.StringBuilder.<init>", "org.atmosphere.cpr.AsynchronousProcessor.getContainerName", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""]], "passed_comments": [{"org.atmosphere.cpr.AsynchronousProcessor.getContainerName": "Return the container's name."}]}, {"index": "16", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java", "methodName": "org.atmosphere.container.Servlet30CometSupport.suspend", "methodParameterType": "Action#AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "action#req#res#", "methodBody": "private void suspend(Action action, AtmosphereRequest req, AtmosphereResponse res)\n            throws IOException, ServletException {\n\n        if (!req.isAsyncStarted() && !Utils.webSocketEnabled(req)) {\n            AsyncContext asyncContext = req.startAsync(req, res);\n            asyncContext.addListener(new CometListener(this, res.uuid()));\n            // Do nothing except setting the times out\n            if (action.timeout() != -1) {\n                asyncContext.setTimeout(action.timeout());\n            } else {\n                // Jetty 8 does something really weird if you set it to\n                // Long.MAX_VALUE, which is to resume automatically.\n                asyncContext.setTimeout(Integer.MAX_VALUE);\n            }\n            req.setAttribute(FrameworkConfig.ASYNC_CONTEXT, asyncContext);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Suspend the connection by invoking  {@link AtmosphereRequestImpl#startAsync()}", "call_func_name": ["org.atmosphere.cpr.AtmosphereRequest.isAsyncStarted", "org.atmosphere.util.Utils.webSocketEnabled", "org.atmosphere.cpr.AtmosphereRequest.startAsync", "org.atmosphere.cpr.AtmosphereResponse.uuid", "javax.servlet.AsyncContext.addListener", "org.atmosphere.cpr.Action.timeout", "javax.servlet.AsyncContext.setTimeout", "org.atmosphere.cpr.AtmosphereRequest.setAttribute"], "call_func_parameter": [[""], ["javax.servlet.http.HttpServletRequest"], ["javax.servlet.ServletRequest", "javax.servlet.ServletResponse"], [""], ["javax.servlet.AsyncListener"], [""], ["long"], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequest.isAsyncStarted": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.startAsync": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereResponse.uuid": "Return the  {@link AtmosphereResource#uuid()} used by this object."}, {"org.atmosphere.cpr.AtmosphereRequest.setAttribute": "{@inheritDoc}"}]}, {"index": "17", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/Grizzly2WebSocketSupport.java", "methodName": "org.atmosphere.container.Grizzly2WebSocketSupport.getContainerName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContainerName() {\n        return config.getServletConfig().getServletContext().getServerInfo() + \" with WebSocket enabled.\";\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the container's name.", "call_func_name": ["java.lang.StringBuilder.<init>", "org.atmosphere.cpr.AtmosphereConfig.getServletConfig", "javax.servlet.ServletConfig.getServletContext", "javax.servlet.ServletContext.getServerInfo", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String"], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.getServletConfig": "Return the  {@link ServletConfig}."}]}, {"index": "18", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/JBossAsyncSupportWithWebSocket.java", "methodName": "org.atmosphere.container.JBossAsyncSupportWithWebSocket.dispatch", "methodParameterType": "HttpEvent#", "methodParameterName": "httpEvent#", "methodBody": "public void dispatch(HttpEvent httpEvent) throws IOException, ServletException {\n        if (websocketHandler != null) {\n            websocketHandler.event(httpEvent);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@param httpEvent", "call_func_name": ["org.jboss.servlet.http.HttpEventServlet.event"], "call_func_parameter": [["org.jboss.servlet.http.HttpEvent"]], "passed_comments": "/"}, {"index": "19", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketSupport.java", "methodName": "org.atmosphere.container.GlassFishWebSocketSupport.getContainerName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getContainerName() {\n        return config.getServletConfig().getServletContext().getServerInfo() + \" with WebSocket enabled.\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the container's name.", "call_func_name": ["java.lang.StringBuilder.<init>", "org.atmosphere.cpr.AtmosphereConfig.getServletConfig", "javax.servlet.ServletConfig.getServletContext", "javax.servlet.ServletContext.getServerInfo", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String"], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.getServletConfig": "Return the  {@link ServletConfig}."}]}, {"index": "20", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/JBossWebCometSupport.java", "methodName": "org.atmosphere.container.JBossWebCometSupport.service", "methodParameterType": "AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "req#res#", "methodBody": "public Action service(AtmosphereRequest req, AtmosphereResponse res) throws IOException, ServletException {\n\n        HttpEvent event = (HttpEvent) req.getAttribute(HTTP_EVENT);\n\n        // Comet is not enabled.\n        if (event == null) {\n            logger.error(\"HttpEvent is null, JBoss APR Not Properly installed\");\n            throw unableToDetectComet;\n        }\n\n        if (logger.isTraceEnabled()) {\n            logger.trace(\"Event Type {} for {}\", event.getType(), req.getRequestURL().toString());\n        }\n\n        Action action = null;\n        // For now, we are just interested in HttpEvent.REA\n        AtmosphereResource r = req.resource();\n        if (event.getType() == HttpEvent.EventType.BEGIN) {\n            action = suspended(req, res);\n            if (action.type() == Action.TYPE.SUSPEND) {\n                // Do nothing except setting the times out\n                try {\n                    if (action.timeout() != -1) {\n                        event.setTimeout((int) action.timeout());\n                    } else {\n                        event.setTimeout(Integer.MAX_VALUE);\n                    }\n                    req.setAttribute(SUSPENDED, true);\n                } catch (UnsupportedOperationException ex) {\n                    // Swallow s Tomcat APR isn't supporting time out\n                    // TODO: Must implement the same functionality using a Scheduler\n                }\n            } else if (action.type() == Action.TYPE.RESUME) {\n                close(event);\n            } else {\n                close(event);\n            }\n        } else if (event.getType() == HttpEvent.EventType.READ) {\n            // Not implemented\n            logger.debug(\"Receiving bytes, unable to process them.\");\n        } else if (event.getType() == HttpEvent.EventType.EOF\n                || event.getType() == HttpEvent.EventType.ERROR\n                || event.getType() == HttpEvent.EventType.END) {\n\n            if (r != null && r.isResumed()) {\n                AtmosphereResourceImpl.class.cast(req.resource()).cancel();\n            } else if (req.getAttribute(SUSPENDED) != null && closeConnectionOnInputStream) {\n                req.setAttribute(SUSPENDED, null);\n                action = cancelled(req, res);\n            } else {\n                close(event);\n            }\n        } else if (event.getType() == HttpEvent.EventType.TIMEOUT) {\n            action = timedout(req, res);\n            close(event);\n        }\n        return action;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#PrimitiveType#SimpleName#SimpleName#MethodInvocation#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(TryStatement(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Invoked by the Tomcat AIO when a Comet request gets detected.", "call_func_name": ["org.atmosphere.cpr.AtmosphereRequest.getAttribute", "org.slf4j.Logger.error", "org.slf4j.Logger.isTraceEnabled", "org.jboss.servlet.http.HttpEvent.getType", "org.atmosphere.cpr.AtmosphereRequest.getRequestURL", "java.lang.StringBuffer.toString", "org.slf4j.Logger.trace", "org.atmosphere.cpr.AtmosphereRequest.resource", "org.atmosphere.container.JBossWebCometSupport.suspended", "org.atmosphere.cpr.Action.type", "org.atmosphere.cpr.Action.timeout", "org.jboss.servlet.http.HttpEvent.setTimeout", "java.lang.Boolean.valueOf", "org.atmosphere.cpr.AtmosphereRequest.setAttribute", "org.atmosphere.container.JBossWebCometSupport.close", "org.slf4j.Logger.debug", "org.atmosphere.cpr.AtmosphereResource.isResumed", "java.lang.Class.cast", "org.atmosphere.cpr.AtmosphereResourceImpl.cancel", "java.lang.Boolean.booleanValue", "org.atmosphere.container.JBossWebCometSupport.cancelled", "org.atmosphere.container.JBossWebCometSupport.timedout"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], [""], [""], [""], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], ["org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse"], [""], [""], ["int"], ["boolean"], ["java.lang.String", "java.lang.Object"], ["org.jboss.servlet.http.HttpEvent"], ["java.lang.String"], [""], ["java.lang.Object"], [""], [""], ["org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse"], ["org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequest.getAttribute": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.getRequestURL": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.resource": "The  {@link AtmosphereResource} associated with this request."}, {"org.atmosphere.cpr.AtmosphereRequest.setAttribute": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereResource.isResumed": "Return true if this object has been resumed."}]}, {"index": "21", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/JBossWebCometSupport.java", "methodName": "org.atmosphere.container.JBossWebCometSupport.unableToDetectComet", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private static String unableToDetectComet() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"JBoss failed to detect this is a Comet application because the APR Connector is not enabled. \");\n        sb.append(\"\\nMake sure atmosphere-compat-jboss.jar is not under your WEB-INF/lib and \");\n        sb.append(\"You must use the atmosphere-native-runtime dependency in order to use native Comet Support\");\n        sb.append(\"\\nthere is no context.xml under WEB-INF\");\n        return sb.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tomcat was unable to detect Atmosphere's CometProcessor implementation.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "22", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/GlassFishServlet30WebSocketSupport.java", "methodName": "org.atmosphere.container.GlassFishServlet30WebSocketSupport.getContainerName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getContainerName() {\n        return config.getServletConfig().getServletContext().getServerInfo() + \" with WebSocket enabled.\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the container's name.", "call_func_name": ["java.lang.StringBuilder.<init>", "org.atmosphere.cpr.AtmosphereConfig.getServletConfig", "javax.servlet.ServletConfig.getServletContext", "javax.servlet.ServletContext.getServerInfo", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String"], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.getServletConfig": "Return the  {@link ServletConfig}."}]}, {"index": "23", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/GrizzlyCometSupport.java", "methodName": "org.atmosphere.container.GrizzlyCometSupport.init", "methodParameterType": "ServletConfig#", "methodParameterName": "sc#", "methodBody": "@Override\n    public void init(ServletConfig sc) throws ServletException {\n        super.init(sc);\n\n        atmosphereCtx = sc.getServletContext().getContextPath() + ATMOSPHERE;\n\n        CometEngine cometEngine = CometEngine.getEngine();\n        CometContext context = cometEngine.register(atmosphereCtx);\n        context.setExpirationDelay(-1);\n        logger.debug(\"Created CometContext for atmosphere context: {}\", atmosphereCtx);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SuperMethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#PrefixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Init Grizzly's  {@link CometContext} that will be used to suspend and resume the response.", "call_func_name": ["org.atmosphere.cpr.AsynchronousProcessor.init", "java.lang.StringBuilder.<init>", "javax.servlet.ServletConfig.getServletContext", "javax.servlet.ServletContext.getContextPath", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.sun.grizzly.comet.CometEngine.getEngine", "com.sun.grizzly.comet.CometEngine.register", "com.sun.grizzly.comet.CometContext.setExpirationDelay", "org.slf4j.Logger.debug"], "call_func_parameter": [["javax.servlet.ServletConfig"], [""], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], ["long"], ["java.lang.String", "java.lang.Object"]], "passed_comments": "/"}, {"index": "24", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/GrizzlyCometSupport.java", "methodName": "org.atmosphere.container.GrizzlyCometSupport.suspend", "methodParameterType": "CometContext#Action#AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "ctx#action#req#res#", "methodBody": "private void suspend(CometContext ctx, Action action, AtmosphereRequest req, AtmosphereResponse res) {\n        VoidCometHandler c = new VoidCometHandler(req, res);\n        ctx.setExpirationDelay(action.timeout());\n        ctx.addCometHandler(c);\n        req.setAttribute(ATMOSPHERE, c.hashCode());\n        ctx.addAttribute(\"Time\", System.currentTimeMillis());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Suspend the response", "call_func_name": ["org.atmosphere.cpr.Action.timeout", "com.sun.grizzly.comet.CometContext.setExpirationDelay", "com.sun.grizzly.comet.CometContext.addCometHandler", "java.lang.Object.hashCode", "java.lang.Integer.valueOf", "org.atmosphere.cpr.AtmosphereRequest.setAttribute", "java.lang.System.currentTimeMillis", "java.lang.Long.valueOf", "com.sun.grizzly.comet.CometContext.addAttribute"], "call_func_parameter": [[""], ["long"], ["com.sun.grizzly.comet.CometHandler"], [""], ["int"], ["java.lang.String", "java.lang.Object"], [""], ["long"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequest.setAttribute": "{@inheritDoc}"}]}, {"index": "25", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/GrizzlyCometSupport.java", "methodName": "org.atmosphere.container.GrizzlyCometSupport.resume", "methodParameterType": "AtmosphereRequest#CometContext#", "methodParameterName": "req#ctx#", "methodBody": "private void resume(AtmosphereRequest req, CometContext ctx) {\n\n        if (req.getAttribute(ATMOSPHERE) == null) {\n            return;\n        }\n\n        CometHandler handler = ctx.getCometHandler((Integer) req.getAttribute(ATMOSPHERE));\n        req.removeAttribute(ATMOSPHERE);\n\n        if (req.resource() != null) {\n            try {\n                AtmosphereResourceImpl.class.cast(req.resource()).cancel();\n            } catch (IOException e) {\n                logger.trace(\"\", e);\n            }\n        }\n\n        if (handler != null) {\n            ctx.resumeCometHandler(handler);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Resume the underlying response.", "call_func_name": ["org.atmosphere.cpr.AtmosphereRequest.getAttribute", "java.lang.Integer.intValue", "com.sun.grizzly.comet.CometContext.getCometHandler", "org.atmosphere.cpr.AtmosphereRequest.removeAttribute", "org.atmosphere.cpr.AtmosphereRequest.resource", "java.lang.Class.cast", "org.atmosphere.cpr.AtmosphereResourceImpl.cancel", "org.slf4j.Logger.trace", "com.sun.grizzly.comet.CometContext.resumeCometHandler"], "call_func_parameter": [["java.lang.String"], [""], ["int"], ["java.lang.String"], [""], ["java.lang.Object"], [""], ["java.lang.String", "java.lang.Throwable"], ["com.sun.grizzly.comet.CometHandler"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequest.getAttribute": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.removeAttribute": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.resource": "The  {@link AtmosphereResource} associated with this request."}]}, {"index": "26", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/Tomcat7CometSupport.java", "methodName": "org.atmosphere.container.Tomcat7CometSupport.service", "methodParameterType": "AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "req#res#", "methodBody": "@Override\n    public Action service(AtmosphereRequest req, AtmosphereResponse res)\n            throws IOException, ServletException {\n\n        CometEvent event = (CometEvent) req.getAttribute(COMET_EVENT);\n\n        // Comet is not enabled.\n\n        if (event == null) {\n            throw unableToDetectComet;\n        }\n\n        logger.trace(\"event {} with request {}\", event, req);\n\n        Action action = null;\n        // For now, we are just interested in CometEvent.READ\n        if (event.getEventType() == EventType.BEGIN) {\n            action = suspended(req, res);\n            if (action.type() == Action.TYPE.SUSPEND) {\n                // Do nothing except setting the times out\n                try {\n                    if (action.timeout() != -1) {\n                        event.setTimeout((int) action.timeout());\n                    } else {\n                        event.setTimeout(Integer.MAX_VALUE);\n                    }\n                } catch (UnsupportedOperationException ex) {\n                    // TODO: Must implement the same functionality using a Scheduler\n                    logger.trace(\"Warning: CometEvent.setTimeout not supported on this Tomcat instance. \" +\n                            \" [The Tomcat native connector does not support timeouts on asynchronous I/O.]\");\n                }\n                req.setAttribute(SUSPENDED, true);\n            } else {\n                closeEvent(event, false);\n            }\n        } else if (event.getEventType() == EventType.READ) {\n            // Not implemented\n        } else if (event.getEventSubType() == CometEvent.EventSubType.CLIENT_DISCONNECT) {\n\n            if (req.getAttribute(SUSPENDED) != null) {\n                req.setAttribute(SUSPENDED, null);\n                action = cancelled(req, res);\n            }\n\n            closeEvent(event, false);\n        } else if (event.getEventSubType() == CometEvent.EventSubType.TIMEOUT) {\n            action = timedout(req, res);\n            closeEvent(event, false);\n        } else if (event.getEventType() == EventType.ERROR) {\n            closeEvent(event, false);\n        } else if (event.getEventType() == EventType.END) {\n            if (req.resource() != null && req.resource().isResumed()) {\n                AtmosphereResourceImpl.class.cast(req.resource()).cancel();\n            } else if (req.getAttribute(SUSPENDED) != null && closeConnectionOnInputStream) {\n                req.setAttribute(SUSPENDED, null);\n                action = cancelled(req, res);\n            } else {\n                closeEvent(event, false);\n            }\n        }\n        return action;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#PrimitiveType#SimpleName#SimpleName#MethodInvocation#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(TryStatement(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Invoked by the Tomcat AIO when a Comet request gets detected.", "call_func_name": ["org.atmosphere.cpr.AtmosphereRequest.getAttribute", "org.slf4j.Logger.trace", "org.apache.catalina.comet.CometEvent.getEventType", "org.atmosphere.container.Tomcat7CometSupport.suspended", "org.atmosphere.cpr.Action.type", "org.atmosphere.cpr.Action.timeout", "org.apache.catalina.comet.CometEvent.setTimeout", "org.slf4j.Logger.trace", "java.lang.Boolean.valueOf", "org.atmosphere.cpr.AtmosphereRequest.setAttribute", "org.atmosphere.container.Tomcat7CometSupport.closeEvent", "org.apache.catalina.comet.CometEvent.getEventSubType", "org.atmosphere.container.Tomcat7CometSupport.cancelled", "org.atmosphere.container.Tomcat7CometSupport.timedout", "org.atmosphere.cpr.AtmosphereRequest.resource", "org.atmosphere.cpr.AtmosphereResource.isResumed", "java.lang.Class.cast", "org.atmosphere.cpr.AtmosphereResourceImpl.cancel", "java.lang.Boolean.booleanValue"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], ["org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse"], [""], [""], ["int"], ["java.lang.String"], ["boolean"], ["java.lang.String", "java.lang.Object"], ["org.apache.catalina.comet.CometEvent", "boolean"], [""], ["org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse"], ["org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse"], [""], [""], ["java.lang.Object"], [""], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequest.getAttribute": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.setAttribute": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.resource": "The  {@link AtmosphereResource} associated with this request."}, {"org.atmosphere.cpr.AtmosphereResource.isResumed": "Return true if this object has been resumed."}]}, {"index": "27", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/Tomcat7CometSupport.java", "methodName": "org.atmosphere.container.Tomcat7CometSupport.unableToDetectComet", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private static String unableToDetectComet() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"Tomcat failed to detect this is a Comet application because context.xml \");\n        sb.append(\"is missing or the Http11NioProtocol Connector is not enabled.\");\n        sb.append(\"You must use the atmosphere-native-runtime dependency in order to use native Comet Support\");\n        sb.append(\"\\nIf that's not the case, you can also remove META-INF/context.xml and WEB-INF/lib/atmosphere-compat-tomcat7.jar\");\n        return sb.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tomcat was unable to detect Atmosphere's CometProcessor implementation.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "28", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/GrizzlyServlet30WebSocketSupport.java", "methodName": "org.atmosphere.container.GrizzlyServlet30WebSocketSupport.getContainerName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getContainerName() {\n        return config.getServletConfig().getServletContext().getServerInfo() + \" with WebSocket enabled.\";\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the container's name.", "call_func_name": ["java.lang.StringBuilder.<init>", "org.atmosphere.cpr.AtmosphereConfig.getServletConfig", "javax.servlet.ServletConfig.getServletContext", "javax.servlet.ServletContext.getServerInfo", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String"], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.getServletConfig": "Return the  {@link ServletConfig}."}]}, {"index": "29", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/Grizzly2CometSupport.java", "methodName": "org.atmosphere.container.Grizzly2CometSupport.init", "methodParameterType": "ServletConfig#", "methodParameterName": "sc#", "methodBody": "@Override\n    public void init(ServletConfig sc) throws ServletException {\n        super.init(sc);\n\n        atmosphereCtx = sc.getServletContext().getContextPath() + ATMOSPHERE;\n\n        CometEngine cometEngine = CometEngine.getEngine();\n        CometContext context = cometEngine.register(atmosphereCtx);\n        context.setExpirationDelay(-1);\n        logger.debug(\"Created CometContext for atmosphere context: {}\", atmosphereCtx);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SuperMethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#PrefixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Init Grizzly's  {@link org.glassfish.grizzly.comet.CometContext} that will be used to suspend andresume the response.", "call_func_name": ["org.atmosphere.cpr.AsynchronousProcessor.init", "java.lang.StringBuilder.<init>", "javax.servlet.ServletConfig.getServletContext", "javax.servlet.ServletContext.getContextPath", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.glassfish.grizzly.comet.CometEngine.getEngine", "org.glassfish.grizzly.comet.CometEngine.register", "org.glassfish.grizzly.comet.CometContext.setExpirationDelay", "org.slf4j.Logger.debug"], "call_func_parameter": [["javax.servlet.ServletConfig"], [""], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], ["long"], ["java.lang.String", "java.lang.Object"]], "passed_comments": "/"}, {"index": "30", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/Grizzly2CometSupport.java", "methodName": "org.atmosphere.container.Grizzly2CometSupport.suspend", "methodParameterType": "CometContext#Action#AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "ctx#action#req#res#", "methodBody": "private void suspend(CometContext ctx, Action action, AtmosphereRequest req, AtmosphereResponse res) {\n        VoidCometHandler c = new VoidCometHandler(req, res);\n        ctx.setExpirationDelay(action.timeout());\n        ctx.addCometHandler(c);\n        req.setAttribute(ATMOSPHERE, c.hashCode());\n        ctx.addAttribute(\"Time\", System.currentTimeMillis());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Suspend the response", "call_func_name": ["org.atmosphere.cpr.Action.timeout", "org.glassfish.grizzly.comet.CometContext.setExpirationDelay", "org.glassfish.grizzly.comet.CometContext.addCometHandler", "java.lang.Object.hashCode", "java.lang.Integer.valueOf", "org.atmosphere.cpr.AtmosphereRequest.setAttribute", "java.lang.System.currentTimeMillis", "java.lang.Long.valueOf", "org.glassfish.grizzly.comet.CometContext.addAttribute"], "call_func_parameter": [[""], ["long"], ["org.glassfish.grizzly.comet.CometHandler"], [""], ["int"], ["java.lang.String", "java.lang.Object"], [""], ["long"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequest.setAttribute": "{@inheritDoc}"}]}, {"index": "31", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/Grizzly2CometSupport.java", "methodName": "org.atmosphere.container.Grizzly2CometSupport.resume", "methodParameterType": "AtmosphereRequest#CometContext#", "methodParameterName": "req#ctx#", "methodBody": "private void resume(AtmosphereRequest req, CometContext ctx) {\n\n        if (req.getAttribute(ATMOSPHERE) == null) {\n            return;\n        }\n\n        CometHandler handler = getCometHandler(ctx, (Integer) req.getAttribute(ATMOSPHERE));\n        req.removeAttribute(ATMOSPHERE);\n        if (handler != null) {\n            try {\n                ctx.resumeCometHandler(handler);\n            } catch (IOException e) {\n               logger.error(\"Error resuming CometHandler\", e);\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Resume the underlying response,", "call_func_name": ["org.atmosphere.cpr.AtmosphereRequest.getAttribute", "java.lang.Integer.intValue", "org.atmosphere.container.Grizzly2CometSupport.getCometHandler", "org.atmosphere.cpr.AtmosphereRequest.removeAttribute", "org.glassfish.grizzly.comet.CometContext.resumeCometHandler", "org.slf4j.Logger.error"], "call_func_parameter": [["java.lang.String"], [""], ["org.glassfish.grizzly.comet.CometContext", "int"], ["java.lang.String"], ["org.glassfish.grizzly.comet.CometHandler"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequest.getAttribute": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.removeAttribute": "{@inheritDoc}"}]}, {"index": "32", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/GlassFishv2CometSupport.java", "methodName": "org.atmosphere.container.GlassFishv2CometSupport.init", "methodParameterType": "ServletConfig#", "methodParameterName": "sc#", "methodBody": "@Override\n    public void init(ServletConfig sc) throws ServletException {\n        super.init(sc);\n        atmosphereCtx = sc.getServletContext().getContextPath() + ATMOSPHERE;\n\n        CometEngine cometEngine = CometEngine.getEngine();\n        CometContext context = cometEngine.register(atmosphereCtx);\n        context.setExpirationDelay(-1);\n        logger.debug(\"Created CometContext for atmosphere context: {}\", atmosphereCtx);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SuperMethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#PrefixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Init Grizzly's  {@link CometContext} that will be used to suspend andresume the response.", "call_func_name": ["org.atmosphere.cpr.AsynchronousProcessor.init", "java.lang.StringBuilder.<init>", "javax.servlet.ServletConfig.getServletContext", "javax.servlet.ServletContext.getContextPath", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.sun.enterprise.web.connector.grizzly.comet.CometEngine.getEngine", "com.sun.enterprise.web.connector.grizzly.comet.CometEngine.register", "com.sun.enterprise.web.connector.grizzly.comet.CometContext.setExpirationDelay", "org.slf4j.Logger.debug"], "call_func_parameter": [["javax.servlet.ServletConfig"], [""], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], ["long"], ["java.lang.String", "java.lang.Object"]], "passed_comments": "/"}, {"index": "33", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/GlassFishv2CometSupport.java", "methodName": "org.atmosphere.container.GlassFishv2CometSupport.service", "methodParameterType": "AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "req#res#", "methodBody": "@Override\n    public Action service(AtmosphereRequest req, AtmosphereResponse res)\n            throws IOException, ServletException {\n        CometContext ctx = CometEngine.getEngine().getCometContext(atmosphereCtx);\n        Action action = suspended(req, res);\n        if (action.type() == Action.TYPE.SUSPEND) {\n            suspend(ctx, action, req, res);\n        } else if (action.type() == Action.TYPE.RESUME) {\n            resume(req, ctx);\n        }\n        return action;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["com.sun.enterprise.web.connector.grizzly.comet.CometEngine.getEngine", "com.sun.enterprise.web.connector.grizzly.comet.CometEngine.getCometContext", "org.atmosphere.container.GlassFishv2CometSupport.suspended", "org.atmosphere.cpr.Action.type", "org.atmosphere.container.GlassFishv2CometSupport.suspend", "org.atmosphere.container.GlassFishv2CometSupport.resume"], "call_func_parameter": [[""], ["java.lang.String"], ["org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse"], [""], ["com.sun.enterprise.web.connector.grizzly.comet.CometContext", "org.atmosphere.cpr.Action", "org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse"], ["org.atmosphere.cpr.AtmosphereRequest", "com.sun.enterprise.web.connector.grizzly.comet.CometContext"]], "passed_comments": [{"org.atmosphere.container.GlassFishv2CometSupport.suspend": "Suspend the response"}, {"org.atmosphere.container.GlassFishv2CometSupport.resume": "Resume the underlying response."}]}, {"index": "34", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/GlassFishv2CometSupport.java", "methodName": "org.atmosphere.container.GlassFishv2CometSupport.suspend", "methodParameterType": "CometContext#Action#AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "ctx#action#req#res#", "methodBody": "private void suspend(CometContext ctx, Action action, AtmosphereRequest req, AtmosphereResponse res) {\n        VoidCometHandler c = new VoidCometHandler(req, res);\n        ctx.setExpirationDelay(action.timeout());\n        ctx.addCometHandler(c);\n        ctx.addAttribute(\"Time\", System.currentTimeMillis());\n        req.setAttribute(ATMOSPHERE, c.hashCode());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Suspend the response", "call_func_name": ["org.atmosphere.cpr.Action.timeout", "com.sun.enterprise.web.connector.grizzly.comet.CometContext.setExpirationDelay", "com.sun.enterprise.web.connector.grizzly.comet.CometContext.addCometHandler", "java.lang.System.currentTimeMillis", "java.lang.Long.valueOf", "com.sun.enterprise.web.connector.grizzly.comet.CometContext.addAttribute", "java.lang.Object.hashCode", "java.lang.Integer.valueOf", "org.atmosphere.cpr.AtmosphereRequest.setAttribute"], "call_func_parameter": [[""], ["long"], ["com.sun.enterprise.web.connector.grizzly.comet.CometHandler"], [""], ["long"], ["java.lang.Object", "java.lang.Object"], [""], ["int"], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequest.setAttribute": "{@inheritDoc}"}]}, {"index": "35", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/GlassFishv2CometSupport.java", "methodName": "org.atmosphere.container.GlassFishv2CometSupport.resume", "methodParameterType": "AtmosphereRequest#CometContext#", "methodParameterName": "req#ctx#", "methodBody": "private void resume(AtmosphereRequest req, CometContext ctx) {\n\n        if (req.getAttribute(ATMOSPHERE) == null) {\n            return;\n        }\n\n        CometHandler handler = ctx.getCometHandler((Integer) req.getAttribute(ATMOSPHERE));\n        req.removeAttribute(ATMOSPHERE);\n        if (handler != null) {\n            ctx.resumeCometHandler(handler);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Resume the underlying response.", "call_func_name": ["org.atmosphere.cpr.AtmosphereRequest.getAttribute", "java.lang.Integer.intValue", "com.sun.enterprise.web.connector.grizzly.comet.CometContext.getCometHandler", "org.atmosphere.cpr.AtmosphereRequest.removeAttribute", "com.sun.enterprise.web.connector.grizzly.comet.CometContext.resumeCometHandler"], "call_func_parameter": [["java.lang.String"], [""], ["int"], ["java.lang.String"], ["com.sun.enterprise.web.connector.grizzly.comet.CometHandler"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequest.getAttribute": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.removeAttribute": "{@inheritDoc}"}]}, {"index": "36", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/JettyAsyncSupportWithWebSocket.java", "methodName": "org.atmosphere.container.JettyAsyncSupportWithWebSocket.getContainerName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContainerName() {\n        return config.getServletConfig().getServletContext().getServerInfo() + \" with WebSocket enabled.\";\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the container's name.", "call_func_name": ["java.lang.StringBuilder.<init>", "org.atmosphere.cpr.AtmosphereConfig.getServletConfig", "javax.servlet.ServletConfig.getServletContext", "javax.servlet.ServletContext.getServerInfo", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String"], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.getServletConfig": "Return the  {@link ServletConfig}."}]}, {"index": "37", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/AbstractJetty9AsyncSupportWithWebSocket.java", "methodName": "org.atmosphere.container.AbstractJetty9AsyncSupportWithWebSocket.getContainerName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContainerName() {\n        return config.getServletConfig().getServletContext().getServerInfo() + \" with WebSocket enabled.\";\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the container's name.", "call_func_name": ["java.lang.StringBuilder.<init>", "org.atmosphere.cpr.AtmosphereConfig.getServletConfig", "javax.servlet.ServletConfig.getServletContext", "javax.servlet.ServletContext.getServerInfo", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String"], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.getServletConfig": "Return the  {@link ServletConfig}."}]}, {"index": "38", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/BlockingIOCometSupport.java", "methodName": "org.atmosphere.container.BlockingIOCometSupport.suspend", "methodParameterType": "Action#AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "action#req#res#", "methodBody": "protected void suspend(Action action, AtmosphereRequest req, AtmosphereResponse res)\n            throws IOException, ServletException {\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        req.setAttribute(LATCH, latch);\n\n        boolean ok = true;\n        AtmosphereResource resource = req.resource();\n        if (resource != null) {\n            try {\n                resource.addEventListener(new OnResume() {\n                    @Override\n                    public void onResume(AtmosphereResourceEvent event) {\n                        latch.countDown();\n                    }\n                });\n                if (action.timeout() != -1) {\n                    ok = latch.await(action.timeout(), TimeUnit.MILLISECONDS);\n                } else {\n                    latch.await();\n                }\n            } catch (InterruptedException ex) {\n                logger.trace(\"\", ex);\n            } finally {\n                if (!ok) {\n                    timedout(req, res);\n                } else {\n                    AtmosphereResourceImpl.class.cast(resource).cancel();\n                }\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#TryStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause(Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)TryStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Suspend the connection by blocking the current  {@link Thread}", "call_func_name": ["java.util.concurrent.CountDownLatch.<init>", "org.atmosphere.cpr.AtmosphereRequest.setAttribute", "org.atmosphere.cpr.AtmosphereRequest.resource", "org.atmosphere.cpr.AtmosphereResource.addEventListener", "org.atmosphere.cpr.Action.timeout", "java.util.concurrent.CountDownLatch.await", "java.util.concurrent.CountDownLatch.await", "org.atmosphere.container.BlockingIOCometSupport.timedout", "java.lang.Class.cast", "org.atmosphere.cpr.AtmosphereResourceImpl.cancel", "org.slf4j.Logger.trace"], "call_func_parameter": [["int"], ["java.lang.String", "java.lang.Object"], [""], ["org.atmosphere.cpr.AtmosphereResourceEventListener"], [""], ["long", "java.util.concurrent.TimeUnit"], [""], ["org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse"], ["java.lang.Object"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequest.setAttribute": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.resource": "The  {@link AtmosphereResource} associated with this request."}, {"org.atmosphere.cpr.AtmosphereResource.addEventListener": "Add a  {@link AtmosphereResourceEventListener}."}]}, {"index": "39", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/GlassFishServ30WebSocketSupport.java", "methodName": "org.atmosphere.container.GlassFishServ30WebSocketSupport.getContainerName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContainerName() {\n        return config.getServletConfig().getServletContext().getServerInfo() + \" with WebSocket enabled.\";\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the container's name.", "call_func_name": ["java.lang.StringBuilder.<init>", "org.atmosphere.cpr.AtmosphereConfig.getServletConfig", "javax.servlet.ServletConfig.getServletContext", "javax.servlet.ServletContext.getServerInfo", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String"], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.getServletConfig": "Return the  {@link ServletConfig}."}]}, {"index": "40", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/TomcatCometSupport.java", "methodName": "org.atmosphere.container.TomcatCometSupport.service", "methodParameterType": "AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "req#res#", "methodBody": "public Action service(AtmosphereRequest req, AtmosphereResponse res)\n            throws IOException, ServletException {\n\n        CometEvent event = (CometEvent) req.getAttribute(COMET_EVENT);\n\n        // Comet is not enabled.\n        if (event == null) {\n            throw new IllegalStateException(unableToDetectComet());\n        }\n\n        Action action = null;\n        // For now, we are just interested in CometEvent.READ\n        if (event.getEventType() == EventType.BEGIN) {\n            action = suspended(req, res);\n            if (action.type() == Action.TYPE.SUSPEND) {\n                // Do nothing except setting the times out\n                try {\n                    if (action.timeout() != -1) {\n                        event.setTimeout((int) action.timeout());\n                    } else {\n                        event.setTimeout(Integer.MAX_VALUE);\n                    }\n                    req.setAttribute(SUSPENDED, true);\n                } catch (UnsupportedOperationException ex) {\n                    // TODO: Must implement the same functionality using a Scheduler\n                    logger.trace(\"Warning: CometEvent.setTimeout not supported on this Tomcat instance. \" +\n                            \" [The Tomcat native connector does not support timeouts on asynchronous I/O.]\");\n                }\n                req.setAttribute(SUSPENDED, true);\n            } else {\n                close(event);\n            }\n        } else if (event.getEventType() == EventType.READ) {\n            // Not implemented\n        } else if (event.getEventSubType() == CometEvent.EventSubType.CLIENT_DISCONNECT) {\n\n            if (req.getAttribute(SUSPENDED) != null && closeConnectionOnInputStream) {\n                req.setAttribute(SUSPENDED, null);\n                action = cancelled(req, res);\n            }\n            close(event);\n        } else if (event.getEventSubType() == CometEvent.EventSubType.TIMEOUT) {\n            action = timedout(req, res);\n            close(event);\n        } else if (event.getEventType() == EventType.ERROR) {\n            close(event);\n        } else if (event.getEventType() == EventType.END) {\n            if (req.resource() != null && req.resource().isResumed()) {\n                AtmosphereResourceImpl.class.cast(req.resource()).cancel();\n            } else if (req.getAttribute(SUSPENDED) != null && closeConnectionOnInputStream) {\n                req.setAttribute(SUSPENDED, null);\n                action = cancelled(req, res);\n            } else {\n                close(event);\n            }\n        }\n        return action;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#PrimitiveType#SimpleName#SimpleName#MethodInvocation#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(TryStatement(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Invoked by the Tomcat AIO when a Comet request gets detected.", "call_func_name": ["org.atmosphere.cpr.AtmosphereRequest.getAttribute", "org.atmosphere.container.TomcatCometSupport.unableToDetectComet", "java.lang.IllegalStateException.<init>", "org.apache.catalina.CometEvent.getEventType", "org.atmosphere.container.TomcatCometSupport.suspended", "org.atmosphere.cpr.Action.type", "org.atmosphere.cpr.Action.timeout", "org.apache.catalina.CometEvent.setTimeout", "java.lang.Boolean.valueOf", "org.atmosphere.cpr.AtmosphereRequest.setAttribute", "org.slf4j.Logger.trace", "org.atmosphere.container.TomcatCometSupport.close", "org.apache.catalina.CometEvent.getEventSubType", "java.lang.Boolean.booleanValue", "org.atmosphere.container.TomcatCometSupport.cancelled", "org.atmosphere.container.TomcatCometSupport.timedout", "org.atmosphere.cpr.AtmosphereRequest.resource", "org.atmosphere.cpr.AtmosphereResource.isResumed", "java.lang.Class.cast", "org.atmosphere.cpr.AtmosphereResourceImpl.cancel"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], [""], ["org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse"], [""], [""], ["int"], ["boolean"], ["java.lang.String", "java.lang.Object"], ["java.lang.String"], ["org.apache.catalina.CometEvent"], [""], [""], ["org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse"], ["org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse"], [""], [""], ["java.lang.Object"], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequest.getAttribute": "{@inheritDoc}"}, {"org.atmosphere.container.TomcatCometSupport.unableToDetectComet": "Tomcat was unable to detect Atmosphere's CometProcessor implementation."}, {"org.atmosphere.cpr.AtmosphereRequest.setAttribute": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.resource": "The  {@link AtmosphereResource} associated with this request."}, {"org.atmosphere.cpr.AtmosphereResource.isResumed": "Return true if this object has been resumed."}]}, {"index": "41", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/container/TomcatCometSupport.java", "methodName": "org.atmosphere.container.TomcatCometSupport.unableToDetectComet", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private static String unableToDetectComet() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"Tomcat failed to detect this is a Comet application because context.xml \");\n        sb.append(\"is missing or the Http11NioProtocol Connector is not enabled.\");\n        sb.append(\"You must use the atmosphere-native-runtime dependency in order to use native Comet Support\");\n        sb.append(\"\\nIf that's not the case, you can also remove META-INF/context.xml and WEB-INF/lib/atmosphere-compat-tomcat.jar\");\n        return sb.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tomcat was unable to detect Atmosphere's CometProcessor implementation.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "42", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterListener.java", "methodName": "org.atmosphere.cpr.BroadcasterListener.onPostCreate", "methodParameterType": "Broadcaster#", "methodParameterName": "b#", "methodBody": "void onPostCreate(Broadcaster b);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked just after the  {@link Broadcaster} has been created.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "43", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterListener.java", "methodName": "org.atmosphere.cpr.BroadcasterListener.onComplete", "methodParameterType": "Broadcaster#", "methodParameterName": "b#", "methodBody": "void onComplete(Broadcaster b);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when the Broadcast operation completes for all  {@link org.atmosphere.cpr.AtmosphereResource}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "44", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterListener.java", "methodName": "org.atmosphere.cpr.BroadcasterListener.onPreDestroy", "methodParameterType": "Broadcaster#", "methodParameterName": "b#", "methodBody": "void onPreDestroy(Broadcaster b);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked before a Broadcaster is about to be deleted.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "45", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterListener.java", "methodName": "org.atmosphere.cpr.BroadcasterListener.onAddAtmosphereResource", "methodParameterType": "Broadcaster#AtmosphereResource#", "methodParameterName": "b#r#", "methodBody": "void onAddAtmosphereResource(Broadcaster b, AtmosphereResource r);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when an  {@link AtmosphereResource} is getting associated to a {@link Broadcaster}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "46", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterListener.java", "methodName": "org.atmosphere.cpr.BroadcasterListener.onRemoveAtmosphereResource", "methodParameterType": "Broadcaster#AtmosphereResource#", "methodParameterName": "b#r#", "methodBody": "void onRemoveAtmosphereResource(Broadcaster b, AtmosphereResource r);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when an  {@link AtmosphereResource} is getting removed to a {@link Broadcaster}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "47", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterListener.java", "methodName": "org.atmosphere.cpr.BroadcasterListener.onMessage", "methodParameterType": "Broadcaster#Deliver#", "methodParameterName": "b#deliver#", "methodBody": "void onMessage(Broadcaster b, Deliver deliver);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when a  {@link Broadcaster#broadcast(Object)} is called.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "48", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptor.java", "methodName": "org.atmosphere.cpr.AtmosphereInterceptor.inspect", "methodParameterType": "AtmosphereResource#", "methodParameterName": "r#", "methodBody": "Action inspect(AtmosphereResource r);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked before an  {@link AtmosphereResource} gets dispatched to {@link AtmosphereHandler}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "49", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptor.java", "methodName": "org.atmosphere.cpr.AtmosphereInterceptor.postInspect", "methodParameterType": "AtmosphereResource#", "methodParameterName": "r#", "methodBody": "void postInspect(AtmosphereResource r);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked after an  {@link AtmosphereResource} gets dispatched to {@link AtmosphereHandler}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "50", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptor.java", "methodName": "org.atmosphere.cpr.AtmosphereInterceptor.destroy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void destroy();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Clean the AtmosphereInterceptor when removed or when the Atmosphere is undeployed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "51", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereSession.java", "methodName": "org.atmosphere.cpr.AtmosphereSession.AtmosphereSession", "methodParameterType": "AtmosphereResource#", "methodParameterName": "resource#", "methodBody": "public AtmosphereSession(AtmosphereResource resource) {\n        this(resource, resource.getAtmosphereConfig().getBroadcasterFactory().lookupAll().toArray(new Broadcaster[]{}));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#ArrayInitializer#ArrayCreation#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer)ArrayInitializer)ArrayCreation)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Track the current  {@link AtmosphereResource} with all created {@link Broadcaster}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "52", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereSession.java", "methodName": "org.atmosphere.cpr.AtmosphereSession.acquire", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AtmosphereResource acquire() {\n        return resource.get();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the  {@link AtmosphereResource} associated with this session. If there is no {@link AtmosphereResource}associated, return null.", "call_func_name": ["java.util.concurrent.atomic.AtomicReference.get"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "53", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereSession.java", "methodName": "org.atmosphere.cpr.AtmosphereSession.tryAcquire", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AtmosphereResource tryAcquire() throws InterruptedException {\n        return tryAcquire(60);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the  {@link AtmosphereResource} associated with this session. If there is no {@link AtmosphereResource}associated, wait until the  {@link AtmosphereResource} is retrieved. This method will wait 60 seconds and then return.", "call_func_name": ["org.atmosphere.cpr.AtmosphereSession.tryAcquire"], "call_func_parameter": [["int"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereSession.tryAcquire": "Retrieve the  {@link AtmosphereResource} associated with this session. If there is no {@link AtmosphereResource}associated, wait until the  {@link AtmosphereResource} is retrieved.<p>If the resource uses long polling as its transport, this method treats the resource as a single use connection and will make subsequent callers wait until the client reconnects and the  {@link #broadcasterListener}'s {@link BroadcasterListenerAdapter#onAddAtmosphereResource} method gets called again.</p><p>WARNING: Use this method with long polling only if you intend to broadcast to the returned resource. If no broadcast is made, the client won't have to reconnect, the resource won't get re-added, and any subsequent calls will have to wait until the timeout is reached.</p>"}]}, {"index": "54", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereSession.java", "methodName": "org.atmosphere.cpr.AtmosphereSession.tryAcquire", "methodParameterType": "int#", "methodParameterName": "timeInSecond#", "methodBody": "public AtmosphereResource tryAcquire(int timeInSecond) throws InterruptedException {\n        if (usesLongPolling || resource.get() == null) {\n            latch.tryAcquire(timeInSecond, TimeUnit.SECONDS);\n        }\n        return resource.get();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the  {@link AtmosphereResource} associated with this session. If there is no {@link AtmosphereResource}associated, wait until the  {@link AtmosphereResource} is retrieved.<p>If the resource uses long polling as its transport, this method treats the resource as a single use connection and will make subsequent callers wait until the client reconnects and the  {@link #broadcasterListener}'s {@link BroadcasterListenerAdapter#onAddAtmosphereResource} method gets called again.</p><p>WARNING: Use this method with long polling only if you intend to broadcast to the returned resource. If no broadcast is made, the client won't have to reconnect, the resource won't get re-added, and any subsequent calls will have to wait until the timeout is reached.</p>", "call_func_name": ["java.util.concurrent.atomic.AtomicReference.get", "java.util.concurrent.Semaphore.tryAcquire"], "call_func_parameter": [[""], ["long", "java.util.concurrent.TimeUnit"]], "passed_comments": "/"}, {"index": "55", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getPathInfo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    String getPathInfo();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "56", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getPathTranslated", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    String getPathTranslated();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "57", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getQueryString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    String getQueryString();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "58", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getRemoteUser", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    String getRemoteUser();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "59", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getRequestedSessionId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    String getRequestedSessionId();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "60", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getMethod", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    String getMethod();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "61", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getPart", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "@Override\n    Part getPart(String name) throws IOException, ServletException;", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "62", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getParts", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    Collection<Part> getParts() throws IOException, ServletException;", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "63", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getContentType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    String getContentType();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "64", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getDispatcherType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    DispatcherType getDispatcherType();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "65", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getServletPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    String getServletPath();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "66", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getRequestURI", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    String getRequestURI();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "67", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getRequestURL", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    StringBuffer getRequestURL();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "68", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getHeaders", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "@Override\n    Enumeration getHeaders(String name);", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "69", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getIntHeader", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "@Override\n    int getIntHeader(String name);", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "70", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getHeaderNames", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    Enumeration<String> getHeaderNames();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "71", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.authenticate", "methodParameterType": "HttpServletResponse#", "methodParameterName": "response#", "methodBody": "@Override\n    boolean authenticate(HttpServletResponse response) throws IOException, ServletException;", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "72", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getAuthType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    String getAuthType();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "73", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getContextPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    String getContextPath();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "74", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getCookies", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    Cookie[] getCookies();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "75", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getDateHeader", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "@Override\n    long getDateHeader(String name);", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "76", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getHeader", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "@Override\n    String getHeader(String s);", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "77", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getParameter", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "@Override\n    String getParameter(String s);", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "78", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getParameterMap", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    Map<String, String[]> getParameterMap();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#Dimension#ArrayType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "79", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getParameterNames", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    Enumeration<String> getParameterNames();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "80", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getParameterValues", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "@Override\n    String[] getParameterValues(String s);", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "81", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getProtocol", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    String getProtocol();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "82", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getInputStream", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    ServletInputStream getInputStream() throws IOException;", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "83", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getReader", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    BufferedReader getReader() throws IOException;", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "84", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getRealPath", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "@Override\n    String getRealPath(String path);", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "85", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.headers", "methodParameterType": "Map<String,String>#", "methodParameterName": "headers#", "methodBody": "AtmosphereRequest headers(Map<String, String> headers);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Add all headers contained within the Map.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "86", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.header", "methodParameterType": "String#String#", "methodParameterName": "name#value#", "methodBody": "AtmosphereRequest header(String name, String value);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Add a header.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "87", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.queryString", "methodParameterType": "String#", "methodParameterName": "qs#", "methodBody": "AtmosphereRequest queryString(String qs);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set the query string.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "88", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.body", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AtmosphereRequestImpl.Body body();", "AST": "Javadoc#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the request's body. This method will return an empty Body if the underlying container or framework is using InputStream or Reader.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "89", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.setAttribute", "methodParameterType": "String#Object#", "methodParameterName": "s#o#", "methodBody": "@Override\n    void setAttribute(String s, Object o);", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "90", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.setCharacterEncoding", "methodParameterType": "String#", "methodParameterName": "env#", "methodBody": "@Override\n    void setCharacterEncoding(String env) throws UnsupportedEncodingException;", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "91", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.startAsync", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    AsyncContext startAsync();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "92", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.startAsync", "methodParameterType": "ServletRequest#ServletResponse#", "methodParameterName": "request#response#", "methodBody": "@Override\n    AsyncContext startAsync(ServletRequest request, ServletResponse response);", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "93", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getAsyncContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    AsyncContext getAsyncContext();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "94", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getAttribute", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "@Override\n    Object getAttribute(String s);", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "95", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.removeAttribute", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "@Override\n    void removeAttribute(String name);", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "96", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.attributes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "LocalAttributes attributes();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the locally added attributes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "97", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getSession", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    HttpSession getSession();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "98", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getSession", "methodParameterType": "boolean#", "methodParameterName": "create#", "methodBody": "@Override\n    HttpSession getSession(boolean create);", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "99", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getUserPrincipal", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    Principal getUserPrincipal();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "100", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.isRequestedSessionIdFromCookie", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    boolean isRequestedSessionIdFromCookie();", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "101", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.isRequestedSessionIdFromUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    boolean isRequestedSessionIdFromUrl();", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "102", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.isRequestedSessionIdFromURL", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    boolean isRequestedSessionIdFromURL();", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "103", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.isRequestedSessionIdValid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    boolean isRequestedSessionIdValid();", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "104", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.isUserInRole", "methodParameterType": "String#", "methodParameterName": "role#", "methodBody": "@Override\n    boolean isUserInRole(String role);", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "105", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.login", "methodParameterType": "String#String#", "methodParameterName": "username#password#", "methodBody": "@Override\n    void login(String username, String password) throws ServletException;", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "106", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.logout", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    void logout() throws ServletException;", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "107", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getRemoteAddr", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    String getRemoteAddr();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "108", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getRemoteHost", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    String getRemoteHost();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "109", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getRemotePort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    int getRemotePort();", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "110", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getRequestDispatcher", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "@Override\n    RequestDispatcher getRequestDispatcher(String path);", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "111", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getScheme", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    String getScheme();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "112", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getServerName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    String getServerName();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "113", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getServerPort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    int getServerPort();", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "114", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getServletContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    ServletContext getServletContext();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "115", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.isAsyncStarted", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    boolean isAsyncStarted();", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "116", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.isAsyncSupported", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    boolean isAsyncSupported();", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "117", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.isSecure", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    boolean isSecure();", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "118", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getLocalName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    String getLocalName();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "119", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getLocalPort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    int getLocalPort();", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "120", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getLocalAddr", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    String getLocalAddr();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "121", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getLocale", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    Locale getLocale();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "122", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.resource", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AtmosphereResource resource();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The  {@link AtmosphereResource} associated with this request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "123", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getLocales", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    Enumeration<Locale> getLocales();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "124", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.dispatchRequestAsynchronously", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean dispatchRequestAsynchronously();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Dispatch the request asynchronously to container. The default is false.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "125", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.isDestroyable", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isDestroyable();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Cjeck if this object can be destroyed. Default is true.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "126", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getAttributeNames", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    Enumeration<String> getAttributeNames();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "127", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.localAttributes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "LocalAttributes localAttributes();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return a subset of the attributes set on this AtmosphereRequest, set locally by the framework or by an application. Attributes added using this method won't be propagated to the original, container-only, native request object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "128", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getCharacterEncoding", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    String getCharacterEncoding();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "129", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.getContentLength", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    int getContentLength();", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "130", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.uuid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String uuid();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the underlying  {@link AtmosphereResource#uuid()}. May return \"0\" if no  {@link AtmosphereResource}is associated with this object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "131", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java", "methodName": "org.atmosphere.cpr.AtmosphereRequest.setRequest", "methodParameterType": "ServletRequest#", "methodParameterName": "request#", "methodBody": "void setRequest(ServletRequest request);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "132", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Serializer.java", "methodName": "org.atmosphere.cpr.Serializer.write", "methodParameterType": "OutputStream#Object#", "methodParameterName": "os#o#", "methodBody": "void write(OutputStream os, Object o) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Serialize the  {@link Object} using the {@link OutputStream}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "133", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponseImpl.java", "methodName": "org.atmosphere.cpr.AtmosphereResponseImpl.newInstance", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final static AtmosphereResponse newInstance() {\n        return new Builder().build();\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create an instance not associated with any response parent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "134", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponseImpl.java", "methodName": "org.atmosphere.cpr.AtmosphereResponseImpl.newInstance", "methodParameterType": "AtmosphereRequest#", "methodParameterName": "request#", "methodBody": "public final static AtmosphereResponse newInstance(AtmosphereRequest request) {\n        return new AtmosphereResponseImpl(null, request, request.isDestroyable());\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#NullLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new instance to use with WebSocket.", "call_func_name": ["org.atmosphere.cpr.AtmosphereRequest.isDestroyable", "org.atmosphere.cpr.AtmosphereResponseImpl.<init>"], "call_func_parameter": [[""], ["org.atmosphere.cpr.AsyncIOWriter", "org.atmosphere.cpr.AtmosphereRequest", "boolean"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequest.isDestroyable": "Cjeck if this object can be destroyed. Default is true."}]}, {"index": "135", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponseImpl.java", "methodName": "org.atmosphere.cpr.AtmosphereResponseImpl.newInstance", "methodParameterType": "AtmosphereConfig#AtmosphereRequest#WebSocket#", "methodParameterName": "config#request#webSocket#", "methodBody": "public final static AtmosphereResponse newInstance(AtmosphereConfig config, AtmosphereRequest request, WebSocket webSocket) {\n        boolean destroyable;\n        String s = config.getInitParameter(RECYCLE_ATMOSPHERE_REQUEST_RESPONSE);\n        if (s != null && Boolean.valueOf(s)) {\n            destroyable = true;\n        } else {\n            destroyable = false;\n        }\n        return new AtmosphereResponseImpl(webSocket, request, destroyable);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new instance to use with WebSocket.", "call_func_name": ["org.atmosphere.cpr.AtmosphereConfig.getInitParameter", "java.lang.Boolean.valueOf", "java.lang.Boolean.booleanValue", "org.atmosphere.cpr.AtmosphereResponseImpl.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], [""], ["org.atmosphere.cpr.AsyncIOWriter", "org.atmosphere.cpr.AtmosphereRequest", "boolean"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.getInitParameter": "Return the value of the init params defined in web.xml or application.xml."}]}, {"index": "136", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponseImpl.java", "methodName": "org.atmosphere.cpr.AtmosphereResponseImpl.wrap", "methodParameterType": "HttpServletResponse#", "methodParameterName": "response#", "methodBody": "public final static AtmosphereResponse wrap(HttpServletResponse response) {\n        return new Builder().response(response).build();\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Wrap an  {@link HttpServletResponse}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "137", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponseImpl.java", "methodName": "org.atmosphere.cpr.AtmosphereResponseImpl.writeWithBuffering", "methodParameterType": "Object#", "methodParameterName": "data#", "methodBody": "private void writeWithBuffering(Object data) throws java.io.IOException {\n        if (NO_BUFFERING.get() != null) {\n            boolean b = forceAsyncIOWriter;\n            try {\n                if (data instanceof String) {\n                    asyncIOWriter.write(AtmosphereResponseImpl.this, (String)data);\n                } else if (data instanceof byte[]){\n                    asyncIOWriter.write(AtmosphereResponseImpl.this, (byte[])data);\n                }\n            } catch (IOException e) {\n                handleException(e);\n                throw e;\n            } finally {\n                forceAsyncIOWriter = b;\n            }\n        } else {\n            try {\n                NO_BUFFERING.set(Boolean.TRUE);\n                Object previous = buffered.getAndSet(data);\n                if (previous != null) {\n                    boolean b = forceAsyncIOWriter;\n                    try {\n                        if (previous instanceof String) {\n                            asyncIOWriter.write(AtmosphereResponseImpl.this, (String)previous);\n                        } else if (previous instanceof byte[]){\n                            asyncIOWriter.write(AtmosphereResponseImpl.this, (byte[])previous);\n                        }\n                    } catch (IOException e) {\n                        handleException(e);\n                        throw e;\n                    } finally {\n                        forceAsyncIOWriter = b;\n                    }\n                }\n                \n            } finally {\n                NO_BUFFERING.remove();\n            }\n        }\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#PrimitiveType#Dimension#ArrayType#InstanceofExpression#SimpleName#SimpleName#SimpleName#ThisExpression#PrimitiveType#Dimension#ArrayType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#TryStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#PrimitiveType#Dimension#ArrayType#InstanceofExpression#SimpleName#SimpleName#SimpleName#ThisExpression#PrimitiveType#Dimension#ArrayType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#TryStatement#Block#IfStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression(SimpleName)SimpleName)ThisExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression(SimpleName)SimpleName)ThisExpression(CastExpression(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)TryStatement)Block(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression(SimpleName)SimpleName)ThisExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression(SimpleName)SimpleName)ThisExpression(CastExpression(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)TryStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Caches the specified data and writes the previous data if it is not null.", "call_func_name": ["java.lang.ThreadLocal.get", "org.atmosphere.cpr.AsyncIOWriter.write", "org.atmosphere.cpr.AsyncIOWriter.write", "org.atmosphere.cpr.AtmosphereResponseImpl.handleException", "java.lang.ThreadLocal.set", "java.util.concurrent.atomic.AtomicReference.getAndSet", "java.lang.ThreadLocal.remove"], "call_func_parameter": [[""], ["org.atmosphere.cpr.AtmosphereResponse", "java.lang.String"], ["org.atmosphere.cpr.AtmosphereResponse", "byte[]"], ["java.lang.Exception"], ["java.lang.Object"], ["java.lang.Object"], [""]], "passed_comments": [{"org.atmosphere.cpr.AsyncIOWriter.write": "Write a WebSocket message."}, {"org.atmosphere.cpr.AsyncIOWriter.write": "Write a WebSocket message."}]}, {"index": "138", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceSessionFactory.java", "methodName": "org.atmosphere.cpr.DefaultAtmosphereResourceSessionFactory.getDisconnectListener", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected AtmosphereResourceEventListener getDisconnectListener() {\n        return disconnectListener;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Used in testing", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "139", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterLifeCyclePolicyListener.java", "methodName": "org.atmosphere.cpr.BroadcasterLifeCyclePolicyListener.onEmpty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void onEmpty();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Invoked when a  {@link Broadcaster}'s list of  {@link AtmosphereResource} becomes empty, eg.the broadcaster has no longer resources associated with it.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "140", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterLifeCyclePolicyListener.java", "methodName": "org.atmosphere.cpr.BroadcasterLifeCyclePolicyListener.onIdle", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void onIdle();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Invoke when a  {@link Broadcaster} has no activity.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "141", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterLifeCyclePolicyListener.java", "methodName": "org.atmosphere.cpr.BroadcasterLifeCyclePolicyListener.onDestroy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void onDestroy();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Both  {@link org.atmosphere.cpr.Broadcaster#releaseExternalResources()} and {@link org.atmosphere.cpr.Broadcaster#destroy()}are about to be invoked.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "142", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java", "methodName": "org.atmosphere.cpr.DefaultAsyncSupportResolver.testClassExists", "methodParameterType": "String#", "methodParameterName": "testClass#", "methodBody": "protected boolean testClassExists(final String testClass) {\n        try {\n            final boolean exists = testClass != null && testClass.length() > 0 && IOUtils.loadClass(null, testClass) != null;\n            logger.debug(exists ? \"Found {}\" : \"Not found {}\", testClass);\n            return exists;\n        } catch (Exception ex) {\n            return false;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#NullLiteral#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#ConditionalExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#BooleanLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ConditionalExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Convenience method that tests if a class with the given FQN is present on the classpath.", "call_func_name": ["java.lang.String.length", "org.atmosphere.util.IOUtils.loadClass", "org.slf4j.Logger.debug"], "call_func_parameter": [[""], ["java.lang.Class", "java.lang.String"], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"org.atmosphere.util.IOUtils.loadClass": "Loading the specified class using some heuristics to support various containers The order of preferece is: 1. Thread.currentThread().getContextClassLoader() 2. Class.forName 3. thisClass.getClassLoader()"}]}, {"index": "143", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java", "methodName": "org.atmosphere.cpr.DefaultAsyncSupportResolver.detectContainersPresent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<Class<? extends AsyncSupport>> detectContainersPresent() {\n        return new LinkedList<Class<? extends AsyncSupport>>() {\n            {\n                if (testClassExists(GLASSFISH_V2))\n                    add(GlassFishv2CometSupport.class);\n\n                if (testClassExists(JETTY_9))\n                    add(Jetty7CometSupport.class);\n\n                if (testClassExists(JETTY_8))\n                    add(Jetty7CometSupport.class);\n\n                if (testClassExists(JETTY_7))\n                    add(Jetty7CometSupport.class);\n\n                if (testClassExists(JETTY))\n                    add(JettyCometSupport.class);\n\n                if (testClassExists(JBOSSWEB))\n                    add(JBossWebCometSupport.class);\n\n                if (testClassExists(TOMCAT_7))\n                    add(Tomcat7CometSupport.class);\n\n                if (testClassExists(TOMCAT) || testClassExists(JBOSS_5))\n                    add(TomcatCometSupport.class);\n\n                if (testClassExists(GRIZZLY))\n                    add(GrizzlyCometSupport.class);\n\n                if (testClassExists(GRIZZLY2))\n                    add(Grizzly2CometSupport.class);\n\n                if (testClassExists(NETTY))\n                    add(NettyCometSupport.class);\n            }\n        };\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#IfStatement#Block#Initializer#AnonymousClassDeclaration#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(AnonymousClassDeclaration(Initializer(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement)IfStatement)Block)Initializer)AnonymousClassDeclaration)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a list of comet support by containers available on the classpath.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "144", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java", "methodName": "org.atmosphere.cpr.DefaultAsyncSupportResolver.defaultCometSupport", "methodParameterType": "boolean#", "methodParameterName": "preferBlocking#", "methodBody": "public AsyncSupport defaultCometSupport(final boolean preferBlocking) {\n        if (!preferBlocking && testClassExists(SERVLET_30)) {\n            return new Servlet30CometSupport(config);\n        } else {\n            return new BlockingIOCometSupport(config);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#PrefixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "This method is used to determine the default AsyncSupport if all else fails.", "call_func_name": ["org.atmosphere.cpr.DefaultAsyncSupportResolver.testClassExists", "org.atmosphere.container.Servlet30CometSupport.<init>", "org.atmosphere.container.BlockingIOCometSupport.<init>"], "call_func_parameter": [["java.lang.String"], ["org.atmosphere.cpr.AtmosphereConfig"], ["org.atmosphere.cpr.AtmosphereConfig"]], "passed_comments": [{"org.atmosphere.cpr.DefaultAsyncSupportResolver.testClassExists": "Convenience method that tests if a class with the given FQN is present on the classpath."}]}, {"index": "145", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java", "methodName": "org.atmosphere.cpr.DefaultAsyncSupportResolver.newCometSupport", "methodParameterType": "Class<? extends AsyncSupport>#", "methodParameterName": "targetClass#", "methodBody": "public AsyncSupport newCometSupport(final Class<? extends AsyncSupport> targetClass) {\n        try {\n            return (AsyncSupport) targetClass.getDeclaredConstructor(new Class[]{AtmosphereConfig.class})\n                    .newInstance(config);\n        } catch (final Exception e) {\n            logger.warn(\"Failed to create AsyncSupport class: {}, error: {}\", targetClass, e);\n\n            Throwable cause = e.getCause();\n            if (cause != null) {\n                logger.error(\"Real error: {}\", cause.getMessage(), cause);\n            }\n            return null;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleType#TypeLiteral#ArrayInitializer#ArrayCreation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ArrayInitializer)ArrayCreation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Given a Class of something that extends AsyncSupport, it tries to return an instance of that class. <p/> The class has to have a visible constructor with the signature (@link {AtmosphereConfig}).", "call_func_name": ["java.lang.Class.getDeclaredConstructor", "java.lang.reflect.Constructor.newInstance", "org.slf4j.Logger.warn", "java.lang.Exception.getCause", "java.lang.Throwable.getMessage", "org.slf4j.Logger.error"], "call_func_parameter": [["java.lang.Class[]"], ["java.lang.Object[]"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "146", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java", "methodName": "org.atmosphere.cpr.DefaultAsyncSupportResolver.resolve", "methodParameterType": "boolean#boolean#", "methodParameterName": "useNativeIfPossible#defaultToBlocking#", "methodBody": "public AsyncSupport resolve(final boolean useNativeIfPossible, final boolean defaultToBlocking) {\n        final AsyncSupport servletAsyncSupport = defaultCometSupport(defaultToBlocking);\n\n        final AsyncSupport nativeSupport;\n        if (!defaultToBlocking && (useNativeIfPossible ||\n                servletAsyncSupport.getClass().getName().equals(BlockingIOCometSupport.class.getName()))) {\n            nativeSupport = resolveNativeCometSupport(detectContainersPresent());\n            return nativeSupport == null ? servletAsyncSupport : nativeSupport;\n        }\n        return servletAsyncSupport;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#ConditionalExpression#ReturnStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression)ReturnStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This method is the general interface to the outside world.", "call_func_name": ["org.atmosphere.cpr.DefaultAsyncSupportResolver.defaultCometSupport", "java.lang.Object.getClass", "java.lang.Class.getName", "java.lang.String.equals", "org.atmosphere.cpr.DefaultAsyncSupportResolver.detectContainersPresent", "org.atmosphere.cpr.DefaultAsyncSupportResolver.resolveNativeCometSupport"], "call_func_parameter": [["boolean"], [""], [""], ["java.lang.Object"], [""], ["java.util.List"]], "passed_comments": [{"org.atmosphere.cpr.DefaultAsyncSupportResolver.defaultCometSupport": "This method is used to determine the default AsyncSupport if all else fails."}, {"org.atmosphere.cpr.DefaultAsyncSupportResolver.detectContainersPresent": "Returns a list of comet support by containers available on the classpath."}, {"org.atmosphere.cpr.DefaultAsyncSupportResolver.resolveNativeCometSupport": "This method is called to determine which native comet support to the used."}]}, {"index": "147", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java", "methodName": "org.atmosphere.cpr.DefaultAsyncSupportResolver.resolveNativeCometSupport", "methodParameterType": "java.util.List<Class<? extends AsyncSupport>>#", "methodParameterName": "available#", "methodBody": "protected AsyncSupport resolveNativeCometSupport(final java.util.List<Class<? extends AsyncSupport>> available) {\n        if (available == null || available.isEmpty()) return null;\n        else if (available.size() == 1) return newCometSupport(available.get(0));\n        else return resolveMultipleNativeSupportConflict(available);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#NullLiteral#ReturnStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#ReturnStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ReturnStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "This method is called to determine which native comet support to the used.", "call_func_name": ["java.util.List.isEmpty", "java.util.List.size", "java.util.List.get", "org.atmosphere.cpr.DefaultAsyncSupportResolver.newCometSupport", "org.atmosphere.cpr.DefaultAsyncSupportResolver.resolveMultipleNativeSupportConflict"], "call_func_parameter": [[""], [""], ["int"], ["java.lang.Class"], ["java.util.List"]], "passed_comments": [{"org.atmosphere.cpr.DefaultAsyncSupportResolver.newCometSupport": "Given a Class of something that extends AsyncSupport, it tries to return an instance of that class. <p/> The class has to have a visible constructor with the signature (@link {AtmosphereConfig})."}, {"org.atmosphere.cpr.DefaultAsyncSupportResolver.resolveMultipleNativeSupportConflict": "This method is called if there are more than one potential native container in scope."}]}, {"index": "148", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java", "methodName": "org.atmosphere.cpr.DefaultAsyncSupportResolver.resolveMultipleNativeSupportConflict", "methodParameterType": "List<Class<? extends AsyncSupport>>#", "methodParameterName": "available#", "methodBody": "protected AsyncSupport resolveMultipleNativeSupportConflict(final List<Class<? extends AsyncSupport>> available) {\n        final StringBuilder b = new StringBuilder(\"Found multiple containers, please specify which one to use: \");\n        for (Class<? extends AsyncSupport> cs : available) {\n            b.append((cs != null) ? cs.getCanonicalName() : \"null\").append(\", \");\n        }\n\n        b.append(\" until you do, Atmosphere will use:\" + available.get(0));\n        logger.warn(\"{}\", b.toString());\n        return newCometSupport(available.get(0));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#StringLiteral#ConditionalExpression#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#NumberLiteral#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)ConditionalExpression)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This method is called if there are more than one potential native container in scope.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.Class.getCanonicalName", "java.lang.StringBuilder.append", "java.lang.StringBuilder.<init>", "java.util.List.get", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.slf4j.Logger.warn", "org.atmosphere.cpr.DefaultAsyncSupportResolver.newCometSupport"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], [""], ["java.lang.String"], [""], ["int"], ["java.lang.Object"], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.Class"]], "passed_comments": [{"org.atmosphere.cpr.DefaultAsyncSupportResolver.newCometSupport": "Given a Class of something that extends AsyncSupport, it tries to return an instance of that class. <p/> The class has to have a visible constructor with the signature (@link {AtmosphereConfig})."}]}, {"index": "149", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java", "methodName": "org.atmosphere.cpr.DefaultBroadcasterFactory.broadcasterListeners", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Collection<BroadcasterListener> broadcasterListeners() {\n        return broadcasterListeners;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return all  {@link BroadcasterListener}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "150", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterCacheListener.java", "methodName": "org.atmosphere.cpr.BroadcasterCacheListener.onAddCache", "methodParameterType": "String#CacheMessage#", "methodParameterName": "broadcasterId#cacheMessage#", "methodBody": "void onAddCache(String broadcasterId, CacheMessage cacheMessage);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when a message is added to the cache", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "151", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterCacheListener.java", "methodName": "org.atmosphere.cpr.BroadcasterCacheListener.onRemoveCache", "methodParameterType": "String#CacheMessage#", "methodParameterName": "broadcasterId#cacheMessage#", "methodBody": "void onRemoveCache(String broadcasterId, CacheMessage cacheMessage);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when a message is removed from the cache.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "152", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceSessionFactory.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceSessionFactory.getSession", "methodParameterType": "AtmosphereResource#boolean#", "methodParameterName": "resource#create#", "methodBody": "AtmosphereResourceSession getSession(AtmosphereResource resource, boolean create);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the current session associated with the {@link AtmosphereResource} or, if there is no current session and createis true, returns a new session. <p/> If create is false and the request has no valid HttpSession, this method returns null.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "153", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceSessionFactory.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceSessionFactory.getSession", "methodParameterType": "AtmosphereResource#", "methodParameterName": "resource#", "methodBody": "AtmosphereResourceSession getSession(AtmosphereResource resource);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the current session associated with the {@link AtmosphereResource}, or creates one if it does not yet exist.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "154", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereHandler.java", "methodName": "org.atmosphere.cpr.AtmosphereHandler.onRequest", "methodParameterType": "AtmosphereResource#", "methodParameterName": "resource#", "methodBody": "void onRequest(AtmosphereResource resource) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "When a client sends a request to its associated  {@link AtmosphereHandler}, it can decide if the underlying connection can be suspended (creating a Continuation) or handle the connection synchronously. <p/> It is recommended to only suspend requests for which HTTP method is a GET and use the POST method to send data to the server, without marking the connection as asynchronous.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "155", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereHandler.java", "methodName": "org.atmosphere.cpr.AtmosphereHandler.onStateChange", "methodParameterType": "AtmosphereResourceEvent#", "methodParameterName": "event#", "methodBody": "void onStateChange(AtmosphereResourceEvent event) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "This method is invoked when the  {@link Broadcaster} executes a broadcast operation. When this method is invokedits associated  {@link Broadcaster}, any suspended connection will be allowed to write the data back to its associated clients. <p/> This method will also be invoked when a response get resumed, e.g. when  {@link AtmosphereResource#resume} getsinvoked. In that case,  {@link AtmosphereResourceEvent#isResuming} will return true.<p/> This method will also be invoked when the  {@link AtmosphereResource#suspend(long)} expires. In that case,{@link AtmosphereResourceEvent#isResumedOnTimeout} will return <tt>true</tt>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "156", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereHandler.java", "methodName": "org.atmosphere.cpr.AtmosphereHandler.destroy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void destroy();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Destroy this handler", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "157", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java", "methodName": "org.atmosphere.cpr.AtmosphereResponse.isDestroyable", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isDestroyable();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Check if this object can be destroyed. Default is true.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "158", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java", "methodName": "org.atmosphere.cpr.AtmosphereResponse.getAsyncIOWriter", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AsyncIOWriter getAsyncIOWriter();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the underlying  {@link AsyncIOWriter}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "159", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java", "methodName": "org.atmosphere.cpr.AtmosphereResponse.asyncIOWriter", "methodParameterType": "AsyncIOWriter#", "methodParameterName": "asyncIOWriter#", "methodBody": "AtmosphereResponse asyncIOWriter(AsyncIOWriter asyncIOWriter);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set an implementation of  {@link AsyncIOWriter} that will be invoked every time a write operation is ready to beprocessed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "160", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java", "methodName": "org.atmosphere.cpr.AtmosphereResponse.request", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AtmosphereRequest request();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the associated  {@link AtmosphereRequest}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "161", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java", "methodName": "org.atmosphere.cpr.AtmosphereResponse.request", "methodParameterType": "AtmosphereRequest#", "methodParameterName": "atmosphereRequest#", "methodBody": "AtmosphereResponse request(AtmosphereRequest atmosphereRequest);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set the associated  {@link AtmosphereRequest}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "162", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java", "methodName": "org.atmosphere.cpr.AtmosphereResponse.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void close() throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Close the associated  {@link AsyncIOWriter}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "163", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java", "methodName": "org.atmosphere.cpr.AtmosphereResponse.closeStreamOrWriter", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void closeStreamOrWriter();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Close the associated  {@link PrintWriter} or {@link java.io.OutputStream}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "164", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java", "methodName": "org.atmosphere.cpr.AtmosphereResponse.write", "methodParameterType": "String#", "methodParameterName": "data#", "methodBody": "AtmosphereResponse write(String data);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Write the String by either using the  {@link PrintWriter} or {@link java.io.OutputStream}. The decision is based on the request attribute   {@link ApplicationConfig#PROPERTY_USE_STREAM}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "165", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java", "methodName": "org.atmosphere.cpr.AtmosphereResponse.write", "methodParameterType": "String#boolean#", "methodParameterName": "data#writeUsingOriginalResponse#", "methodBody": "AtmosphereResponse write(String data, boolean writeUsingOriginalResponse);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Write the String by either using the  {@link PrintWriter} or {@link java.io.OutputStream}. The decision is based on the request attribute  {@link ApplicationConfig#PROPERTY_USE_STREAM}. If writeUsingOriginalResponse is set to true, execute the write without invoking the defined  {@link AsyncIOWriter}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "166", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java", "methodName": "org.atmosphere.cpr.AtmosphereResponse.write", "methodParameterType": "byte[]#", "methodParameterName": "data#", "methodBody": "AtmosphereResponse write(byte[] data);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Write the bytes by either using the  {@link PrintWriter} or {@link java.io.OutputStream}. The decision is based on the request attribute  {@link ApplicationConfig#PROPERTY_USE_STREAM}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "167", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java", "methodName": "org.atmosphere.cpr.AtmosphereResponse.write", "methodParameterType": "byte[]#boolean#", "methodParameterName": "data#writeUsingOriginalResponse#", "methodBody": "AtmosphereResponse write(byte[] data, boolean writeUsingOriginalResponse);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Write the String by either using the  {@link PrintWriter} or {@link java.io.OutputStream}. The decision is based on the request attribute   {@link ApplicationConfig#PROPERTY_USE_STREAM}. If writeUsingOriginalResponse is set to true, execute the write without invoking the defined  {@link AsyncIOWriter}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "168", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java", "methodName": "org.atmosphere.cpr.AtmosphereResponse.write", "methodParameterType": "byte[]#int#int#", "methodParameterName": "data#offset#length#", "methodBody": "AtmosphereResponse write(byte[] data, int offset, int length);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Write the bytes by either using the  {@link PrintWriter} or {@link java.io.OutputStream}. The decision is based on the request attribute  {@link ApplicationConfig#PROPERTY_USE_STREAM}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "169", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java", "methodName": "org.atmosphere.cpr.AtmosphereResponse.write", "methodParameterType": "byte[]#int#int#boolean#", "methodParameterName": "data#offset#length#writeUsingOriginalResponse#", "methodBody": "AtmosphereResponse write(byte[] data, int offset, int length, boolean writeUsingOriginalResponse);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Write the String by either using the  {@link PrintWriter} or {@link java.io.OutputStream}. The decision is based on the request attribute  {@link ApplicationConfig#PROPERTY_USE_STREAM}. If writeUsingOriginalResponse is set to true, execute the write without invoking the defined  {@link AsyncIOWriter}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "170", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java", "methodName": "org.atmosphere.cpr.AtmosphereResponse.resource", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AtmosphereResource resource();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The  {@link AtmosphereResource} associated with this request. If the request hasn't been suspended, thismethod will return null.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "171", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java", "methodName": "org.atmosphere.cpr.AtmosphereResponse.uuid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String uuid();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the  {@link AtmosphereResource#uuid()} used by this object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "172", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.transport", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "TRANSPORT transport();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the current  {@link TRANSPORT}. The transport value is retrieved using the  {@link HeaderConfig#X_ATMOSPHERE_TRANSPORT}header value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "173", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.resumeOnBroadcast", "methodParameterType": "boolean#", "methodParameterName": "resumeOnBroadcast#", "methodBody": "AtmosphereResource resumeOnBroadcast(boolean resumeOnBroadcast);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set to true to resume the response after the first broadcast. False by default.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "174", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.isSuspended", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isSuspended();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return true if the  {@link org.atmosphere.cpr.AtmosphereResource#suspend()} has been invoked.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "175", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.resumeOnBroadcast", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean resumeOnBroadcast();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return true if this AtmosphereResource is resumed after the first broadcast.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "176", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.isResumed", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isResumed();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return true if this object has been resumed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "177", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.isCancelled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isCancelled();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return true if this object has been cancelled.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "178", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.resume", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AtmosphereResource resume();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Complete the  {@link AtmosphereResponse} and finish/commit it. If the {@link AtmosphereResponse} is in theprocess of being resumed, invoking this method has no effect.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "179", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.suspend", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AtmosphereResource suspend();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Suspend the  {@link AtmosphereResponse} indefinitely.Suspending a  {@link AtmosphereResponse} will tell the underlying container to avoid recycling objects associatedwith the current instance, and also to avoid committing a response. <p/> The Framework will output some HTML comments when suspending the response in order to make sure all browsers work well with suspended responses.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "180", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.suspend", "methodParameterType": "long#", "methodParameterName": "timeout#", "methodBody": "AtmosphereResource suspend(long timeout);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Suspend the  {@link AtmosphereResponse}. Suspending a  {@link AtmosphereResponse} will tell the underlyingcontainer to avoid recycling objects associated with the current instance, and also to avoid committing response. Invoking this method when a request is being timed out (e.g.  {@link AtmosphereResourceEvent#isResumedOnTimeout}returns true) has no effect. <p/>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "181", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.suspend", "methodParameterType": "long#TimeUnit#", "methodParameterName": "timeout#timeunit#", "methodBody": "AtmosphereResource suspend(long timeout, TimeUnit timeunit);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Suspend the  {@link AtmosphereResponse}. Suspending a  {@link AtmosphereResponse} will tell the underlyingcontainer to avoid recycling objects associated with the current instance, and also to avoid committing response. Invoking this method when a request is being timed out (e.g.  {@link AtmosphereResourceEvent#isResumedOnTimeout}returns true) has no effect. <p/>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "182", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.getRequest", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AtmosphereRequest getRequest();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the underlying  {@link AtmosphereRequest} request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "183", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.getResponse", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AtmosphereResponse getResponse();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the  {@link AtmosphereResponse}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "184", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.getAtmosphereConfig", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AtmosphereConfig getAtmosphereConfig();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the  {@link AtmosphereConfig}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "185", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.getBroadcaster", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Broadcaster getBroadcaster();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the first added  {@link Broadcaster}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "186", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.broadcasters", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<Broadcaster> broadcasters();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return an unmodifiable list of  {@link Broadcaster}s associated with this resource", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "187", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.removeFromAllBroadcasters", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AtmosphereResource removeFromAllBroadcasters();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Remove this  {@link org.atmosphere.cpr.AtmosphereResource} from all {@link org.atmosphere.cpr.Broadcaster}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "188", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.setBroadcaster", "methodParameterType": "Broadcaster#", "methodParameterName": "broadcaster#", "methodBody": "AtmosphereResource setBroadcaster(Broadcaster broadcaster);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set the first  {@link Broadcaster} associated with this resource. This {@link org.atmosphere.cpr.Broadcaster}will be returned when  {@link #getBroadcaster()} is invoked.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "189", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.addBroadcaster", "methodParameterType": "Broadcaster#", "methodParameterName": "broadcaster#", "methodBody": "AtmosphereResource addBroadcaster(Broadcaster broadcaster);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Add/Associate a  {@link org.atmosphere.cpr.Broadcaster} with this resource.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "190", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.removeBroadcaster", "methodParameterType": "Broadcaster#", "methodParameterName": "broadcaster#", "methodBody": "AtmosphereResource removeBroadcaster(Broadcaster broadcaster);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Remove a  {@link org.atmosphere.cpr.Broadcaster} with this resource.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "191", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.setSerializer", "methodParameterType": "Serializer#", "methodParameterName": "s#", "methodBody": "AtmosphereResource setSerializer(Serializer s);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set the  {@link Serializer} to use when {@link AtmosphereResource#write} execute the operation.By default, the  {@link Serializer} is null.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "192", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.write", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "AtmosphereResource write(String s);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Write the String. If  {@link #resumeOnBroadcast()} is true, the underlying connection will be resumed (@link #resume());", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "193", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.write", "methodParameterType": "byte[]#", "methodParameterName": "s#", "methodBody": "AtmosphereResource write(byte[] s);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Write the bytes If  {@link #resumeOnBroadcast()} is true, the underlying connection will be resumed (@link #resume());", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "194", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.getSerializer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Serializer getSerializer();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the  {@link Serializer} or null if not defined.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "195", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.getAtmosphereResourceEvent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AtmosphereResourceEvent getAtmosphereResourceEvent();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the current  {@link AtmosphereResourceEvent}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "196", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.getAtmosphereHandler", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AtmosphereHandler getAtmosphereHandler();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the associated  {@link AtmosphereHandler} associated with this resource.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "197", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.writeOnTimeout", "methodParameterType": "Object#", "methodParameterName": "o#", "methodBody": "AtmosphereResource writeOnTimeout(Object o);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set a message that will be written when the resource times out. Can be an  {@link Object} or {@link java.util.concurrent.Callable}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "198", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.writeOnTimeout", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Object writeOnTimeout();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the object that will be written when the resource times out.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "199", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.uuid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String uuid();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the unique ID associated with this AtmosphereResource.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "200", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.addEventListener", "methodParameterType": "AtmosphereResourceEventListener#", "methodParameterName": "e#", "methodBody": "AtmosphereResource addEventListener(AtmosphereResourceEventListener e);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Add a  {@link AtmosphereResourceEventListener}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "201", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.removeEventListener", "methodParameterType": "AtmosphereResourceEventListener#", "methodParameterName": "e#", "methodBody": "AtmosphereResource removeEventListener(AtmosphereResourceEventListener e);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Remove a  {@link AtmosphereResourceEventListener}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "202", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.removeEventListeners", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AtmosphereResource removeEventListeners();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Remove all  {@link AtmosphereResourceEventListener}s.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "203", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.notifyListeners", "methodParameterType": "AtmosphereResourceEvent#", "methodParameterName": "e#", "methodBody": "AtmosphereResource notifyListeners(AtmosphereResourceEvent e);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Notify all  {@link AtmosphereResourceEventListener}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "204", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.notifyListeners", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AtmosphereResource notifyListeners();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Notify all  {@link AtmosphereResourceEventListener}s.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "205", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.session", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "HttpSession session();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the  {@link HttpSession} if supported, null if not", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "206", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.session", "methodParameterType": "boolean#", "methodParameterName": "create#", "methodBody": "HttpSession session(boolean create);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Return the  {@link HttpSession} if supported, and creates it if not already created.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "207", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void close() throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Close the underlying connection. Invoking this method will close the underlying connection and resume the {@link AtmosphereResource}}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "208", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.forceBinaryWrite", "methodParameterType": "boolean#", "methodParameterName": "force#", "methodBody": "AtmosphereResource forceBinaryWrite(boolean force);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Force binary write and never write String value. return this", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "209", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.forceBinaryWrite", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean forceBinaryWrite();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return true when binary write is forced.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "210", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java", "methodName": "org.atmosphere.cpr.AtmosphereResource.initialize", "methodParameterType": "AtmosphereConfig#Broadcaster#AtmosphereRequest#AtmosphereResponse#AsyncSupport#AtmosphereHandler#", "methodParameterName": "config#broadcaster#req#response#asyncSupport#atmosphereHandler#", "methodBody": "public AtmosphereResource initialize(AtmosphereConfig config, Broadcaster broadcaster,\n                                         AtmosphereRequest req, AtmosphereResponse response,\n                                         AsyncSupport asyncSupport, AtmosphereHandler atmosphereHandler);", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Initialize an  {@link AtmosphereResource}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "211", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.framework", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AtmosphereFramework framework() {\n        return framework;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link AtmosphereFramework}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "212", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.getServletConfig", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ServletConfig getServletConfig() {\n        return framework.getServletConfig();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link ServletConfig}.", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.getServletConfig"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "213", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.getServletContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ServletContext getServletContext() {\n        return framework.getServletContext();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link ServletContext}.", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.getServletContext"], "call_func_parameter": [[""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.getServletContext": "Return the  {@link ServletContext}"}]}, {"index": "214", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.getWebServerName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getWebServerName() {\n        return framework.getAsyncSupport().getContainerName();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the current WebServer used.", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.getAsyncSupport", "org.atmosphere.cpr.AsyncSupport.getContainerName"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.getAsyncSupport": "Return the current  {@link AsyncSupport}."}, {"org.atmosphere.cpr.AsyncSupport.getContainerName": "Return the name of the Java Web Server."}]}, {"index": "215", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.handlers", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, AtmosphereFramework.AtmosphereHandlerWrapper> handlers() {\n        return framework.getAtmosphereHandlers();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the list of  {@link org.atmosphere.cpr.AtmosphereFramework.AtmosphereHandlerWrapper}s.", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.getAtmosphereHandlers"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "216", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.getInitParameter", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public String getInitParameter(String name) {\n        try {\n            return framework.getServletConfig().getInitParameter(name);\n        } catch (Throwable ex) {\n            // Don't fail if Tomcat crash on startup with an NPE\n            return null;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Return the value of the init params defined in web.xml or application.xml.", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.getServletConfig", "javax.servlet.ServletConfig.getInitParameter"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "217", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.getInitParameterNames", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Enumeration<String> getInitParameterNames() {\n        return framework().getServletConfig().getInitParameterNames();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return all init param.", "call_func_name": ["org.atmosphere.cpr.AtmosphereConfig.framework", "org.atmosphere.cpr.AtmosphereFramework.getServletConfig", "javax.servlet.ServletConfig.getInitParameterNames"], "call_func_parameter": [[""], [""], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.framework": "Return the  {@link AtmosphereFramework}."}]}, {"index": "218", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.isSupportSession", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isSupportSession() {\n        return supportSession;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Is  {@link javax.servlet.http.HttpSession} supported.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "219", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.setSupportSession", "methodParameterType": "boolean#", "methodParameterName": "supportSession#", "methodBody": "public void setSupportSession(boolean supportSession) {\n        this.supportSession = supportSession;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Enable/Disable  {@link javax.servlet.http.HttpSession}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "220", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.isSessionTimeoutRemovalAllowed", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isSessionTimeoutRemovalAllowed() {\n        return sessionTimeoutRemovalAllowed;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Allow HTTP session timeout removal when session support is active", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "221", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.setSessionTimeoutRemovalAllowed", "methodParameterType": "boolean#", "methodParameterName": "sessionTimeoutRemovalAllowed#", "methodBody": "public void setSessionTimeoutRemovalAllowed(boolean sessionTimeoutRemovalAllowed) {\n        this.sessionTimeoutRemovalAllowed = sessionTimeoutRemovalAllowed;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Enable/Disable  {@link javax.servlet.http.HttpSession} timeout removal when a connection exists.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "222", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.isThrowExceptionOnCloned", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isThrowExceptionOnCloned() {\n        return this.throwExceptionOnCloned;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Is cloned request throws exception.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "223", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.setThrowExceptionOnCloned", "methodParameterType": "boolean#", "methodParameterName": "throwExceptionOnCloned#", "methodBody": "public void setThrowExceptionOnCloned(boolean throwExceptionOnCloned) {\n        this.throwExceptionOnCloned = throwExceptionOnCloned;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Enable/Disable Exception on cloned request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "224", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.getBroadcasterFactory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public BroadcasterFactory getBroadcasterFactory() {\n        return framework.getBroadcasterFactory();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return an instance of  {@link DefaultBroadcasterFactory}.", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.getBroadcasterFactory"], "call_func_parameter": [[""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.getBroadcasterFactory": "Get the  {@link BroadcasterFactory} which is used by Atmosphere to construct{@link Broadcaster}."}]}, {"index": "225", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.properties", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, Object> properties() {\n        return properties;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link Map} of Applications's properties.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "226", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.destroy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected void destroy() {\n        for (ShutdownHook h : shutdownHooks) {\n            try {\n                h.shutdown();\n            } catch (Exception ex) {\n                logger.warn(\"\", ex);\n            }\n        }\n        shutdownHooks.clear();\n        startUpHook.clear();\n        atmosphereHandlerConfig.clear();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Invoke  {@link ShutdownHook}s.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.slf4j.Logger.warn", "java.util.List.clear"], "call_func_parameter": [[""], [""], [""], ["java.lang.String", "java.lang.Throwable"], [""]], "passed_comments": "/"}, {"index": "227", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.initComplete", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected void initComplete() {\n        for (StartupHook h : startUpHook) {\n            try {\n                h.started(framework);\n            } catch (Exception ex) {\n                logger.warn(\"\", ex);\n            }\n        }\n        startUpHook.clear();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Invoke  {@link ShutdownHook}s.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.slf4j.Logger.warn", "java.util.List.clear"], "call_func_parameter": [[""], [""], [""], ["java.lang.String", "java.lang.Throwable"], [""]], "passed_comments": "/"}, {"index": "228", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.shutdownHook", "methodParameterType": "ShutdownHook#", "methodParameterName": "s#", "methodBody": "public AtmosphereConfig shutdownHook(ShutdownHook s) {\n        shutdownHooks.add(s);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add a  {@link ShutdownHook}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "229", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.startupHook", "methodParameterType": "StartupHook#", "methodParameterName": "s#", "methodBody": "public AtmosphereConfig startupHook(StartupHook s) {\n        if (framework().isInit) {\n            s.started(framework);\n        } else {\n            startUpHook.add(s);\n        }\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(FieldAccess(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add a  {@link StartupHook}. If the  {@link AtmosphereFramework#isInit} return true, theStartupHook will be executed immediately.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "230", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.getInitParameter", "methodParameterType": "String#String#", "methodParameterName": "key#defaultValue#", "methodBody": "public String getInitParameter(String key, String defaultValue) {\n        String s = getInitParameter(key);\n        if (s == null) {\n            return defaultValue;\n        }\n        return s;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return an init-param, or its default value.", "call_func_name": ["org.atmosphere.cpr.AtmosphereConfig.getInitParameter"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.getInitParameter": "Return the value of the init params defined in web.xml or application.xml."}]}, {"index": "231", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.getInitParameter", "methodParameterType": "String#boolean#", "methodParameterName": "key#defaultValue#", "methodBody": "public boolean getInitParameter(String key, boolean defaultValue) {\n        String s = getInitParameter(key);\n        if (s == null) {\n            return defaultValue;\n        }\n        return Boolean.valueOf(s);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return an init-param, or its default value.", "call_func_name": ["org.atmosphere.cpr.AtmosphereConfig.getInitParameter", "java.lang.Boolean.valueOf", "java.lang.Boolean.booleanValue"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.getInitParameter": "Return the value of the init params defined in web.xml or application.xml."}]}, {"index": "232", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.getInitParameter", "methodParameterType": "String#int#", "methodParameterName": "key#defaultValue#", "methodBody": "public int getInitParameter(String key, int defaultValue) {\n        String s = getInitParameter(key);\n        if (s == null) {\n            return defaultValue;\n        }\n        return Integer.valueOf(s);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return an init-param, or its default value.", "call_func_name": ["org.atmosphere.cpr.AtmosphereConfig.getInitParameter", "java.lang.Integer.valueOf", "java.lang.Integer.intValue"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.getInitParameter": "Return the value of the init params defined in web.xml or application.xml."}]}, {"index": "233", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.resourcesFactory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AtmosphereResourceFactory resourcesFactory() {\n        return framework.atmosphereFactory();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link AtmosphereResourceFactory}", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.atmosphereFactory"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "234", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.metaBroadcaster", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public MetaBroadcaster metaBroadcaster() {\n        return framework.metaBroadcaster();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link DefaultMetaBroadcaster}", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.metaBroadcaster"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "235", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.sessionFactory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AtmosphereResourceSessionFactory sessionFactory() {\n        return framework.sessionFactory();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link AtmosphereResourceSessionFactory}", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.sessionFactory"], "call_func_parameter": [[""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.sessionFactory": "Return the  {@link AtmosphereResourceSessionFactory}"}]}, {"index": "236", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.uuidProvider", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public UUIDProvider uuidProvider() {\n        return framework.uuidProvider();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link org.atmosphere.util.UUIDProvider}", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.uuidProvider"], "call_func_parameter": [[""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.uuidProvider": "Set a  {@link java.util.UUID} like implementation for generating random UUID String"}, {"org.atmosphere.cpr.AtmosphereFramework.uuidProvider": "Return the  {@link org.atmosphere.util.UUIDProvider}"}]}, {"index": "237", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java", "methodName": "org.atmosphere.cpr.AtmosphereConfig.websocketFactory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public WebSocketFactory websocketFactory() {\n        return framework.webSocketFactory();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link WebSocketFactory}", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.webSocketFactory"], "call_func_parameter": [[""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.webSocketFactory": "Return the  {@link WebSocketFactory}"}, {"org.atmosphere.cpr.AtmosphereFramework.webSocketFactory": "Configure the  {@link WebSocketFactory}"}]}, {"index": "238", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/ClusterBroadcastFilter.java", "methodName": "org.atmosphere.cpr.ClusterBroadcastFilter.setUri", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "void setUri(String name);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Cluster's name or address.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "239", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/ClusterBroadcastFilter.java", "methodName": "org.atmosphere.cpr.ClusterBroadcastFilter.setBroadcaster", "methodParameterType": "Broadcaster#", "methodParameterName": "bc#", "methodBody": "void setBroadcaster(Broadcaster bc);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "The  {@link Broadcaster} to use.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "240", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/ClusterBroadcastFilter.java", "methodName": "org.atmosphere.cpr.ClusterBroadcastFilter.getBroadcaster", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Broadcaster getBroadcaster();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the  {@link Broadcaster}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "241", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcastFilterLifecycle.java", "methodName": "org.atmosphere.cpr.BroadcastFilterLifecycle.init", "methodParameterType": "AtmosphereConfig#", "methodParameterName": "config#", "methodBody": "void init(AtmosphereConfig config);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Initialize the  {@link BroadcastFilter}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "242", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcastFilterLifecycle.java", "methodName": "org.atmosphere.cpr.BroadcastFilterLifecycle.destroy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void destroy();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Destroy this  {@link BroadcastFilter} and its internal resources.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "243", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.initialize", "methodParameterType": "String#URI#AtmosphereConfig#", "methodParameterName": "name#uri#config#", "methodBody": "public Broadcaster initialize(String name, URI uri, AtmosphereConfig config);", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Configure a Broadcaster.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "244", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.setSuspendPolicy", "methodParameterType": "long#POLICY#", "methodParameterName": "maxSuspended#policy#", "methodBody": "void setSuspendPolicy(long maxSuspended, POLICY policy);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set the maximum number of suspended  {@link AtmosphereResource}s. If the maximum is reached, Atmosphere will either resume  {@link AtmosphereResource} using {@link org.atmosphere.cpr.Broadcaster.POLICY#FIFO} (first in first out)or  {@link org.atmosphere.cpr.Broadcaster.POLICY#REJECT} the {@link AtmosphereResource}. <p/> By default the number is unlimited.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "245", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.broadcast", "methodParameterType": "Object#", "methodParameterName": "o#", "methodBody": "Future<Object> broadcast(Object o);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Broadcast the  {@link Object} to all suspended responses, eg. invoke {@link AtmosphereHandler#onStateChange}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "246", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.delayBroadcast", "methodParameterType": "Object#", "methodParameterName": "o#", "methodBody": "Future<Object> delayBroadcast(Object o);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Delay the broadcast operation. The  {@link Object} will be broadcasted when {@link #broadcast(java.lang.Object)}is invoked the first time.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "247", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.delayBroadcast", "methodParameterType": "Object#long#TimeUnit#", "methodParameterName": "o#delay#t#", "methodBody": "Future<Object> delayBroadcast(Object o, long delay, TimeUnit t);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Delay the broadcast operation. The  {@link Object} will be broadcasted once thespecified delay expires or when  {@link #broadcast(java.lang.Object)} is invoked the first time.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "248", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.scheduleFixedBroadcast", "methodParameterType": "Object#long#TimeUnit#", "methodParameterName": "o#period#t#", "methodBody": "Future<Object> scheduleFixedBroadcast(Object o, long period, TimeUnit t);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Broadcast periodically. The  {@link Object} will be broadcasted after every periodspecified time frame expires. If the  {@link TimeUnit} is set to null, the{@link Object} will be broadcasted when the first {@link #broadcast(java.lang.Object)}is invoked.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "249", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.scheduleFixedBroadcast", "methodParameterType": "Object#long#long#TimeUnit#", "methodParameterName": "o#waitFor#period#t#", "methodBody": "Future<Object> scheduleFixedBroadcast(Object o, long waitFor, long period, TimeUnit t);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Broadcast periodically. The  {@link Object} will be broadcasted after every periodspecified time frame expires. If the  {@link TimeUnit} is set null, the{@link Object} will be broadcasted when the first {@link #broadcast(java.lang.Object)} is invoked.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "250", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.broadcast", "methodParameterType": "Object#AtmosphereResource#", "methodParameterName": "o#resource#", "methodBody": "Future<Object> broadcast(Object o, AtmosphereResource resource);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Broadcast the  {@link Object} to all suspended responses, eg. invoke{@link AtmosphereHandler#onStateChange} with an instance of {@link AtmosphereResource}, representing a single suspended response.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "251", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.broadcastOnResume", "methodParameterType": "Object#", "methodParameterName": "o#", "methodBody": "Future<Object> broadcastOnResume(Object o);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Broadcast the  {@link Object} when an {@link AtmosphereResource} is resumed by a timeout or when using{@link org.atmosphere.cpr.AtmosphereResource#resume()}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "252", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.broadcast", "methodParameterType": "Object#Set<AtmosphereResource>#", "methodParameterName": "o#subset#", "methodBody": "Future<Object> broadcast(Object o, Set<AtmosphereResource> subset);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Broadcast the  {@link Object} to all suspended response, eg. invoke{@link AtmosphereHandler#onStateChange} with a {@link Set} of {@link AtmosphereResource}, representing a set of  {@link AtmosphereHandler}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "253", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.addAtmosphereResource", "methodParameterType": "AtmosphereResource#", "methodParameterName": "resource#", "methodBody": "Broadcaster addAtmosphereResource(AtmosphereResource resource);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Add a  {@link AtmosphereResource} to the list of items to be notified whenthe  {@link Broadcaster#broadcast} is invoked.<p/> It is strongly recommended to suspend the  {@link AtmosphereResource} beforeadding it to a  {@link Broadcaster}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "254", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.removeAtmosphereResource", "methodParameterType": "AtmosphereResource#", "methodParameterName": "resource#", "methodBody": "Broadcaster removeAtmosphereResource(AtmosphereResource resource);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Remove a  {@link AtmosphereResource} from the list of s to be notified whenthe  {@link Broadcaster#broadcast} is invoked.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "255", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.setBroadcasterConfig", "methodParameterType": "BroadcasterConfig#", "methodParameterName": "bc#", "methodBody": "void setBroadcasterConfig(BroadcasterConfig bc);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set the  {@link BroadcasterConfig} instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "256", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.getBroadcasterConfig", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "BroadcasterConfig getBroadcasterConfig();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the current  {@link BroadcasterConfig}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "257", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.destroy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void destroy();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Destroy this instance and shutdown it's associated  {@link ExecutorService}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "258", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.getAtmosphereResources", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Collection<AtmosphereResource> getAtmosphereResources();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return an  {@link List} of {@link AtmosphereResource}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "259", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.setScope", "methodParameterType": "SCOPE#", "methodParameterName": "scope#", "methodBody": "void setScope(SCOPE scope);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set the scope.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "260", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.getScope", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "SCOPE getScope();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the  {@link Broadcaster.SCOPE}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "261", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.setID", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "void setID(String name);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set the ID of this  {@link Broadcaster}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "262", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.getID", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getID();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the ID of this  {@link Broadcaster}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "263", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.resumeAll", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void resumeAll();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Resume all suspended responses ( {@link AtmosphereResource}) added via {@link Broadcaster#addAtmosphereResource}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "264", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.releaseExternalResources", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void releaseExternalResources();", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Release external resources associated with this Broadcaster. This is useful when a Broadcaster no longer have suspended  {@link AtmosphereResource} and some resource (like database connections, JMS queue, etc.) needs to beclosed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "265", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.setBroadcasterLifeCyclePolicy", "methodParameterType": "BroadcasterLifeCyclePolicy#", "methodParameterName": "policy#", "methodBody": "public void setBroadcasterLifeCyclePolicy(BroadcasterLifeCyclePolicy policy);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set the  {@link org.atmosphere.cpr.BroadcasterLifeCyclePolicy}. Make sure you are selecting the right policy to avoid unexpected situations.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "266", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.getBroadcasterLifeCyclePolicy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public BroadcasterLifeCyclePolicy getBroadcasterLifeCyclePolicy();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the  {@link org.atmosphere.cpr.BroadcasterLifeCyclePolicy}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "267", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.addBroadcasterLifeCyclePolicyListener", "methodParameterType": "BroadcasterLifeCyclePolicyListener#", "methodParameterName": "b#", "methodBody": "void addBroadcasterLifeCyclePolicyListener(BroadcasterLifeCyclePolicyListener b);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Add a  {@link BroadcasterLifeCyclePolicyListener}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "268", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.removeBroadcasterLifeCyclePolicyListener", "methodParameterType": "BroadcasterLifeCyclePolicyListener#", "methodParameterName": "b#", "methodBody": "void removeBroadcasterLifeCyclePolicyListener(BroadcasterLifeCyclePolicyListener b);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Remove a  {@link BroadcasterLifeCyclePolicyListener}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "269", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.isDestroyed", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isDestroyed();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return true if this  {@link Broadcaster} has been destroyed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "270", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.awaitAndBroadcast", "methodParameterType": "Object#long#TimeUnit#", "methodParameterName": "t#time#timeUnit#", "methodBody": "Future<Object> awaitAndBroadcast(Object t, long time, TimeUnit timeUnit);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Await for available  {@link AtmosphereResource} before broadcasting. This method will block until{@link Broadcaster#addAtmosphereResource(AtmosphereResource)} gets invoked.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "271", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.addBroadcasterListener", "methodParameterType": "BroadcasterListener#", "methodParameterName": "b#", "methodBody": "Broadcaster addBroadcasterListener(BroadcasterListener b);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Add a  {@link BroadcasterListener}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "272", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java", "methodName": "org.atmosphere.cpr.Broadcaster.removeBroadcasterListener", "methodParameterType": "BroadcasterListener#", "methodParameterName": "b#", "methodBody": "Broadcaster removeBroadcasterListener(BroadcasterListener b);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Remove a  {@link BroadcasterListener}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "273", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.AtmosphereFramework", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AtmosphereFramework() {\n        this(false, true);\n    }", "AST": "Javadoc#Modifier#SimpleName#BooleanLiteral#BooleanLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Create an AtmosphereFramework.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "274", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.AtmosphereFramework", "methodParameterType": "ServletConfig#", "methodParameterName": "sc#", "methodBody": "public AtmosphereFramework(ServletConfig sc) throws ServletException {\n        this(false, true);\n        // TODO: What?\n        init(sc);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#BooleanLiteral#BooleanLiteral#ConstructorInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral)ConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create an AtmosphereFramework and initialize it via  {@link AtmosphereFramework#init(javax.servlet.ServletConfig)}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "275", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.AtmosphereFramework", "methodParameterType": "boolean#boolean#", "methodParameterName": "isFilter#autoDetectHandlers#", "methodBody": "public AtmosphereFramework(boolean isFilter, boolean autoDetectHandlers) {\n        this.isFilter = isFilter;\n        this.autoDetectHandlers = autoDetectHandlers;\n        config = newAtmosphereConfig();\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create an AtmosphereFramework.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "276", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.newAtmosphereConfig", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected AtmosphereConfig newAtmosphereConfig() {\n        return new AtmosphereConfig(this);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ThisExpression#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create an instance of  {@link org.atmosphere.cpr.AtmosphereConfig}", "call_func_name": ["org.atmosphere.cpr.AtmosphereConfig.<init>"], "call_func_parameter": [["org.atmosphere.cpr.AtmosphereFramework"]], "passed_comments": "/"}, {"index": "277", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.populateBroadcasterType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void populateBroadcasterType() {\n        broadcasterTypes.add(KAFKA_BROADCASTER);\n        broadcasterTypes.add(HAZELCAST_BROADCASTER);\n        broadcasterTypes.add(XMPP_BROADCASTER);\n        broadcasterTypes.add(REDIS_BROADCASTER);\n        broadcasterTypes.add(JGROUPS_BROADCASTER);\n        broadcasterTypes.add(JMS_BROADCASTER);\n        broadcasterTypes.add(RMI_BROADCASTER);\n        broadcasterTypes.add(RABBITMQ_BROADCASTER);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "The order of addition is quite important here.", "call_func_name": ["java.util.concurrent.ConcurrentLinkedQueue.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "278", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.populateObjectFactoryType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void populateObjectFactoryType() {\n        objectFactoryType.add(CDI_INJECTOR);\n        objectFactoryType.add(SPRING_INJECTOR);\n        objectFactoryType.add(GUICE_INJECTOR);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "The order of addition is quite important here.", "call_func_name": ["java.util.concurrent.ConcurrentLinkedQueue.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "279", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.addAtmosphereHandler", "methodParameterType": "String#AtmosphereHandler#List<AtmosphereInterceptor>#", "methodParameterName": "mapping#h#l#", "methodBody": "public AtmosphereFramework addAtmosphereHandler(String mapping, AtmosphereHandler h, List<AtmosphereInterceptor> l) {\n        if (!mapping.startsWith(\"/\")) {\n            mapping = \"/\" + mapping;\n        }\n        createWrapperAndConfigureHandler(h, mapping, l);\n\n        if (!isInit) {\n            logger.info(\"Installed AtmosphereHandler {} mapped to context-path: {}\", h.getClass().getName(), mapping);\n            logger.info(\"Installed the following AtmosphereInterceptor mapped to AtmosphereHandler {}\", h.getClass().getName());\n            if ( !l.isEmpty() ) {\n                for (AtmosphereInterceptor s : l) {\n                    logger.info(\"\\t{} : {}\", s.getClass().getName(), s);\n                }\n            }\n        }\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#StringLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#Block#IfStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add an  {@link AtmosphereHandler} serviced by the {@link Servlet}This API is exposed to allow embedding an Atmosphere application.", "call_func_name": ["java.lang.String.startsWith", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.atmosphere.cpr.AtmosphereFramework.createWrapperAndConfigureHandler", "java.lang.Object.getClass", "java.lang.Class.getName", "org.slf4j.Logger.info", "org.slf4j.Logger.info", "java.util.List.isEmpty", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], [""], ["org.atmosphere.cpr.AtmosphereHandler", "java.lang.String", "java.util.List"], [""], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.Object"], [""], [""], [""], [""]], "passed_comments": "/"}, {"index": "280", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.addAtmosphereHandler", "methodParameterType": "String#AtmosphereHandler#Broadcaster#List<AtmosphereInterceptor>#", "methodParameterName": "mapping#h#broadcaster#l#", "methodBody": "public AtmosphereFramework addAtmosphereHandler(String mapping, AtmosphereHandler h, Broadcaster broadcaster, List<AtmosphereInterceptor> l) {\n        if (!mapping.startsWith(\"/\")) {\n            mapping = \"/\" + mapping;\n        }\n\n        createWrapperAndConfigureHandler(h, mapping, l).broadcaster = broadcaster;\n\n        if (!isInit) {\n            logger.info(\"Installed AtmosphereHandler {} mapped to context-path {} and Broadcaster Class {}\",\n                    new String[]{h.getClass().getName(), mapping, broadcaster.getClass().getName()});\n        } else {\n            logger.debug(\"Installed AtmosphereHandler {} mapped to context-path {} and Broadcaster Class {}\",\n                    new String[]{h.getClass().getName(), mapping, broadcaster.getClass().getName()});\n        }\n\n        if (!l.isEmpty()) {\n            logger.info(\"Installed AtmosphereInterceptor {} mapped to AtmosphereHandler {}\", l, h.getClass().getName());\n        }\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#StringLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ArrayInitializer#ArrayCreation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ArrayInitializer#ArrayCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ArrayInitializer)ArrayCreation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ArrayInitializer)ArrayCreation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add an  {@link AtmosphereHandler} serviced by the {@link Servlet}. This API is exposed to allow embedding an Atmosphere application.", "call_func_name": ["java.lang.String.startsWith", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.atmosphere.cpr.AtmosphereFramework.createWrapperAndConfigureHandler", "java.lang.Object.getClass", "java.lang.Class.getName", "org.slf4j.Logger.info", "org.slf4j.Logger.debug", "java.util.List.isEmpty", "org.slf4j.Logger.info"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], [""], ["org.atmosphere.cpr.AtmosphereHandler", "java.lang.String", "java.util.List"], [""], [""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String", "java.lang.Object[]"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "281", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.addAtmosphereHandler", "methodParameterType": "String#AtmosphereHandler#String#List<AtmosphereInterceptor>#", "methodParameterName": "mapping#h#broadcasterId#l#", "methodBody": "public AtmosphereFramework addAtmosphereHandler(String mapping, AtmosphereHandler h, String broadcasterId, List<AtmosphereInterceptor> l) {\n        if (!mapping.startsWith(\"/\")) {\n            mapping = \"/\" + mapping;\n        }\n\n        createWrapperAndConfigureHandler(h, mapping, l).broadcaster.setID(broadcasterId);\n\n        logger.info(\"Installed AtmosphereHandler {} mapped to context-path: {}\", h.getClass().getName(), mapping);\n        if (!l.isEmpty()) {\n            logger.info(\"Installed AtmosphereInterceptor {} mapped to AtmosphereHandler {}\", l, h.getClass().getName());\n        }\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#StringLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add an  {@link AtmosphereHandler} serviced by the {@link Servlet}. This API is exposed to allow embedding an Atmosphere application.", "call_func_name": ["java.lang.String.startsWith", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.atmosphere.cpr.AtmosphereFramework.createWrapperAndConfigureHandler", "org.atmosphere.cpr.Broadcaster.setID", "java.lang.Object.getClass", "java.lang.Class.getName", "org.slf4j.Logger.info", "java.util.List.isEmpty"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], [""], ["org.atmosphere.cpr.AtmosphereHandler", "java.lang.String", "java.util.List"], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""]], "passed_comments": [{"org.atmosphere.cpr.Broadcaster.setID": "Set the ID of this  {@link Broadcaster}."}]}, {"index": "282", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.addAtmosphereHandler", "methodParameterType": "String#AtmosphereHandler#", "methodParameterName": "mapping#h#", "methodBody": "public AtmosphereFramework addAtmosphereHandler(String mapping, AtmosphereHandler h) {\n        addAtmosphereHandler(mapping, h, Collections.<AtmosphereInterceptor>emptyList());\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add an  {@link AtmosphereHandler} serviced by the {@link Servlet}This API is exposed to allow embedding an Atmosphere application.", "call_func_name": ["java.util.Collections.emptyList", "org.atmosphere.cpr.AtmosphereFramework.addAtmosphereHandler"], "call_func_parameter": [[""], ["java.lang.String", "org.atmosphere.cpr.AtmosphereHandler", "java.util.List"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.addAtmosphereHandler": "Add an  {@link AtmosphereHandler} serviced by the {@link Servlet}This API is exposed to allow embedding an Atmosphere application."}]}, {"index": "283", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.addAtmosphereHandler", "methodParameterType": "String#AtmosphereHandler#String#", "methodParameterName": "mapping#h#broadcasterId#", "methodBody": "public AtmosphereFramework addAtmosphereHandler(String mapping, AtmosphereHandler h, String broadcasterId) {\n        addAtmosphereHandler(mapping, h, broadcasterId, Collections.<AtmosphereInterceptor>emptyList());\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add an  {@link AtmosphereHandler} serviced by the {@link Servlet}. This API is exposed to allow embedding an Atmosphere application.", "call_func_name": ["java.util.Collections.emptyList", "org.atmosphere.cpr.AtmosphereFramework.addAtmosphereHandler"], "call_func_parameter": [[""], ["java.lang.String", "org.atmosphere.cpr.AtmosphereHandler", "java.lang.String", "java.util.List"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.addAtmosphereHandler": "Add an  {@link AtmosphereHandler} serviced by the {@link Servlet}. This API is exposed to allow embedding an Atmosphere application."}]}, {"index": "284", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.addAtmosphereHandler", "methodParameterType": "String#AtmosphereHandler#Broadcaster#", "methodParameterName": "mapping#h#broadcaster#", "methodBody": "public AtmosphereFramework addAtmosphereHandler(String mapping, AtmosphereHandler h, Broadcaster broadcaster) {\n        addAtmosphereHandler(mapping, h, broadcaster, Collections.<AtmosphereInterceptor>emptyList());\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add an  {@link AtmosphereHandler} serviced by the {@link Servlet}. This API is exposed to allow embedding an Atmosphere application.", "call_func_name": ["java.util.Collections.emptyList", "org.atmosphere.cpr.AtmosphereFramework.addAtmosphereHandler"], "call_func_parameter": [[""], ["java.lang.String", "org.atmosphere.cpr.AtmosphereHandler", "org.atmosphere.cpr.Broadcaster", "java.util.List"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.addAtmosphereHandler": "Add an  {@link AtmosphereHandler} serviced by the {@link Servlet}. This API is exposed to allow embedding an Atmosphere application."}]}, {"index": "285", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.removeAtmosphereHandler", "methodParameterType": "String#", "methodParameterName": "mapping#", "methodBody": "public AtmosphereFramework removeAtmosphereHandler(String mapping) {\n\n        if (mapping.endsWith(\"/\")) {\n            mapping += mappingRegex;\n        }\n\n        atmosphereHandlers.remove(mapping);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Remove an  {@link AtmosphereHandler}.", "call_func_name": ["java.lang.String.endsWith", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.Map.remove"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "286", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.removeAllAtmosphereHandler", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AtmosphereFramework removeAllAtmosphereHandler() {\n        atmosphereHandlers.clear();\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Remove all  {@link AtmosphereHandler}s.", "call_func_name": ["java.util.Map.clear"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "287", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.removeAllInitParams", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AtmosphereFramework removeAllInitParams() {\n        initParams.clear();\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Remove all init parameters.", "call_func_name": ["java.util.HashMap.clear"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "288", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.addInitParameter", "methodParameterType": "String#String#", "methodParameterName": "name#value#", "methodBody": "public AtmosphereFramework addInitParameter(String name, String value) {\n        initParams.put(name, value);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add init-param like if they were defined in web.xml", "call_func_name": ["java.util.HashMap.put"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "289", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.patchContainer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void patchContainer() {\n        System.setProperty(\"org.apache.catalina.STRICT_SERVLET_COMPLIANCE\", \"false\");\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Path specific container using their own property.", "call_func_name": ["java.lang.System.setProperty"], "call_func_parameter": [["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "290", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.init", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AtmosphereFramework init() {\n        try {\n            init(servletConfig == null ? new VoidServletConfig(initParams) : servletConfig, false);\n        } catch (ServletException e) {\n            logger.error(\"\", e);\n        }\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#ConditionalExpression#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName)ConditionalExpression(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Initialize the AtmosphereFramework. Invoke this method after having properly configured this class using the setters.", "call_func_name": ["org.atmosphere.util.VoidServletConfig.<init>", "org.atmosphere.cpr.AtmosphereFramework.init", "org.slf4j.Logger.error"], "call_func_parameter": [["java.util.Map"], ["javax.servlet.ServletConfig", "boolean"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.init": "Initialize the AtmosphereFramework using the  {@link ServletContext}."}]}, {"index": "291", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.init", "methodParameterType": "ServletConfig#", "methodParameterName": "sc#", "methodBody": "public AtmosphereFramework init(final ServletConfig sc) throws ServletException {\n        return init(sc, true);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Initialize the AtmosphereFramework using the  {@link ServletContext}.", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.init"], "call_func_parameter": [["javax.servlet.ServletConfig", "boolean"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.init": "Initialize the AtmosphereFramework using the  {@link ServletContext}."}]}, {"index": "292", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.preventOOM", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected void preventOOM() {\n\n        String s = config.getInitParameter(ApplicationConfig.SCAN_CLASSPATH);\n        if (s != null) {\n            allowAllClassesScan = Boolean.parseBoolean(s);\n        }\n\n        try {\n            Class.forName(\"org.testng.Assert\");\n            allowAllClassesScan = false;\n        } catch (ClassNotFoundException e) {\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Prevent Atmosphere from scanning the entire class path.", "call_func_name": ["org.atmosphere.cpr.AtmosphereConfig.getInitParameter", "java.lang.Boolean.parseBoolean", "java.lang.Class.forName"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.getInitParameter": "Return the value of the init params defined in web.xml or application.xml."}]}, {"index": "293", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.init", "methodParameterType": "ServletConfig#boolean#", "methodParameterName": "sc#wrap#", "methodBody": "public AtmosphereFramework init(final ServletConfig sc, boolean wrap) throws ServletException {\n        if (isInit) return this;\n\n        servletConfig(sc, wrap);\n        readSystemProperties();\n        populateBroadcasterType();\n        populateObjectFactoryType();\n        loadMetaService();\n        onPreInit();\n\n        try {\n\n            ServletContextFactory.getDefault().init(sc.getServletContext());\n\n            preventOOM();\n            doInitParams(servletConfig);\n            doInitParamsForWebSocket(servletConfig);\n            lookupDefaultObjectFactoryType();\n\n            if (logger.isTraceEnabled()) {\n                asyncSupportListener(newClassInstance(AsyncSupportListener.class, AsyncSupportListenerAdapter.class));\n            }\n\n            configureObjectFactory();\n            configureAnnotationPackages();\n\n            configureBroadcasterFactory();\n            configureMetaBroadcaster();\n            configureAtmosphereResourceFactory();\n            if (isSessionSupportSpecified) {\n                sessionFactory();\n            }\n            configureScanningPackage(servletConfig, ApplicationConfig.ANNOTATION_PACKAGE);\n            configureScanningPackage(servletConfig, FrameworkConfig.JERSEY2_SCANNING_PACKAGE);\n            configureScanningPackage(servletConfig, FrameworkConfig.JERSEY_SCANNING_PACKAGE);\n            // Force scanning of the packages defined.\n            defaultPackagesToScan();\n\n            installAnnotationProcessor(servletConfig);\n\n            autoConfigureService(servletConfig.getServletContext());\n\n            // Reconfigure in case an annotation changed the default.\n            configureBroadcasterFactory();\n            patchContainer();\n            configureBroadcaster();\n            loadConfiguration(servletConfig);\n            initWebSocket();\n            initEndpointMapper();\n            initDefaultSerializer();\n\n            autoDetectContainer();\n            configureWebDotXmlAtmosphereHandler(servletConfig);\n            asyncSupport.init(servletConfig);\n            initAtmosphereHandler(servletConfig);\n            configureAtmosphereInterceptor(servletConfig);\n            analytics();\n\n            // http://java.net/jira/browse/ATMOSPHERE-157\n            if (sc.getServletContext() != null) {\n                sc.getServletContext().setAttribute(BroadcasterFactory.class.getName(), broadcasterFactory);\n            }\n\n            String s = config.getInitParameter(ApplicationConfig.BROADCASTER_SHARABLE_THREAD_POOLS);\n            if (s != null) {\n                sharedThreadPools = Boolean.parseBoolean(s);\n            }\n\n            this.shutdownHook = new Thread() {\n                public void run() {\n                    AtmosphereFramework.this.destroy();\n                }\n            };\n\n            Runtime.getRuntime().addShutdownHook(this.shutdownHook);\n\n            if (logger.isInfoEnabled()) {\n                info();\n            }\n\n            if (initializationError != null) {\n                logger.trace(\"ContainerInitalizer exception. May not be an issue if Atmosphere started properly \", initializationError);\n            }\n\n            universe();\n        } catch (Throwable t) {\n            logger.error(\"Failed to initialize Atmosphere Framework\", t);\n\n            if (t instanceof ServletException) {\n                throw (ServletException) t;\n            }\n\n            throw new ServletException(t);\n        }\n        isInit = true;\n        config.initComplete();\n\n        // wlc 12.x\n        if (WebLogicServlet30WithWebSocket.class.isAssignableFrom(asyncSupport.getClass())) {\n            servletConfig.getServletContext().setAttribute(AtmosphereConfig.class.getName(), config);\n        }\n\n        onPostInit();\n\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ThisExpression#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#Modifier#PrimitiveType#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(SimpleName)SimpleName(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(ThisExpression(SimpleName)SimpleName)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ThrowStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ThrowStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Initialize the AtmosphereFramework using the  {@link ServletContext}.", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.servletConfig", "org.atmosphere.cpr.AtmosphereFramework.readSystemProperties", "org.atmosphere.cpr.AtmosphereFramework.populateBroadcasterType", "org.atmosphere.cpr.AtmosphereFramework.populateObjectFactoryType", "org.atmosphere.cpr.AtmosphereFramework.loadMetaService", "org.atmosphere.cpr.AtmosphereFramework.onPreInit", "org.atmosphere.util.ServletContextFactory.getDefault", "javax.servlet.ServletConfig.getServletContext", "org.atmosphere.util.ServletContextFactory.init", "org.atmosphere.cpr.AtmosphereFramework.preventOOM", "org.atmosphere.cpr.AtmosphereFramework.doInitParams", "org.atmosphere.cpr.AtmosphereFramework.doInitParamsForWebSocket", "org.atmosphere.cpr.AtmosphereFramework.lookupDefaultObjectFactoryType", "org.slf4j.Logger.isTraceEnabled", "org.atmosphere.cpr.AtmosphereFramework.newClassInstance", "org.atmosphere.cpr.AtmosphereFramework.asyncSupportListener", "org.atmosphere.cpr.AtmosphereFramework.configureObjectFactory", "org.atmosphere.cpr.AtmosphereFramework.configureAnnotationPackages", "org.atmosphere.cpr.AtmosphereFramework.configureBroadcasterFactory", "org.atmosphere.cpr.AtmosphereFramework.configureMetaBroadcaster", "org.atmosphere.cpr.AtmosphereFramework.configureAtmosphereResourceFactory", "org.atmosphere.cpr.AtmosphereFramework.sessionFactory", "org.atmosphere.cpr.AtmosphereFramework.configureScanningPackage", "org.atmosphere.cpr.AtmosphereFramework.defaultPackagesToScan", "org.atmosphere.cpr.AtmosphereFramework.installAnnotationProcessor", "org.atmosphere.cpr.AtmosphereFramework.autoConfigureService", "org.atmosphere.cpr.AtmosphereFramework.patchContainer", "org.atmosphere.cpr.AtmosphereFramework.configureBroadcaster", "org.atmosphere.cpr.AtmosphereFramework.loadConfiguration", "org.atmosphere.cpr.AtmosphereFramework.initWebSocket", "org.atmosphere.cpr.AtmosphereFramework.initEndpointMapper", "org.atmosphere.cpr.AtmosphereFramework.initDefaultSerializer", "org.atmosphere.cpr.AtmosphereFramework.autoDetectContainer", "org.atmosphere.cpr.AtmosphereFramework.configureWebDotXmlAtmosphereHandler", "org.atmosphere.cpr.AsyncSupport.init", "org.atmosphere.cpr.AtmosphereFramework.initAtmosphereHandler", "org.atmosphere.cpr.AtmosphereFramework.configureAtmosphereInterceptor", "org.atmosphere.cpr.AtmosphereFramework.analytics", "java.lang.Class.getName", "javax.servlet.ServletContext.setAttribute", "org.atmosphere.cpr.AtmosphereConfig.getInitParameter", "java.lang.Boolean.parseBoolean", "java.lang.Runtime.getRuntime", "java.lang.Runtime.addShutdownHook", "org.slf4j.Logger.isInfoEnabled", "org.atmosphere.cpr.AtmosphereFramework.info", "org.slf4j.Logger.trace", "org.atmosphere.cpr.AtmosphereFramework.universe", "org.slf4j.Logger.error", "javax.servlet.ServletException.<init>", "org.atmosphere.cpr.AtmosphereConfig.initComplete", "java.lang.Object.getClass", "java.lang.Class.isAssignableFrom", "org.atmosphere.cpr.AtmosphereFramework.onPostInit"], "call_func_parameter": [["javax.servlet.ServletConfig", "boolean"], [""], [""], [""], [""], [""], [""], [""], ["javax.servlet.ServletContext"], [""], ["javax.servlet.ServletConfig"], ["javax.servlet.ServletConfig"], [""], [""], ["java.lang.Class", "java.lang.Class"], ["org.atmosphere.cpr.AsyncSupportListener"], [""], [""], [""], [""], [""], [""], ["javax.servlet.ServletConfig", "java.lang.String"], [""], ["javax.servlet.ServletConfig"], ["javax.servlet.ServletContext"], [""], [""], ["javax.servlet.ServletConfig"], [""], [""], [""], [""], ["javax.servlet.ServletConfig"], ["javax.servlet.ServletConfig"], ["javax.servlet.ServletConfig"], ["javax.servlet.ServletConfig"], [""], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.Thread"], [""], [""], ["java.lang.String", "java.lang.Throwable"], [""], ["java.lang.String", "java.lang.Throwable"], ["java.lang.Throwable"], [""], [""], ["java.lang.Class"], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.populateBroadcasterType": "The order of addition is quite important here."}, {"org.atmosphere.cpr.AtmosphereFramework.populateObjectFactoryType": "The order of addition is quite important here."}, {"org.atmosphere.util.ServletContextFactory.init": "Set the ServletContext"}, {"org.atmosphere.cpr.AtmosphereFramework.preventOOM": "Prevent Atmosphere from scanning the entire class path."}, {"org.atmosphere.cpr.AtmosphereFramework.doInitParams": "Read init params from web.xml and apply them."}, {"org.atmosphere.cpr.AtmosphereFramework.newClassInstance": "Instantiate a class"}, {"org.atmosphere.cpr.AtmosphereFramework.asyncSupportListener": "Add an  {@link AsyncSupportListener}."}, {"org.atmosphere.cpr.AtmosphereFramework.sessionFactory": "Return the  {@link AtmosphereResourceSessionFactory}"}, {"org.atmosphere.cpr.AtmosphereFramework.patchContainer": "Path specific container using their own property."}, {"org.atmosphere.cpr.AtmosphereFramework.autoDetectContainer": "Auto detect the underlying Servlet Container we are running on."}, {"org.atmosphere.cpr.AsyncSupport.init": "Initialize the WebServer using the  {@link ServletConfig}"}, {"org.atmosphere.cpr.AtmosphereFramework.initAtmosphereHandler": "Initialize  {@link AtmosphereServletProcessor}."}, {"org.atmosphere.cpr.AtmosphereFramework.configureAtmosphereInterceptor": "Configure the list of  {@link AtmosphereInterceptor}."}, {"org.atmosphere.cpr.AtmosphereConfig.getInitParameter": "Return the value of the init params defined in web.xml or application.xml."}, {"org.atmosphere.cpr.AtmosphereConfig.initComplete": "Invoke  {@link ShutdownHook}s."}]}, {"index": "294", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.configureAtmosphereInterceptor", "methodParameterType": "ServletConfig#", "methodParameterName": "sc#", "methodBody": "protected void configureAtmosphereInterceptor(ServletConfig sc) {\n        String s = sc.getInitParameter(ApplicationConfig.ATMOSPHERE_INTERCEPTORS);\n        if (s != null) {\n            String[] list = s.split(\",\");\n            for (String a : list) {\n                try {\n                    AtmosphereInterceptor ai = newClassInstance(AtmosphereInterceptor.class,\n                            (Class<AtmosphereInterceptor>) IOUtils\n                                    .loadClass(getClass(), a.trim()));\n                    interceptor(ai);\n                } catch (Exception e) {\n                    logger.warn(\"\", e);\n                }\n            }\n        }\n\n        s = sc.getInitParameter(ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTOR);\n        if (s == null || !\"true\".equalsIgnoreCase(s)) {\n            logger.info(\"Installing Default AtmosphereInterceptors\");\n\n            for (Class<? extends AtmosphereInterceptor> a : DEFAULT_ATMOSPHERE_INTERCEPTORS) {\n                if (!excludedInterceptors.contains(a.getName())) {\n                    interceptors.add(newAInterceptor(a));\n                } else {\n                    logger.info(\"Dropping Interceptor {}\", a.getName());\n                }\n            }\n            logger.info(\"Set {} to disable them.\", ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTOR);\n        }\n        addDefaultOrAppInterceptors();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#CastExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#StringLiteral#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)CastExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Configure the list of  {@link AtmosphereInterceptor}.", "call_func_name": ["javax.servlet.ServletConfig.getInitParameter", "java.lang.String.split", "java.lang.Object.getClass", "java.lang.String.trim", "org.atmosphere.util.IOUtils.loadClass", "org.atmosphere.cpr.AtmosphereFramework.newClassInstance", "org.atmosphere.cpr.AtmosphereFramework.interceptor", "org.slf4j.Logger.warn", "java.lang.String.equalsIgnoreCase", "org.slf4j.Logger.info", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.Class.getName", "java.util.List.contains", "org.atmosphere.cpr.AtmosphereFramework.newAInterceptor", "java.util.LinkedList.add", "org.slf4j.Logger.info", "org.atmosphere.cpr.AtmosphereFramework.addDefaultOrAppInterceptors"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], [""], [""], ["java.lang.Class", "java.lang.String"], ["java.lang.Class", "java.lang.Class"], ["org.atmosphere.cpr.AtmosphereInterceptor"], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String"], ["java.lang.String"], [""], [""], [""], [""], ["java.lang.Object"], ["java.lang.Class"], ["java.lang.Object"], ["java.lang.String", "java.lang.Object"], [""]], "passed_comments": [{"org.atmosphere.util.IOUtils.loadClass": "Loading the specified class using some heuristics to support various containers The order of preferece is: 1. Thread.currentThread().getContextClassLoader() 2. Class.forName 3. thisClass.getClassLoader()"}, {"org.atmosphere.cpr.AtmosphereFramework.newClassInstance": "Instantiate a class"}, {"org.atmosphere.cpr.AtmosphereFramework.interceptor": "Add an  {@link AtmosphereInterceptor} implementation. The adding order of {@link AtmosphereInterceptor} will be used, e.gthe first added  {@link AtmosphereInterceptor} will always be called first."}]}, {"index": "295", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.doInitParams", "methodParameterType": "ServletConfig#", "methodParameterName": "sc#", "methodBody": "protected void doInitParams(ServletConfig sc) {\n        doInitParams(sc, false);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Read init params from web.xml and apply them.", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.doInitParams"], "call_func_parameter": [["javax.servlet.ServletConfig", "boolean"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.doInitParams": "Read init params from web.xml and apply them."}]}, {"index": "296", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.doInitParams", "methodParameterType": "ServletConfig#boolean#", "methodParameterName": "sc#reconfigure#", "methodBody": "protected void doInitParams(ServletConfig sc, boolean reconfigure) {\n        String s = sc.getInitParameter(PROPERTY_NATIVE_COMETSUPPORT);\n        if (s != null) {\n            useNativeImplementation = Boolean.parseBoolean(s);\n            if (useNativeImplementation) isCometSupportSpecified = true;\n        }\n        s = sc.getInitParameter(PROPERTY_BLOCKING_COMETSUPPORT);\n        if (s != null) {\n            useBlockingImplementation = Boolean.parseBoolean(s);\n            if (useBlockingImplementation) isCometSupportSpecified = true;\n        }\n        s = sc.getInitParameter(PROPERTY_USE_STREAM);\n        if (s != null) {\n            useStreamForFlushingComments = Boolean.parseBoolean(s);\n        }\n        s = sc.getInitParameter(PROPERTY_COMET_SUPPORT);\n        if (asyncSupport == null && s != null && !reconfigure) {\n            asyncSupport = new DefaultAsyncSupportResolver(config).newCometSupport(s);\n            isCometSupportSpecified = true;\n        }\n        s = sc.getInitParameter(BROADCASTER_CLASS);\n        if (s != null) {\n            broadcasterClassName = s;\n            isBroadcasterSpecified = true;\n        }\n        s = sc.getInitParameter(BROADCASTER_CACHE);\n        if (s != null) {\n            broadcasterCacheClassName = s;\n        }\n\n        s = sc.getInitParameter(PROPERTY_SESSION_SUPPORT);\n        if (s == null) {\n            s = sc.getServletContext().getInitParameter(PROPERTY_SESSION_SUPPORT);\n        }\n\n        if (s != null || SessionSupport.initializationHint) {\n            boolean sessionSupport = Boolean.valueOf(s) || SessionSupport.initializationHint;\n            config.setSupportSession(sessionSupport);\n            if (sessionSupport && (sc.getServletContext().getMajorVersion() < 3 || !SessionSupport.initializationHint)) {\n                logger.warn(\"SessionSupport error. Make sure you also define {} as a listener in web.xml, see https://github.com/Atmosphere/atmosphere/wiki/Enabling-HttpSession-Support\", SessionSupport.class.getName());\n            }\n            isSessionSupportSpecified = true;\n        }\n        s = sc.getInitParameter(PROPERTY_ALLOW_SESSION_TIMEOUT_REMOVAL);\n        if (s != null) {\n            config.setSessionTimeoutRemovalAllowed(Boolean.valueOf(s));\n        }\n        s = sc.getInitParameter(PROPERTY_THROW_EXCEPTION_ON_CLONED_REQUEST);\n        if (s != null) {\n            config.setThrowExceptionOnCloned(Boolean.valueOf(s));\n            isThrowExceptionOnClonedRequestSpecified = true;\n        }\n        s = sc.getInitParameter(DISABLE_ONSTATE_EVENT);\n        if (s != null) {\n            initParams.put(DISABLE_ONSTATE_EVENT, s);\n        } else {\n            initParams.put(DISABLE_ONSTATE_EVENT, \"false\");\n        }\n        s = sc.getInitParameter(BROADCAST_FILTER_CLASSES);\n        if (s != null) {\n            broadcasterFilters.addAll(Arrays.asList(s.split(\",\")));\n            logger.info(\"Installing BroadcastFilter class(es) {}\", s);\n        }\n        s = sc.getInitParameter(BROADCASTER_LIFECYCLE_POLICY);\n        if (s != null) {\n            broadcasterLifeCyclePolicy = s;\n        }\n        s = sc.getInitParameter(BROADCASTER_FACTORY);\n        if (s != null) {\n            broadcasterFactoryClassName = s;\n        }\n        s = sc.getInitParameter(ATMOSPHERE_HANDLER_PATH);\n        if (s != null) {\n            handlersPath = s;\n        }\n        s = sc.getInitParameter(PROPERTY_ATMOSPHERE_XML);\n        if (s != null) {\n            atmosphereDotXmlPath = s;\n        }\n        s = sc.getInitParameter(META_SERVICE_PATH);\n        if (s != null) {\n            metaServicePath = s;\n        }\n        s = sc.getInitParameter(ApplicationConfig.HANDLER_MAPPING_REGEX);\n        if (s != null) {\n            mappingRegex = s;\n        }\n\n        s = sc.getInitParameter(FrameworkConfig.JERSEY_SCANNING_PACKAGE);\n        if (s != null) {\n            packages.add(s);\n        }\n\n        s = sc.getInitParameter(ApplicationConfig.DEFAULT_SERIALIZER);\n        if (s != null) {\n            defaultSerializerClassName = s;\n        }\n\n        s = sc.getInitParameter(ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTORS);\n        if (s != null) {\n            excludedInterceptors.addAll(Arrays.asList(s.trim().replace(\" \", \"\").split(\",\")));\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#PrefixExpression#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(SimpleName)SimpleName(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)IfStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(SimpleName)SimpleName(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)IfStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(PrefixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)PrefixExpression)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Read init params from web.xml and apply them.", "call_func_name": ["javax.servlet.ServletConfig.getInitParameter", "java.lang.Boolean.parseBoolean", "org.atmosphere.cpr.DefaultAsyncSupportResolver.<init>", "org.atmosphere.cpr.DefaultAsyncSupportResolver.newCometSupport", "javax.servlet.ServletConfig.getServletContext", "javax.servlet.ServletContext.getInitParameter", "java.lang.Boolean.valueOf", "java.lang.Boolean.booleanValue", "org.atmosphere.cpr.AtmosphereConfig.setSupportSession", "javax.servlet.ServletContext.getMajorVersion", "java.lang.Class.getName", "org.slf4j.Logger.warn", "org.atmosphere.cpr.AtmosphereConfig.setSessionTimeoutRemovalAllowed", "org.atmosphere.cpr.AtmosphereConfig.setThrowExceptionOnCloned", "java.util.HashMap.put", "java.lang.String.split", "java.util.Arrays.asList", "java.util.List.addAll", "org.slf4j.Logger.info", "java.util.List.add", "java.lang.String.trim", "java.lang.String.replace"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["org.atmosphere.cpr.AtmosphereConfig"], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], [""], ["boolean"], [""], [""], ["java.lang.String", "java.lang.Object"], ["boolean"], ["boolean"], ["java.lang.Object", "java.lang.Object"], ["java.lang.String"], ["java.lang.Object[]"], ["java.util.Collection"], ["java.lang.String", "java.lang.Object"], ["java.lang.Object"], [""], ["java.lang.CharSequence", "java.lang.CharSequence"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.setSupportSession": "Enable/Disable  {@link javax.servlet.http.HttpSession}."}, {"org.atmosphere.cpr.AtmosphereConfig.setSessionTimeoutRemovalAllowed": "Enable/Disable  {@link javax.servlet.http.HttpSession} timeout removal when a connection exists."}, {"org.atmosphere.cpr.AtmosphereConfig.setThrowExceptionOnCloned": "Enable/Disable Exception on cloned request."}]}, {"index": "297", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.detectSupportedFramework", "methodParameterType": "ServletConfig#", "methodParameterName": "sc#", "methodBody": "protected boolean detectSupportedFramework(ServletConfig sc) throws Exception {\n\n        String broadcasterClassNameTmp = null;\n\n        boolean isJersey = false;\n        try {\n            IOUtils.loadClass(getClass(), JERSEY_CONTAINER);\n            isJersey = true;\n\n            if (!isBroadcasterSpecified) {\n                broadcasterClassNameTmp = lookupDefaultBroadcasterType(JERSEY_BROADCASTER);\n\n                IOUtils.loadClass(getClass(), broadcasterClassNameTmp);\n            }\n            useStreamForFlushingComments = true;\n\n            StringBuilder packagesInit = new StringBuilder();\n            for (String s : packages) {\n                packagesInit.append(s).append(\",\");\n            }\n\n            initParams.put(FrameworkConfig.JERSEY_SCANNING_PACKAGE, packagesInit.toString());\n        } catch (Throwable t) {\n            logger.trace(\"\", t);\n            return false;\n        }\n\n        logger.debug(\"Missing META-INF/atmosphere.xml but found the Jersey runtime. Starting Jersey\");\n\n        // Atmosphere 1.1 : could add regressions\n        // Jersey will itself handle the headers.\n        //initParams.put(WRITE_HEADERS, \"false\");\n\n        ReflectorServletProcessor rsp = newClassInstance(ReflectorServletProcessor.class, ReflectorServletProcessor.class);\n        if (broadcasterClassNameTmp != null) broadcasterClassName = broadcasterClassNameTmp;\n        configureDetectedFramework(rsp, isJersey);\n        sessionSupport(false);\n        initParams.put(DISABLE_ONSTATE_EVENT, \"true\");\n\n        String mapping = sc.getInitParameter(PROPERTY_SERVLET_MAPPING);\n        if (mapping == null) {\n            mapping = sc.getInitParameter(ATMOSPHERE_HANDLER_MAPPING);\n            if (mapping == null) {\n                mapping = Broadcaster.ROOT_MASTER;\n            }\n        }\n        Class<? extends Broadcaster> bc = (Class<? extends Broadcaster>) IOUtils.loadClass(getClass(), broadcasterClassName);\n\n        broadcasterFactory.destroy();\n\n        broadcasterFactory = newClassInstance(BroadcasterFactory.class, DefaultBroadcasterFactory.class);\n        broadcasterFactory.configure(bc, broadcasterLifeCyclePolicy, config);\n        for (BroadcasterListener b : broadcasterListeners) {\n            broadcasterFactory.addBroadcasterListener(b);\n        }\n\n        Broadcaster b;\n\n        try {\n            b = broadcasterFactory.get(bc, mapping);\n        } catch (IllegalStateException ex) {\n            logger.warn(\"Two Broadcaster's named {}. Renaming the second one to {}\", mapping, sc.getServletName() + mapping);\n            b = broadcasterFactory.get(bc, sc.getServletName() + mapping);\n        }\n\n        addAtmosphereHandler(mapping, rsp, b);\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Auto-detect Jersey when no atmosphere.xml file is specified.", "call_func_name": ["java.lang.Object.getClass", "org.atmosphere.util.IOUtils.loadClass", "org.atmosphere.cpr.AtmosphereFramework.lookupDefaultBroadcasterType", "java.lang.StringBuilder.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.HashMap.put", "org.slf4j.Logger.trace", "org.slf4j.Logger.debug", "org.atmosphere.cpr.AtmosphereFramework.newClassInstance", "org.atmosphere.cpr.AtmosphereFramework.configureDetectedFramework", "org.atmosphere.cpr.AtmosphereFramework.sessionSupport", "javax.servlet.ServletConfig.getInitParameter", "org.atmosphere.cpr.BroadcasterFactory.destroy", "org.atmosphere.cpr.BroadcasterFactory.configure", "org.atmosphere.cpr.BroadcasterFactory.addBroadcasterListener", "org.atmosphere.cpr.BroadcasterFactory.get", "javax.servlet.ServletConfig.getServletName", "org.slf4j.Logger.warn", "org.atmosphere.cpr.AtmosphereFramework.addAtmosphereHandler"], "call_func_parameter": [[""], ["java.lang.Class", "java.lang.String"], ["java.lang.String"], [""], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String"], ["java.lang.Class", "java.lang.Class"], ["org.atmosphere.handler.ReflectorServletProcessor", "boolean"], ["boolean"], ["java.lang.String"], [""], ["java.lang.Class", "java.lang.String", "org.atmosphere.cpr.AtmosphereConfig"], ["org.atmosphere.cpr.BroadcasterListener"], ["java.lang.Class", "java.lang.Object"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.String", "org.atmosphere.cpr.AtmosphereHandler", "org.atmosphere.cpr.Broadcaster"]], "passed_comments": [{"org.atmosphere.util.IOUtils.loadClass": "Loading the specified class using some heuristics to support various containers The order of preferece is: 1. Thread.currentThread().getContextClassLoader() 2. Class.forName 3. thisClass.getClassLoader()"}, {"org.atmosphere.cpr.AtmosphereFramework.newClassInstance": "Instantiate a class"}, {"org.atmosphere.cpr.BroadcasterFactory.destroy": "Shutdown all  {@link Broadcaster}s."}, {"org.atmosphere.cpr.BroadcasterFactory.configure": "Configure the factory"}, {"org.atmosphere.cpr.BroadcasterFactory.addBroadcasterListener": "Add a  {@link org.atmosphere.cpr.BroadcasterListener}"}, {"org.atmosphere.cpr.BroadcasterFactory.get": "Create a new instance of  {@link Broadcaster} and store it for."}, {"org.atmosphere.cpr.AtmosphereFramework.addAtmosphereHandler": "Add an  {@link AtmosphereHandler} serviced by the {@link Servlet}. This API is exposed to allow embedding an Atmosphere application."}]}, {"index": "298", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.initAtmosphereHandler", "methodParameterType": "ServletConfig#", "methodParameterName": "sc#", "methodBody": "public void initAtmosphereHandler(ServletConfig sc) throws ServletException {\n        initAtmosphereHandler();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Initialize  {@link AtmosphereServletProcessor}.", "call_func_name": ["java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.atmosphere.cpr.AtmosphereServletProcessor.init", "org.atmosphere.cpr.AtmosphereFramework.checkWebSocketSupportState"], "call_func_parameter": [[""], [""], [""], [""], ["org.atmosphere.cpr.AtmosphereConfig"], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereServletProcessor.init": "Initialize the  {@link AtmosphereServletProcessor} using the {@link ServletConfig}."}]}, {"index": "299", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.loadAtmosphereDotXml", "methodParameterType": "InputStream#ClassLoader#", "methodParameterName": "stream#c#", "methodBody": "protected void loadAtmosphereDotXml(InputStream stream, ClassLoader c)\n            throws IOException, ServletException {\n\n        if (stream == null) {\n            return;\n        }\n\n        logger.info(\"Found Atmosphere Configuration under {}\", atmosphereDotXmlPath);\n        AtmosphereConfigReader.getInstance().parse(config, stream);\n        AtmosphereHandler handler = null;\n        for (AtmosphereHandlerConfig atmoHandler : config.getAtmosphereHandlerConfig()) {\n            try {\n                if (!atmoHandler.getClassName().startsWith(\"@\")) {\n                    if (!ReflectorServletProcessor.class.getName().equals(atmoHandler.getClassName())) {\n                        handler = newClassInstance(AtmosphereHandler.class,\n                                (Class<AtmosphereHandler>) IOUtils.loadClass(this.getClass(), atmoHandler.getClassName()));\n                    } else {\n                        handler = newClassInstance(AtmosphereHandler.class, ReflectorServletProcessor.class);\n                    }\n                    logger.info(\"Installed AtmosphereHandler {} mapped to context-path: {}\", handler, atmoHandler.getContextRoot());\n                }\n\n                for (ApplicationConfiguration a : atmoHandler.getApplicationConfig()) {\n                    initParams.put(a.getParamName(), a.getParamValue());\n                }\n\n                for (FrameworkConfiguration a : atmoHandler.getFrameworkConfig()) {\n                    initParams.put(a.getParamName(), a.getParamValue());\n                }\n\n                for (AtmosphereHandlerProperty handlerProperty : atmoHandler.getProperties()) {\n\n                    if (handlerProperty.getValue() != null && handlerProperty.getValue().indexOf(\"jersey\") != -1) {\n                        initParams.put(DISABLE_ONSTATE_EVENT, \"true\");\n                        useStreamForFlushingComments = true;\n                        broadcasterClassName = lookupDefaultBroadcasterType(JERSEY_BROADCASTER);\n                        broadcasterFactory.destroy();\n                        broadcasterFactory = null;\n                        configureBroadcasterFactory();\n                        configureBroadcaster();\n                    }\n\n                    if (handler != null) {\n                        IntrospectionUtils.setProperty(handler, handlerProperty.getName(), handlerProperty.getValue());\n                        IntrospectionUtils.addProperty(handler, handlerProperty.getName(), handlerProperty.getValue());\n                    }\n                }\n\n                sessionSupport(Boolean.valueOf(atmoHandler.getSupportSession()));\n\n                if (handler != null) {\n                    String broadcasterClass = atmoHandler.getBroadcaster();\n                    Broadcaster b;\n                    /**\n                     * If there is more than one AtmosphereHandler defined, their Broadcaster\n                     * may clash each other with the BroadcasterFactory. In that case we will use the\n                     * last one defined.\n                     */\n                    if (broadcasterClass != null) {\n                        broadcasterClassName = broadcasterClass;\n                        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n                        Class<? extends Broadcaster> bc = (Class<? extends Broadcaster>) cl.loadClass(broadcasterClassName);\n                        broadcasterFactory = newClassInstance(BroadcasterFactory.class, DefaultBroadcasterFactory.class);\n                        broadcasterFactory.configure(bc, broadcasterLifeCyclePolicy, config);\n                    }\n\n                    b = broadcasterFactory.lookup(atmoHandler.getContextRoot(), true);\n\n                    AtmosphereHandlerWrapper wrapper = new AtmosphereHandlerWrapper(handler, b, config);\n                    addMapping(atmoHandler.getContextRoot(), wrapper);\n\n                    String bc = atmoHandler.getBroadcasterCache();\n                    if (bc != null) {\n                        broadcasterCacheClassName = bc;\n                    }\n\n                    if (atmoHandler.getCometSupport() != null) {\n                        asyncSupport = (AsyncSupport) c.loadClass(atmoHandler.getCometSupport())\n                                .getDeclaredConstructor(new Class[]{AtmosphereConfig.class})\n                                .newInstance(new Object[]{config});\n                    }\n\n                    if (atmoHandler.getBroadcastFilterClasses() != null) {\n                        broadcasterFilters.addAll(atmoHandler.getBroadcastFilterClasses());\n                    }\n\n                    LinkedList<AtmosphereInterceptor> l = new LinkedList<AtmosphereInterceptor>();\n                    if (atmoHandler.getAtmosphereInterceptorClasses() != null) {\n                        for (String a : atmoHandler.getAtmosphereInterceptorClasses()) {\n                            try {\n                                AtmosphereInterceptor ai = newClassInstance(AtmosphereInterceptor.class,\n                                        (Class<AtmosphereInterceptor>) IOUtils.loadClass(getClass(), a));\n                                l.add(ai);\n                            } catch (Throwable e) {\n                                logger.warn(\"\", e);\n                            }\n                        }\n                    }\n                    addInterceptorToWrapper(wrapper, l);\n\n                    if (!l.isEmpty()) {\n                        logger.info(\"Installed AtmosphereInterceptor {} mapped to AtmosphereHandler {}\", l, atmoHandler.getClassName());\n                    }\n                }\n            } catch (Throwable t) {\n                logger.warn(\"Unable to load AtmosphereHandler class: \" + atmoHandler.getClassName(), t);\n                throw new ServletException(t);\n            }\n\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#CastExpression#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#NumberLiteral#PrefixExpression#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleType#TypeLiteral#ArrayInitializer#ArrayCreation#MethodInvocation#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayInitializer#ArrayCreation#MethodInvocation#CastExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#CastExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(Block(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)CastExpression)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ArrayInitializer)ArrayCreation)MethodInvocation(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName)ArrayInitializer)ArrayCreation)MethodInvocation)CastExpression)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)CastExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Load AtmosphereHandler defined under META-INF/atmosphere.xml.", "call_func_name": ["org.slf4j.Logger.info", "org.atmosphere.util.AtmosphereConfigReader.getInstance", "org.atmosphere.util.AtmosphereConfigReader.parse", "org.atmosphere.cpr.AtmosphereConfig.getAtmosphereHandlerConfig", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.atmosphere.config.AtmosphereHandlerConfig.getClassName", "java.lang.String.startsWith", "java.lang.Class.getName", "java.lang.String.equals", "java.lang.Object.getClass", "org.atmosphere.util.IOUtils.loadClass", "org.atmosphere.cpr.AtmosphereFramework.newClassInstance", "org.atmosphere.config.AtmosphereHandlerConfig.getContextRoot", "org.slf4j.Logger.info", "org.atmosphere.config.AtmosphereHandlerConfig.getApplicationConfig", "org.atmosphere.config.ApplicationConfiguration.getParamName", "org.atmosphere.config.ApplicationConfiguration.getParamValue", "java.util.HashMap.put", "org.atmosphere.config.AtmosphereHandlerConfig.getFrameworkConfig", "org.atmosphere.config.FrameworkConfiguration.getParamName", "org.atmosphere.config.FrameworkConfiguration.getParamValue", "org.atmosphere.config.AtmosphereHandlerConfig.getProperties", "org.atmosphere.config.AtmosphereHandlerProperty.getValue", "java.lang.String.indexOf", "org.atmosphere.cpr.AtmosphereFramework.lookupDefaultBroadcasterType", "org.atmosphere.cpr.BroadcasterFactory.destroy", "org.atmosphere.cpr.AtmosphereFramework.configureBroadcasterFactory", "org.atmosphere.cpr.AtmosphereFramework.configureBroadcaster", "org.atmosphere.config.AtmosphereHandlerProperty.getName", "org.atmosphere.util.IntrospectionUtils.setProperty", "org.atmosphere.util.IntrospectionUtils.addProperty", "org.atmosphere.config.AtmosphereHandlerConfig.getSupportSession", "java.lang.Boolean.valueOf", "java.lang.Boolean.booleanValue", "org.atmosphere.cpr.AtmosphereFramework.sessionSupport", "org.atmosphere.config.AtmosphereHandlerConfig.getBroadcaster", "java.lang.Thread.currentThread", "java.lang.Thread.getContextClassLoader", "java.lang.ClassLoader.loadClass", "org.atmosphere.cpr.BroadcasterFactory.configure", "org.atmosphere.cpr.BroadcasterFactory.lookup", "org.atmosphere.config.AtmosphereHandlerConfig.getBroadcasterCache", "org.atmosphere.config.AtmosphereHandlerConfig.getCometSupport", "java.lang.Class.getDeclaredConstructor", "java.lang.reflect.Constructor.newInstance", "org.atmosphere.config.AtmosphereHandlerConfig.getBroadcastFilterClasses", "java.util.List.addAll", "java.util.LinkedList.<init>", "org.atmosphere.config.AtmosphereHandlerConfig.getAtmosphereInterceptorClasses", "java.util.LinkedList.add", "org.slf4j.Logger.warn", "java.util.LinkedList.isEmpty", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "javax.servlet.ServletException.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], [""], ["org.atmosphere.cpr.AtmosphereConfig", "java.io.InputStream"], [""], [""], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.Object"], [""], ["java.lang.Class", "java.lang.String"], ["java.lang.Class", "java.lang.Class"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], [""], [""], ["java.lang.Object", "java.lang.Object"], [""], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.String"], [""], [""], [""], [""], ["java.lang.Object", "java.lang.String", "java.lang.String"], ["java.lang.Object", "java.lang.String", "java.lang.String"], [""], ["java.lang.String"], [""], ["boolean"], [""], [""], [""], ["java.lang.String"], ["java.lang.Class", "java.lang.String", "org.atmosphere.cpr.AtmosphereConfig"], ["java.lang.Object", "boolean"], [""], [""], ["java.lang.Class[]"], ["java.lang.Object[]"], [""], ["java.util.Collection"], [""], [""], ["java.lang.Object"], ["java.lang.String", "java.lang.Throwable"], [""], [""], ["java.lang.String"], [""], ["java.lang.Throwable"]], "passed_comments": [{"org.atmosphere.util.IOUtils.loadClass": "Loading the specified class using some heuristics to support various containers The order of preferece is: 1. Thread.currentThread().getContextClassLoader() 2. Class.forName 3. thisClass.getClassLoader()"}, {"org.atmosphere.cpr.AtmosphereFramework.newClassInstance": "Instantiate a class"}, {"org.atmosphere.cpr.BroadcasterFactory.destroy": "Shutdown all  {@link Broadcaster}s."}, {"org.atmosphere.util.IntrospectionUtils.setProperty": "Find a method with the right name If found, call the method ( if param is int or boolean we'll convert value to the right type before) - that means you can have setDebug(1)."}, {"org.atmosphere.cpr.BroadcasterFactory.configure": "Configure the factory"}, {"org.atmosphere.cpr.BroadcasterFactory.lookup": "Lookup a  {@link Broadcaster} instance using {@link Broadcaster#getID()} or ID"}]}, {"index": "300", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.setAsyncSupport", "methodParameterType": "AsyncSupport#", "methodParameterName": "asyncSupport#", "methodBody": "public AtmosphereFramework setAsyncSupport(AsyncSupport asyncSupport) {\n        this.asyncSupport = asyncSupport;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set the  {@link AsyncSupport} implementation. Make sure you don't set an implementation that only works onsome container. See  {@link BlockingIOCometSupport} for an example.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "301", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.setCometSupport", "methodParameterType": "AsyncSupport#", "methodParameterName": "asyncSupport#", "methodBody": "public AtmosphereFramework setCometSupport(AsyncSupport asyncSupport) {\n        return setAsyncSupport(asyncSupport);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param asyncSupport", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.setAsyncSupport"], "call_func_parameter": [["org.atmosphere.cpr.AsyncSupport"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.setAsyncSupport": "Set the  {@link AsyncSupport} implementation. Make sure you don't set an implementation that only works onsome container. See  {@link BlockingIOCometSupport} for an example."}]}, {"index": "302", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.getAsyncSupport", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AsyncSupport getAsyncSupport() {\n        return asyncSupport;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the current  {@link AsyncSupport}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "303", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.getCometSupport", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AsyncSupport getCometSupport() {\n        return asyncSupport;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the current  {@link AsyncSupport}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "304", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.createAsyncSupportResolver", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected AsyncSupportResolver createAsyncSupportResolver() {\n        return new DefaultAsyncSupportResolver(config);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an instance of AsyncSupportResolver  {@link AsyncSupportResolver}.", "call_func_name": ["org.atmosphere.cpr.DefaultAsyncSupportResolver.<init>"], "call_func_parameter": [["org.atmosphere.cpr.AtmosphereConfig"]], "passed_comments": "/"}, {"index": "305", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.autoDetectContainer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected void autoDetectContainer() {\n        // Was defined in atmosphere.xml\n        if (getAsyncSupport() == null) {\n            setAsyncSupport(createAsyncSupportResolver()\n                    .resolve(useNativeImplementation, useBlockingImplementation, useServlet30));\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Auto detect the underlying Servlet Container we are running on.", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.getAsyncSupport", "org.atmosphere.cpr.AtmosphereFramework.createAsyncSupportResolver", "org.atmosphere.cpr.AsyncSupportResolver.resolve", "org.atmosphere.cpr.AtmosphereFramework.setAsyncSupport"], "call_func_parameter": [[""], [""], ["boolean", "boolean", "boolean"], ["org.atmosphere.cpr.AsyncSupport"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.getAsyncSupport": "Return the current  {@link AsyncSupport}."}, {"org.atmosphere.cpr.AtmosphereFramework.createAsyncSupportResolver": "Returns an instance of AsyncSupportResolver  {@link AsyncSupportResolver}."}, {"org.atmosphere.cpr.AtmosphereFramework.setAsyncSupport": "Set the  {@link AsyncSupport} implementation. Make sure you don't set an implementation that only works onsome container. See  {@link BlockingIOCometSupport} for an example."}]}, {"index": "306", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.autoDetectAtmosphereHandlers", "methodParameterType": "ServletContext#ClassLoader#", "methodParameterName": "servletContext#classloader#", "methodBody": "public void autoDetectAtmosphereHandlers(ServletContext servletContext, ClassLoader classloader)\n            throws MalformedURLException, URISyntaxException {\n\n        // If Handler has been added\n        if (!atmosphereHandlers.isEmpty()) return;\n\n        logger.info(\"Auto detecting atmosphere handlers {}\", handlersPath);\n\n        String realPath = servletContext.getRealPath(handlersPath);\n\n        // Weblogic bug\n        if (realPath == null) {\n            URL u = servletContext.getResource(handlersPath);\n            if (u == null) return;\n            realPath = u.getPath();\n        }\n\n        loadAtmosphereHandlersFromPath(classloader, realPath);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ReturnStatement#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ReturnStatement)ReturnStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement)ReturnStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Auto detect instance of  {@link AtmosphereHandler} in case META-INF/atmosphere.xmlis missing.", "call_func_name": ["java.util.Map.isEmpty", "org.slf4j.Logger.info", "javax.servlet.ServletContext.getRealPath", "javax.servlet.ServletContext.getResource", "java.net.URL.getPath", "org.atmosphere.cpr.AtmosphereFramework.loadAtmosphereHandlersFromPath"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object"], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.ClassLoader", "java.lang.String"]], "passed_comments": "/"}, {"index": "307", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.autoDetectWebSocketHandler", "methodParameterType": "ServletContext#ClassLoader#", "methodParameterName": "servletContext#classloader#", "methodBody": "protected void autoDetectWebSocketHandler(ServletContext servletContext, ClassLoader classloader)\n            throws MalformedURLException {\n\n        if (hasNewWebSocketProtocol) return;\n\n        logger.info(\"Auto detecting WebSocketHandler in {}\", handlersPath);\n        loadWebSocketFromPath(classloader, realPath(servletContext, handlersPath));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ReturnStatement#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(SimpleName)SimpleName(ReturnStatement)ReturnStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Auto detect instance of  {@link org.atmosphere.websocket.WebSocketHandler} in case META-INF/atmosphere.xmlis missing.", "call_func_name": ["org.slf4j.Logger.info", "org.atmosphere.util.IOUtils.realPath", "org.atmosphere.cpr.AtmosphereFramework.loadWebSocketFromPath"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["javax.servlet.ServletContext", "java.lang.String"], ["java.lang.ClassLoader", "java.lang.String"]], "passed_comments": "/"}, {"index": "308", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.getFiles", "methodParameterType": "File#", "methodParameterName": "f#", "methodBody": "private void getFiles(File f) {\n        if (scanDone) return;\n\n        File[] files = f.listFiles();\n        for (File test : files) {\n            if (test.isDirectory()) {\n                getFiles(test);\n            } else {\n                String clazz = test.getAbsolutePath();\n                if (clazz.endsWith(\".class\")) {\n                    possibleComponentsCandidate.add(clazz);\n                }\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ReturnStatement#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(ReturnStatement)ReturnStatement)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Get a list of possible candidates to load as  {@link AtmosphereHandler}.", "call_func_name": ["java.io.File.listFiles", "java.io.File.isDirectory", "org.atmosphere.cpr.AtmosphereFramework.getFiles", "java.io.File.getAbsolutePath", "java.lang.String.endsWith", "java.util.ArrayList.add"], "call_func_parameter": [[""], [""], ["java.io.File"], [""], ["java.lang.String"], ["java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.getFiles": "Get a list of possible candidates to load as  {@link AtmosphereHandler}."}]}, {"index": "309", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.configureRequestResponse", "methodParameterType": "AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "req#res#", "methodBody": "public AtmosphereFramework configureRequestResponse(AtmosphereRequest req, AtmosphereResponse res) throws UnsupportedEncodingException {\n        req.setAttribute(PROPERTY_USE_STREAM, useStreamForFlushingComments);\n        req.setAttribute(BROADCASTER_CLASS, broadcasterClassName);\n        req.setAttribute(ATMOSPHERE_CONFIG, config);\n        req.setAttribute(THROW_EXCEPTION_ON_CLONED_REQUEST, \"\" + config.isThrowExceptionOnCloned());\n\n        boolean skip = true;\n        String s = config.getInitParameter(ALLOW_QUERYSTRING_AS_REQUEST);\n        if (s != null) {\n            skip = Boolean.valueOf(s);\n        }\n\n        if (!skip || req.getAttribute(WEBSOCKET_SUSPEND) == null) {\n            Map<String, String> headers = configureQueryStringAsRequest(req);\n            String body = headers.remove(ATMOSPHERE_POST_BODY);\n            if (body != null && body.isEmpty()) {\n                body = null;\n            }\n\n            // Reconfigure the request. Clear the Atmosphere queryString\n            req.headers(headers)\n                    .method(body != null && req.getMethod().equalsIgnoreCase(\"GET\") ? \"POST\" : req.getMethod());\n\n            if (body != null) {\n                req.body(URLDecoder.decode(body, req.getCharacterEncoding() == null ? \"UTF-8\" : req.getCharacterEncoding()));\n            }\n        }\n\n        s = req.getHeader(X_ATMOSPHERE_TRACKING_ID);\n\n        // Lookup for websocket\n        if (s == null || s.equals(\"0\")) {\n            String unique = config.getInitParameter(ApplicationConfig.UNIQUE_UUID_WEBSOCKET);\n            if (unique != null && Boolean.valueOf(unique)) {\n                s = (String) req.getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);\n            }\n        }\n\n        if (s == null || s.equals(\"0\")) {\n            s = config.uuidProvider().generateUuid();\n            res.setHeader(HeaderConfig.X_FIRST_REQUEST, \"true\");\n            res.setHeader(X_ATMOSPHERE_TRACKING_ID, s);\n            res.setHeader(\"Content-Type\", \"text/plain; charset=utf-8\");\n        } else {\n            // This may breaks 1.0.0 application because the WebSocket's associated AtmosphereResource will\n            // all have the same UUID, and retrieving the original one for WebSocket, so we don't set it at all.\n            // Null means it is not an HTTP request.\n            if (req.resource() == null) {\n                res.setHeader(X_ATMOSPHERE_TRACKING_ID, s);\n            } else if (req.getAttribute(WebSocket.WEBSOCKET_INITIATED) == null) {\n                // WebSocket reconnect, in case an application manually set the header\n                // (impossible to retrieve the headers normally with WebSocket or SSE)\n                res.setHeader(X_ATMOSPHERE_TRACKING_ID, s);\n            }\n        }\n\n        if (req.getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID) == null) {\n            req.setAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID, s);\n        }\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#InfixExpression#StringLiteral#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#StringLiteral#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ConditionalExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Configure some attributes on the  {@link AtmosphereRequest}.", "call_func_name": ["java.lang.Boolean.valueOf", "org.atmosphere.cpr.AtmosphereRequest.setAttribute", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.atmosphere.cpr.AtmosphereConfig.isThrowExceptionOnCloned", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.atmosphere.cpr.AtmosphereConfig.getInitParameter", "java.lang.Boolean.valueOf", "java.lang.Boolean.booleanValue", "org.atmosphere.cpr.AtmosphereRequest.getAttribute", "org.atmosphere.cpr.AtmosphereFramework.configureQueryStringAsRequest", "java.util.Map.remove", "java.lang.String.isEmpty", "org.atmosphere.cpr.AtmosphereRequest.headers", "org.atmosphere.cpr.AtmosphereRequest.getMethod", "java.lang.String.equalsIgnoreCase", "org.atmosphere.cpr.AtmosphereRequest.method", "org.atmosphere.cpr.AtmosphereRequest.getCharacterEncoding", "java.net.URLDecoder.decode", "org.atmosphere.cpr.AtmosphereRequest.body", "org.atmosphere.cpr.AtmosphereRequest.getHeader", "java.lang.String.equals", "org.atmosphere.cpr.AtmosphereConfig.uuidProvider", "org.atmosphere.util.UUIDProvider.generateUuid", "org.atmosphere.cpr.AtmosphereResponse.setHeader", "org.atmosphere.cpr.AtmosphereRequest.resource"], "call_func_parameter": [["boolean"], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String"], [""], ["boolean"], [""], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], ["org.atmosphere.cpr.AtmosphereRequest"], ["java.lang.Object"], [""], ["java.util.Map"], [""], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object"], [""], [""], ["java.lang.String", "java.lang.String"], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequest.setAttribute": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereConfig.isThrowExceptionOnCloned": "Is cloned request throws exception."}, {"org.atmosphere.cpr.AtmosphereConfig.getInitParameter": "Return the value of the init params defined in web.xml or application.xml."}, {"org.atmosphere.cpr.AtmosphereRequest.getAttribute": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.headers": "Add all headers contained within the Map."}, {"org.atmosphere.cpr.AtmosphereRequest.getMethod": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.getCharacterEncoding": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.getHeader": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereConfig.uuidProvider": "Return the  {@link org.atmosphere.util.UUIDProvider}"}, {"org.atmosphere.cpr.AtmosphereRequest.resource": "The  {@link AtmosphereResource} associated with this request."}]}, {"index": "310", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.doCometSupport", "methodParameterType": "AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "req#res#", "methodBody": "public Action doCometSupport(AtmosphereRequest req, AtmosphereResponse res) throws IOException, ServletException {\n\n        if (isDestroyed.get()) return Action.CANCELLED;\n\n        Action a = null;\n        try {\n            configureRequestResponse(req, res);\n            a = asyncSupport.service(req, res);\n        } catch (IllegalStateException ex) {\n            boolean isJBoss = ex.getMessage() == null ? false : ex.getMessage().startsWith(\"JBoss failed\");\n            if (ex.getMessage() != null && (ex.getMessage().startsWith(\"Tomcat failed\") || isJBoss)) {\n                if (!isFilter) {\n                    logger.warn(\"Failed using comet support: {}, error: {} Is the NIO or APR Connector enabled?\", asyncSupport.getClass().getName(),\n                            ex.getMessage());\n                }\n                logger.error(\"If you have more than one Connector enabled, make sure they both use the same protocol, \" +\n                        \"e.g NIO/APR or HTTP for all. If not, {} will be used and cannot be changed.\", BlockingIOCometSupport.class.getName(), ex);\n\n                AsyncSupport current = asyncSupport;\n                asyncSupport = asyncSupport.supportWebSocket() && !isJBoss ? new Tomcat7BIOSupportWithWebSocket(config) : new BlockingIOCometSupport(config);\n                if (current instanceof AsynchronousProcessor) {\n                    ((AsynchronousProcessor) current).shutdown();\n                }\n\n                asyncSupport.init(config.getServletConfig());\n                logger.warn(\"Using \" + asyncSupport.getClass().getName());\n\n                a = asyncSupport.service(req, res);\n            } else {\n                logger.error(\"AtmosphereFramework exception\", ex);\n                throw ex;\n            }\n        } finally {\n            if (a != null) {\n                notify(a.type(), req, res);\n            }\n\n            if (!externalizeDestroy) {\n                if (req != null && a != null && a.type() != Action.TYPE.SUSPEND) {\n                    req.destroy();\n                    res.destroy();\n                    notify(Action.TYPE.DESTROYED, req, res);\n                }\n            }\n        }\n        return a;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#BooleanLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ThrowStatement#Block#IfStatement#Block#CatchClause#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#PrefixExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(BooleanLiteral)BooleanLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)InfixExpression(Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ConditionalExpression)Assignment)ExpressionStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)IfStatement)Block)CatchClause(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Invoke the proprietary  {@link AsyncSupport}.", "call_func_name": ["java.util.concurrent.atomic.AtomicBoolean.get", "org.atmosphere.cpr.AtmosphereFramework.configureRequestResponse", "org.atmosphere.cpr.AsyncSupport.service", "org.atmosphere.cpr.Action.type", "org.atmosphere.cpr.AtmosphereRequest.destroy", "org.atmosphere.cpr.AtmosphereResponse.destroy", "java.lang.IllegalStateException.getMessage", "java.lang.String.startsWith", "java.lang.Object.getClass", "java.lang.Class.getName", "org.slf4j.Logger.warn", "org.slf4j.Logger.error", "org.atmosphere.cpr.AsyncSupport.supportWebSocket", "org.atmosphere.container.Tomcat7BIOSupportWithWebSocket.<init>", "org.atmosphere.container.BlockingIOCometSupport.<init>", "org.atmosphere.cpr.AsynchronousProcessor.shutdown", "org.atmosphere.cpr.AtmosphereConfig.getServletConfig", "org.atmosphere.cpr.AsyncSupport.init", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.slf4j.Logger.warn", "org.slf4j.Logger.error"], "call_func_parameter": [[""], ["org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse"], ["org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse"], [""], [""], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], ["org.atmosphere.cpr.AtmosphereConfig"], ["org.atmosphere.cpr.AtmosphereConfig"], [""], [""], ["javax.servlet.ServletConfig"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.configureRequestResponse": "Configure some attributes on the  {@link AtmosphereRequest}."}, {"org.atmosphere.cpr.AsyncSupport.service": "Serve the  {@link AtmosphereRequest} and the {@link AtmosphereResponse} and returnthe appropriate  {@link Action}."}, {"org.atmosphere.cpr.AsyncSupport.supportWebSocket": "Return true if this implementation supports the websocket protocol."}, {"org.atmosphere.cpr.AtmosphereConfig.getServletConfig": "Return the  {@link ServletConfig}."}, {"org.atmosphere.cpr.AsyncSupport.init": "Initialize the WebServer using the  {@link ServletConfig}"}]}, {"index": "311", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.getDefaultBroadcasterClassName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDefaultBroadcasterClassName() {\n        return broadcasterClassName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the default  {@link Broadcaster} class name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "312", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.setDefaultBroadcasterClassName", "methodParameterType": "String#", "methodParameterName": "bccn#", "methodBody": "public AtmosphereFramework setDefaultBroadcasterClassName(String bccn) {\n        if (isBroadcasterSpecified) {\n            logger.trace(\"Broadcaster {} already set in web.xml\", broadcasterClassName);\n            return this;\n        }\n        isBroadcasterSpecified = true;\n\n        broadcasterClassName = bccn;\n\n        // Must reconfigure.\n        broadcasterFactory = null;\n        configureBroadcasterFactory();\n\n        // We must recreate all previously created Broadcaster.\n        for (AtmosphereHandlerWrapper w : atmosphereHandlers.values()) {\n            // If case one listener is initializing the framework.\n            if (w.broadcaster != null) {\n                w.broadcaster = broadcasterFactory.lookup(w.broadcaster.getID(), true);\n            }\n        }\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#IfStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#BooleanLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set the default  {@link Broadcaster} class name.", "call_func_name": ["org.slf4j.Logger.trace", "org.atmosphere.cpr.AtmosphereFramework.configureBroadcasterFactory", "java.util.Map.values", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.atmosphere.cpr.Broadcaster.getID", "org.atmosphere.cpr.BroadcasterFactory.lookup"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], [""], [""], [""], [""], [""], [""], ["java.lang.Object", "boolean"]], "passed_comments": [{"org.atmosphere.cpr.Broadcaster.getID": "Return the ID of this  {@link Broadcaster}."}, {"org.atmosphere.cpr.BroadcasterFactory.lookup": "Lookup a  {@link Broadcaster} instance using {@link Broadcaster#getID()} or ID"}]}, {"index": "313", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.isUseStreamForFlushingComments", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isUseStreamForFlushingComments() {\n        return useStreamForFlushingComments;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<tt>true</tt> if Atmosphere uses  {@link AtmosphereResponseImpl#getOutputStream()}by default for write operation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "314", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.setUseStreamForFlushingComments", "methodParameterType": "boolean#", "methodParameterName": "useStreamForFlushingComments#", "methodBody": "public AtmosphereFramework setUseStreamForFlushingComments(boolean useStreamForFlushingComments) {\n        this.useStreamForFlushingComments = useStreamForFlushingComments;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set to <tt>true</tt> so Atmosphere uses  {@link AtmosphereResponseImpl#getOutputStream()}by default for write operation. Default is false.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "315", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.getBroadcasterFactory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public BroadcasterFactory getBroadcasterFactory() {\n        if (broadcasterFactory == null) {\n            configureBroadcasterFactory();\n        }\n        return broadcasterFactory;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the  {@link BroadcasterFactory} which is used by Atmosphere to construct{@link Broadcaster}.", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.configureBroadcasterFactory"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "316", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.setBroadcasterFactory", "methodParameterType": "BroadcasterFactory#", "methodParameterName": "broadcasterFactory#", "methodBody": "public AtmosphereFramework setBroadcasterFactory(final BroadcasterFactory broadcasterFactory) {\n        this.broadcasterFactory = broadcasterFactory;\n        configureBroadcaster();\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set the  {@link BroadcasterFactory} which is used by Atmosphere to construct{@link Broadcaster}.", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.configureBroadcaster"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "317", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.getBroadcasterCacheClassName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBroadcasterCacheClassName() {\n        return broadcasterCacheClassName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link org.atmosphere.cpr.BroadcasterCache} class name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "318", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.setBroadcasterCacheClassName", "methodParameterType": "String#", "methodParameterName": "broadcasterCacheClassName#", "methodBody": "public AtmosphereFramework setBroadcasterCacheClassName(String broadcasterCacheClassName) {\n        this.broadcasterCacheClassName = broadcasterCacheClassName;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set the  {@link org.atmosphere.cpr.BroadcasterCache} class name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "319", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.addBroadcasterType", "methodParameterType": "String#", "methodParameterName": "broadcasterTypeString#", "methodBody": "public AtmosphereFramework addBroadcasterType(String broadcasterTypeString) {\n        broadcasterTypes.add(broadcasterTypeString);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add a new Broadcaster class name that AtmosphereServlet can use when initializing requests, and when the atmosphere.xml broadcaster element is unspecified.", "call_func_name": ["java.util.concurrent.ConcurrentLinkedQueue.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "320", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.getLibPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getLibPath() {\n        return libPath;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the location of the JARs containing the application classes. Default is WEB-INF/lib.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "321", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.setLibPath", "methodParameterType": "String#", "methodParameterName": "libPath#", "methodBody": "public AtmosphereFramework setLibPath(String libPath) {\n        this.libPath = libPath;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set the location of the JARs containing the application.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "322", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.getWebSocketProcessorClassName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getWebSocketProcessorClassName() {\n        return webSocketProcessorClassName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The current  {@link org.atmosphere.websocket.WebSocketProcessor} used to handle websocket requests.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "323", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.setWebsocketProcessorClassName", "methodParameterType": "String#", "methodParameterName": "webSocketProcessorClassName#", "methodBody": "public AtmosphereFramework setWebsocketProcessorClassName(String webSocketProcessorClassName) {\n        this.webSocketProcessorClassName = webSocketProcessorClassName;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set the  {@link org.atmosphere.websocket.WebSocketProcessor} class name used to process WebSocket requests. Default is{@link DefaultWebSocketProcessor}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "324", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.interceptor", "methodParameterType": "AtmosphereInterceptor#", "methodParameterName": "c#", "methodBody": "public AtmosphereFramework interceptor(AtmosphereInterceptor c) {\n        if (!checkDuplicate(c)) {\n            interceptors.add(c);\n            if (isInit) {\n                addInterceptorToAllWrappers(c);\n            }\n        }\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add an  {@link AtmosphereInterceptor} implementation. The adding order of {@link AtmosphereInterceptor} will be used, e.gthe first added  {@link AtmosphereInterceptor} will always be called first.", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.checkDuplicate", "java.util.LinkedList.add", "org.atmosphere.cpr.AtmosphereFramework.addInterceptorToAllWrappers"], "call_func_parameter": [["org.atmosphere.cpr.AtmosphereInterceptor"], ["java.lang.Object"], ["org.atmosphere.cpr.AtmosphereInterceptor"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.checkDuplicate": "<p> Checks if an instance of the specified  {@link AtmosphereInterceptor} implementation exists in the{@link #interceptors}. </p>"}]}, {"index": "325", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.checkDuplicate", "methodParameterType": "AtmosphereInterceptor#", "methodParameterName": "c#", "methodBody": "private boolean checkDuplicate(final AtmosphereInterceptor c) {\n        return checkDuplicate(interceptors, c.getClass());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p> Checks if an instance of the specified  {@link AtmosphereInterceptor} implementation exists in the{@link #interceptors}. </p>", "call_func_name": ["java.lang.Object.getClass", "org.atmosphere.cpr.AtmosphereFramework.checkDuplicate"], "call_func_parameter": [[""], ["java.util.List", "java.lang.Class"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.checkDuplicate": "<p> Checks in the specified list if there is at least one instance of the given {@link AtmosphereInterceptor interceptor} implementation class.</p>"}]}, {"index": "326", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.checkDuplicate", "methodParameterType": "List<AtmosphereInterceptor>#Class<? extends AtmosphereInterceptor>#", "methodParameterName": "interceptorList#c#", "methodBody": "private boolean checkDuplicate(final List<AtmosphereInterceptor> interceptorList, Class<? extends AtmosphereInterceptor> c) {\n        for (final AtmosphereInterceptor i : interceptorList) {\n            if (i.getClass().equals(c)) {\n                return true;\n            }\n        }\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p> Checks in the specified list if there is at least one instance of the given {@link AtmosphereInterceptor interceptor} implementation class.</p>", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.Object.getClass", "java.lang.Object.equals"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "327", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.interceptors", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public LinkedList<AtmosphereInterceptor> interceptors() {\n        return interceptors;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the list of  {@link AtmosphereInterceptor}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "328", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.annotationProcessorClassName", "methodParameterType": "String#", "methodParameterName": "annotationProcessorClassName#", "methodBody": "public AtmosphereFramework annotationProcessorClassName(String annotationProcessorClassName) {\n        this.annotationProcessorClassName = annotationProcessorClassName;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set the  {@link AnnotationProcessor} class name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "329", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.asyncSupportListener", "methodParameterType": "AsyncSupportListener#", "methodParameterName": "asyncSupportListener#", "methodBody": "public AtmosphereFramework asyncSupportListener(AsyncSupportListener asyncSupportListener) {\n        asyncSupportListeners.add(asyncSupportListener);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add an  {@link AsyncSupportListener}.", "call_func_name": ["java.util.List.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "330", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.asyncSupportListeners", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<AsyncSupportListener> asyncSupportListeners() {\n        return asyncSupportListeners;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the list of  {@link AsyncSupportListener}s.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "331", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.addBroadcasterListener", "methodParameterType": "BroadcasterListener#", "methodParameterName": "b#", "methodBody": "public AtmosphereFramework addBroadcasterListener(BroadcasterListener b) {\n        broadcasterFactory.addBroadcasterListener(b);\n        broadcasterListeners.add(b);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add  {@link BroadcasterListener} to all created {@link Broadcaster}s.", "call_func_name": ["org.atmosphere.cpr.BroadcasterFactory.addBroadcasterListener", "java.util.List.add"], "call_func_parameter": [["org.atmosphere.cpr.BroadcasterListener"], ["java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.BroadcasterFactory.addBroadcasterListener": "Add a  {@link org.atmosphere.cpr.BroadcasterListener}"}]}, {"index": "332", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.addBroadcasterCacheListener", "methodParameterType": "BroadcasterCacheListener#", "methodParameterName": "b#", "methodBody": "public AtmosphereFramework addBroadcasterCacheListener(BroadcasterCacheListener b) {\n        broadcasterCacheListeners.add(b);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add  {@link BroadcasterCacheListener} to the {@link BroadcasterCache}.", "call_func_name": ["java.util.LinkedList.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "333", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.addBroadcasterCacheInjector", "methodParameterType": "BroadcasterCacheInspector#", "methodParameterName": "b#", "methodBody": "public AtmosphereFramework addBroadcasterCacheInjector(BroadcasterCacheInspector b) {\n        inspectors.add(b);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add a  {@link BroadcasterCacheInspector} which will be associated with the defined {@link BroadcasterCache}.", "call_func_name": ["java.util.concurrent.ConcurrentLinkedQueue.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "334", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.inspectors", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ConcurrentLinkedQueue<BroadcasterCacheInspector> inspectors() {\n        return inspectors;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the list of  {@link BroadcasterCacheInspector}s.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "335", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.getAtmosphereConfig", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AtmosphereConfig getAtmosphereConfig() {\n        return config;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return a configured instance of  {@link AtmosphereConfig}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "336", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.getServletContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ServletContext getServletContext() {\n        return servletConfig.getServletContext();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link ServletContext}", "call_func_name": ["javax.servlet.ServletConfig.getServletContext"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "337", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.broadcasterFilters", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<String> broadcasterFilters() {\n        return broadcasterFilters;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the list of  {@link BroadcastFilter}s.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "338", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.broadcasterFilters", "methodParameterType": "BroadcastFilter#", "methodParameterName": "f#", "methodBody": "public AtmosphereFramework broadcasterFilters(BroadcastFilter f) {\n        broadcasterFilters.add(f.getClass().getName());\n\n        for (Broadcaster b : config.getBroadcasterFactory().lookupAll()) {\n            b.getBroadcasterConfig().addFilter(f);\n        }\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add a  {@link BroadcastFilter}.", "call_func_name": ["java.lang.Object.getClass", "java.lang.Class.getName", "java.util.List.add", "org.atmosphere.cpr.AtmosphereConfig.getBroadcasterFactory", "org.atmosphere.cpr.BroadcasterFactory.lookupAll", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.atmosphere.cpr.Broadcaster.getBroadcasterConfig", "org.atmosphere.cpr.BroadcasterConfig.addFilter"], "call_func_parameter": [[""], [""], ["java.lang.Object"], [""], [""], [""], [""], [""], [""], ["org.atmosphere.cpr.BroadcastFilter"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.getBroadcasterFactory": "Return an instance of  {@link DefaultBroadcasterFactory}."}, {"org.atmosphere.cpr.BroadcasterFactory.lookupAll": "Return an immutable Collection of  {@link Broadcaster} this factory contains."}, {"org.atmosphere.cpr.Broadcaster.getBroadcasterConfig": "Return the current  {@link BroadcasterConfig}."}, {"org.atmosphere.cpr.BroadcasterConfig.addFilter": "Add a  {@link BroadcastFilter}."}]}, {"index": "339", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.isShareExecutorServices", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isShareExecutorServices() {\n        return sharedThreadPools;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if  {@link java.util.concurrent.ExecutorService} is shared among all components.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "340", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.shareExecutorServices", "methodParameterType": "boolean#", "methodParameterName": "sharedThreadPools#", "methodBody": "public AtmosphereFramework shareExecutorServices(boolean sharedThreadPools) {\n        this.sharedThreadPools = sharedThreadPools;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set to true to have a  {@link java.util.concurrent.ExecutorService} shared among all components.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "341", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.endPointMapper", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public EndpointMapper<AtmosphereHandlerWrapper> endPointMapper() {\n        return endpointMapper;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The current  {@link EndpointMapper} used to map requests to {@link AtmosphereHandler}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "342", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.endPointMapper", "methodParameterType": "EndpointMapper#", "methodParameterName": "endpointMapper#", "methodBody": "public AtmosphereFramework endPointMapper(EndpointMapper endpointMapper) {\n        this.endpointMapper = endpointMapper;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set the  {@link EndpointMapper}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "343", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.addAnnotationPackage", "methodParameterType": "Class<?>#", "methodParameterName": "clazz#", "methodBody": "public AtmosphereFramework addAnnotationPackage(Class<?> clazz) {\n        if (clazz.getPackage() == null) {\n            logger.error(\"Class {} must have a package defined\", clazz);\n        } else {\n            packages.add(clazz.getPackage().getName());\n        }\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add support for package detection of Atmosphere's Component.", "call_func_name": ["java.lang.Class.getPackage", "org.slf4j.Logger.error", "java.lang.Package.getName", "java.util.List.add"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "344", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.addWebSocketHandler", "methodParameterType": "WebSocketHandler#", "methodParameterName": "handler#", "methodBody": "public AtmosphereFramework addWebSocketHandler(WebSocketHandler handler) {\n        addWebSocketHandler(ROOT_MASTER, handler);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add an  {@link WebSocketHandler} mapped to \"/", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.addWebSocketHandler"], "call_func_parameter": [["java.lang.String", "org.atmosphere.websocket.WebSocketHandler"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.addWebSocketHandler": "Add an  {@link WebSocketHandler} mapped to the path.return this"}]}, {"index": "345", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.addWebSocketHandler", "methodParameterType": "String#WebSocketHandler#", "methodParameterName": "path#handler#", "methodBody": "public AtmosphereFramework addWebSocketHandler(String path, WebSocketHandler handler) {\n        addWebSocketHandler(path, handler, REFLECTOR_ATMOSPHEREHANDLER, Collections.EMPTY_LIST);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add an  {@link WebSocketHandler} mapped to the path.return this", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.addWebSocketHandler"], "call_func_parameter": [["java.lang.String", "org.atmosphere.websocket.WebSocketHandler", "org.atmosphere.cpr.AtmosphereHandler", "java.util.List"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.addWebSocketHandler": "Add an  {@link WebSocketHandler} mapped to the path and the {@link AtmosphereHandler} in case {@link Broadcaster} areused."}]}, {"index": "346", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.addWebSocketHandler", "methodParameterType": "String#WebSocketHandler#AtmosphereHandler#", "methodParameterName": "path#handler#h#", "methodBody": "public AtmosphereFramework addWebSocketHandler(String path, WebSocketHandler handler, AtmosphereHandler h) {\n        addWebSocketHandler(path, handler, REFLECTOR_ATMOSPHEREHANDLER, Collections.EMPTY_LIST);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add an  {@link WebSocketHandler} mapped to the path and the {@link AtmosphereHandler} in case {@link Broadcaster} areused.", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.addWebSocketHandler"], "call_func_parameter": [["java.lang.String", "org.atmosphere.websocket.WebSocketHandler", "org.atmosphere.cpr.AtmosphereHandler", "java.util.List"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.addWebSocketHandler": "Add an  {@link WebSocketHandler} mapped to the path and the {@link AtmosphereHandler} in case {@link Broadcaster} areused."}]}, {"index": "347", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.addWebSocketHandler", "methodParameterType": "String#WebSocketHandler#AtmosphereHandler#List<AtmosphereInterceptor>#", "methodParameterName": "path#handler#h#l#", "methodBody": "public AtmosphereFramework addWebSocketHandler(String path, WebSocketHandler handler, AtmosphereHandler h, List<AtmosphereInterceptor> l) {\n        WebSocketProcessorFactory.getDefault().getWebSocketProcessor(this)\n                .registerWebSocketHandler(path,\n                        new WebSocketProcessor.WebSocketHandlerProxy(broadcasterFactory.lookup(path, true).getClass(), handler));\n        addAtmosphereHandler(path, h, l);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#ThisExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add an  {@link WebSocketHandler} mapped to the path and the {@link AtmosphereHandler} in case {@link Broadcaster} areused.", "call_func_name": ["org.atmosphere.cpr.WebSocketProcessorFactory.getDefault", "org.atmosphere.cpr.WebSocketProcessorFactory.getWebSocketProcessor", "org.atmosphere.cpr.BroadcasterFactory.lookup", "java.lang.Object.getClass", "org.atmosphere.cpr.AtmosphereFramework.addAtmosphereHandler"], "call_func_parameter": [[""], ["org.atmosphere.cpr.AtmosphereFramework"], ["java.lang.Object", "boolean"], [""], ["java.lang.String", "org.atmosphere.cpr.AtmosphereHandler", "java.util.List"]], "passed_comments": [{"org.atmosphere.cpr.WebSocketProcessorFactory.getWebSocketProcessor": "Return the  {@link WebSocketProcessor}."}, {"org.atmosphere.cpr.BroadcasterFactory.lookup": "Lookup a  {@link Broadcaster} instance using {@link Broadcaster#getID()} or ID"}, {"org.atmosphere.cpr.AtmosphereFramework.addAtmosphereHandler": "Add an  {@link AtmosphereHandler} serviced by the {@link Servlet}This API is exposed to allow embedding an Atmosphere application."}]}, {"index": "348", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.annotationScanned", "methodParameterType": "boolean#", "methodParameterName": "b#", "methodBody": "public AtmosphereFramework annotationScanned(boolean b) {\n        annotationFound = b;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Invoked when a  {@link AnnotationProcessor} found an annotation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "349", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.initialized", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean initialized() {\n        return isInit;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the  {@link #init()} has been sucessfully executed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "350", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.customAnnotationPackages", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<String> customAnnotationPackages() {\n        return annotationPackages;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the list of packages the framework should look for  {@link org.atmosphere.config.AtmosphereAnnotation}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "351", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.addCustomAnnotationPackage", "methodParameterType": "Class#", "methodParameterName": "p#", "methodBody": "public AtmosphereFramework addCustomAnnotationPackage(Class p) {\n        annotationPackages.addLast(p.getPackage().getName());\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add a package containing classes annotated with  {@link org.atmosphere.config.AtmosphereAnnotation}.", "call_func_name": ["java.lang.Class.getPackage", "java.lang.Package.getName", "java.util.LinkedList.addLast"], "call_func_parameter": [[""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "352", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.newClassInstance", "methodParameterType": "Class<T>#Class<U>#", "methodParameterName": "classType#defaultType#", "methodBody": "public <T, U extends T> T newClassInstance(Class<T> classType, Class<U> defaultType) throws InstantiationException, IllegalAccessException {\n        return objectFactory.newClassInstance(classType, defaultType);\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Instantiate a class", "call_func_name": ["org.atmosphere.cpr.AtmosphereObjectFactory.newClassInstance"], "call_func_parameter": [["java.lang.Class", "java.lang.Class"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereObjectFactory.newClassInstance": "Delegate the creation of Object to the underlying object provider like Spring, Guice, etc. When creating a class, it is important to check if the class can be configured via its implementation of the  {@link org.atmosphere.inject.AtmosphereConfigAware}.  {@link org.atmosphere.inject.AtmosphereConfigAware#configure(AtmosphereConfig)}should be called in that case."}]}, {"index": "353", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.objectFactory", "methodParameterType": "AtmosphereObjectFactory#", "methodParameterName": "objectFactory#", "methodBody": "public void objectFactory(AtmosphereObjectFactory objectFactory) {\n        this.objectFactory = objectFactory;\n        this.objectFactory.configure(config);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set an object used for class instantiation. Allows for integration with dependency injection frameworks.", "call_func_name": ["org.atmosphere.cpr.AtmosphereObjectFactory.configure"], "call_func_parameter": [["org.atmosphere.cpr.AtmosphereConfig"]], "passed_comments": "/"}, {"index": "354", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.externalizeDestroy", "methodParameterType": "boolean#", "methodParameterName": "externalizeDestroy#", "methodBody": "public AtmosphereFramework externalizeDestroy(boolean externalizeDestroy) {\n        this.externalizeDestroy = externalizeDestroy;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If set to true, the task of finishing the request/response lifecycle will not be handled by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "355", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.annotationProcessor", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AnnotationProcessor annotationProcessor() {\n        return annotationProcessor;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link AnnotationProcessor}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "356", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.isBroadcasterSpecified", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isBroadcasterSpecified() {\n        return isBroadcasterSpecified;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Was a  {@link Broadcaster} defined in web.xml or programmatically added.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "357", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.excludeInterceptor", "methodParameterType": "String#", "methodParameterName": "interceptor#", "methodBody": "public AtmosphereFramework excludeInterceptor(String interceptor) {\n        excludedInterceptors.add(interceptor);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Exclude an  {@link AtmosphereInterceptor} from being added, at startup, by Atmosphere. The default's {@link #DEFAULT_ATMOSPHERE_INTERCEPTORS}are candidates for being excluded.", "call_func_name": ["java.util.List.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "358", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.getDefaultSerializerClassName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDefaultSerializerClassName() {\n        return defaultSerializerClassName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the default  {@link org.atmosphere.cpr.Serializer} class name to use for {@link org.atmosphere.cpr.AtmosphereResource}s.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "359", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.getDefaultSerializerClass", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class<Serializer> getDefaultSerializerClass() {\n        return defaultSerializerClass;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the default  {@link org.atmosphere.cpr.Serializer} class to use for {@link org.atmosphere.cpr.AtmosphereResource}s.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "360", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.setDefaultSerializerClassName", "methodParameterType": "String#", "methodParameterName": "defaultSerializerClassName#", "methodBody": "public AtmosphereFramework setDefaultSerializerClassName(String defaultSerializerClassName) {\n        this.defaultSerializerClassName = defaultSerializerClassName;\n        initDefaultSerializer();\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set the default  {@link org.atmosphere.cpr.Serializer} class name to use for {@link org.atmosphere.cpr.AtmosphereResource}s.", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.initDefaultSerializer"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "361", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.sessionFactory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public synchronized AtmosphereResourceSessionFactory sessionFactory() {\n        if (sessionFactory == null) {\n            try {\n                sessionFactory = newClassInstance(AtmosphereResourceSessionFactory.class, DefaultAtmosphereResourceSessionFactory.class);\n            } catch (InstantiationException e) {\n                logger.error(\"\", e);\n            } catch (IllegalAccessException e) {\n                logger.error(\"\", e);\n            }\n        }\n        return sessionFactory;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link AtmosphereResourceSessionFactory}", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.newClassInstance", "org.slf4j.Logger.error"], "call_func_parameter": [["java.lang.Class", "java.lang.Class"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.newClassInstance": "Instantiate a class"}]}, {"index": "362", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.isDestroyed", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isDestroyed() {\n        return isDestroyed.get();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true is the  {@link #destroy()} method has been invoked.", "call_func_name": ["java.util.concurrent.atomic.AtomicBoolean.get"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "363", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.frameworkListener", "methodParameterType": "AtmosphereFrameworkListener#", "methodParameterName": "l#", "methodBody": "public AtmosphereFramework frameworkListener(AtmosphereFrameworkListener l) {\n        frameworkListeners.add(l);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add a  {@link org.atmosphere.cpr.AtmosphereFrameworkListener}", "call_func_name": ["java.util.List.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "364", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.frameworkListeners", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<AtmosphereFrameworkListener> frameworkListeners() {\n        return frameworkListeners;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the list of  {@link org.atmosphere.cpr.AtmosphereFrameworkListener}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "365", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.atmosphereResourceListeners", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<AtmosphereResourceListener> atmosphereResourceListeners() {\n        return atmosphereResourceListeners;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the list of  {@link org.atmosphere.cpr.AtmosphereResourceListener}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "366", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.atmosphereResourceListener", "methodParameterType": "AtmosphereResourceListener#", "methodParameterName": "atmosphereResourceListener#", "methodBody": "public AtmosphereFramework atmosphereResourceListener(AtmosphereResourceListener atmosphereResourceListener) {\n        atmosphereResourceListeners.add(atmosphereResourceListener);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add a  {@link org.atmosphere.cpr.AtmosphereResourceListener}", "call_func_name": ["java.util.List.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "367", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.uuidProvider", "methodParameterType": "UUIDProvider#", "methodParameterName": "uuidProvider#", "methodBody": "public AtmosphereFramework uuidProvider(UUIDProvider uuidProvider) {\n        this.uuidProvider = uuidProvider;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set a  {@link java.util.UUID} like implementation for generating random UUID String", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "368", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.uuidProvider", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public UUIDProvider uuidProvider() {\n        return uuidProvider;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link org.atmosphere.util.UUIDProvider}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "369", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.webSocketFactory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public WebSocketFactory webSocketFactory() {\n        if (webSocketFactory == null) {\n            configureWebSocketFactory();\n        }\n        return webSocketFactory;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link WebSocketFactory}", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.configureWebSocketFactory"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "370", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.webSocketFactory", "methodParameterType": "WebSocketFactory#", "methodParameterName": "webSocketFactory#", "methodBody": "public AtmosphereFramework webSocketFactory(WebSocketFactory webSocketFactory) {\n        this.webSocketFactory = webSocketFactory;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Configure the  {@link WebSocketFactory}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "371", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java", "methodName": "org.atmosphere.cpr.AtmosphereFramework.initializationError", "methodParameterType": "IllegalStateException#", "methodParameterName": "initializationError#", "methodBody": "public void initializationError(IllegalStateException initializationError) {\n        this.initializationError = initializationError;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "If a  {@link ContainerInitializer} fail, log the excetion here.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "372", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServletProcessor.java", "methodName": "org.atmosphere.cpr.AtmosphereServletProcessor.init", "methodParameterType": "AtmosphereConfig#", "methodParameterName": "config#", "methodBody": "void init(AtmosphereConfig config) throws ServletException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Initialize the  {@link AtmosphereServletProcessor} using the {@link ServletConfig}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "373", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceListener.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceListener.onSuspended", "methodParameterType": "String#", "methodParameterName": "uuid#", "methodBody": "void onSuspended(String uuid);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Ibnvoked when the  {@link org.atmosphere.cpr.AtmosphereResource} gets suspended", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "374", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceListener.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceListener.onDisconnect", "methodParameterType": "String#", "methodParameterName": "uuid#", "methodBody": "void onDisconnect(String uuid);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Ibnvoked when the  {@link org.atmosphere.cpr.AtmosphereResource} gets disconnected", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "375", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java", "methodName": "org.atmosphere.cpr.AsynchronousProcessor.supportSession", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected boolean supportSession() {\n        return config.isSupportSession();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Is  {@link HttpSession} supported", "call_func_name": ["org.atmosphere.cpr.AtmosphereConfig.isSupportSession"], "call_func_parameter": [[""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.isSupportSession": "Is  {@link javax.servlet.http.HttpSession} supported."}]}, {"index": "376", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java", "methodName": "org.atmosphere.cpr.AsynchronousProcessor.allowSessionTimeoutRemoval", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected boolean allowSessionTimeoutRemoval() {\n        return config.isSessionTimeoutRemovalAllowed();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Is  {@link HttpSession} timeout removal supported", "call_func_name": ["org.atmosphere.cpr.AtmosphereConfig.isSessionTimeoutRemovalAllowed"], "call_func_parameter": [[""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.isSessionTimeoutRemovalAllowed": "Allow HTTP session timeout removal when session support is active"}]}, {"index": "377", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java", "methodName": "org.atmosphere.cpr.AsynchronousProcessor.getContainerName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContainerName() {\n        return config.getServletConfig().getServletContext().getServerInfo();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the container's name.", "call_func_name": ["org.atmosphere.cpr.AtmosphereConfig.getServletConfig", "javax.servlet.ServletConfig.getServletContext", "javax.servlet.ServletContext.getServerInfo"], "call_func_parameter": [[""], [""], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.getServletConfig": "Return the  {@link ServletConfig}."}]}, {"index": "378", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java", "methodName": "org.atmosphere.cpr.AsynchronousProcessor.suspended", "methodParameterType": "AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "request#response#", "methodBody": "public Action suspended(AtmosphereRequest request, AtmosphereResponse response) throws IOException, ServletException {\n        return action(request, response);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "All proprietary Comet based  {@link Servlet} must invoke the suspended method when the first request comes in.The returned value, of type  {@link Action}, tells the proprietary Comet  {@link Servlet} to suspended or not thecurrent  {@link AtmosphereResponse}.", "call_func_name": ["org.atmosphere.cpr.AsynchronousProcessor.action"], "call_func_parameter": [["org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse"]], "passed_comments": [{"org.atmosphere.cpr.AsynchronousProcessor.action": "Invoke the  {@link AtmosphereHandler#onRequest} method."}]}, {"index": "379", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java", "methodName": "org.atmosphere.cpr.AsynchronousProcessor.action", "methodParameterType": "AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "req#res#", "methodBody": "Action action(AtmosphereRequest req, AtmosphereResponse res) throws IOException, ServletException {\n\n        if (!Utils.properProtocol(req)) {\n            logger.debug(\"Invalid request state.\");\n            res.setStatus(501);\n            res.addHeader(X_ATMOSPHERE_ERROR, \"Websocket protocol not supported\");\n            res.flushBuffer();\n            return new Action();\n        }\n\n        if (Utils.webSocketEnabled(req) && !supportWebSocket()) {\n            logger.warn(\"Websocket protocol not supported\");\n            res.setStatus(501);\n            res.addHeader(X_ATMOSPHERE_ERROR, \"Websocket protocol not supported\");\n            res.flushBuffer();\n            return new Action();\n        }\n\n        if (config.handlers().isEmpty()) {\n            logger.error(\"No AtmosphereHandler found. Make sure you define it inside WEB-INF/atmosphere.xml or annotate using @___Service\");\n            throw new AtmosphereMappingException(\"No AtmosphereHandler found. Make sure you define it inside WEB-INF/atmosphere.xml or annotate using @___Service\");\n        }\n\n        if (res.request() == null) {\n            res.request(req);\n        }\n\n        if (supportSession()) {\n            // Create the session needed to support the Resume\n            // operation from disparate requests.\n            HttpSession s = req.getSession(config.getInitParameter(PROPERTY_SESSION_CREATE, true));\n\n            // https://github.com/Atmosphere/atmosphere/issues/2034\n            try {\n                if (s != null && s.isNew()) {\n                    s.setAttribute(getClass().getName(), \"\");\n                    s.removeAttribute(getClass().getName());\n                }\n            } catch (IllegalStateException ex) {\n                AtmosphereResourceImpl r = AtmosphereResourceImpl.class.cast(req.resource());\n                logger.warn(\"Session Expired for {}. Closing the connection\", req.uuid(), ex);\n                if (r != null) {\n                    logger.trace(\"Ending request for {}\", r.uuid());\n                    endRequest(r, true);\n                    return Action.CANCELLED;\n                } else {\n                    logger.trace(\"Sending error for {}\", req.uuid());\n                    res.setStatus(500);\n                    res.addHeader(X_ATMOSPHERE_ERROR, \"Session expired\");\n                    res.flushBuffer();\n                    return new Action();\n                }\n            } \n        }\n\n        req.setAttribute(FrameworkConfig.SUPPORT_SESSION, supportSession());\n\n        int tracing = 0;\n\n        AtmosphereHandlerWrapper handlerWrapper = map(req);\n        if (config.getBroadcasterFactory() == null) {\n            logger.error(\"Atmosphere is misconfigured and will not work. BroadcasterFactory is null\");\n            return Action.CANCELLED;\n        }\n        AtmosphereResourceImpl resource = configureWorkflow(null, handlerWrapper, req, res);\n\n        String v = req.getHeader(HeaderConfig.X_ATMO_BINARY);\n        if (v != null) {\n            resource.forceBinaryWrite(Boolean.valueOf(v));\n        }\n\n        // handler interceptor lists\n        LinkedList<AtmosphereInterceptor> invokedInterceptors = handlerWrapper.interceptors;\n\n        Action a = invokeInterceptors(invokedInterceptors, resource, tracing);\n        if (a.type() != Action.TYPE.CONTINUE && a.type() != Action.TYPE.SKIP_ATMOSPHEREHANDLER) {\n            return a;\n        }\n\n        try {\n\n            // Remap occured.\n            if (req.getAttribute(FrameworkConfig.NEW_MAPPING) != null) {\n                req.removeAttribute(FrameworkConfig.NEW_MAPPING);\n                handlerWrapper = map(req);\n                if (handlerWrapper == null) {\n                    logger.debug(\"Remap {}\", resource.uuid());\n                    throw new AtmosphereMappingException(\"Invalid state. No AtmosphereHandler maps request for \" + req.getRequestURI());\n                }\n                resource = configureWorkflow(resource, handlerWrapper, req, res);\n                resource.setBroadcaster(handlerWrapper.broadcaster);\n            }\n\n            //Unit test mock the request and will throw NPE.\n            boolean skipAtmosphereHandler = req.getAttribute(SKIP_ATMOSPHEREHANDLER.name()) != null\n                    ? (Boolean) req.getAttribute(SKIP_ATMOSPHEREHANDLER.name()) : Boolean.FALSE;\n            if (!skipAtmosphereHandler) {\n                try {\n                    logger.trace(\"\\t Last: {}\", handlerWrapper.atmosphereHandler.getClass().getName());\n                    handlerWrapper.atmosphereHandler.onRequest(resource);\n                } catch (IOException t) {\n                    resource.onThrowable(t);\n                    throw t;\n                }\n            }\n        } finally {\n            postInterceptors(handlerWrapper != null ? handlerWrapper.interceptors : invokedInterceptors, resource);\n        }\n\n        Action action = resource.action();\n        if (supportSession() && allowSessionTimeoutRemoval() && action.type().equals(Action.TYPE.SUSPEND)) {\n            // Do not allow times out.\n            SessionTimeoutSupport.setupTimeout(config, req.getSession(config.getInitParameter(ApplicationConfig.PROPERTY_SESSION_CREATE, true)));\n        }\n        logger.trace(\"Action for {} was {} with transport \" + req.getHeader(X_ATMOSPHERE_TRANSPORT), req.resource() != null ? req.resource().uuid() : \"null\", action);\n        return action;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#CastExpression#SimpleName#SimpleName#QualifiedName#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ThrowStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#ConditionalExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#ConditionalExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)CatchClause)TryStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(TryStatement(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)CastExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ConditionalExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)ConditionalExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Invoke the  {@link AtmosphereHandler#onRequest} method.", "call_func_name": ["org.atmosphere.util.Utils.properProtocol", "org.slf4j.Logger.debug", "org.atmosphere.cpr.AtmosphereResponse.setStatus", "org.atmosphere.cpr.AtmosphereResponse.addHeader", "org.atmosphere.cpr.AtmosphereResponse.flushBuffer", "org.atmosphere.cpr.Action.<init>", "org.atmosphere.util.Utils.webSocketEnabled", "org.atmosphere.cpr.AsynchronousProcessor.supportWebSocket", "org.slf4j.Logger.warn", "org.atmosphere.cpr.AtmosphereConfig.handlers", "java.util.Map.isEmpty", "org.slf4j.Logger.error", "org.atmosphere.cpr.AtmosphereMappingException.<init>", "org.atmosphere.cpr.AtmosphereResponse.request", "org.atmosphere.cpr.AtmosphereResponse.request", "org.atmosphere.cpr.AsynchronousProcessor.supportSession", "org.atmosphere.cpr.AtmosphereConfig.getInitParameter", "org.atmosphere.cpr.AtmosphereRequest.getSession", "javax.servlet.http.HttpSession.isNew", "java.lang.Object.getClass", "java.lang.Class.getName", "javax.servlet.http.HttpSession.setAttribute", "javax.servlet.http.HttpSession.removeAttribute", "org.atmosphere.cpr.AtmosphereRequest.resource", "java.lang.Class.cast", "org.atmosphere.cpr.AtmosphereRequest.uuid", "org.slf4j.Logger.warn", "org.atmosphere.cpr.AtmosphereResourceImpl.uuid", "org.slf4j.Logger.trace", "org.atmosphere.cpr.AsynchronousProcessor.endRequest", "java.lang.Boolean.valueOf", "org.atmosphere.cpr.AtmosphereRequest.setAttribute", "org.atmosphere.cpr.AsynchronousProcessor.map", "org.atmosphere.cpr.AtmosphereConfig.getBroadcasterFactory", "org.atmosphere.cpr.AtmosphereRequest.getHeader", "java.lang.Boolean.valueOf", "java.lang.Boolean.booleanValue", "org.atmosphere.cpr.AtmosphereResourceImpl.forceBinaryWrite", "org.atmosphere.cpr.AsynchronousProcessor.invokeInterceptors", "org.atmosphere.cpr.Action.type", "org.atmosphere.cpr.AtmosphereRequest.getAttribute", "org.atmosphere.cpr.AtmosphereRequest.removeAttribute", "org.slf4j.Logger.debug", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.atmosphere.cpr.AtmosphereRequest.getRequestURI", "java.lang.StringBuilder.toString", "org.atmosphere.cpr.AtmosphereResourceImpl.setBroadcaster", "org.atmosphere.cpr.AtmosphereHandler.onRequest", "org.atmosphere.cpr.AtmosphereResourceImpl.onThrowable", "org.atmosphere.cpr.AsynchronousProcessor.postInterceptors", "org.atmosphere.cpr.AtmosphereResourceImpl.action", "org.atmosphere.cpr.AsynchronousProcessor.allowSessionTimeoutRemoval", "org.atmosphere.cpr.SessionTimeoutSupport.setupTimeout", "org.atmosphere.cpr.AtmosphereResource.uuid", "org.slf4j.Logger.trace"], "call_func_parameter": [["javax.servlet.http.HttpServletRequest"], ["java.lang.String"], ["int"], ["java.lang.String", "java.lang.String"], [""], [""], ["javax.servlet.http.HttpServletRequest"], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.String"], [""], ["org.atmosphere.cpr.AtmosphereRequest"], [""], ["java.lang.String", "boolean"], ["boolean"], [""], [""], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String"], [""], ["java.lang.Object"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], ["java.lang.String", "java.lang.Object"], ["org.atmosphere.cpr.AtmosphereResourceImpl", "boolean"], ["boolean"], ["java.lang.String", "java.lang.Object"], ["org.atmosphere.cpr.AtmosphereRequest"], [""], ["java.lang.String"], ["java.lang.String"], [""], ["boolean"], ["java.util.List", "org.atmosphere.cpr.AtmosphereResource", "int"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String"], [""], [""], ["org.atmosphere.cpr.Broadcaster"], ["org.atmosphere.cpr.AtmosphereResource"], ["java.lang.Throwable"], ["java.util.List", "org.atmosphere.cpr.AtmosphereResource"], [""], [""], ["org.atmosphere.cpr.AtmosphereConfig", "javax.servlet.http.HttpSession"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.handlers": "Return the list of  {@link org.atmosphere.cpr.AtmosphereFramework.AtmosphereHandlerWrapper}s."}, {"org.atmosphere.cpr.AtmosphereResponse.request": "Return the associated  {@link AtmosphereRequest}."}, {"org.atmosphere.cpr.AtmosphereResponse.request": "Set the associated  {@link AtmosphereRequest}."}, {"org.atmosphere.cpr.AtmosphereResponse.request": "Set the associated  {@link AtmosphereRequest}."}, {"org.atmosphere.cpr.AsynchronousProcessor.supportSession": "Is  {@link HttpSession} supported"}, {"org.atmosphere.cpr.AtmosphereConfig.getInitParameter": "Return an init-param, or its default value."}, {"org.atmosphere.cpr.AtmosphereRequest.getSession": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.resource": "The  {@link AtmosphereResource} associated with this request."}, {"org.atmosphere.cpr.AtmosphereRequest.uuid": "Return the underlying  {@link AtmosphereResource#uuid()}. May return \"0\" if no  {@link AtmosphereResource}is associated with this object."}, {"org.atmosphere.cpr.AtmosphereRequest.setAttribute": "{@inheritDoc}"}, {"org.atmosphere.cpr.AsynchronousProcessor.map": "Return the  {@link AtmosphereHandler} mapped to the passed servlet-path."}, {"org.atmosphere.cpr.AtmosphereConfig.getBroadcasterFactory": "Return an instance of  {@link DefaultBroadcasterFactory}."}, {"org.atmosphere.cpr.AtmosphereRequest.getHeader": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.getAttribute": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.removeAttribute": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.getRequestURI": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereHandler.onRequest": "When a client sends a request to its associated  {@link AtmosphereHandler}, it can decide if the underlying connection can be suspended (creating a Continuation) or handle the connection synchronously. <p/> It is recommended to only suspend requests for which HTTP method is a GET and use the POST method to send data to the server, without marking the connection as asynchronous."}, {"org.atmosphere.cpr.AtmosphereResourceImpl.onThrowable": "Notify  {@link AtmosphereResourceEventListener} thah an unexpected exception occured."}, {"org.atmosphere.cpr.AtmosphereResourceImpl.action": "Return the  {@link Action} which represent the state of the response, e.g. suspended, resumed or timed out."}, {"org.atmosphere.cpr.AsynchronousProcessor.allowSessionTimeoutRemoval": "Is  {@link HttpSession} timeout removal supported"}, {"org.atmosphere.cpr.SessionTimeoutSupport.setupTimeout": "Disable HTTP session timeout."}, {"org.atmosphere.cpr.AtmosphereResource.uuid": "Return the unique ID associated with this AtmosphereResource."}]}, {"index": "380", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java", "methodName": "org.atmosphere.cpr.AsynchronousProcessor.map", "methodParameterType": "AtmosphereRequest#", "methodParameterName": "req#", "methodBody": "protected AtmosphereHandlerWrapper map(AtmosphereRequest req) throws ServletException {\n        AtmosphereHandlerWrapper atmosphereHandlerWrapper = mapper.map(req, config.handlers());\n        if (atmosphereHandlerWrapper == null) {\n            logger.debug(\"No AtmosphereHandler maps request for {} with mapping {}\", req.getRequestURI(), config.handlers());\n            throw new AtmosphereMappingException(\"No AtmosphereHandler maps request for \" + req.getRequestURI());\n        }\n\n        return atmosphereHandlerWrapper;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link AtmosphereHandler} mapped to the passed servlet-path.", "call_func_name": ["org.atmosphere.cpr.AtmosphereConfig.handlers", "org.atmosphere.util.EndpointMapper.map", "org.atmosphere.cpr.AtmosphereRequest.getRequestURI", "org.slf4j.Logger.debug", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.atmosphere.cpr.AtmosphereMappingException.<init>"], "call_func_parameter": [[""], ["org.atmosphere.cpr.AtmosphereRequest", "java.util.Map"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.handlers": "Return the list of  {@link org.atmosphere.cpr.AtmosphereFramework.AtmosphereHandlerWrapper}s."}, {"org.atmosphere.util.EndpointMapper.map": "Mape the request to its associated endpoint."}, {"org.atmosphere.cpr.AtmosphereRequest.getRequestURI": "{@inheritDoc}"}]}, {"index": "381", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java", "methodName": "org.atmosphere.cpr.AsynchronousProcessor.resumed", "methodParameterType": "AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "request#response#", "methodBody": "public Action resumed(AtmosphereRequest request, AtmosphereResponse response)\n            throws IOException, ServletException {\n\n        AtmosphereResourceImpl r =\n                (AtmosphereResourceImpl) request.getAttribute(ATMOSPHERE_RESOURCE);\n\n        if (r == null) return Action.CANCELLED; // We are cancelled already\n\n        AtmosphereHandler atmosphereHandler = r.getAtmosphereHandler();\n\n        AtmosphereResourceEvent event = r.getAtmosphereResourceEvent();\n        if (event != null && event.isResuming() && !event.isCancelled()) {\n            synchronized (r) {\n                atmosphereHandler.onStateChange(event);\n            }\n        }\n        return Action.RESUME;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement)Block)IfStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "All proprietary Comet based  {@link Servlet} must invoke the resume method when the Atmosphere's applicationdecide to resume the  {@link AtmosphereResponse}. The returned value, of type  {@link Action}, tells the proprietary Comet  {@link Servlet} to resume (again), suspended or do nothing with the current {@link AtmosphereResponse}.", "call_func_name": ["org.atmosphere.cpr.AtmosphereRequest.getAttribute", "org.atmosphere.cpr.AtmosphereResourceImpl.getAtmosphereHandler", "org.atmosphere.cpr.AtmosphereResourceImpl.getAtmosphereResourceEvent", "org.atmosphere.cpr.AtmosphereResourceEvent.isResuming", "org.atmosphere.cpr.AtmosphereResourceEvent.isCancelled", "org.atmosphere.cpr.AtmosphereHandler.onStateChange"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], [""], ["org.atmosphere.cpr.AtmosphereResourceEvent"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequest.getAttribute": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereResourceEvent.isResuming": "Return <tt>true</tt> if  {@link AtmosphereResource#resume()} has been invoked."}, {"org.atmosphere.cpr.AtmosphereResourceEvent.isCancelled": "Return true when the remote client close the connection."}, {"org.atmosphere.cpr.AtmosphereHandler.onStateChange": "This method is invoked when the  {@link Broadcaster} executes a broadcast operation. When this method is invokedits associated  {@link Broadcaster}, any suspended connection will be allowed to write the data back to its associated clients. <p/> This method will also be invoked when a response get resumed, e.g. when  {@link AtmosphereResource#resume} getsinvoked. In that case,  {@link AtmosphereResourceEvent#isResuming} will return true.<p/> This method will also be invoked when the  {@link AtmosphereResource#suspend(long)} expires. In that case,{@link AtmosphereResourceEvent#isResumedOnTimeout} will return <tt>true</tt>."}]}, {"index": "382", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java", "methodName": "org.atmosphere.cpr.AsynchronousProcessor.timedout", "methodParameterType": "AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "req#res#", "methodBody": "public Action timedout(AtmosphereRequest req, AtmosphereResponse res)\n            throws IOException, ServletException {\n\n        logger.trace(\"Timing out {}\", req);\n        endRequest(AtmosphereResourceImpl.class.cast(req.resource()), false);\n        return timedoutAction;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "All proprietary Comet based  {@link Servlet} must invoke the timedout method when the underlying WebServer timeout the  {@link AtmosphereResponse}. The returned value, of type  {@link Action}, tells the proprietary Comet  {@link Servlet} to resume (again), suspended or do nothing with the current {@link AtmosphereResponse}.", "call_func_name": ["org.slf4j.Logger.trace", "org.atmosphere.cpr.AtmosphereRequest.resource", "java.lang.Class.cast", "org.atmosphere.cpr.AsynchronousProcessor.endRequest"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], [""], ["java.lang.Object"], ["org.atmosphere.cpr.AtmosphereResourceImpl", "boolean"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequest.resource": "The  {@link AtmosphereResource} associated with this request."}]}, {"index": "383", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java", "methodName": "org.atmosphere.cpr.AsynchronousProcessor.completeLifecycle", "methodParameterType": "AtmosphereResource#boolean#", "methodParameterName": "r#cancelled#", "methodBody": "public boolean completeLifecycle(final AtmosphereResource r, boolean cancelled) {\n        if (r != null && !r.isCancelled() && !AtmosphereResourceImpl.class.cast(r).getAndSetInClosingPhase()) {\n            logger.trace(\"Finishing lifecycle for AtmosphereResource {}\", r.uuid());\n            final AtmosphereResourceImpl impl = AtmosphereResourceImpl.class.cast(r);\n            try {\n                if (impl.isCancelled()) {\n                    logger.debug(\"{} is already cancelled\", impl.uuid());\n                    return false;\n                }\n\n                AtmosphereResourceEventImpl e = impl.getAtmosphereResourceEvent();\n                // https://github.com/Atmosphere/atmosphere/issues/1756\n                // Do not go inside Atmosphere once undeployed to avoid all kind of issues.\n                if (config.framework().isDestroyed()) {\n                    cancelled = true;\n                }\n\n                if (!e.isClosedByClient()) {\n                    if (cancelled) {\n                        e.setCancelled(cancelled);\n                    } else {\n                        e.setIsResumedOnTimeout(true);\n                        Broadcaster b = r.getBroadcaster();\n                        if (b instanceof DefaultBroadcaster) {\n                            ((DefaultBroadcaster) b).broadcastOnResume(r);\n                        }\n\n                        // TODO: Was it there for legacy reason?\n                        // impl.getAtmosphereResourceEvent().setIsResumedOnTimeout(impl.resumeOnBroadcast());\n                    }\n                }\n                invokeAtmosphereHandler(impl);\n            } catch (Throwable ex) {\n                // Something wrong happened, ignore the exception\n                logger.error(\"Failed to cancel resource: {}\", impl.uuid(), ex);\n            } finally {\n                try {\n                    impl.notifyListeners();\n                    // Legacy code #1894 that may breaks Jersey when set to false on some old server.\n                    if (closeOnCancel) {\n                        try {\n                            impl.getResponse(false).getOutputStream().close();\n                        } catch (Throwable t) {\n                            try {\n                                impl.getResponse(false).getWriter().close();\n                            } catch (Throwable t2) {\n                            }\n                        }\n                    }\n                    impl.setIsInScope(false);\n                    impl.cancel();\n                } catch (Throwable t) {\n                    logger.debug(\"completeLifecycle\", t);\n                } finally {\n                    impl._destroy();\n                }\n            }\n            return true;\n        } else {\n            logger.trace(\"AtmosphereResource {} was already cancelled or gc\", r != null ? r.uuid() : \"null\");\n            return false;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#TryStatement#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#StringLiteral#ConditionalExpression#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block)CatchClause)TryStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)TryStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)ConditionalExpression)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Cancel or times out an  {@link AtmosphereResource} by invoking it's associated {@link AtmosphereHandler#onStateChange(AtmosphereResourceEvent)}", "call_func_name": ["org.atmosphere.cpr.AtmosphereResource.isCancelled", "java.lang.Class.cast", "org.atmosphere.cpr.AtmosphereResourceImpl.getAndSetInClosingPhase", "org.atmosphere.cpr.AtmosphereResource.uuid", "org.slf4j.Logger.trace", "org.atmosphere.cpr.AtmosphereResourceImpl.isCancelled", "org.atmosphere.cpr.AtmosphereResourceImpl.uuid", "org.slf4j.Logger.debug", "org.atmosphere.cpr.AtmosphereResourceImpl.notifyListeners", "org.atmosphere.cpr.AtmosphereResourceImpl.getResponse", "org.atmosphere.cpr.AtmosphereResponse.getOutputStream", "javax.servlet.ServletOutputStream.close", "org.atmosphere.cpr.AtmosphereResponse.getWriter", "java.io.PrintWriter.close", "org.atmosphere.cpr.AtmosphereResourceImpl.setIsInScope", "org.atmosphere.cpr.AtmosphereResourceImpl.cancel", "org.atmosphere.cpr.AtmosphereResourceImpl._destroy", "org.slf4j.Logger.debug", "org.atmosphere.cpr.AtmosphereResourceImpl.getAtmosphereResourceEvent", "org.atmosphere.cpr.AtmosphereConfig.framework", "org.atmosphere.cpr.AtmosphereFramework.isDestroyed", "org.atmosphere.cpr.AtmosphereResourceEventImpl.isClosedByClient", "org.atmosphere.cpr.AtmosphereResourceEventImpl.setCancelled", "org.atmosphere.cpr.AtmosphereResourceEventImpl.setIsResumedOnTimeout", "org.atmosphere.cpr.AtmosphereResource.getBroadcaster", "org.atmosphere.cpr.DefaultBroadcaster.broadcastOnResume", "org.atmosphere.cpr.AsynchronousProcessor.invokeAtmosphereHandler", "org.slf4j.Logger.error"], "call_func_parameter": [[""], ["java.lang.Object"], [""], [""], ["java.lang.String", "java.lang.Object"], [""], [""], ["java.lang.String", "java.lang.Object"], [""], ["boolean"], [""], [""], [""], [""], ["boolean"], [""], [""], ["java.lang.String", "java.lang.Throwable"], [""], [""], [""], [""], ["boolean"], ["boolean"], [""], ["org.atmosphere.cpr.AtmosphereResource"], ["org.atmosphere.cpr.AtmosphereResourceImpl"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.isCancelled": "Return true if this object has been cancelled."}, {"org.atmosphere.cpr.AtmosphereResource.uuid": "Return the unique ID associated with this AtmosphereResource."}, {"org.atmosphere.cpr.AtmosphereResourceImpl.setIsInScope": "Protect the object from being used after it got cancelled."}, {"org.atmosphere.cpr.AtmosphereConfig.framework": "Return the  {@link AtmosphereFramework}."}, {"org.atmosphere.cpr.AtmosphereFramework.isDestroyed": "Return true is the  {@link #destroy()} method has been invoked."}, {"org.atmosphere.cpr.AtmosphereResource.getBroadcaster": "Return the first added  {@link Broadcaster}."}, {"org.atmosphere.cpr.AsynchronousProcessor.invokeAtmosphereHandler": "Invoke the associated  {@link AtmosphereHandler}. This method must be synchronized on an AtmosphereResource."}]}, {"index": "384", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java", "methodName": "org.atmosphere.cpr.AsynchronousProcessor.invokeAtmosphereHandler", "methodParameterType": "AtmosphereResourceImpl#", "methodParameterName": "r#", "methodBody": "protected void invokeAtmosphereHandler(AtmosphereResourceImpl r) throws IOException {\n        AtmosphereRequest req = r.getRequest(false);\n        try {\n            // Rely on isInScope instead of synchronization https://github.com/Atmosphere/atmosphere/issues/1865\n            if (r.isInScope()) {\n                String disableOnEvent = r.getAtmosphereConfig().getInitParameter(ApplicationConfig.DISABLE_ONSTATE_EVENT);\n                r.getAtmosphereResourceEvent().setMessage(r.writeOnTimeout());\n                try {\n                    if (disableOnEvent == null || !disableOnEvent.equals(String.valueOf(true))) {\n                        AtmosphereHandler atmosphereHandler = r.getAtmosphereHandler();\n\n                        if (atmosphereHandler != null && r.isInScope()) {\n\n                            try {\n                                Utils.inject(r);\n                            } catch (IllegalAccessException e) {\n                                logger.warn(\"\", e);\n                            }\n\n                            atmosphereHandler.onStateChange(r.getAtmosphereResourceEvent());\n                        }\n                    }\n                } catch (IOException ex) {\n                    try {\n                        r.onThrowable(ex);\n                    } catch (Throwable t) {\n                        logger.warn(\"failed calling onThrowable()\", ex);\n                    }\n                }\n            } else {\n                logger.trace(\"AtmosphereResource out of scope {}\", r.uuid());\n                return;\n            }\n        } finally {\n            Utils.destroyMeteor(req);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#CatchClause#TryStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)MethodInvocation)PrefixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)CatchClause)TryStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Invoke the associated  {@link AtmosphereHandler}. This method must be synchronized on an AtmosphereResource.", "call_func_name": ["org.atmosphere.cpr.AtmosphereResourceImpl.getRequest", "org.atmosphere.cpr.AtmosphereResourceImpl.isInScope", "org.atmosphere.cpr.AtmosphereResourceImpl.getAtmosphereConfig", "org.atmosphere.cpr.AtmosphereConfig.getInitParameter", "org.atmosphere.cpr.AtmosphereResourceImpl.getAtmosphereResourceEvent", "org.atmosphere.cpr.AtmosphereResourceImpl.writeOnTimeout", "org.atmosphere.cpr.AtmosphereResourceEventImpl.setMessage", "java.lang.String.valueOf", "java.lang.String.equals", "org.atmosphere.cpr.AtmosphereResourceImpl.getAtmosphereHandler", "org.atmosphere.util.Utils.inject", "org.slf4j.Logger.warn", "org.atmosphere.cpr.AtmosphereHandler.onStateChange", "org.atmosphere.cpr.AtmosphereResourceImpl.onThrowable", "org.atmosphere.cpr.AtmosphereResourceImpl.uuid", "org.slf4j.Logger.trace", "org.atmosphere.util.Utils.destroyMeteor"], "call_func_parameter": [["boolean"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.Object"], ["boolean"], ["java.lang.Object"], [""], ["org.atmosphere.cpr.AtmosphereResource"], ["java.lang.String", "java.lang.Throwable"], ["org.atmosphere.cpr.AtmosphereResourceEvent"], ["java.lang.Throwable"], [""], ["java.lang.String", "java.lang.Object"], ["org.atmosphere.cpr.AtmosphereRequest"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResourceImpl.isInScope": "Check if the  {@link AtmosphereRequest} still is valid."}, {"org.atmosphere.cpr.AtmosphereConfig.getInitParameter": "Return the value of the init params defined in web.xml or application.xml."}, {"org.atmosphere.cpr.AtmosphereHandler.onStateChange": "This method is invoked when the  {@link Broadcaster} executes a broadcast operation. When this method is invokedits associated  {@link Broadcaster}, any suspended connection will be allowed to write the data back to its associated clients. <p/> This method will also be invoked when a response get resumed, e.g. when  {@link AtmosphereResource#resume} getsinvoked. In that case,  {@link AtmosphereResourceEvent#isResuming} will return true.<p/> This method will also be invoked when the  {@link AtmosphereResource#suspend(long)} expires. In that case,{@link AtmosphereResourceEvent#isResumedOnTimeout} will return <tt>true</tt>."}, {"org.atmosphere.cpr.AtmosphereResourceImpl.onThrowable": "Notify  {@link AtmosphereResourceEventListener} thah an unexpected exception occured."}]}, {"index": "385", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java", "methodName": "org.atmosphere.cpr.AsynchronousProcessor.cancelled", "methodParameterType": "AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "req#res#", "methodBody": "public Action cancelled(final AtmosphereRequest req, final AtmosphereResponse res)\n            throws IOException, ServletException {\n\n        logger.trace(\"Cancelling {}\", req);\n        final AtmosphereResourceImpl r = AtmosphereResourceImpl.class.cast(req.resource());\n        // Leave a chance to the client to send the disconnect message before processing the connection\n        if (closingTime > 0) {\n            ExecutorsFactory.getScheduler(config).schedule(new Callable<Object>() {\n\n                @Override\n                public Object call() throws Exception {\n                    endRequest(r, true);\n                    return null;\n                }\n            }, closingTime, TimeUnit.MILLISECONDS);\n        } else {\n            if (completeLifecycle(req.resource(), true)) {\n                config.framework().notify(Action.TYPE.CANCELLED, req, res);\n            }\n        }\n        return cancelledAction;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "All proprietary Comet based  {@link Servlet} must invoke the cancelled method when the underlying WebServerdetect that the client closed the connection.", "call_func_name": ["org.slf4j.Logger.trace", "org.atmosphere.cpr.AtmosphereRequest.resource", "java.lang.Class.cast", "org.atmosphere.util.ExecutorsFactory.getScheduler", "java.util.concurrent.ScheduledExecutorService.schedule", "org.atmosphere.cpr.AsynchronousProcessor.completeLifecycle", "org.atmosphere.cpr.AtmosphereConfig.framework"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], [""], ["java.lang.Object"], ["org.atmosphere.cpr.AtmosphereConfig"], ["java.util.concurrent.Callable", "long", "java.util.concurrent.TimeUnit"], ["org.atmosphere.cpr.AtmosphereResource", "boolean"], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequest.resource": "The  {@link AtmosphereResource} associated with this request."}, {"org.atmosphere.util.ExecutorsFactory.getScheduler": "Create a  {@link ScheduledExecutorService} used ot schedule I/O and non I/O events."}, {"org.atmosphere.cpr.AsynchronousProcessor.completeLifecycle": "Cancel or times out an  {@link AtmosphereResource} by invoking it's associated {@link AtmosphereHandler#onStateChange(AtmosphereResourceEvent)}"}, {"org.atmosphere.cpr.AtmosphereConfig.framework": "Return the  {@link AtmosphereFramework}."}]}, {"index": "386", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncIOWriter.java", "methodName": "org.atmosphere.cpr.AsyncIOWriter.redirect", "methodParameterType": "AtmosphereResponse#String#", "methodParameterName": "r#location#", "methodBody": "AsyncIOWriter redirect(AtmosphereResponse r, String location) throws IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Redirect a WebSocket request to another location.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "387", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncIOWriter.java", "methodName": "org.atmosphere.cpr.AsyncIOWriter.writeError", "methodParameterType": "AtmosphereResponse#int#String#", "methodParameterName": "r#errorCode#message#", "methodBody": "AsyncIOWriter writeError(AtmosphereResponse r, int errorCode, String message) throws IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Write an error code.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "388", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncIOWriter.java", "methodName": "org.atmosphere.cpr.AsyncIOWriter.write", "methodParameterType": "AtmosphereResponse#String#", "methodParameterName": "r#data#", "methodBody": "AsyncIOWriter write(AtmosphereResponse r, String data) throws IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Write a WebSocket message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "389", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncIOWriter.java", "methodName": "org.atmosphere.cpr.AsyncIOWriter.write", "methodParameterType": "AtmosphereResponse#byte[]#", "methodParameterName": "r#data#", "methodBody": "AsyncIOWriter write(AtmosphereResponse r, byte[] data) throws IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Write a WebSocket message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "390", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncIOWriter.java", "methodName": "org.atmosphere.cpr.AsyncIOWriter.write", "methodParameterType": "AtmosphereResponse#byte[]#int#int#", "methodParameterName": "r#data#offset#length#", "methodBody": "AsyncIOWriter write(AtmosphereResponse r, byte[] data, int offset, int length) throws IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Write a WebSocket message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "391", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncIOWriter.java", "methodName": "org.atmosphere.cpr.AsyncIOWriter.close", "methodParameterType": "AtmosphereResponse#", "methodParameterName": "r#", "methodBody": "void close(AtmosphereResponse r) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Close the underlying connection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "392", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncIOWriter.java", "methodName": "org.atmosphere.cpr.AsyncIOWriter.flush", "methodParameterType": "AtmosphereResponse#", "methodParameterName": "r#", "methodBody": "AsyncIOWriter flush(AtmosphereResponse r) throws IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Flush the buffered content.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "393", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEventListener.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceEventListener.onPreSuspend", "methodParameterType": "AtmosphereResourceEvent#", "methodParameterName": "event#", "methodBody": "void onPreSuspend(AtmosphereResourceEvent event);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when the  {@link AtmosphereResource#suspend} is in the process of being suspendedbut nothing has yet been written on the connection. An implementation could configure the request's headers, flush some data, etc. during that stage.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "394", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEventListener.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceEventListener.onSuspend", "methodParameterType": "AtmosphereResourceEvent#", "methodParameterName": "event#", "methodBody": "void onSuspend(AtmosphereResourceEvent event);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when the  {@link AtmosphereResource#suspend} has been completed and the response isconsidered as suspended.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "395", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEventListener.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceEventListener.onResume", "methodParameterType": "AtmosphereResourceEvent#", "methodParameterName": "event#", "methodBody": "void onResume(AtmosphereResourceEvent event);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when the  {@link AtmosphereResource#resume} is invoked or when thesuspend's time out expires.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "396", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEventListener.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceEventListener.onDisconnect", "methodParameterType": "AtmosphereResourceEvent#", "methodParameterName": "event#", "methodBody": "void onDisconnect(AtmosphereResourceEvent event);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when the remote connection gets closed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "397", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEventListener.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceEventListener.onBroadcast", "methodParameterType": "AtmosphereResourceEvent#", "methodParameterName": "event#", "methodBody": "void onBroadcast(AtmosphereResourceEvent event);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when a  {@link Broadcaster#broadcast} occurs.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "398", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEventListener.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceEventListener.onThrowable", "methodParameterType": "AtmosphereResourceEvent#", "methodParameterName": "event#", "methodBody": "void onThrowable(AtmosphereResourceEvent event);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when an operations failed to execute for an unknown reason (eg. IOException because the client remotely closed the connection, a broken connection, etc.).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "399", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEventListener.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceEventListener.onClose", "methodParameterType": "AtmosphereResourceEvent#", "methodParameterName": "event#", "methodBody": "void onClose(AtmosphereResourceEvent event);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when  {@link AtmosphereResource#close} gets called.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "400", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFilter.java", "methodName": "org.atmosphere.cpr.AtmosphereFilter.init", "methodParameterType": "FilterConfig#", "methodParameterName": "filterConfig#", "methodBody": "public void init(final FilterConfig filterConfig) throws ServletException {\n        logger.info(\"AtmosphereServlet running as a Filter\");\n\n        as.init(new ServletConfig() {\n\n            @Override\n            public String getServletName() {\n                return filterConfig.getFilterName();\n            }\n\n            @Override\n            public ServletContext getServletContext() {\n                return filterConfig.getServletContext();\n            }\n\n            @Override\n            public String getInitParameter(String name) {\n                return filterConfig.getInitParameter(name);\n            }\n\n            @Override\n            public Enumeration<String> getInitParameterNames() {\n                return filterConfig.getInitParameterNames();\n            }\n        });\n\n        String s = filterConfig.getInitParameter(ApplicationConfig.ATMOSPHERE_EXCLUDED_FILE);\n        if (s != null) {\n            excluded = s;\n        }\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Initialize the  {@link Filter}.", "call_func_name": ["org.slf4j.Logger.info", "org.atmosphere.cpr.AtmosphereServlet.init", "javax.servlet.FilterConfig.getInitParameter"], "call_func_parameter": [["java.lang.String"], ["javax.servlet.ServletConfig"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "401", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFilter.java", "methodName": "org.atmosphere.cpr.AtmosphereFilter.doFilter", "methodParameterType": "ServletRequest#ServletResponse#FilterChain#", "methodParameterName": "request#response#chain#", "methodBody": "public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n            throws IOException, ServletException {\n\n        AtmosphereRequest req = AtmosphereRequestImpl.wrap((HttpServletRequest) request);\n        AtmosphereResponse res = AtmosphereResponseImpl.wrap((HttpServletResponse) response);\n        Action a = null;\n\n        if (req.getServletPath() == null\n                || (as.framework().getServletContext().getResource(req.getServletPath()) == null\n                && !req.getServletPath().matches(excluded))) {\n            a = as.framework().doCometSupport(req, res);\n        }\n\n        if (a == null || a.type() != Action.TYPE.SUSPEND) {\n            chain.doFilter(request, response);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Normal doFilter invocation.", "call_func_name": ["org.atmosphere.cpr.AtmosphereRequestImpl.wrap", "org.atmosphere.cpr.AtmosphereResponseImpl.wrap", "org.atmosphere.cpr.AtmosphereRequest.getServletPath", "org.atmosphere.cpr.AtmosphereServlet.framework", "org.atmosphere.cpr.AtmosphereFramework.getServletContext", "javax.servlet.ServletContext.getResource", "java.lang.String.matches", "org.atmosphere.cpr.AtmosphereFramework.doCometSupport", "org.atmosphere.cpr.Action.type", "javax.servlet.FilterChain.doFilter"], "call_func_parameter": [["javax.servlet.http.HttpServletRequest"], ["javax.servlet.http.HttpServletResponse"], [""], [""], [""], ["java.lang.String"], ["java.lang.String"], ["org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse"], [""], ["javax.servlet.ServletRequest", "javax.servlet.ServletResponse"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequestImpl.wrap": "Wrap an  {@link HttpServletRequest}."}, {"org.atmosphere.cpr.AtmosphereResponseImpl.wrap": "Wrap an  {@link HttpServletResponse}"}, {"org.atmosphere.cpr.AtmosphereRequest.getServletPath": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereFramework.getServletContext": "Return the  {@link ServletContext}"}, {"org.atmosphere.cpr.AtmosphereFramework.doCometSupport": "Invoke the proprietary  {@link AsyncSupport}."}]}, {"index": "402", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.BroadcasterConfig", "methodParameterType": "List<String>#AtmosphereConfig#String#", "methodParameterName": "broadcastFilters#config#broadcasterId#", "methodBody": "public BroadcasterConfig(List<String> broadcastFilters, AtmosphereConfig config, String broadcasterId) {\n        this(broadcastFilters, config, true, broadcasterId);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Create a new BroadcasterConfig. Remember to call init() after the object has been created.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "403", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.BroadcasterConfig", "methodParameterType": "List<String>#AtmosphereConfig#boolean#String#", "methodParameterName": "broadcastFilters#config#handleExecutors#broadcasterId#", "methodBody": "public BroadcasterConfig(List<String> broadcastFilters, AtmosphereConfig config, boolean handleExecutors, String broadcasterId) {\n        this.config = config;\n        this.broadcasterId = broadcasterId;\n        this.shared = config.framework().isShareExecutorServices();\n        this.handleExecutors = handleExecutors;\n        this.filterList = broadcastFilters;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create a new BroadcasterConfig. Remember to call init() after the object has been created.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "404", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.BroadcasterConfig", "methodParameterType": "ExecutorService#ExecutorService#ScheduledExecutorService#AtmosphereConfig#String#", "methodParameterName": "executorService#asyncWriteService#scheduler#config#broadcasterId#", "methodBody": "public BroadcasterConfig(ExecutorService executorService, ExecutorService asyncWriteService,\n                             ScheduledExecutorService scheduler, AtmosphereConfig config, String broadcasterId) {\n        this.executorService = executorService;\n        this.scheduler = scheduler;\n        this.asyncWriteService = asyncWriteService;\n        this.config = config;\n        this.broadcasterId = broadcasterId;\n        this.handleExecutors = true;\n        this.shared = config.framework().isShareExecutorServices();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create a new BroadcasterConfig. Remember to call init() after the object has been created.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "405", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.init", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public BroadcasterConfig init() {\n        if (handleExecutors) {\n            configExecutors();\n        }\n\n        if (filterList != null) {\n            configureBroadcasterFilter(filterList);\n        }\n        configureBroadcasterCache();\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Initialize BroadcastFilters and BroadcasterCache. Must always be called after creating a new BroadcasterConfig!", "call_func_name": ["org.atmosphere.cpr.BroadcasterConfig.configExecutors", "org.atmosphere.cpr.BroadcasterConfig.configureBroadcasterFilter", "org.atmosphere.cpr.BroadcasterConfig.configureBroadcasterCache"], "call_func_parameter": [[""], ["java.util.List"], [""]], "passed_comments": "/"}, {"index": "406", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.setExecutorService", "methodParameterType": "ExecutorService#", "methodParameterName": "executorService#", "methodBody": "public BroadcasterConfig setExecutorService(ExecutorService executorService) {\n        return setExecutorService(executorService, false);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set an  {@link ExecutorService} which can be used to dispatch{@link AtmosphereResourceEvent}. By default, the result of  {@link ExecutorsFactory#getMessageDispatcher(AtmosphereConfig,String)}is used if this method is not invoked.", "call_func_name": ["org.atmosphere.cpr.BroadcasterConfig.setExecutorService"], "call_func_parameter": [["java.util.concurrent.ExecutorService", "boolean"]], "passed_comments": [{"org.atmosphere.cpr.BroadcasterConfig.setExecutorService": "Set an  {@link ExecutorService} which can be used to dispatch{@link AtmosphereResourceEvent}. By default, the result of  {@link ExecutorsFactory#getMessageDispatcher(AtmosphereConfig,String)}is used if this method is not invoked."}]}, {"index": "407", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.setExecutorService", "methodParameterType": "ExecutorService#boolean#", "methodParameterName": "executorService#isExecutorShared#", "methodBody": "public BroadcasterConfig setExecutorService(ExecutorService executorService, boolean isExecutorShared) {\n        if (!this.isExecutorShared && this.executorService != null) {\n            this.executorService.shutdown();\n        }\n        this.executorService = executorService;\n        this.isExecutorShared = isExecutorShared;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#PrefixExpression#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(PrefixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)PrefixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set an  {@link ExecutorService} which can be used to dispatch{@link AtmosphereResourceEvent}. By default, the result of  {@link ExecutorsFactory#getMessageDispatcher(AtmosphereConfig,String)}is used if this method is not invoked.", "call_func_name": ["java.util.concurrent.ExecutorService.shutdown"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "408", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.getExecutorService", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ExecutorService getExecutorService() {\n        return executorService;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link ExecutorService} this {@link Broadcaster} supports.By default it returns the result of  {@link ExecutorsFactory#getMessageDispatcher(AtmosphereConfig,String)}}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "409", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.setAsyncWriteService", "methodParameterType": "ExecutorService#", "methodParameterName": "asyncWriteService#", "methodBody": "public BroadcasterConfig setAsyncWriteService(ExecutorService asyncWriteService) {\n        return setAsyncWriteService(asyncWriteService, false);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set an  {@link ExecutorService} which can be used to write{@link org.atmosphere.cpr.AtmosphereResourceEvent#getMessage()}. By default, the result of  {@link ExecutorsFactory#getAsyncOperationExecutor(AtmosphereConfig,String)}is used if this method is not invoked.", "call_func_name": ["org.atmosphere.cpr.BroadcasterConfig.setAsyncWriteService"], "call_func_parameter": [["java.util.concurrent.ExecutorService", "boolean"]], "passed_comments": [{"org.atmosphere.cpr.BroadcasterConfig.setAsyncWriteService": "Set an  {@link ExecutorService} which can be used to write{@link org.atmosphere.cpr.AtmosphereResourceEvent#getMessage()}. By default, the result of  {@link ExecutorsFactory#getAsyncOperationExecutor(AtmosphereConfig,String)}is used if this method is not invoked."}]}, {"index": "410", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.setAsyncWriteService", "methodParameterType": "ExecutorService#boolean#", "methodParameterName": "asyncWriteService#isAsyncExecutorShared#", "methodBody": "public BroadcasterConfig setAsyncWriteService(ExecutorService asyncWriteService, boolean isAsyncExecutorShared) {\n        if (!this.isAsyncExecutorShared && this.asyncWriteService != null) {\n            this.asyncWriteService.shutdown();\n        }\n        this.asyncWriteService = asyncWriteService;\n        this.isAsyncExecutorShared = isAsyncExecutorShared;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#PrefixExpression#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(PrefixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)PrefixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set an  {@link ExecutorService} which can be used to write{@link org.atmosphere.cpr.AtmosphereResourceEvent#getMessage()}. By default, the result of  {@link ExecutorsFactory#getAsyncOperationExecutor(AtmosphereConfig,String)}is used if this method is not invoked.", "call_func_name": ["java.util.concurrent.ExecutorService.shutdown"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "411", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.getAsyncWriteService", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ExecutorService getAsyncWriteService() {\n        return asyncWriteService;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link ExecutorService} this {@link Broadcaster} use for executing asynchronous write of events.By default it returns the result of  {@link ExecutorsFactory#getAsyncOperationExecutor(AtmosphereConfig,String)}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "412", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.addFilter", "methodParameterType": "BroadcastFilter#", "methodParameterName": "e#", "methodBody": "public boolean addFilter(BroadcastFilter e) {\n        return addFilter(e, true);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add a  {@link BroadcastFilter}.", "call_func_name": ["org.atmosphere.cpr.BroadcasterConfig.addFilter"], "call_func_parameter": [["org.atmosphere.cpr.BroadcastFilter", "boolean"]], "passed_comments": [{"org.atmosphere.cpr.BroadcasterConfig.addFilter": "Add a  {@link BroadcastFilter}."}]}, {"index": "413", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.addFilter", "methodParameterType": "BroadcastFilter#boolean#", "methodParameterName": "e#init#", "methodBody": "protected boolean addFilter(BroadcastFilter e, boolean init) {\n        logDuplicateFilter(e);\n        if (filters.contains(e)) return false;\n\n        if (e instanceof BroadcastFilterLifecycle) {\n            ((BroadcastFilterLifecycle) e).init(config);\n        }\n\n        if (init && ClusterBroadcastFilter.class.isAssignableFrom(e.getClass())) {\n            Broadcaster b = config.getBroadcasterFactory().lookup(broadcasterId, false);\n            if (b != null) {\n                synchronized (e) {\n                    ClusterBroadcastFilter.class.cast(e).setBroadcaster(b);\n                }\n            }\n        }\n\n        if (e instanceof PerRequestBroadcastFilter) {\n            perRequestFilters.add((PerRequestBroadcastFilter) e);\n        }\n\n        return filters.offer(e);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement)Block)IfStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add a  {@link BroadcastFilter}.", "call_func_name": ["org.atmosphere.cpr.BroadcasterConfig.logDuplicateFilter", "java.util.concurrent.ConcurrentLinkedQueue.contains", "org.atmosphere.cpr.BroadcastFilterLifecycle.init", "java.lang.Object.getClass", "java.lang.Class.isAssignableFrom", "org.atmosphere.cpr.AtmosphereConfig.getBroadcasterFactory", "org.atmosphere.cpr.BroadcasterFactory.lookup", "java.lang.Class.cast", "org.atmosphere.cpr.ClusterBroadcastFilter.setBroadcaster", "java.util.concurrent.ConcurrentLinkedQueue.add", "java.util.concurrent.ConcurrentLinkedQueue.offer"], "call_func_parameter": [["org.atmosphere.cpr.BroadcastFilter"], ["java.lang.Object"], ["org.atmosphere.cpr.AtmosphereConfig"], [""], ["java.lang.Class"], [""], ["java.lang.Object", "boolean"], ["java.lang.Object"], ["org.atmosphere.cpr.Broadcaster"], ["java.lang.Object"], ["java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.BroadcastFilterLifecycle.init": "Initialize the  {@link BroadcastFilter}."}, {"org.atmosphere.cpr.AtmosphereConfig.getBroadcasterFactory": "Return an instance of  {@link DefaultBroadcasterFactory}."}, {"org.atmosphere.cpr.BroadcasterFactory.lookup": "Lookup a  {@link Broadcaster} instance using {@link Broadcaster#getID()} or ID"}, {"org.atmosphere.cpr.ClusterBroadcastFilter.setBroadcaster": "The  {@link Broadcaster} to use."}]}, {"index": "414", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.filters", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Collection<BroadcastFilter> filters() {\n        return filters;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the current list of installed  {@link BroadcastFilter}s.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "415", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.forceDestroy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void forceDestroy() {\n        destroy(true);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Force shutdown of all  {@link ExecutorService}s.", "call_func_name": ["org.atmosphere.cpr.BroadcasterConfig.destroy"], "call_func_parameter": [["boolean"]], "passed_comments": "/"}, {"index": "416", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.removeFilter", "methodParameterType": "BroadcastFilter#", "methodParameterName": "filter#", "methodBody": "public boolean removeFilter(BroadcastFilter filter) {\n        if (filter instanceof BroadcastFilterLifecycle) {\n            ((BroadcastFilterLifecycle) filter).destroy();\n        }\n\n        if (filter instanceof PerRequestBroadcastFilter) {\n            perRequestFilters.remove(filter);\n        }\n\n        return filters.remove(filter);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Remove a  {@link BroadcastFilter}.", "call_func_name": ["org.atmosphere.cpr.BroadcastFilterLifecycle.destroy", "java.util.concurrent.ConcurrentLinkedQueue.remove"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.BroadcastFilterLifecycle.destroy": "Destroy this  {@link BroadcastFilter} and its internal resources."}]}, {"index": "417", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.removeAllFilters", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void removeAllFilters() {\n        for (BroadcastFilter filter : filters) {\n            removeFilter(filter);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Remove all  {@link BroadcastFilter}s.", "call_func_name": ["java.util.concurrent.ConcurrentLinkedQueue.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.atmosphere.cpr.BroadcasterConfig.removeFilter"], "call_func_parameter": [[""], [""], [""], ["org.atmosphere.cpr.BroadcastFilter"]], "passed_comments": [{"org.atmosphere.cpr.BroadcasterConfig.removeFilter": "Remove a  {@link BroadcastFilter}."}]}, {"index": "418", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.hasFilters", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean hasFilters() {\n        return !filters.isEmpty();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if this object contains  {@link BroadcastFilter}s.", "call_func_name": ["java.util.concurrent.ConcurrentLinkedQueue.isEmpty"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "419", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.hasPerRequestFilters", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean hasPerRequestFilters() {\n        if (filters.isEmpty()) {\n            return false;\n        } else {\n            for (BroadcastFilter b : filters) {\n                if (PerRequestBroadcastFilter.class.isAssignableFrom(b.getClass())) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if this object contains  {@link BroadcastFilter}s.", "call_func_name": ["java.util.concurrent.ConcurrentLinkedQueue.isEmpty", "java.util.concurrent.ConcurrentLinkedQueue.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.Object.getClass", "java.lang.Class.isAssignableFrom"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.lang.Class"]], "passed_comments": "/"}, {"index": "420", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.filter", "methodParameterType": "Object#", "methodParameterName": "object#", "methodBody": "protected BroadcastAction filter(Object object) {\n\n        Object newO = unwrap(object);\n        boolean isManipulated = false;\n        if (newO != null && !newO.equals(object)) {\n            isManipulated = true;\n            object = newO;\n        }\n\n        BroadcastAction transformed = new BroadcastAction(object);\n        for (BroadcastFilter mf : filters) {\n            synchronized (mf) {\n                transformed = mf.filter(broadcasterId, object, transformed.message());\n                if (transformed == null\n                        || transformed.action() == BroadcastAction.ACTION.ABORT\n                        || transformed.action() == BroadcastAction.ACTION.SKIP) {\n                    return transformed;\n                }\n            }\n        }\n        return wrap(transformed, isManipulated);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#SynchronizedStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)SynchronizedStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Invoke  {@link BroadcastFilter}s in the order they were added.", "call_func_name": ["org.atmosphere.cpr.BroadcasterConfig.unwrap", "java.lang.Object.equals", "java.util.concurrent.ConcurrentLinkedQueue.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.atmosphere.cpr.BroadcastFilter.filter"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"], [""], [""], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.BroadcastFilter.filter": "Transform or filter a message. Return BroadcastAction(ACTION.ABORT, message) {@link Broadcaster} to discard the message, eg. to not broadcast it."}]}, {"index": "421", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.filter", "methodParameterType": "AtmosphereResource#Object#Object#", "methodParameterName": "r#message#originalMessage#", "methodBody": "protected BroadcastAction filter(AtmosphereResource r, Object message, Object originalMessage) {\n\n        Object newO = unwrap(message);\n        boolean isManipulated = false;\n        if (!newO.equals(message)) {\n            isManipulated = true;\n            message = newO;\n        }\n\n        BroadcastAction transformed = new BroadcastAction(message);\n        for (PerRequestBroadcastFilter mf : perRequestFilters) {\n            synchronized (mf) {\n                transformed = mf.filter(broadcasterId, r, originalMessage, transformed.message());\n                if (transformed == null\n                        || transformed.action() == BroadcastAction.ACTION.ABORT\n                        || transformed.action() == BroadcastAction.ACTION.SKIP) {\n                    return transformed;\n                }\n            }\n        }\n        return wrap(transformed, isManipulated);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#SynchronizedStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)SynchronizedStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Invoke  {@link BroadcastFilter}s in the order they were added, with a unique  {@link AtmosphereRequest}.", "call_func_name": ["org.atmosphere.cpr.BroadcasterConfig.unwrap", "java.lang.Object.equals", "java.util.concurrent.ConcurrentLinkedQueue.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.atmosphere.cpr.PerRequestBroadcastFilter.filter"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"], [""], [""], [""], ["java.lang.String", "org.atmosphere.cpr.AtmosphereResource", "java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.PerRequestBroadcastFilter.filter": "Transform or filter a message per  {@link AtmosphereResource}. Be careful when setting headers on the {@link AtmosphereResponse} as the headers may have been already sent back to the browser."}]}, {"index": "422", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.applyFilters", "methodParameterType": "AtmosphereResource#List<Object>#", "methodParameterName": "r#cacheMessages#", "methodBody": "public List<Object> applyFilters(AtmosphereResource r, List<Object> cacheMessages) {\n        LinkedList<Object> filteredMessage = new LinkedList<Object>();\n        BroadcastFilter.BroadcastAction a;\n        for (Object o : cacheMessages) {\n            a = filter(o);\n            if (a.action() == BroadcastFilter.BroadcastAction.ACTION.ABORT) return Collections.<Object>emptyList();\n\n            if (a.action() == BroadcastAction.ACTION.SKIP) {\n                filteredMessage.add(a.message());\n                return filteredMessage;\n            }\n\n            a = filter(r, a.message(), a.originalMessage());\n            if (a.action() == BroadcastFilter.BroadcastAction.ACTION.ABORT) return Collections.<Object>emptyList();\n\n            if (a.action() == BroadcastAction.ACTION.SKIP) {\n                filteredMessage.add(a.message());\n                return filteredMessage;\n            }\n\n            filteredMessage.add(a.message());\n        }\n        return filteredMessage;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Apply all filters to the  {@link AtmosphereResource} and the provided {@link List} of messages.", "call_func_name": ["java.util.LinkedList.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.atmosphere.cpr.BroadcasterConfig.filter", "java.util.Collections.emptyList", "java.util.LinkedList.add", "org.atmosphere.cpr.BroadcasterConfig.filter"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.Object"], [""], ["java.lang.Object"], ["org.atmosphere.cpr.AtmosphereResource", "java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.BroadcasterConfig.filter": "Invoke  {@link BroadcastFilter}s in the order they were added."}, {"org.atmosphere.cpr.BroadcasterConfig.filter": "Invoke  {@link BroadcastFilter}s in the order they were added, with a unique  {@link AtmosphereRequest}."}]}, {"index": "423", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.setScheduledExecutorService", "methodParameterType": "ScheduledExecutorService#", "methodParameterName": "scheduler#", "methodBody": "public BroadcasterConfig setScheduledExecutorService(ScheduledExecutorService scheduler) {\n        if (this.scheduler != null) {\n            this.scheduler.shutdown();\n        }\n        this.scheduler = scheduler;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set an  {@link ExecutorService} which can be used to dispatch{@link AtmosphereResourceEvent}s. By default a  {@link java.util.concurrent.ScheduledExecutorService}is used if this method is not invoked.", "call_func_name": ["java.util.concurrent.ScheduledExecutorService.shutdown"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "424", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.getScheduledExecutorService", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ScheduledExecutorService getScheduledExecutorService() {\n        return scheduler;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link ScheduledExecutorService} this {@link Broadcaster} supports.By default it returns an  {@link Executors#newScheduledThreadPool} and will usethe underlying number of core/protocol as an indication of the thread number.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "425", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.setBroadcasterCache", "methodParameterType": "BroadcasterCache#", "methodParameterName": "broadcasterCache#", "methodBody": "public BroadcasterConfig setBroadcasterCache(BroadcasterCache broadcasterCache) {\n        this.broadcasterCache = broadcasterCache;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set a  {@link BroadcasterCache}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "426", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.getBroadcasterCache", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public BroadcasterCache getBroadcasterCache() {\n        return broadcasterCache;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the  {@link BroadcasterCache} used for this {@link Broadcaster}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "427", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java", "methodName": "org.atmosphere.cpr.BroadcasterConfig.getAtmosphereConfig", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AtmosphereConfig getAtmosphereConfig() {\n        return config;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link AtmosphereConfig} value. This value might be nullif the associated  {@link Broadcaster} has been created manually.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "428", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AnnotationProcessor.java", "methodName": "org.atmosphere.cpr.AnnotationProcessor.scan", "methodParameterType": "File#", "methodParameterName": "rootDir#", "methodBody": "public AnnotationProcessor scan(File rootDir) throws IOException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Scan the  {@link File} looking for classes annotated with Atmosphere's Service annotation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "429", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AnnotationProcessor.java", "methodName": "org.atmosphere.cpr.AnnotationProcessor.scan", "methodParameterType": "String#", "methodParameterName": "packageName#", "methodBody": "public AnnotationProcessor scan(String packageName) throws IOException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Scan the package looking for classes annotated with Atmosphere's Service annotation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "430", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AnnotationProcessor.java", "methodName": "org.atmosphere.cpr.AnnotationProcessor.scanAll", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AnnotationProcessor scanAll() throws IOException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Scan all classes on the classpath looking for classes annotated with Atmosphere's Service annotation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "431", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AnnotationProcessor.java", "methodName": "org.atmosphere.cpr.AnnotationProcessor.destroy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void destroy();", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Destroy all resources associated with this object. Once destroyed, this object can no longer be used.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "432", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFrameworkListener.java", "methodName": "org.atmosphere.cpr.AtmosphereFrameworkListener.onPreInit", "methodParameterType": "AtmosphereFramework#", "methodParameterName": "f#", "methodBody": "void onPreInit(AtmosphereFramework f);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked before  {@link AtmosphereFramework#init()} gets invoked", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "433", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFrameworkListener.java", "methodName": "org.atmosphere.cpr.AtmosphereFrameworkListener.onPostInit", "methodParameterType": "AtmosphereFramework#", "methodParameterName": "f#", "methodBody": "void onPostInit(AtmosphereFramework f);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked after  {@link AtmosphereFramework#init()} gets invoked", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "434", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFrameworkListener.java", "methodName": "org.atmosphere.cpr.AtmosphereFrameworkListener.onPreDestroy", "methodParameterType": "AtmosphereFramework#", "methodParameterName": "f#", "methodBody": "void onPreDestroy(AtmosphereFramework f);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked before  {@link AtmosphereFramework#destroy()} gets invoked", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "435", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFrameworkListener.java", "methodName": "org.atmosphere.cpr.AtmosphereFrameworkListener.onPostDestroy", "methodParameterType": "AtmosphereFramework#", "methodParameterName": "f#", "methodBody": "void onPostDestroy(AtmosphereFramework f);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked after  {@link AtmosphereFramework#destroy()} gets invoked", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "436", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceHeartbeatEventListener.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceHeartbeatEventListener.onHeartbeat", "methodParameterType": "AtmosphereResourceEvent#", "methodParameterName": "event#", "methodBody": "void onHeartbeat(AtmosphereResourceEvent event);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when the remote connections send a heartbeat.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "437", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/HeartbeatAtmosphereResourceEvent.java", "methodName": "org.atmosphere.cpr.HeartbeatAtmosphereResourceEvent.HeartbeatAtmosphereResourceEvent", "methodParameterType": "AtmosphereResourceImpl#", "methodParameterName": "resource#", "methodBody": "public HeartbeatAtmosphereResourceEvent(final AtmosphereResourceImpl resource) {\n        super(resource);\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "<p> Builds a new event. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "438", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "methodName": "org.atmosphere.cpr.DefaultBroadcaster.createBroadcasterConfig", "methodParameterType": "AtmosphereConfig#", "methodParameterName": "config#", "methodBody": "protected BroadcasterConfig createBroadcasterConfig(AtmosphereConfig config) {\n        return new BroadcasterConfig(config.framework().broadcasterFilters, config, getID()).init();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create  {@link BroadcasterConfig}.", "call_func_name": ["org.atmosphere.cpr.AtmosphereConfig.framework", "org.atmosphere.cpr.DefaultBroadcaster.getID", "org.atmosphere.cpr.BroadcasterConfig.<init>", "org.atmosphere.cpr.BroadcasterConfig.init"], "call_func_parameter": [[""], [""], ["java.util.List", "org.atmosphere.cpr.AtmosphereConfig", "java.lang.String"], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.framework": "Return the  {@link AtmosphereFramework}."}, {"org.atmosphere.cpr.BroadcasterConfig.init": "Initialize BroadcastFilters and BroadcasterCache. Must always be called after creating a new BroadcasterConfig!"}]}, {"index": "439", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "methodName": "org.atmosphere.cpr.DefaultBroadcaster.rename", "methodParameterType": "String#", "methodParameterName": "id#", "methodBody": "public Broadcaster rename(String id) {\n        this.name = id;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Rename this Broadcaster without invoking it's associated  {@link org.atmosphere.cpr.BroadcasterFactory}. This method must be carefully used as it could easily create memory leak as the Broadcaster won't be removed from its  {@link org.atmosphere.cpr.BroadcasterFactory}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "440", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "methodName": "org.atmosphere.cpr.DefaultBroadcaster.reactiveThreadsCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected int reactiveThreadsCount() {\n        return Runtime.getRuntime().availableProcessors() * 2;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the default number of reactive threads that will be waiting for work when a broadcast operation is executed.", "call_func_name": ["java.lang.Runtime.getRuntime", "java.lang.Runtime.availableProcessors"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "441", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "methodName": "org.atmosphere.cpr.DefaultBroadcaster.cacheLostMessage", "methodParameterType": "AtmosphereResource#boolean#", "methodParameterName": "r#force#", "methodBody": "public void cacheLostMessage(AtmosphereResource r, boolean force) {\n        AtmosphereRequest request = AtmosphereResourceImpl.class.cast(r).getRequest(false);\n        try {\n            cacheLostMessage(r, (AsyncWriteToken) request.getAttribute(usingTokenIdForAttribute), force);\n        } finally {\n            request.removeAttribute(usingTokenIdForAttribute);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Cache the message because an unexpected exception occurred.", "call_func_name": ["java.lang.Class.cast", "org.atmosphere.cpr.AtmosphereResourceImpl.getRequest", "org.atmosphere.cpr.AtmosphereRequest.getAttribute", "org.atmosphere.cpr.AtmosphereRequest.removeAttribute"], "call_func_parameter": [["java.lang.Object"], ["boolean"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequest.getAttribute": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.removeAttribute": "{@inheritDoc}"}]}, {"index": "442", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "methodName": "org.atmosphere.cpr.DefaultBroadcaster.cacheLostMessage", "methodParameterType": "AtmosphereResource#AsyncWriteToken#", "methodParameterName": "r#token#", "methodBody": "public void cacheLostMessage(AtmosphereResource r, AsyncWriteToken token) {\n        cacheLostMessage(r, token, false);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Cache the message because an unexpected exception occurred.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "443", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "methodName": "org.atmosphere.cpr.DefaultBroadcaster.cacheLostMessage", "methodParameterType": "AtmosphereResource#AsyncWriteToken#boolean#", "methodParameterName": "r#token#force#", "methodBody": "public void cacheLostMessage(AtmosphereResource r, AsyncWriteToken token, boolean force) {\n        if (!force) {\n            return;\n        }\n\n        try {\n            if (token != null && token.originalMessage != null) {\n                bc.getBroadcasterCache().addToCache(getID(), r != null ? r.uuid() : BroadcasterCache.NULL,\n                        new BroadcastMessage(String.valueOf(token.future.hashCode()), token.originalMessage));\n                logger.trace(\"Lost message cached {}\", token.originalMessage);\n            }\n        } catch (Throwable t2) {\n            logger.error(\"Unable to cache message {} for AtmosphereResource {}\", token.originalMessage, r != null ? r.uuid() : \"\");\n            logger.error(\"Unable to cache message\", t2);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#PrefixExpression#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#ConditionalExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#StringLiteral#ConditionalExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(TryStatement(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConditionalExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)ConditionalExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Cache the message because an unexpected exception occurred.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "444", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "methodName": "org.atmosphere.cpr.DefaultBroadcaster.filter", "methodParameterType": "Object#", "methodParameterName": "msg#", "methodBody": "protected Object filter(Object msg) {\n        BroadcastAction a = bc.filter(msg);\n        if (a.action() == BroadcastAction.ACTION.ABORT || msg == null)\n            return null;\n        else\n            return a.message();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#NullLiteral#ReturnStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Invoke the  {@link BroadcastFilter}", "call_func_name": ["org.atmosphere.cpr.BroadcasterConfig.filter"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.BroadcasterConfig.filter": "Invoke  {@link BroadcastFilter}s in the order they were added."}]}, {"index": "445", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java", "methodName": "org.atmosphere.cpr.DefaultBroadcaster.cacheAndSuspend", "methodParameterType": "AtmosphereResource#", "methodParameterName": "r#", "methodBody": "protected void cacheAndSuspend(AtmosphereResource r) {\n        // In case the connection is closed, for whatever reason\n        if (!isAtmosphereResourceValid(r)) {\n            logger.debug(\"Unable to add AtmosphereResource {}\", r.uuid());\n            return;\n        }\n\n        boolean wasResumed = checkCachedAndPush(r, r.getAtmosphereResourceEvent());\n        if (!wasResumed && isAtmosphereResourceValid(r)) {\n            logger.trace(\"Associating AtmosphereResource {} with Broadcaster {}\", r.uuid(), getID());\n\n            String parentUUID = r.transport().equals(AtmosphereResource.TRANSPORT.WEBSOCKET) ?\n                    (String) AtmosphereResourceImpl.class.cast(r).getRequest(false).getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID) :\n                    null;\n            if (!backwardCompatible && parentUUID != null) {\n                AtmosphereResource p = config.resourcesFactory().find(parentUUID);\n                if (p != null && !resources.contains(p)) {\n                    notifyAndAdd(p);\n                } else if (p == null) {\n                    notifyAndAdd(r);\n                } else {\n                    logger.trace(\"AtmosphereResource {} was already mapped to {}\", r.uuid(), parentUUID);\n                }\n            } else {\n                notifyAndAdd(r);\n            }\n        } else if (!wasResumed) {\n            logger.debug(\"Unable to add AtmosphereResource {} to {}\", r.uuid(), name);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#CastExpression#NullLiteral#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression(NullLiteral)NullLiteral)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Look in the cache to see if there are messages available, and take the appropriate actions.", "call_func_name": ["org.atmosphere.cpr.DefaultBroadcaster.isAtmosphereResourceValid", "org.atmosphere.cpr.AtmosphereResource.uuid", "org.slf4j.Logger.debug", "org.atmosphere.cpr.AtmosphereResource.getAtmosphereResourceEvent", "org.atmosphere.cpr.DefaultBroadcaster.checkCachedAndPush", "org.atmosphere.cpr.DefaultBroadcaster.getID", "org.slf4j.Logger.trace", "org.atmosphere.cpr.AtmosphereResource.transport", "java.lang.Class.cast", "org.atmosphere.cpr.AtmosphereResourceImpl.getRequest", "org.atmosphere.cpr.AtmosphereRequest.getAttribute", "org.atmosphere.cpr.AtmosphereConfig.resourcesFactory", "org.atmosphere.cpr.AtmosphereResourceFactory.find", "java.util.concurrent.ConcurrentLinkedQueue.contains", "org.atmosphere.cpr.DefaultBroadcaster.notifyAndAdd", "org.slf4j.Logger.debug"], "call_func_parameter": [["org.atmosphere.cpr.AtmosphereResource"], [""], ["java.lang.String", "java.lang.Object"], [""], ["org.atmosphere.cpr.AtmosphereResource", "org.atmosphere.cpr.AtmosphereResourceEvent"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], ["java.lang.Object"], ["boolean"], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.Object"], ["org.atmosphere.cpr.AtmosphereResource"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.uuid": "Return the unique ID associated with this AtmosphereResource."}, {"org.atmosphere.cpr.AtmosphereResource.getAtmosphereResourceEvent": "Return the current  {@link AtmosphereResourceEvent}."}, {"org.atmosphere.cpr.AtmosphereResource.transport": "Return the current  {@link TRANSPORT}. The transport value is retrieved using the  {@link HeaderConfig#X_ATMOSPHERE_TRANSPORT}header value."}, {"org.atmosphere.cpr.AtmosphereRequest.getAttribute": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereConfig.resourcesFactory": "Return the  {@link AtmosphereResourceFactory}"}, {"org.atmosphere.cpr.AtmosphereResourceFactory.find": "Find an  {@link AtmosphereResource} based on its {@link org.atmosphere.cpr.AtmosphereResource#uuid()}."}]}, {"index": "446", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultMetaBroadcaster.java", "methodName": "org.atmosphere.cpr.DefaultMetaBroadcaster.flushCache", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected MetaBroadcaster flushCache() {\n        if (cache != null) cache.flushCache();\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Flush the cached messages.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "447", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceSession.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceSession.setAttribute", "methodParameterType": "String#Object#", "methodParameterName": "name#value#", "methodBody": "Object setAttribute(String name, Object value);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Binds an object to this session, using the name specified", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "448", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceSession.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceSession.getAttribute", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "Object getAttribute(String name);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the object bound with the specified name in this session, or null if no object is bound under the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "449", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceSession.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceSession.getAttribute", "methodParameterType": "String#Class<T>#", "methodParameterName": "name#type#", "methodBody": "<T> T getAttribute(String name, Class<T> type);", "AST": "Javadoc#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the object bound with the specified name in this session, or null if no object is bound under the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "450", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceSession.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceSession.getAttributeNames", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Collection<String> getAttributeNames();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns a Collection of Strings containing the names of all the objects bound to this session.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "451", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceSession.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceSession.invalidate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void invalidate();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Invalidates this session then unbinds any objects bound to it.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "452", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessorFactory.java", "methodName": "org.atmosphere.cpr.WebSocketProcessorFactory.getWebSocketProcessor", "methodParameterType": "AtmosphereFramework#", "methodParameterName": "framework#", "methodBody": "public WebSocketProcessor getWebSocketProcessor(AtmosphereFramework framework) {\n        WebSocketProcessor processor = processors.get(framework);\n        if (processor == null) {\n            synchronized (framework) {\n                processor = createProcessor(framework);\n                processors.put(framework, processor);\n            }\n        }\n        return processor;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link WebSocketProcessor}.", "call_func_name": ["java.util.Map.get", "org.atmosphere.cpr.WebSocketProcessorFactory.createProcessor", "java.util.Map.put"], "call_func_parameter": [["java.lang.Object"], ["org.atmosphere.cpr.AtmosphereFramework"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "453", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.AtmosphereServlet", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AtmosphereServlet() {\n        this(false);\n    }", "AST": "Javadoc#Modifier#SimpleName#BooleanLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(BooleanLiteral)BooleanLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Create an Atmosphere Servlet.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "454", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.AtmosphereServlet", "methodParameterType": "boolean#", "methodParameterName": "isFilter#", "methodBody": "public AtmosphereServlet(boolean isFilter) {\n        this(isFilter, true);\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#BooleanLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Create an Atmosphere Servlet.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "455", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.AtmosphereServlet", "methodParameterType": "boolean#boolean#", "methodParameterName": "isFilter#autoDetectHandlers#", "methodBody": "public AtmosphereServlet(boolean isFilter, boolean autoDetectHandlers) {\n        initializer = new AtmosphereFrameworkInitializer(isFilter, autoDetectHandlers);\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create an Atmosphere Servlet.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "456", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.doHead", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "req#res#", "methodBody": "@Override\n    public void doHead(HttpServletRequest req, HttpServletResponse res)\n            throws IOException, ServletException {\n        doPost(req, res);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "457", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.doOptions", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "req#res#", "methodBody": "@Override\n    public void doOptions(HttpServletRequest req, HttpServletResponse res)\n            throws IOException, ServletException {\n        doPost(req, res);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "458", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.doTrace", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "req#res#", "methodBody": "@Override\n    public void doTrace(HttpServletRequest req, HttpServletResponse res)\n            throws IOException, ServletException {\n        doPost(req, res);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "459", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.doDelete", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "req#res#", "methodBody": "@Override\n    public void doDelete(HttpServletRequest req, HttpServletResponse res)\n            throws IOException, ServletException {\n        doPost(req, res);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "460", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.doPut", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "req#res#", "methodBody": "@Override\n    public void doPut(HttpServletRequest req, HttpServletResponse res)\n            throws IOException, ServletException {\n        doPost(req, res);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "461", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.doGet", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "req#res#", "methodBody": "@Override\n    public void doGet(HttpServletRequest req, HttpServletResponse res)\n            throws IOException, ServletException {\n        doPost(req, res);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "462", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java", "methodName": "org.atmosphere.cpr.AtmosphereServlet.doPost", "methodParameterType": "HttpServletRequest#HttpServletResponse#", "methodParameterName": "req#res#", "methodBody": "@Override\n    public void doPost(HttpServletRequest req, HttpServletResponse res)\n            throws IOException, ServletException {\n        framework().doCometSupport(AtmosphereRequestImpl.wrap(req), AtmosphereResponseImpl.wrap(res));\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delegate the request processing to an instance of  {@link org.atmosphere.cpr.AsyncSupport}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "463", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterListenerAdapter.java", "methodName": "org.atmosphere.cpr.BroadcasterListenerAdapter.onPostCreate", "methodParameterType": "Broadcaster#", "methodParameterName": "b#", "methodBody": "@Override\n    public void onPostCreate(Broadcaster b) {\n        logger.trace(\"onPostCreate {}\", b.getID());\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.atmosphere.cpr.Broadcaster.getID", "org.slf4j.Logger.trace"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.Broadcaster.getID": "Return the ID of this  {@link Broadcaster}."}]}, {"index": "464", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterListenerAdapter.java", "methodName": "org.atmosphere.cpr.BroadcasterListenerAdapter.onComplete", "methodParameterType": "Broadcaster#", "methodParameterName": "b#", "methodBody": "@Override\n    public void onComplete(Broadcaster b) {\n        logger.trace(\"onComplete {}\", b.getID());\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.atmosphere.cpr.Broadcaster.getID", "org.slf4j.Logger.trace"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.Broadcaster.getID": "Return the ID of this  {@link Broadcaster}."}]}, {"index": "465", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterListenerAdapter.java", "methodName": "org.atmosphere.cpr.BroadcasterListenerAdapter.onPreDestroy", "methodParameterType": "Broadcaster#", "methodParameterName": "b#", "methodBody": "@Override\n    public void onPreDestroy(Broadcaster b) {\n        logger.trace(\"onPreDestroy {}\", b.getID());\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.atmosphere.cpr.Broadcaster.getID", "org.slf4j.Logger.trace"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.Broadcaster.getID": "Return the ID of this  {@link Broadcaster}."}]}, {"index": "466", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterListenerAdapter.java", "methodName": "org.atmosphere.cpr.BroadcasterListenerAdapter.onAddAtmosphereResource", "methodParameterType": "Broadcaster#AtmosphereResource#", "methodParameterName": "b#r#", "methodBody": "@Override\n    public void onAddAtmosphereResource(Broadcaster b, AtmosphereResource r) {\n        logger.trace(\"onAddAtmosphereResource {}\", b.getID());\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.atmosphere.cpr.Broadcaster.getID", "org.slf4j.Logger.trace"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.Broadcaster.getID": "Return the ID of this  {@link Broadcaster}."}]}, {"index": "467", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterListenerAdapter.java", "methodName": "org.atmosphere.cpr.BroadcasterListenerAdapter.onRemoveAtmosphereResource", "methodParameterType": "Broadcaster#AtmosphereResource#", "methodParameterName": "b#r#", "methodBody": "@Override\n    public void onRemoveAtmosphereResource(Broadcaster b, AtmosphereResource r) {\n        logger.trace(\"onRemoveAtmosphereResource {}\", b.getID());\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.atmosphere.cpr.Broadcaster.getID", "org.slf4j.Logger.trace"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.Broadcaster.getID": "Return the ID of this  {@link Broadcaster}."}]}, {"index": "468", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterListenerAdapter.java", "methodName": "org.atmosphere.cpr.BroadcasterListenerAdapter.onMessage", "methodParameterType": "Broadcaster#Deliver#", "methodParameterName": "b#deliver#", "methodBody": "@Override\n    public void onMessage(Broadcaster b, Deliver deliver) {\n        logger.trace(\"onMessage for broadcaster {} for {}\", b.getID(), deliver);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.atmosphere.cpr.Broadcaster.getID", "org.slf4j.Logger.trace"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.Broadcaster.getID": "Return the ID of this  {@link Broadcaster}."}]}, {"index": "469", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java", "methodName": "org.atmosphere.cpr.AtmosphereInterceptorWriter.interceptor", "methodParameterType": "AsyncIOInterceptor#", "methodParameterName": "filter#", "methodBody": "public AtmosphereInterceptorWriter interceptor(AsyncIOInterceptor filter) {\n        if (!filters.contains(filter)) {\n            logger.trace(\"Adding AsyncIOInterceptor {}\", filter.getClass().getName());\n            filters.addLast(filter);\n            reversedFilters.addFirst(filter);\n        }\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add an  {@link AsyncIOInterceptor} that will be invoked in the order it was added.", "call_func_name": ["java.util.LinkedList.contains", "java.lang.Object.getClass", "java.lang.Class.getName", "org.slf4j.Logger.trace", "java.util.LinkedList.addLast", "java.util.LinkedList.addFirst"], "call_func_parameter": [["java.lang.Object"], [""], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "470", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java", "methodName": "org.atmosphere.cpr.AtmosphereInterceptorWriter.interceptor", "methodParameterType": "AsyncIOInterceptor#int#", "methodParameterName": "filter#index#", "methodBody": "public AtmosphereInterceptorWriter interceptor(AsyncIOInterceptor filter, int index) {\n        if (!filters.contains(filter)) {\n            if (logger.isTraceEnabled()) {\n                logger.trace(\"Adding AsyncIOInterceptor {} at index {}\", filter.getClass().getName(), index);\n            }\n            filters.add(index, filter);\n            reversedFilters.add(reversedFilters.size() - index, filter);\n        }\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add an  {@link AsyncIOInterceptor} that will be invoked at the specified index position.", "call_func_name": ["java.util.LinkedList.contains", "org.slf4j.Logger.isTraceEnabled", "java.lang.Object.getClass", "java.lang.Class.getName", "java.lang.Integer.valueOf", "org.slf4j.Logger.trace", "java.util.LinkedList.add", "java.util.LinkedList.size"], "call_func_parameter": [["java.lang.Object"], [""], [""], [""], ["int"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["int", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "471", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceFactory.create", "methodParameterType": "AtmosphereConfig#AtmosphereRequest#AtmosphereResponse#AsyncSupport<?>#", "methodParameterName": "config#request#response#a#", "methodBody": "AtmosphereResource create(AtmosphereConfig config,\n                              AtmosphereRequest request,\n                              AtmosphereResponse response,\n                              AsyncSupport<?> a);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create an  {@link AtmosphereResourceImpl}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "472", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceFactory.create", "methodParameterType": "AtmosphereConfig#Broadcaster#AtmosphereRequest#AtmosphereResponse#AsyncSupport<?>#AtmosphereHandler#", "methodParameterName": "config#broadcaster#request#response#a#handler#", "methodBody": "AtmosphereResource create(AtmosphereConfig config,\n                              Broadcaster broadcaster,\n                              AtmosphereRequest request,\n                              AtmosphereResponse response,\n                              AsyncSupport<?> a,\n                              AtmosphereHandler handler);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create an  {@link AtmosphereResourceImpl}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "473", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceFactory.create", "methodParameterType": "AtmosphereConfig#Broadcaster#AtmosphereRequest#AtmosphereResponse#AsyncSupport<?>#AtmosphereHandler#AtmosphereResource.TRANSPORT#", "methodParameterName": "config#broadcaster#request#response#a#handler#t#", "methodBody": "AtmosphereResource create(AtmosphereConfig config,\n                              Broadcaster broadcaster,\n                              AtmosphereRequest request,\n                              AtmosphereResponse response,\n                              AsyncSupport<?> a,\n                              AtmosphereHandler handler,\n                              AtmosphereResource.TRANSPORT t);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create an  {@link AtmosphereResourceImpl}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "474", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceFactory.create", "methodParameterType": "AtmosphereConfig#Broadcaster#AtmosphereResponse#AsyncSupport<?>#AtmosphereHandler#", "methodParameterName": "config#broadcaster#response#a#handler#", "methodBody": "AtmosphereResource create(AtmosphereConfig config,\n                              Broadcaster broadcaster,\n                              AtmosphereResponse response,\n                              AsyncSupport<?> a,\n                              AtmosphereHandler handler);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create an  {@link AtmosphereResourceImpl}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "475", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceFactory.create", "methodParameterType": "AtmosphereConfig#AtmosphereResponse#AsyncSupport<?>#", "methodParameterName": "config#response#a#", "methodBody": "AtmosphereResource create(AtmosphereConfig config,\n                              AtmosphereResponse response,\n                              AsyncSupport<?> a);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create an  {@link AtmosphereResourceImpl}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "476", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceFactory.create", "methodParameterType": "AtmosphereConfig#String#", "methodParameterName": "config#uuid#", "methodBody": "AtmosphereResource create(AtmosphereConfig config, String uuid);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create an  {@link AtmosphereResource} associated with the uuid.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "477", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceFactory.create", "methodParameterType": "AtmosphereConfig#String#AtmosphereRequest#", "methodParameterName": "config#uuid#request#", "methodBody": "AtmosphereResource create(AtmosphereConfig config, String uuid, AtmosphereRequest request);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create an  {@link AtmosphereResource} associated with the uuid.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "478", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceFactory.remove", "methodParameterType": "String#", "methodParameterName": "uuid#", "methodBody": "AtmosphereResource remove(String uuid);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Remove the  {@link AtmosphereResource} from all instances of {@link Broadcaster}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "479", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceFactory.find", "methodParameterType": "String#", "methodParameterName": "uuid#", "methodBody": "AtmosphereResource find(String uuid);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Find an  {@link AtmosphereResource} based on its {@link org.atmosphere.cpr.AtmosphereResource#uuid()}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "480", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceFactory.locate", "methodParameterType": "String#Async#", "methodParameterName": "uuid#async#", "methodBody": "void locate(String uuid, Async async);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Locate an  {@link AtmosphereResource}, based on its  {@link org.atmosphere.cpr.AtmosphereResource#uuid()}, in a cluster. If the  {@link AtmosphereResource} is available in the cluster, the {@link org.atmosphere.cpr.AtmosphereResourceFactory.Async#available}callback will be invoked. If not, the  {@link org.atmosphere.cpr.AtmosphereResourceFactory.Async#notAvailable}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "481", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceFactory.broadcasters", "methodParameterType": "String#", "methodParameterName": "uuid#", "methodBody": "@Deprecated\n    Set<Broadcaster> broadcasters(String uuid);", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Return all  {@link Broadcaster} associated with a {@link AtmosphereResource#uuid}, e.g for which {@link Broadcaster#addAtmosphereResource(AtmosphereResource)} has been called. Note that thismethod is not synchronized and may not return all the  {@link Broadcaster} in case{@link Broadcaster#addAtmosphereResource(AtmosphereResource)} is being called concurrently.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "482", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceFactory.registerUuidForFindCandidate", "methodParameterType": "AtmosphereResource#", "methodParameterName": "r#", "methodBody": "void registerUuidForFindCandidate(AtmosphereResource r);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Register an  {@link AtmosphereResource} for being a candidate to {@link #find(String)} operation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "483", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceFactory.unRegisterUuidForFindCandidate", "methodParameterType": "AtmosphereResource#", "methodParameterName": "r#", "methodBody": "void unRegisterUuidForFindCandidate(AtmosphereResource r);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Un register an  {@link AtmosphereResource} for being a candidate to {@link #find(String)} operation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "484", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereObjectFactory.java", "methodName": "org.atmosphere.cpr.AtmosphereObjectFactory.newClassInstance", "methodParameterType": "Class<T>#Class<U>#", "methodParameterName": "classType#defaultType#", "methodBody": "public <T, U extends T> T newClassInstance(Class<T> classType, Class<U> defaultType) throws InstantiationException, IllegalAccessException;", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Delegate the creation of Object to the underlying object provider like Spring, Guice, etc. When creating a class, it is important to check if the class can be configured via its implementation of the  {@link org.atmosphere.inject.AtmosphereConfigAware}.  {@link org.atmosphere.inject.AtmosphereConfigAware#configure(AtmosphereConfig)}should be called in that case.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "485", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereObjectFactory.java", "methodName": "org.atmosphere.cpr.AtmosphereObjectFactory.allowInjectionOf", "methodParameterType": "Z#", "methodParameterName": "z#", "methodBody": "public AtmosphereObjectFactory allowInjectionOf(Z z);", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Pass information to the underlying Dependency Injection Implementation", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "486", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncSupport.java", "methodName": "org.atmosphere.cpr.AsyncSupport.getContainerName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContainerName();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the name of the Java Web Server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "487", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncSupport.java", "methodName": "org.atmosphere.cpr.AsyncSupport.init", "methodParameterType": "ServletConfig#", "methodParameterName": "sc#", "methodBody": "public void init(ServletConfig sc) throws ServletException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Initialize the WebServer using the  {@link ServletConfig}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "488", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncSupport.java", "methodName": "org.atmosphere.cpr.AsyncSupport.service", "methodParameterType": "AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "req#res#", "methodBody": "public Action service(AtmosphereRequest req, AtmosphereResponse res) throws IOException, ServletException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Serve the  {@link AtmosphereRequest} and the {@link AtmosphereResponse} and returnthe appropriate  {@link Action}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "489", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncSupport.java", "methodName": "org.atmosphere.cpr.AsyncSupport.action", "methodParameterType": "E#", "methodParameterName": "actionEvent#", "methodBody": "public void action(E actionEvent);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Process an  {@link Action} from an {@link ActionEvent} operation like suspend, resume or timed out.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "490", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncSupport.java", "methodName": "org.atmosphere.cpr.AsyncSupport.supportWebSocket", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean supportWebSocket();", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return true if this implementation supports the websocket protocol.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "491", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncSupport.java", "methodName": "org.atmosphere.cpr.AsyncSupport.complete", "methodParameterType": "E#", "methodParameterName": "r#", "methodBody": "public AsyncSupport complete(E r);", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Complete and close the connection associated with an implementation of  {@link org.atmosphere.cpr.AtmosphereResource}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "492", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEvent.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceEvent.getMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Object getMessage();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the object that was passed to  {@link Broadcaster#broadcast(java.lang.Object)}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "493", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEvent.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceEvent.setMessage", "methodParameterType": "Object#", "methodParameterName": "o#", "methodBody": "public AtmosphereResourceEvent setMessage(Object o);", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set an Object that can be retrieved with  {@link #getMessage()}. Note that the value may be overridden when {@link Broadcaster#broadcast(java.lang.Object)} gets invoked.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "494", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEvent.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceEvent.isResumedOnTimeout", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isResumedOnTimeout();", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return true is the response gets resumed after a timeout.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "495", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEvent.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceEvent.isCancelled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isCancelled();", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return true when the remote client close the connection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "496", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEvent.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceEvent.isSuspended", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isSuspended();", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return <tt>true</tt> if  {@link AtmosphereResource#suspend()} has been invoked and set to <tt>true</tt>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "497", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEvent.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceEvent.isResuming", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isResuming();", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return <tt>true</tt> if  {@link AtmosphereResource#resume()} has been invoked.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "498", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEvent.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceEvent.getResource", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AtmosphereResource getResource();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the  {@link AtmosphereResource} associated with this event.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "499", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEvent.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceEvent.isClosedByClient", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isClosedByClient();", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return true if the client closed the connection and send the Atmosphere close message. You must use the  {@link org.atmosphere.interceptor.OnDisconnectInterceptor} in order to receive the proper value,and atmosphereProtocol must be set to true on the client side (enabledProtocol is true by default).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "500", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEvent.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceEvent.isClosedByApplication", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isClosedByApplication();", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return true if the application closed the connection using  {@link org.atmosphere.cpr.AtmosphereResource#close()}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "501", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEvent.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceEvent.throwable", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Throwable throwable();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return a  {@link Throwable} if an unexpected exception occured.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "502", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEvent.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceEvent.broadcaster", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Broadcaster broadcaster();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the broadcaster associated with the  {@link AtmosphereResource} this object contains.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "503", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Universe.java", "methodName": "org.atmosphere.cpr.Universe.metaBroadcaster", "methodParameterType": "DefaultMetaBroadcaster#", "methodParameterName": "a#", "methodBody": "public static void metaBroadcaster(DefaultMetaBroadcaster a) {\n        if (metaBroadcaster != null) {\n            metaBroadcasterDuplicate = true;\n        }\n        metaBroadcaster = a;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the must be unique  {@link DefaultMetaBroadcaster}", "call_func_name": ["java.lang.IllegalStateException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "504", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Universe.java", "methodName": "org.atmosphere.cpr.Universe.broadcasterFactory", "methodParameterType": "BroadcasterFactory#", "methodParameterName": "a#", "methodBody": "public static void broadcasterFactory(BroadcasterFactory a) {\n        if (factory != null) {\n            factoryDuplicate = true;\n        }\n        factory = a;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the must be unique  {@link org.atmosphere.cpr.BroadcasterFactory}", "call_func_name": ["java.lang.IllegalStateException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "505", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Universe.java", "methodName": "org.atmosphere.cpr.Universe.framework", "methodParameterType": "AtmosphereFramework#", "methodParameterName": "a#", "methodBody": "public static void framework(AtmosphereFramework a) {\n        if (framework != null) {\n            frameworkDuplicate = true;\n        }\n        framework = a;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the must be unique  {@link org.atmosphere.cpr.AtmosphereFramework}", "call_func_name": ["java.lang.IllegalStateException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "506", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Universe.java", "methodName": "org.atmosphere.cpr.Universe.resourceFactory", "methodParameterType": "AtmosphereResourceFactory#", "methodParameterName": "a#", "methodBody": "public static void resourceFactory(AtmosphereResourceFactory a) {\n        if (resourceFactory != null) {\n            resourceFactoryDuplicate = true;\n        }\n        resourceFactory = a;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the must be unique  {@link AtmosphereResourceFactory}", "call_func_name": ["java.lang.IllegalStateException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "507", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Universe.java", "methodName": "org.atmosphere.cpr.Universe.sessionResourceFactory", "methodParameterType": "AtmosphereResourceSessionFactory#", "methodParameterName": "a#", "methodBody": "public static void sessionResourceFactory(\n            AtmosphereResourceSessionFactory a) {\n        if (sessionFactory != null) {\n            sessionFactoryDuplicate = true;\n        }\n        sessionFactory = a;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "<<<<<<< HEAD:modules/cpr/src/main/java/org/atmosphere/cpr/Universe.java Set the must be unique  {@link org.atmosphere.cpr.AtmosphereResourceSessionFactory}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "508", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Universe.java", "methodName": "org.atmosphere.cpr.Universe.broadcasterFactory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BroadcasterFactory broadcasterFactory() {\n        if (factoryDuplicate) {\n            throw new IllegalStateException(\n                    \"More than one instance has been stored. Universe cannot be used.\");\n        }\n        return factory;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link org.atmosphere.cpr.BroadcasterFactory}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "509", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Universe.java", "methodName": "org.atmosphere.cpr.Universe.framework", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static AtmosphereFramework framework() {\n        if (frameworkDuplicate) {\n            throw new IllegalStateException(\n                    \"More than one instance has been stored. Universe cannot be used.\");\n        }\n        return framework;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link org.atmosphere.cpr.AtmosphereFramework}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "510", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Universe.java", "methodName": "org.atmosphere.cpr.Universe.resourceFactory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static AtmosphereResourceFactory resourceFactory() {\n        if (resourceFactoryDuplicate) {\n            throw new IllegalStateException(\n                    \"More than one instance has been stored. Universe cannot be used.\");\n        }\n        return resourceFactory;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link AtmosphereResourceFactory}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "511", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Universe.java", "methodName": "org.atmosphere.cpr.Universe.sessionFactory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static AtmosphereResourceSessionFactory sessionFactory() {\n        if (sessionFactoryDuplicate) {\n            throw new IllegalStateException(\n                    \"More than one instance has been stored. Universe cannot be used.\");\n        }\n        return sessionFactory;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<<<<<<< HEAD:modules/cpr/src/main/java/org/atmosphere/cpr/Universe.java Return the  {@link org.atmosphere.cpr.AtmosphereResourceSessionFactory}Throw exception if Universe methods are used when they are not reliable:modules/runtime/src/main/java/org/atmosphere/runtime/Universe.java", "call_func_name": ["java.lang.IllegalStateException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "512", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Universe.java", "methodName": "org.atmosphere.cpr.Universe.metaBroadcaster", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static DefaultMetaBroadcaster metaBroadcaster() {\n        if (metaBroadcasterDuplicate) {\n            throw new IllegalStateException(\n                    \"More than one instance has been stored. Universe cannot be used.\");\n        }\n        return metaBroadcaster;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link DefaultMetaBroadcaster}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "513", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterCache.java", "methodName": "org.atmosphere.cpr.BroadcasterCache.start", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void start();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "This method is invoked when the Broadcaster is started.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "514", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterCache.java", "methodName": "org.atmosphere.cpr.BroadcasterCache.stop", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void stop();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "This method is invoked when the Broadcaster is stopped.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "515", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterCache.java", "methodName": "org.atmosphere.cpr.BroadcasterCache.cleanup", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void cleanup();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Clean resources associated with this instance. This method is useful when ExecutorServices are shared and some future must be cancelled. This method will always be invoked when a  {@link Broadcaster} gets destroyed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "516", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterCache.java", "methodName": "org.atmosphere.cpr.BroadcasterCache.addToCache", "methodParameterType": "String#String#BroadcastMessage#", "methodParameterName": "broadcasterId#uuid#message#", "methodBody": "CacheMessage addToCache(String broadcasterId, String uuid, BroadcastMessage message);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Start tracking messages associated with  {@link AtmosphereResource} from the cache.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "517", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterCache.java", "methodName": "org.atmosphere.cpr.BroadcasterCache.retrieveFromCache", "methodParameterType": "String#String#", "methodParameterName": "id#uuid#", "methodBody": "List<Object> retrieveFromCache(String id, String uuid);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Retrieve messages associated with  {@link AtmosphereResource}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "518", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterCache.java", "methodName": "org.atmosphere.cpr.BroadcasterCache.clearCache", "methodParameterType": "String#String#CacheMessage#", "methodParameterName": "broadcasterId#uuid#cache#", "methodBody": "BroadcasterCache clearCache(String broadcasterId, String uuid, CacheMessage cache);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Remove the previously cached message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "519", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterCache.java", "methodName": "org.atmosphere.cpr.BroadcasterCache.excludeFromCache", "methodParameterType": "String#AtmosphereResource#", "methodParameterName": "broadcasterId#r#", "methodBody": "BroadcasterCache excludeFromCache(String broadcasterId, AtmosphereResource r);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Allow an application to exclude, or block, an  {@link AtmosphereResource} to received cached message.No new message will get sent to this client except the ones already cached.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "520", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterCache.java", "methodName": "org.atmosphere.cpr.BroadcasterCache.cacheCandidate", "methodParameterType": "String#String#", "methodParameterName": "broadcasterId#uuid#", "methodBody": "BroadcasterCache cacheCandidate(String broadcasterId, String uuid);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Add a  {@link org.atmosphere.cpr.AtmosphereResource#uuid()} to the list of active {@link org.atmosphere.cpr.AtmosphereResource}Message will be cached for the resource associated with the uuid.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "521", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterCache.java", "methodName": "org.atmosphere.cpr.BroadcasterCache.inspector", "methodParameterType": "BroadcasterCacheInspector#", "methodParameterName": "interceptor#", "methodBody": "BroadcasterCache inspector(BroadcasterCacheInspector interceptor);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Add a  {@link BroadcasterCacheInspector} that will be invoked before a message gets added to the cache.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "522", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterCache.java", "methodName": "org.atmosphere.cpr.BroadcasterCache.addBroadcasterCacheListener", "methodParameterType": "BroadcasterCacheListener#", "methodParameterName": "l#", "methodBody": "BroadcasterCache addBroadcasterCacheListener(BroadcasterCacheListener l);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Add a  {@link BroadcasterCacheListener}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "523", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterCache.java", "methodName": "org.atmosphere.cpr.BroadcasterCache.removeBroadcasterCacheListener", "methodParameterType": "BroadcasterCacheListener#", "methodParameterName": "l#", "methodBody": "BroadcasterCache removeBroadcasterCacheListener(BroadcasterCacheListener l);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Remove a  {@link BroadcasterCacheListener}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "524", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/SessionTimeoutSupport.java", "methodName": "org.atmosphere.cpr.SessionTimeoutSupport.setupTimeout", "methodParameterType": "AtmosphereConfig#HttpSession#", "methodParameterName": "config#session#", "methodBody": "public static void setupTimeout(AtmosphereConfig config, HttpSession session) {\n        if (session == null)\n            return;\n\n        try {\n            SessionTimeoutRestorer restorer = getOrCreate(config, session);\n\n            restorer.setup(session);\n        } catch (Exception e) {\n            logger.trace(\"\", e);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement)ReturnStatement)IfStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Disable HTTP session timeout.", "call_func_name": ["org.atmosphere.cpr.SessionTimeoutSupport.getOrCreate", "org.atmosphere.cpr.SessionTimeoutRestorer.setup", "org.slf4j.Logger.trace"], "call_func_parameter": [["org.atmosphere.cpr.AtmosphereConfig", "javax.servlet.http.HttpSession"], ["javax.servlet.http.HttpSession"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "525", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/SessionTimeoutSupport.java", "methodName": "org.atmosphere.cpr.SessionTimeoutSupport.restoreTimeout", "methodParameterType": "HttpSession#", "methodParameterName": "session#", "methodBody": "public static void restoreTimeout(HttpSession session) {\n        if (session == null)\n            return;\n\n        try {\n            SessionTimeoutRestorer restorer = get(session);\n\n            if (restorer != null)\n                restorer.restore(session);\n        } catch (Exception e) {\n            logger.trace(\"\", e);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement)ReturnStatement)IfStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Try to restore HTTP session timeout that was set before disabling it.", "call_func_name": ["org.atmosphere.cpr.SessionTimeoutSupport.get", "org.atmosphere.cpr.SessionTimeoutRestorer.restore", "org.slf4j.Logger.trace"], "call_func_parameter": [["javax.servlet.http.HttpSession"], ["javax.servlet.http.HttpSession"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "526", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/MetaBroadcaster.java", "methodName": "org.atmosphere.cpr.MetaBroadcaster.broadcastTo", "methodParameterType": "String#Object#", "methodParameterName": "broadcasterID#message#", "methodBody": "Future<List<Broadcaster>> broadcastTo(String broadcasterID, Object message);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Broadcast the message to all Broadcasters whose  {@link org.atmosphere.cpr.Broadcaster#getID()} matches the broadcasterID value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "527", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/MetaBroadcaster.java", "methodName": "org.atmosphere.cpr.MetaBroadcaster.broadcastTo", "methodParameterType": "String#Object#boolean#", "methodParameterName": "broadcasterID#message#cacheMessage#", "methodBody": "Future<List<Broadcaster>> broadcastTo(String broadcasterID, Object message, boolean cacheMessage);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Broadcast the message to all Broadcasters whose  {@link org.atmosphere.cpr.Broadcaster#getID()} matches the broadcasterID value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "528", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/MetaBroadcaster.java", "methodName": "org.atmosphere.cpr.MetaBroadcaster.scheduleTo", "methodParameterType": "String#Object#int#TimeUnit#", "methodParameterName": "broadcasterID#message#time#unit#", "methodBody": "Future<List<Broadcaster>> scheduleTo(String broadcasterID, Object message, int time, TimeUnit unit);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Broadcast the message at a fixed rate to all Broadcasters whose  {@link org.atmosphere.cpr.Broadcaster#getID()}matches the broadcasterID value. This operation will invoke  {@link Broadcaster#scheduleFixedBroadcast(Object,long,java.util.concurrent.TimeUnit)}}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "529", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/MetaBroadcaster.java", "methodName": "org.atmosphere.cpr.MetaBroadcaster.delayTo", "methodParameterType": "String#Object#int#TimeUnit#", "methodParameterName": "broadcasterID#message#time#unit#", "methodBody": "Future<List<Broadcaster>> delayTo(String broadcasterID, Object message, int time, TimeUnit unit);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Delay the message delivery to Broadcasters whose  {@link org.atmosphere.cpr.Broadcaster#getID()}matches the broadcasterID value. This operation will invoke  {@link Broadcaster#delayBroadcast(Object,long,java.util.concurrent.TimeUnit)} (Object, long, java.util.concurrent.TimeUnit)}}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "530", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/MetaBroadcaster.java", "methodName": "org.atmosphere.cpr.MetaBroadcaster.addBroadcasterListener", "methodParameterType": "BroadcasterListener#", "methodParameterName": "b#", "methodBody": "MetaBroadcaster addBroadcasterListener(BroadcasterListener b);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Add a  {@link BroadcasterListener} to all mapped {@link Broadcaster}s.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "531", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/MetaBroadcaster.java", "methodName": "org.atmosphere.cpr.MetaBroadcaster.removeBroadcasterListener", "methodParameterType": "BroadcasterListener#", "methodParameterName": "b#", "methodBody": "MetaBroadcaster removeBroadcasterListener(BroadcasterListener b);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Remove the  {@link BroadcasterListener}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "532", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/MetaBroadcaster.java", "methodName": "org.atmosphere.cpr.MetaBroadcaster.cache", "methodParameterType": "DefaultMetaBroadcaster.MetaBroadcasterCache#", "methodParameterName": "cache#", "methodBody": "MetaBroadcaster cache(DefaultMetaBroadcaster.MetaBroadcasterCache cache);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set the  {@link MetaBroadcasterCache}. Default is  {@link NoCache}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "533", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/PerRequestBroadcastFilter.java", "methodName": "org.atmosphere.cpr.PerRequestBroadcastFilter.filter", "methodParameterType": "String#AtmosphereResource#Object#Object#", "methodParameterName": "broadcasterId#r#originalMessage#message#", "methodBody": "BroadcastAction filter(String broadcasterId, AtmosphereResource r, Object originalMessage, Object message);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Transform or filter a message per  {@link AtmosphereResource}. Be careful when setting headers on the {@link AtmosphereResponse} as the headers may have been already sent back to the browser.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "534", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceImpl.initialize", "methodParameterType": "AtmosphereConfig#Broadcaster#AtmosphereRequest#AtmosphereResponse#AsyncSupport#AtmosphereHandler#", "methodParameterName": "config#broadcaster#req#response#asyncSupport#atmosphereHandler#", "methodBody": "@Override\n    public AtmosphereResource initialize(AtmosphereConfig config, Broadcaster broadcaster,\n                                         AtmosphereRequest req, AtmosphereResponse response,\n                                         AsyncSupport asyncSupport, AtmosphereHandler atmosphereHandler) {\n        this.req = req;\n        this.response = response;\n        this.config = config;\n        this.asyncSupport = asyncSupport;\n        this.atmosphereHandler = atmosphereHandler;\n        this.event = new AtmosphereResourceEventImpl(this);\n\n        this.broadcaster = broadcaster;\n        uniqueBroadcaster(broadcaster);\n\n        String s = (String) req.getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);\n        if (s == null) {\n            s = response.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);\n            if (s == null && req != null) {\n                String tmp = req.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);\n                s = tmp != null && !tmp.equalsIgnoreCase(\"0\") ? tmp : null;\n            }\n        }\n        setUUID(s == null ? config.uuidProvider().generateUuid() : s);\n\n        if (config.isSupportSession()) {\n            // Keep a reference to an HttpSession in case the associated request get recycled by the underlying container.\n            try {\n                session = req.getSession(config.getInitParameter(PROPERTY_SESSION_CREATE, true));\n            } catch (NullPointerException ex) {\n                // http://java.net/jira/browse/GLASSFISH-18856\n                logger.trace(\"http://java.net/jira/browse/GLASSFISH-18856\", ex);\n            }\n        }\n        transport = configureTransport();\n        closeOnCancel = config.getInitParameter(ApplicationConfig.CLOSE_STREAM_ON_CANCEL, false);\n        return this;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ThisExpression#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#NullLiteral#ConditionalExpression#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#ConditionalExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression)InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)ConditionalExpression)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ConditionalExpression)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Initialize an  {@link AtmosphereResource}.", "call_func_name": ["org.atmosphere.cpr.AtmosphereResourceEventImpl.<init>", "org.atmosphere.cpr.AtmosphereResourceImpl.uniqueBroadcaster", "org.atmosphere.cpr.AtmosphereRequest.getAttribute", "org.atmosphere.cpr.AtmosphereResponse.getHeader", "org.atmosphere.cpr.AtmosphereRequest.getHeader", "java.lang.String.equalsIgnoreCase", "org.atmosphere.cpr.AtmosphereConfig.uuidProvider", "org.atmosphere.util.UUIDProvider.generateUuid", "org.atmosphere.cpr.AtmosphereResourceImpl.setUUID", "org.atmosphere.cpr.AtmosphereConfig.isSupportSession", "org.atmosphere.cpr.AtmosphereConfig.getInitParameter", "org.atmosphere.cpr.AtmosphereRequest.getSession", "org.slf4j.Logger.trace", "org.atmosphere.cpr.AtmosphereResourceImpl.configureTransport"], "call_func_parameter": [["org.atmosphere.cpr.AtmosphereResourceImpl"], ["org.atmosphere.cpr.Broadcaster"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], ["java.lang.String", "boolean"], ["boolean"], ["java.lang.String", "java.lang.Throwable"], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequest.getAttribute": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.getHeader": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereConfig.uuidProvider": "Return the  {@link org.atmosphere.util.UUIDProvider}"}, {"org.atmosphere.cpr.AtmosphereConfig.isSupportSession": "Is  {@link javax.servlet.http.HttpSession} supported."}, {"org.atmosphere.cpr.AtmosphereConfig.getInitParameter": "Return an init-param, or its default value."}, {"org.atmosphere.cpr.AtmosphereRequest.getSession": "{@inheritDoc}"}]}, {"index": "535", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceImpl.transport", "methodParameterType": "TRANSPORT#", "methodParameterName": "transport#", "methodBody": "public AtmosphereResourceImpl transport(TRANSPORT transport) {\n        this.transport = transport;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Manually set the  {@link TRANSPORT}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "536", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceImpl.action", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Action action() {\n        return action;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link Action} which represent the state of the response, e.g. suspended, resumed or timed out.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "537", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceImpl.reset", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void reset() {\n        isResumed.set(false);\n        isCancelled.set(false);\n        isPendingClose.set(false);\n        isInScope.set(true);\n        isSuspendEvent.set(false);\n        listeners.clear();\n        action.type(Action.TYPE.CREATED);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Completely reset the instance to its initial state.", "call_func_name": ["java.util.concurrent.atomic.AtomicBoolean.set", "java.util.concurrent.ConcurrentLinkedQueue.clear"], "call_func_parameter": [["boolean"], [""]], "passed_comments": "/"}, {"index": "538", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceImpl.setIsInScope", "methodParameterType": "boolean#", "methodParameterName": "isInScope#", "methodBody": "public void setIsInScope(boolean isInScope) {\n        this.isInScope.set(isInScope);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Protect the object from being used after it got cancelled.", "call_func_name": ["java.util.concurrent.atomic.AtomicBoolean.set"], "call_func_parameter": [["boolean"]], "passed_comments": "/"}, {"index": "539", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceImpl.isInScope", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isInScope() {\n        return isInScope.get();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if the  {@link AtmosphereRequest} still is valid.", "call_func_name": ["java.util.concurrent.atomic.AtomicBoolean.get"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "540", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceImpl.setSerializer", "methodParameterType": "Serializer#", "methodParameterName": "s#", "methodBody": "@Override\n    public AtmosphereResource setSerializer(Serializer s) {\n        serializer = s;\n        return this;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set the  {@link Serializer} used to write broadcasted objects.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "541", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceImpl.addEventListener", "methodParameterType": "AtmosphereResourceEventListener#", "methodParameterName": "e#", "methodBody": "@Override\n    public AtmosphereResource addEventListener(AtmosphereResourceEventListener e) {\n        if (listeners.contains(e)) return this;\n        listeners.add(e);\n        return this;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ThisExpression#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add a  {@link AtmosphereResourceEventListener}.", "call_func_name": ["java.util.concurrent.ConcurrentLinkedQueue.contains", "java.util.concurrent.ConcurrentLinkedQueue.add"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "542", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceImpl.onThrowable", "methodParameterType": "Throwable#", "methodParameterName": "t#", "methodBody": "public void onThrowable(Throwable t) {\n        onThrowable(new AtmosphereResourceEventImpl(this, false, false, t));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#ThisExpression#BooleanLiteral#BooleanLiteral#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Notify  {@link AtmosphereResourceEventListener} thah an unexpected exception occured.", "call_func_name": ["org.atmosphere.cpr.AtmosphereResourceEventImpl.<init>", "org.atmosphere.cpr.AtmosphereResourceImpl.onThrowable"], "call_func_parameter": [["org.atmosphere.cpr.AtmosphereResourceImpl", "boolean", "boolean", "java.lang.Throwable"], ["org.atmosphere.cpr.AtmosphereResourceEvent"]], "passed_comments": "/"}, {"index": "543", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceImpl.onHeartbeat", "methodParameterType": "AtmosphereResourceEvent#", "methodParameterName": "e#", "methodBody": "void onHeartbeat(AtmosphereResourceEvent e) {\n        for (AtmosphereResourceEventListener r : listeners) {\n            r.onHeartbeat(e);\n        }\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "<p> Notifies to all listeners that a heartbeat has been sent. </p>", "call_func_name": ["java.util.concurrent.ConcurrentLinkedQueue.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.atmosphere.cpr.AtmosphereResourceEventListener.onHeartbeat"], "call_func_parameter": [[""], [""], [""], ["org.atmosphere.cpr.AtmosphereResourceEvent"]], "passed_comments": "/"}, {"index": "544", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceImpl.disableSuspendEvent", "methodParameterType": "boolean#", "methodParameterName": "disableSuspendEvent#", "methodBody": "public AtmosphereResourceImpl disableSuspendEvent(boolean disableSuspendEvent) {\n        this.disableSuspendEvent = disableSuspendEvent;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Disable invocation of  {@link AtmosphereResourceEventListener#onSuspend(AtmosphereResourceEvent)} and{@link AtmosphereResourceEventListener#onPreSuspend(AtmosphereResourceEvent)}. You normally disable those events after the first onSuspend has been called so all transports behave the same way. <br/> {@link AtmosphereResourceEventListener} marked with {@link org.atmosphere.interceptor.AllowInterceptor} will notbe affected by this property.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "545", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceImpl.disableSuspendEvent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean disableSuspendEvent() {\n        return disableSuspendEvent;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if  {@link AtmosphereResourceEventListener#onSuspend(AtmosphereResourceEvent)} and{@link AtmosphereResourceEventListener#onPreSuspend(AtmosphereResourceEvent)} events are disabled.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "546", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java", "methodName": "org.atmosphere.cpr.AtmosphereResourceImpl.isPendingClose", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isPendingClose () {\n        return isPendingClose.get();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return", "call_func_name": ["java.util.concurrent.atomic.AtomicBoolean.get"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "547", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcastFilter.java", "methodName": "org.atmosphere.cpr.BroadcastFilter.filter", "methodParameterType": "String#Object#Object#", "methodParameterName": "broadcasterId#originalMessage#message#", "methodBody": "BroadcastAction filter(String broadcasterId, Object originalMessage, Object message);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Transform or filter a message. Return BroadcastAction(ACTION.ABORT, message) {@link Broadcaster} to discard the message, eg. to not broadcast it.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "548", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequestImpl.java", "methodName": "org.atmosphere.cpr.AtmosphereRequestImpl.newInstance", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final static AtmosphereRequest newInstance() {\n        return new Builder().build();\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create an instance of this class without an associated  {@link HttpServletRequest}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "549", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequestImpl.java", "methodName": "org.atmosphere.cpr.AtmosphereRequestImpl.wrap", "methodParameterType": "HttpServletRequest#", "methodParameterName": "request#", "methodBody": "public final static AtmosphereRequest wrap(HttpServletRequest request) {\n        // Do not rewrap.\n        if (AtmosphereRequestImpl.class.isAssignableFrom(request.getClass())) {\n            return AtmosphereRequestImpl.class.cast(request);\n        }\n\n        Builder b = new Builder();\n        Enumeration<String> e = request.getAttributeNames();\n        String s;\n        while (e.hasMoreElements()) {\n            s = e.nextElement();\n            b.localAttributes.put(s, attributeWithoutException(request, s));\n        }\n        return b.request(request).build();\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ReturnStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)WhileStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Wrap an  {@link HttpServletRequest}.", "call_func_name": ["java.lang.Object.getClass", "java.lang.Class.isAssignableFrom", "java.lang.Class.cast", "javax.servlet.http.HttpServletRequest.getAttributeNames", "java.util.Enumeration.hasMoreElements", "java.util.Enumeration.nextElement", "org.atmosphere.cpr.AtmosphereRequestImpl.attributeWithoutException"], "call_func_parameter": [[""], ["java.lang.Class"], ["java.lang.Object"], [""], [""], [""], ["javax.servlet.http.HttpServletRequest", "java.lang.String"]], "passed_comments": "/"}, {"index": "550", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequestImpl.java", "methodName": "org.atmosphere.cpr.AtmosphereRequestImpl.cloneRequest", "methodParameterType": "HttpServletRequest#boolean#boolean#boolean#boolean#", "methodParameterName": "request#loadInMemory#copySession#isDestroyable#createSession#", "methodBody": "public final static AtmosphereRequest cloneRequest(HttpServletRequest request, boolean loadInMemory, boolean copySession, boolean isDestroyable, boolean createSession) {\n        Builder b;\n        HttpServletRequest r;\n\n        Cookie[] cs = request.getCookies();\n        Set<Cookie> hs = Collections.synchronizedSet(new HashSet());\n        if (cs != null) {\n            for (Cookie c : cs) {\n                hs.add(c);\n            }\n        }\n\n        boolean isWrapped = false;\n        if (AtmosphereRequestImpl.class.isAssignableFrom(request.getClass())) {\n            b = AtmosphereRequestImpl.class.cast(request).b;\n            isWrapped = true;\n        } else {\n            b = new Builder();\n            b.request(request);\n        }\n\n        HttpSession session = request.getSession(false);\n        if (copySession) {\n            session = request.getSession(createSession);\n            if (session != null) {\n                session = new FakeHttpSession(session);\n            } else {\n                session = new FakeHttpSession(\"\", null, System.currentTimeMillis(), -1);\n            }\n        }\n\n        b.servletPath(request.getServletPath())\n                .pathInfo(request.getPathInfo())\n                .contextPath(request.getContextPath())\n                .requestURI(request.getRequestURI())\n                .requestURL(request.getRequestURL().toString())\n                .method(request.getMethod())\n                .serverName(request.getServerName())\n                .serverPort(request.getServerPort())\n                .remoteAddr(request.getRemoteAddr())\n                .remoteHost(request.getRemoteHost())\n                .remotePort(request.getRemotePort())\n                .destroyable(isDestroyable)\n                .cookies(hs)\n                .session(session)\n                .principal(request.getUserPrincipal())\n                .authType(request.getAuthType())\n                .isSSecure(request.isSecure());\n\n        if (loadInMemory) {\n            String s = (String) attributeWithoutException(request, FrameworkConfig.THROW_EXCEPTION_ON_CLONED_REQUEST);\n            boolean throwException = s != null && Boolean.parseBoolean(s);\n            r = new NoOpsRequest(throwException);\n            if (isWrapped) {\n                load(b.request, b);\n            } else {\n                load(request, b);\n            }\n            b.request(r);\n        }\n\n        return isWrapped ? AtmosphereRequestImpl.class.cast(request) : b.build();\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#Assignment#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#StringLiteral#NullLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#PrefixExpression#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(FieldAccess(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ConditionalExpression(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Copy the HttpServletRequest content inside an AtmosphereRequest. By default the returned AtmosphereRequest is not destroyable.", "call_func_name": ["javax.servlet.http.HttpServletRequest.getCookies", "java.util.HashSet.<init>", "java.util.Collections.synchronizedSet", "java.util.Set.add", "java.lang.Object.getClass", "java.lang.Class.isAssignableFrom", "java.lang.Class.cast", "javax.servlet.http.HttpServletRequest.getSession", "org.atmosphere.util.FakeHttpSession.<init>", "java.lang.System.currentTimeMillis", "org.atmosphere.util.FakeHttpSession.<init>", "javax.servlet.http.HttpServletRequest.getServletPath", "javax.servlet.http.HttpServletRequest.getPathInfo", "javax.servlet.http.HttpServletRequest.getContextPath", "javax.servlet.http.HttpServletRequest.getRequestURI", "javax.servlet.http.HttpServletRequest.getRequestURL", "java.lang.StringBuffer.toString", "javax.servlet.http.HttpServletRequest.getMethod", "javax.servlet.http.HttpServletRequest.getServerName", "javax.servlet.http.HttpServletRequest.getServerPort", "javax.servlet.http.HttpServletRequest.getRemoteAddr", "javax.servlet.http.HttpServletRequest.getRemoteHost", "javax.servlet.http.HttpServletRequest.getRemotePort", "javax.servlet.http.HttpServletRequest.getUserPrincipal", "javax.servlet.http.HttpServletRequest.getAuthType", "javax.servlet.http.HttpServletRequest.isSecure", "org.atmosphere.cpr.AtmosphereRequestImpl.attributeWithoutException", "java.lang.Boolean.parseBoolean"], "call_func_parameter": [[""], [""], ["java.util.Set"], ["java.lang.Object"], [""], ["java.lang.Class"], ["java.lang.Object"], ["boolean"], ["javax.servlet.http.HttpSession"], [""], ["java.lang.String", "javax.servlet.ServletContext", "long", "int"], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], ["javax.servlet.http.HttpServletRequest", "java.lang.String"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "551", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncSupportListener.java", "methodName": "org.atmosphere.cpr.AsyncSupportListener.onSuspend", "methodParameterType": "AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "request#response#", "methodBody": "void onSuspend(AtmosphereRequest request, AtmosphereResponse response);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when an  {@link AtmosphereResource} gets suspended.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "552", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncSupportListener.java", "methodName": "org.atmosphere.cpr.AsyncSupportListener.onResume", "methodParameterType": "AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "request#response#", "methodBody": "void onResume(AtmosphereRequest request, AtmosphereResponse response);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when an  {@link AtmosphereResource} gets resumed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "553", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncSupportListener.java", "methodName": "org.atmosphere.cpr.AsyncSupportListener.onTimeout", "methodParameterType": "AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "request#response#", "methodBody": "void onTimeout(AtmosphereRequest request, AtmosphereResponse response);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when an  {@link AtmosphereResource} times out.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "554", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncSupportListener.java", "methodName": "org.atmosphere.cpr.AsyncSupportListener.onClose", "methodParameterType": "AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "request#response#", "methodBody": "void onClose(AtmosphereRequest request, AtmosphereResponse response);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when an  {@link AtmosphereResource} gets closed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "555", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AsyncSupportListener.java", "methodName": "org.atmosphere.cpr.AsyncSupportListener.onDestroyed", "methodParameterType": "AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "request#response#", "methodBody": "void onDestroyed(AtmosphereRequest request, AtmosphereResponse response);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when an  {@link AtmosphereResource} gets destroyed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "556", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "methodName": "org.atmosphere.cpr.Meteor.lookup", "methodParameterType": "HttpServletRequest#", "methodParameterName": "r#", "methodBody": "public static Meteor lookup(HttpServletRequest r) {\n        Object o = r.getAttribute(METEOR);\n        return o == null ? null : Meteor.class.isAssignableFrom(o.getClass()) ? Meteor.class.cast(o) : null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(NullLiteral)NullLiteral(ConditionalExpression(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve an instance of  {@link Meteor} based on the {@link HttpServletRequest}.", "call_func_name": ["javax.servlet.http.HttpServletRequest.getAttribute", "java.lang.Object.getClass", "java.lang.Class.isAssignableFrom", "java.lang.Class.cast"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.Class"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "557", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "methodName": "org.atmosphere.cpr.Meteor.build", "methodParameterType": "HttpServletRequest#", "methodParameterName": "r#", "methodBody": "public final static Meteor build(HttpServletRequest r) {\n        return build(r, null);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a  {@link Meteor} using the {@link HttpServletRequest}.", "call_func_name": ["org.atmosphere.cpr.Meteor.build"], "call_func_parameter": [["javax.servlet.http.HttpServletRequest", "org.atmosphere.cpr.Serializer"]], "passed_comments": [{"org.atmosphere.cpr.Meteor.build": "Create a  {@link Meteor} using the {@link HttpServletRequest} and use the{@link Serializer} for writing the result of a broadcast operation usingthe  {@link HttpServletResponse}."}]}, {"index": "558", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "methodName": "org.atmosphere.cpr.Meteor.build", "methodParameterType": "HttpServletRequest#Serializer#", "methodParameterName": "r#s#", "methodBody": "public final static Meteor build(HttpServletRequest r, Serializer s) {\n        return build(r, null, s);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a  {@link Meteor} using the {@link HttpServletRequest} and use the{@link Serializer} for writing the result of a broadcast operation usingthe  {@link HttpServletResponse}.", "call_func_name": ["org.atmosphere.cpr.Meteor.build"], "call_func_parameter": [["javax.servlet.http.HttpServletRequest", "java.util.List", "org.atmosphere.cpr.Serializer"]], "passed_comments": [{"org.atmosphere.cpr.Meteor.build": "Create a  {@link Meteor} using the {@link HttpServletRequest} and use a list of{@link BroadcastFilter} and {@link Serializer} for writing the resultof a broadcast operation the  {@link HttpServletResponse}."}]}, {"index": "559", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "methodName": "org.atmosphere.cpr.Meteor.build", "methodParameterType": "HttpServletRequest#List<BroadcastFilter>#Serializer#", "methodParameterName": "req#l#s#", "methodBody": "public final static Meteor build(HttpServletRequest req, List<BroadcastFilter> l, Serializer s) {\n        return build(req, Broadcaster.SCOPE.APPLICATION, l, s);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a  {@link Meteor} using the {@link HttpServletRequest} and use a list of{@link BroadcastFilter} and {@link Serializer} for writing the resultof a broadcast operation the  {@link HttpServletResponse}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "560", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "methodName": "org.atmosphere.cpr.Meteor.build", "methodParameterType": "HttpServletRequest#Broadcaster.SCOPE#List<BroadcastFilter>#Serializer#", "methodParameterName": "req#scope#l#s#", "methodBody": "public final static Meteor build(HttpServletRequest req, Broadcaster.SCOPE scope,\n                                     List<BroadcastFilter> l, Serializer s) {\n        AtmosphereResource r =\n                (AtmosphereResource)\n                        req.getAttribute(ATMOSPHERE_RESOURCE);\n        if (r == null) throw new IllegalStateException(\"MeteorServlet not defined in web.xml\");\n\n        Broadcaster b = null;\n        if (scope == Broadcaster.SCOPE.REQUEST) {\n            try {\n                BroadcasterFactory f = r.getAtmosphereConfig().getBroadcasterFactory();\n                b = f.get(DefaultBroadcaster.class, DefaultBroadcaster.class.getSimpleName()\n                        + r.getAtmosphereConfig().uuidProvider().generateUuid());\n            } catch (Throwable t) {\n                throw new RuntimeException(t);\n            }\n            b.setScope(scope);\n            r.setBroadcaster(b);\n            req.setAttribute(AtmosphereResourceImpl.SKIP_BROADCASTER_CREATION, Boolean.TRUE);\n        }\n\n        Meteor m = new Meteor(r, l, (s != null ? s : r.getSerializer()));\n        req.setAttribute(METEOR, m);\n        return m;\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#ParenthesizedExpression#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(InfixExpression(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(ParenthesizedExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ParenthesizedExpression)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a  {@link Meteor} using the {@link HttpServletRequest} and use a list of{@link BroadcastFilter} and {@link Serializer} for writing the resultof a broadcast operation the  {@link HttpServletResponse}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "561", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "methodName": "org.atmosphere.cpr.Meteor.suspend", "methodParameterType": "long#", "methodParameterName": "l#", "methodBody": "public Meteor suspend(long l) {\n        if (destroyed()) return null;\n        r.suspend(l);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Suspend the underlying  {@link HttpServletResponse}. Passing a value of -1 suspends the response forever.", "call_func_name": ["org.atmosphere.cpr.Meteor.destroyed", "org.atmosphere.cpr.AtmosphereResource.suspend"], "call_func_parameter": [[""], ["long"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.suspend": "Suspend the  {@link AtmosphereResponse}. Suspending a  {@link AtmosphereResponse} will tell the underlyingcontainer to avoid recycling objects associated with the current instance, and also to avoid committing response. Invoking this method when a request is being timed out (e.g.  {@link AtmosphereResourceEvent#isResumedOnTimeout}returns true) has no effect. <p/>"}]}, {"index": "562", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "methodName": "org.atmosphere.cpr.Meteor.resumeOnBroadcast", "methodParameterType": "boolean#", "methodParameterName": "resumeOnBroadcast#", "methodBody": "public Meteor resumeOnBroadcast(boolean resumeOnBroadcast) {\n        r.resumeOnBroadcast(resumeOnBroadcast);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Resume the Meteor after the first broadcast operation. This is useful when long-polling is used.", "call_func_name": ["org.atmosphere.cpr.AtmosphereResource.resumeOnBroadcast"], "call_func_parameter": [["boolean"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.resumeOnBroadcast": "Set to true to resume the response after the first broadcast. False by default."}]}, {"index": "563", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "methodName": "org.atmosphere.cpr.Meteor.transport", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AtmosphereResource.TRANSPORT transport() {\n        return r.transport();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the current  {@link org.atmosphere.cpr.AtmosphereResource.TRANSPORT}. The transport needs to be explicitly set by the client by adding the appropriate  {@link HeaderConfig#X_ATMOSPHERE_TRANSPORT} value,which can be long-polling, streaming, websocket or JSONP.", "call_func_name": ["org.atmosphere.cpr.AtmosphereResource.transport"], "call_func_parameter": [[""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.transport": "Return the current  {@link TRANSPORT}. The transport value is retrieved using the  {@link HeaderConfig#X_ATMOSPHERE_TRANSPORT}header value."}]}, {"index": "564", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "methodName": "org.atmosphere.cpr.Meteor.suspend", "methodParameterType": "long#TimeUnit#", "methodParameterName": "timeout#timeunit#", "methodBody": "public Meteor suspend(long timeout, TimeUnit timeunit) {\n        if (destroyed()) return null;\n        r.suspend(timeout, timeunit);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Suspend the underlying  {@link HttpServletResponse}. Passing a value of -1 suspends the response forever.", "call_func_name": ["org.atmosphere.cpr.Meteor.destroyed", "org.atmosphere.cpr.AtmosphereResource.suspend"], "call_func_parameter": [[""], ["long", "java.util.concurrent.TimeUnit"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.suspend": "Suspend the  {@link AtmosphereResponse}. Suspending a  {@link AtmosphereResponse} will tell the underlyingcontainer to avoid recycling objects associated with the current instance, and also to avoid committing response. Invoking this method when a request is being timed out (e.g.  {@link AtmosphereResourceEvent#isResumedOnTimeout}returns true) has no effect. <p/>"}]}, {"index": "565", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "methodName": "org.atmosphere.cpr.Meteor.resume", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Meteor resume() {\n        if (destroyed()) return null;\n        r.resume();\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Resume the underlying  {@link HttpServletResponse}.", "call_func_name": ["org.atmosphere.cpr.Meteor.destroyed", "org.atmosphere.cpr.AtmosphereResource.resume"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.resume": "Complete the  {@link AtmosphereResponse} and finish/commit it. If the {@link AtmosphereResponse} is in theprocess of being resumed, invoking this method has no effect."}]}, {"index": "566", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "methodName": "org.atmosphere.cpr.Meteor.broadcast", "methodParameterType": "Object#", "methodParameterName": "o#", "methodBody": "public Meteor broadcast(Object o) {\n        if (destroyed()) return null;\n        r.getBroadcaster().broadcast(o);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Broadcast an  {@link Object} to all suspended responses.", "call_func_name": ["org.atmosphere.cpr.Meteor.destroyed", "org.atmosphere.cpr.AtmosphereResource.getBroadcaster", "org.atmosphere.cpr.Broadcaster.broadcast"], "call_func_parameter": [[""], [""], ["java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.getBroadcaster": "Return the first added  {@link Broadcaster}."}, {"org.atmosphere.cpr.Broadcaster.broadcast": "Broadcast the  {@link Object} to all suspended responses, eg. invoke {@link AtmosphereHandler#onStateChange}."}]}, {"index": "567", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "methodName": "org.atmosphere.cpr.Meteor.schedule", "methodParameterType": "Object#long#", "methodParameterName": "o#period#", "methodBody": "public Meteor schedule(Object o, long period) {\n        if (destroyed()) return null;\n        r.getBroadcaster().scheduleFixedBroadcast(o, period, TimeUnit.SECONDS);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Schedule a periodic broadcast, in seconds.", "call_func_name": ["org.atmosphere.cpr.Meteor.destroyed", "org.atmosphere.cpr.AtmosphereResource.getBroadcaster", "org.atmosphere.cpr.Broadcaster.scheduleFixedBroadcast"], "call_func_parameter": [[""], [""], ["java.lang.Object", "long", "java.util.concurrent.TimeUnit"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.getBroadcaster": "Return the first added  {@link Broadcaster}."}, {"org.atmosphere.cpr.Broadcaster.scheduleFixedBroadcast": "Broadcast periodically. The  {@link Object} will be broadcasted after every periodspecified time frame expires. If the  {@link TimeUnit} is set to null, the{@link Object} will be broadcasted when the first {@link #broadcast(java.lang.Object)}is invoked."}]}, {"index": "568", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "methodName": "org.atmosphere.cpr.Meteor.delayBroadadcast", "methodParameterType": "Object#long#", "methodParameterName": "o#period#", "methodBody": "public Meteor delayBroadadcast(Object o, long period) {\n        if (destroyed()) return null;\n        r.getBroadcaster().delayBroadcast(o, period, TimeUnit.SECONDS);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Schedule a delayed broadcast, in seconds.", "call_func_name": ["org.atmosphere.cpr.Meteor.destroyed", "org.atmosphere.cpr.AtmosphereResource.getBroadcaster", "org.atmosphere.cpr.Broadcaster.delayBroadcast"], "call_func_parameter": [[""], [""], ["java.lang.Object", "long", "java.util.concurrent.TimeUnit"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.getBroadcaster": "Return the first added  {@link Broadcaster}."}, {"org.atmosphere.cpr.Broadcaster.delayBroadcast": "Delay the broadcast operation. The  {@link Object} will be broadcasted once thespecified delay expires or when  {@link #broadcast(java.lang.Object)} is invoked the first time."}]}, {"index": "569", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "methodName": "org.atmosphere.cpr.Meteor.getBroadcaster", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Broadcaster getBroadcaster() {\n        if (destroyed()) return null;\n        return r.getBroadcaster();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the underlying  {@link Broadcaster}.", "call_func_name": ["org.atmosphere.cpr.Meteor.destroyed", "org.atmosphere.cpr.AtmosphereResource.getBroadcaster"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.getBroadcaster": "Return the first added  {@link Broadcaster}."}]}, {"index": "570", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "methodName": "org.atmosphere.cpr.Meteor.setBroadcaster", "methodParameterType": "Broadcaster#", "methodParameterName": "b#", "methodBody": "public void setBroadcaster(Broadcaster b) {\n        if (destroyed()) return;\n        r.setBroadcaster(b);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(ReturnStatement)ReturnStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set a  {@link Broadcaster} instance.", "call_func_name": ["org.atmosphere.cpr.Meteor.destroyed", "org.atmosphere.cpr.AtmosphereResource.setBroadcaster"], "call_func_parameter": [[""], ["org.atmosphere.cpr.Broadcaster"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.setBroadcaster": "Set the first  {@link Broadcaster} associated with this resource. This {@link org.atmosphere.cpr.Broadcaster}will be returned when  {@link #getBroadcaster()} is invoked."}]}, {"index": "571", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "methodName": "org.atmosphere.cpr.Meteor.attachement", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Object attachement() {\n        return o;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return an  {@link Object} with this {@link Meteor}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "572", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "methodName": "org.atmosphere.cpr.Meteor.attach", "methodParameterType": "Object#", "methodParameterName": "o#", "methodBody": "public void attach(Object o) {\n        this.o = o;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Attach an  {@link Object} with this {@link Meteor}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "573", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "methodName": "org.atmosphere.cpr.Meteor.addListener", "methodParameterType": "AtmosphereResourceEventListener#", "methodParameterName": "e#", "methodBody": "public Meteor addListener(AtmosphereResourceEventListener e) {\n        if (!destroyed()) {\n            r.addEventListener(e);\n        }\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add a  {@link AtmosphereResourceEventListener} which gets invoked whenresponses are resuming, when the remote client closes the connection or when the a  {@link Broadcaster#broadcast} operations occurs.", "call_func_name": ["org.atmosphere.cpr.Meteor.destroyed", "org.atmosphere.cpr.AtmosphereResource.addEventListener"], "call_func_parameter": [[""], ["org.atmosphere.cpr.AtmosphereResourceEventListener"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.addEventListener": "Add a  {@link AtmosphereResourceEventListener}."}]}, {"index": "574", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "methodName": "org.atmosphere.cpr.Meteor.removeListener", "methodParameterType": "AtmosphereResourceEventListener#", "methodParameterName": "e#", "methodBody": "public Meteor removeListener(AtmosphereResourceEventListener e) {\n        if (!destroyed()) {\n            r.removeEventListener(e);\n        }\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Remove a  {@link AtmosphereResourceEventListener} which gets invoked whena response is resuming, when the remote client closes the connection or when the a  {@link Broadcaster#broadcast} operations occurs.", "call_func_name": ["org.atmosphere.cpr.Meteor.destroyed", "org.atmosphere.cpr.AtmosphereResource.removeEventListener"], "call_func_parameter": [[""], ["org.atmosphere.cpr.AtmosphereResourceEventListener"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.removeEventListener": "Remove a  {@link AtmosphereResourceEventListener}."}]}, {"index": "575", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "methodName": "org.atmosphere.cpr.Meteor.destroy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void destroy() {\n        isDestroyed.set(true);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Mark this instance as destroyed. No more operations will be allowed.", "call_func_name": ["java.util.concurrent.atomic.AtomicBoolean.set"], "call_func_parameter": [["boolean"]], "passed_comments": "/"}, {"index": "576", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "methodName": "org.atmosphere.cpr.Meteor.getAtmosphereResource", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AtmosphereResource getAtmosphereResource() {\n        return r;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the underlying  {@link AtmosphereResource}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "577", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java", "methodName": "org.atmosphere.cpr.Meteor.getAtmosphereConfig", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AtmosphereConfig getAtmosphereConfig() {\n        return r.getAtmosphereConfig();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link org.atmosphere.cpr.AtmosphereConfig}", "call_func_name": ["org.atmosphere.cpr.AtmosphereResource.getAtmosphereConfig"], "call_func_parameter": [[""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.getAtmosphereConfig": "Return the  {@link AtmosphereConfig}."}]}, {"index": "578", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFuture.java", "methodName": "org.atmosphere.cpr.BroadcasterFuture.done", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public BroadcasterFuture<E> done() {\n        if (latch != null) {\n            latch.countDown();\n        }\n        isDone = latch == null || latch.getCount() == 0;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Invoked when a  {@link Broadcaster} completed its broadcast operation.", "call_func_name": ["java.util.concurrent.CountDownLatch.countDown", "java.util.concurrent.CountDownLatch.getCount"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "579", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.DefaultAtmosphereResourceFactory.create", "methodParameterType": "AtmosphereConfig#AtmosphereRequest#AtmosphereResponse#AsyncSupport<?>#", "methodParameterName": "config#request#response#a#", "methodBody": "@Override\n    public AtmosphereResource create(AtmosphereConfig config,\n                                           AtmosphereRequest request,\n                                           AtmosphereResponse response,\n                                           AsyncSupport<?> a) {\n        AtmosphereResource r = null;\n        try {\n            r = config.framework().newClassInstance(AtmosphereResource.class, AtmosphereResourceImpl.class);\n            r.initialize(config, null, request, response, a, voidAtmosphereHandler);\n            setDefaultSerializer(config, r);\n        } catch (Exception e) {\n            logger.error(\"\", e);\n        }\n        return r;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create an  {@link AtmosphereResourceImpl}", "call_func_name": ["org.atmosphere.cpr.AtmosphereConfig.framework", "org.atmosphere.cpr.AtmosphereFramework.newClassInstance", "org.atmosphere.cpr.AtmosphereResource.initialize", "org.atmosphere.cpr.DefaultAtmosphereResourceFactory.setDefaultSerializer", "org.slf4j.Logger.error"], "call_func_parameter": [[""], ["java.lang.Class", "java.lang.Class"], ["org.atmosphere.cpr.AtmosphereConfig", "org.atmosphere.cpr.Broadcaster", "org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse", "org.atmosphere.cpr.AsyncSupport", "org.atmosphere.cpr.AtmosphereHandler"], ["org.atmosphere.cpr.AtmosphereConfig", "org.atmosphere.cpr.AtmosphereResource"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.framework": "Return the  {@link AtmosphereFramework}."}, {"org.atmosphere.cpr.AtmosphereFramework.newClassInstance": "Instantiate a class"}, {"org.atmosphere.cpr.AtmosphereResource.initialize": "Initialize an  {@link AtmosphereResource}."}]}, {"index": "580", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.DefaultAtmosphereResourceFactory.create", "methodParameterType": "AtmosphereConfig#Broadcaster#AtmosphereRequest#AtmosphereResponse#AsyncSupport<?>#AtmosphereHandler#", "methodParameterName": "config#broadcaster#request#response#a#handler#", "methodBody": "@Override\n    public AtmosphereResource create(AtmosphereConfig config,\n                                           Broadcaster broadcaster,\n                                           AtmosphereRequest request,\n                                           AtmosphereResponse response,\n                                           AsyncSupport<?> a,\n                                           AtmosphereHandler handler) {\n        return create(config, broadcaster, request, response, a, handler, AtmosphereResource.TRANSPORT.UNDEFINED);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create an  {@link AtmosphereResourceImpl}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "581", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.DefaultAtmosphereResourceFactory.create", "methodParameterType": "AtmosphereConfig#Broadcaster#AtmosphereRequest#AtmosphereResponse#AsyncSupport<?>#AtmosphereHandler#AtmosphereResource.TRANSPORT#", "methodParameterName": "config#broadcaster#request#response#a#handler#t#", "methodBody": "@Override\n    public AtmosphereResource create(AtmosphereConfig config,\n                                           Broadcaster broadcaster,\n                                           AtmosphereRequest request,\n                                           AtmosphereResponse response,\n                                           AsyncSupport<?> a,\n                                           AtmosphereHandler handler,\n                                           AtmosphereResource.TRANSPORT t) {\n        AtmosphereResource r = null;\n        try {\n            r = config.framework().newClassInstance(AtmosphereResource.class, AtmosphereResourceImpl.class);\n\n            if (request.getHeader(X_ATMOSPHERE_TRANSPORT) == null) {\n                request.header(X_ATMOSPHERE_TRANSPORT, t.name());\n            }\n            r.initialize(config, broadcaster, request, response, a, handler);\n            setDefaultSerializer(config, r);\n        } catch (Exception e) {\n            logger.error(\"\", e);\n        }\n        return r;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create an  {@link AtmosphereResourceImpl}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "582", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.DefaultAtmosphereResourceFactory.create", "methodParameterType": "AtmosphereConfig#Broadcaster#AtmosphereResponse#AsyncSupport<?>#AtmosphereHandler#", "methodParameterName": "config#broadcaster#response#a#handler#", "methodBody": "@Override\n    public AtmosphereResource create(AtmosphereConfig config,\n                                           Broadcaster broadcaster,\n                                           AtmosphereResponse response,\n                                           AsyncSupport<?> a,\n                                           AtmosphereHandler handler) {\n        return create(config, broadcaster, response.request(), response, a, handler);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create an  {@link AtmosphereResourceImpl}.", "call_func_name": ["org.atmosphere.cpr.AtmosphereResponse.request", "org.atmosphere.cpr.DefaultAtmosphereResourceFactory.create"], "call_func_parameter": [[""], ["org.atmosphere.cpr.AtmosphereConfig", "org.atmosphere.cpr.Broadcaster", "org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse", "org.atmosphere.cpr.AsyncSupport", "org.atmosphere.cpr.AtmosphereHandler"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResponse.request": "Return the associated  {@link AtmosphereRequest}."}, {"org.atmosphere.cpr.AtmosphereResponse.request": "Set the associated  {@link AtmosphereRequest}."}, {"org.atmosphere.cpr.DefaultAtmosphereResourceFactory.create": "Create an  {@link AtmosphereResourceImpl}."}]}, {"index": "583", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.DefaultAtmosphereResourceFactory.create", "methodParameterType": "AtmosphereConfig#AtmosphereResponse#AsyncSupport<?>#", "methodParameterName": "config#response#a#", "methodBody": "@Override\n    public AtmosphereResource create(AtmosphereConfig config,\n                                           AtmosphereResponse response,\n                                           AsyncSupport<?> a) {\n        AtmosphereResource r = null;\n        try {\n            r = config.framework().newClassInstance(AtmosphereResource.class, AtmosphereResourceImpl.class);\n            r.initialize(config, null, response.request(), response, a, voidAtmosphereHandler);\n            setDefaultSerializer(config, r);\n        } catch (Exception e) {\n            logger.error(\"\", e);\n        }\n        return r;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create an  {@link AtmosphereResourceImpl}.", "call_func_name": ["org.atmosphere.cpr.AtmosphereConfig.framework", "org.atmosphere.cpr.AtmosphereFramework.newClassInstance", "org.atmosphere.cpr.AtmosphereResponse.request", "org.atmosphere.cpr.AtmosphereResource.initialize", "org.atmosphere.cpr.DefaultAtmosphereResourceFactory.setDefaultSerializer", "org.slf4j.Logger.error"], "call_func_parameter": [[""], ["java.lang.Class", "java.lang.Class"], [""], ["org.atmosphere.cpr.AtmosphereConfig", "org.atmosphere.cpr.Broadcaster", "org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse", "org.atmosphere.cpr.AsyncSupport", "org.atmosphere.cpr.AtmosphereHandler"], ["org.atmosphere.cpr.AtmosphereConfig", "org.atmosphere.cpr.AtmosphereResource"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.framework": "Return the  {@link AtmosphereFramework}."}, {"org.atmosphere.cpr.AtmosphereFramework.newClassInstance": "Instantiate a class"}, {"org.atmosphere.cpr.AtmosphereResponse.request": "Return the associated  {@link AtmosphereRequest}."}, {"org.atmosphere.cpr.AtmosphereResponse.request": "Set the associated  {@link AtmosphereRequest}."}, {"org.atmosphere.cpr.AtmosphereResource.initialize": "Initialize an  {@link AtmosphereResource}."}]}, {"index": "584", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.DefaultAtmosphereResourceFactory.create", "methodParameterType": "AtmosphereConfig#String#", "methodParameterName": "config#uuid#", "methodBody": "@Override\n    public AtmosphereResource create(AtmosphereConfig config, String uuid) {\n        AtmosphereResponse response = AtmosphereResponseImpl.newInstance();\n        response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);\n        return create(config,\n                noOps,\n                AtmosphereRequestImpl.newInstance(),\n                response,\n                config.framework().getAsyncSupport(),\n                noOpsHandler);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create an  {@link AtmosphereResource} associated with the uuid.", "call_func_name": ["org.atmosphere.cpr.AtmosphereResponseImpl.newInstance", "org.atmosphere.cpr.AtmosphereResponse.setHeader", "org.atmosphere.cpr.AtmosphereRequestImpl.newInstance", "org.atmosphere.cpr.AtmosphereConfig.framework", "org.atmosphere.cpr.AtmosphereFramework.getAsyncSupport", "org.atmosphere.cpr.DefaultAtmosphereResourceFactory.create"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""], [""], [""], ["org.atmosphere.cpr.AtmosphereConfig", "org.atmosphere.cpr.Broadcaster", "org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse", "org.atmosphere.cpr.AsyncSupport", "org.atmosphere.cpr.AtmosphereHandler"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResponseImpl.newInstance": "Create an instance not associated with any response parent."}, {"org.atmosphere.cpr.AtmosphereResponseImpl.newInstance": "Create a new instance to use with WebSocket."}, {"org.atmosphere.cpr.AtmosphereRequestImpl.newInstance": "Create an instance of this class without an associated  {@link HttpServletRequest}."}, {"org.atmosphere.cpr.AtmosphereConfig.framework": "Return the  {@link AtmosphereFramework}."}, {"org.atmosphere.cpr.AtmosphereFramework.getAsyncSupport": "Return the current  {@link AsyncSupport}."}, {"org.atmosphere.cpr.DefaultAtmosphereResourceFactory.create": "Create an  {@link AtmosphereResourceImpl}."}]}, {"index": "585", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.DefaultAtmosphereResourceFactory.create", "methodParameterType": "AtmosphereConfig#String#AtmosphereRequest#", "methodParameterName": "config#uuid#request#", "methodBody": "@Override\n    public AtmosphereResource create(AtmosphereConfig config, String uuid, AtmosphereRequest request) {\n        AtmosphereResponse response = AtmosphereResponseImpl.newInstance();\n        response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);\n        return create(config,\n                noOps,\n                request,\n                response,\n                config.framework().getAsyncSupport(),\n                noOpsHandler);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create an  {@link AtmosphereResource} associated with the uuid.", "call_func_name": ["org.atmosphere.cpr.AtmosphereResponseImpl.newInstance", "org.atmosphere.cpr.AtmosphereResponse.setHeader", "org.atmosphere.cpr.AtmosphereConfig.framework", "org.atmosphere.cpr.AtmosphereFramework.getAsyncSupport", "org.atmosphere.cpr.DefaultAtmosphereResourceFactory.create"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""], [""], ["org.atmosphere.cpr.AtmosphereConfig", "org.atmosphere.cpr.Broadcaster", "org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse", "org.atmosphere.cpr.AsyncSupport", "org.atmosphere.cpr.AtmosphereHandler"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResponseImpl.newInstance": "Create an instance not associated with any response parent."}, {"org.atmosphere.cpr.AtmosphereResponseImpl.newInstance": "Create a new instance to use with WebSocket."}, {"org.atmosphere.cpr.AtmosphereConfig.framework": "Return the  {@link AtmosphereFramework}."}, {"org.atmosphere.cpr.AtmosphereFramework.getAsyncSupport": "Return the current  {@link AsyncSupport}."}, {"org.atmosphere.cpr.DefaultAtmosphereResourceFactory.create": "Create an  {@link AtmosphereResourceImpl}."}]}, {"index": "586", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.DefaultAtmosphereResourceFactory.remove", "methodParameterType": "String#", "methodParameterName": "uuid#", "methodBody": "@Override\n    public AtmosphereResource remove(String uuid) {\n        logger.trace(\"Removing: {}\", uuid);\n        AtmosphereResource r = resources.remove(uuid);\n        if (r != null) {\n            r.removeFromAllBroadcasters();\n        }\n        return r;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Remove the  {@link AtmosphereResource} from all instances of {@link Broadcaster}.", "call_func_name": ["org.slf4j.Logger.trace", "java.util.concurrent.ConcurrentHashMap.remove", "org.atmosphere.cpr.AtmosphereResource.removeFromAllBroadcasters"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.Object"], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.removeFromAllBroadcasters": "Remove this  {@link org.atmosphere.cpr.AtmosphereResource} from all {@link org.atmosphere.cpr.Broadcaster}"}]}, {"index": "587", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.DefaultAtmosphereResourceFactory.find", "methodParameterType": "String#", "methodParameterName": "uuid#", "methodBody": "@Override\n    public AtmosphereResource find(String uuid) {\n        if (uuid == null) return null;\n        return resources.get(uuid);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Find an  {@link AtmosphereResource} based on its {@link org.atmosphere.cpr.AtmosphereResource#uuid()}.", "call_func_name": ["java.util.concurrent.ConcurrentHashMap.get"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "588", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.DefaultAtmosphereResourceFactory.broadcasters", "methodParameterType": "String#", "methodParameterName": "uuid#", "methodBody": "@Override\n    @Deprecated\n    public Set<Broadcaster> broadcasters(String uuid) {\n        AtmosphereResource r = find(uuid);\n        return new HashSet<Broadcaster>(r.broadcasters());\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return all  {@link Broadcaster} associated with a {@link AtmosphereResource#uuid}, e.g for which {@link Broadcaster#addAtmosphereResource(AtmosphereResource)} has been called. Note that thismethod is not synchronized and may not return all the  {@link Broadcaster} in case{@link Broadcaster#addAtmosphereResource(AtmosphereResource)} is being called concurrently.", "call_func_name": ["org.atmosphere.cpr.DefaultAtmosphereResourceFactory.find", "org.atmosphere.cpr.AtmosphereResource.broadcasters", "java.util.HashSet.<init>"], "call_func_parameter": [["java.lang.String"], [""], ["java.util.Collection"]], "passed_comments": [{"org.atmosphere.cpr.DefaultAtmosphereResourceFactory.find": "Find an  {@link AtmosphereResource} based on its {@link org.atmosphere.cpr.AtmosphereResource#uuid()}."}, {"org.atmosphere.cpr.AtmosphereResource.broadcasters": "Return an unmodifiable list of  {@link Broadcaster}s associated with this resource"}]}, {"index": "589", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.DefaultAtmosphereResourceFactory.registerUuidForFindCandidate", "methodParameterType": "AtmosphereResource#", "methodParameterName": "r#", "methodBody": "@Override\n    public void registerUuidForFindCandidate(AtmosphereResource r) {\n        logger.trace(\"Adding: {}\", r);\n        resources.put(r.uuid(), r);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Register an  {@link AtmosphereResource} for being a candidate to {@link #find(String)} operation.", "call_func_name": ["org.slf4j.Logger.trace", "org.atmosphere.cpr.AtmosphereResource.uuid", "java.util.concurrent.ConcurrentHashMap.put"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], [""], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.uuid": "Return the unique ID associated with this AtmosphereResource."}]}, {"index": "590", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java", "methodName": "org.atmosphere.cpr.DefaultAtmosphereResourceFactory.unRegisterUuidForFindCandidate", "methodParameterType": "AtmosphereResource#", "methodParameterName": "r#", "methodBody": "@Override\n    public void unRegisterUuidForFindCandidate(AtmosphereResource r) {\n        Object o = resources.remove(r.uuid());\n        if (o != null) {\n            logger.trace(\"Removing: {}\", r);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Un register an  {@link AtmosphereResource} for being a candidate to {@link #find(String)} operation.", "call_func_name": ["org.atmosphere.cpr.AtmosphereResource.uuid", "java.util.concurrent.ConcurrentHashMap.remove", "org.slf4j.Logger.trace"], "call_func_parameter": [[""], ["java.lang.Object"], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.uuid": "Return the unique ID associated with this AtmosphereResource."}]}, {"index": "591", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java", "methodName": "org.atmosphere.cpr.BroadcasterFactory.configure", "methodParameterType": "Class<? extends Broadcaster>#String#AtmosphereConfig#", "methodParameterName": "clazz#broadcasterLifeCyclePolicy#c#", "methodBody": "public void configure(Class<? extends Broadcaster> clazz, String broadcasterLifeCyclePolicy, AtmosphereConfig c);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Configure the factory", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "592", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java", "methodName": "org.atmosphere.cpr.BroadcasterFactory.get", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Broadcaster get();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return an instance of the default  {@link Broadcaster}. <p/> The name of the Broadcaster will be randomly generated.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "593", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java", "methodName": "org.atmosphere.cpr.BroadcasterFactory.get", "methodParameterType": "Object#", "methodParameterName": "id#", "methodBody": "Broadcaster get(Object id);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create a new instance of  {@link Broadcaster} and store it for.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "594", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java", "methodName": "org.atmosphere.cpr.BroadcasterFactory.get", "methodParameterType": "Class<T>#Object#", "methodParameterName": "c#id#", "methodBody": "<T extends Broadcaster> T get(Class<T> c, Object id);", "AST": "Javadoc#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create a new instance of  {@link Broadcaster} and store it for.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "595", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java", "methodName": "org.atmosphere.cpr.BroadcasterFactory.destroy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void destroy();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Shutdown all  {@link Broadcaster}s.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "596", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java", "methodName": "org.atmosphere.cpr.BroadcasterFactory.add", "methodParameterType": "Broadcaster#Object#", "methodParameterName": "b#id#", "methodBody": "boolean add(Broadcaster b, Object id);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Add a  {@link Broadcaster} to the list.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "597", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java", "methodName": "org.atmosphere.cpr.BroadcasterFactory.remove", "methodParameterType": "Broadcaster#Object#", "methodParameterName": "b#id#", "methodBody": "boolean remove(Broadcaster b, Object id);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Remove a  {@link Broadcaster} from the list.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "598", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java", "methodName": "org.atmosphere.cpr.BroadcasterFactory.lookup", "methodParameterType": "Class<T>#Object#", "methodParameterName": "c#id#", "methodBody": "<T extends Broadcaster> T lookup(Class<T> c, Object id);", "AST": "Javadoc#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Lookup a  {@link Broadcaster} instance using {@link Broadcaster#getID()} or ID", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "599", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java", "methodName": "org.atmosphere.cpr.BroadcasterFactory.lookup", "methodParameterType": "Class<T>#Object#boolean#", "methodParameterName": "c#id#createIfNull#", "methodBody": "<T extends Broadcaster> T lookup(Class<T> c, Object id, boolean createIfNull);", "AST": "Javadoc#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Lookup a  {@link Broadcaster} instance using {@link Broadcaster#getID()} or ID", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "600", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java", "methodName": "org.atmosphere.cpr.BroadcasterFactory.lookup", "methodParameterType": "Object#", "methodParameterName": "id#", "methodBody": "<T extends Broadcaster> T lookup(Object id);", "AST": "Javadoc#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Lookup a  {@link Broadcaster} instance using {@link Broadcaster#getID()} or ID", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "601", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java", "methodName": "org.atmosphere.cpr.BroadcasterFactory.lookup", "methodParameterType": "Object#boolean#", "methodParameterName": "id#createIfNull#", "methodBody": "<T extends Broadcaster> T lookup(Object id, boolean createIfNull);", "AST": "Javadoc#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Lookup a  {@link Broadcaster} instance using {@link Broadcaster#getID()} or ID", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "602", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java", "methodName": "org.atmosphere.cpr.BroadcasterFactory.removeAllAtmosphereResource", "methodParameterType": "AtmosphereResource#", "methodParameterName": "r#", "methodBody": "@Deprecated\n    void removeAllAtmosphereResource(AtmosphereResource r);", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Remove all instances of  {@link AtmosphereResource} from all registered {@link Broadcaster}s.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "603", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java", "methodName": "org.atmosphere.cpr.BroadcasterFactory.remove", "methodParameterType": "Object#", "methodParameterName": "id#", "methodBody": "boolean remove(Object id);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Remove the associated  {@link Broadcaster}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "604", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java", "methodName": "org.atmosphere.cpr.BroadcasterFactory.lookupAll", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Collection<Broadcaster> lookupAll();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return an immutable Collection of  {@link Broadcaster} this factory contains.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "605", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java", "methodName": "org.atmosphere.cpr.BroadcasterFactory.addBroadcasterListener", "methodParameterType": "BroadcasterListener#", "methodParameterName": "b#", "methodBody": "BroadcasterFactory addBroadcasterListener(BroadcasterListener b);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Add a  {@link org.atmosphere.cpr.BroadcasterListener}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "606", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java", "methodName": "org.atmosphere.cpr.BroadcasterFactory.removeBroadcasterListener", "methodParameterType": "BroadcasterListener#", "methodParameterName": "b#", "methodBody": "BroadcasterFactory removeBroadcasterListener(BroadcasterListener b);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Remove a  {@link org.atmosphere.cpr.BroadcasterListener}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "607", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java", "methodName": "org.atmosphere.cpr.BroadcasterFactory.broadcasterListeners", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Collection<BroadcasterListener> broadcasterListeners();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return all  {@link org.atmosphere.cpr.BroadcasterListener}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "608", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/ReaderInputStream.java", "methodName": "org.atmosphere.util.ReaderInputStream.ReaderInputStream", "methodParameterType": "Reader#CharsetEncoder#", "methodParameterName": "reader#encoder#", "methodBody": "public ReaderInputStream(Reader reader, CharsetEncoder encoder) {\n        this(reader, encoder, DEFAULT_BUFFER_SIZE);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct a new  {@link ReaderInputStream}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "609", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/ReaderInputStream.java", "methodName": "org.atmosphere.util.ReaderInputStream.ReaderInputStream", "methodParameterType": "Reader#CharsetEncoder#int#", "methodParameterName": "reader#encoder#bufferSize#", "methodBody": "public ReaderInputStream(Reader reader, CharsetEncoder encoder, int bufferSize) {\n        this.reader = reader;\n        this.encoder = encoder;\n        this.encoderIn = CharBuffer.allocate(bufferSize);\n        this.encoderIn.flip();\n        this.encoderOut = ByteBuffer.allocate(128);\n        this.encoderOut.flip();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Construct a new  {@link ReaderInputStream}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "610", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/ReaderInputStream.java", "methodName": "org.atmosphere.util.ReaderInputStream.ReaderInputStream", "methodParameterType": "Reader#Charset#int#", "methodParameterName": "reader#charset#bufferSize#", "methodBody": "public ReaderInputStream(Reader reader, Charset charset, int bufferSize) {\n        this(reader,\n                charset.newEncoder()\n                        .onMalformedInput(CodingErrorAction.REPLACE)\n                        .onUnmappableCharacter(CodingErrorAction.REPLACE),\n                bufferSize);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct a new  {@link ReaderInputStream}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "611", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/ReaderInputStream.java", "methodName": "org.atmosphere.util.ReaderInputStream.ReaderInputStream", "methodParameterType": "Reader#Charset#", "methodParameterName": "reader#charset#", "methodBody": "public ReaderInputStream(Reader reader, Charset charset) {\n        this(reader, charset, DEFAULT_BUFFER_SIZE);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct a new  {@link ReaderInputStream} with a default input buffer size of1024 characters.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "612", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/ReaderInputStream.java", "methodName": "org.atmosphere.util.ReaderInputStream.ReaderInputStream", "methodParameterType": "Reader#String#int#", "methodParameterName": "reader#charsetName#bufferSize#", "methodBody": "public ReaderInputStream(Reader reader, String charsetName, int bufferSize) {\n        this(reader, Charset.forName(charsetName), bufferSize);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct a new  {@link ReaderInputStream}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "613", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/ReaderInputStream.java", "methodName": "org.atmosphere.util.ReaderInputStream.ReaderInputStream", "methodParameterType": "Reader#String#", "methodParameterName": "reader#charsetName#", "methodBody": "public ReaderInputStream(Reader reader, String charsetName) {\n        this(reader, charsetName, DEFAULT_BUFFER_SIZE);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct a new  {@link ReaderInputStream} with a default input buffer size of1024 characters.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "614", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/ReaderInputStream.java", "methodName": "org.atmosphere.util.ReaderInputStream.ReaderInputStream", "methodParameterType": "Reader#", "methodParameterName": "reader#", "methodBody": "public ReaderInputStream(Reader reader) {\n        this(reader, Charset.defaultCharset());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct a new  {@link ReaderInputStream} that uses the default character encodingwith a default input buffer size of 1024 characters.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "615", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/ReaderInputStream.java", "methodName": "org.atmosphere.util.ReaderInputStream.fillBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void fillBuffer() throws IOException {\n        if (!endOfInput && (lastCoderResult == null || lastCoderResult.isUnderflow())) {\n            encoderIn.compact();\n            int position = encoderIn.position();\n            // We don't use Reader#read(CharBuffer) here because it is more efficient\n            // to write directly to the underlying char array (the default implementation\n            // copies data to a temporary char array).\n            int c = reader.read(encoderIn.array(), position, encoderIn.remaining());\n            if (c == -1) {\n                endOfInput = true;\n            } else {\n                encoderIn.position(position + c);\n            }\n            encoderIn.flip();\n        }\n        encoderOut.compact();\n        lastCoderResult = encoder.encode(encoderIn, encoderOut, endOfInput);\n        encoderOut.flip();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#PrefixExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Fills the internal char buffer from the reader.", "call_func_name": ["java.nio.charset.CoderResult.isUnderflow", "java.nio.CharBuffer.compact", "java.nio.CharBuffer.position", "java.nio.CharBuffer.array", "java.nio.CharBuffer.remaining", "java.io.Reader.read", "java.nio.CharBuffer.position", "java.nio.CharBuffer.flip", "java.nio.ByteBuffer.compact", "java.nio.charset.CharsetEncoder.encode", "java.nio.ByteBuffer.flip"], "call_func_parameter": [[""], [""], [""], [""], [""], ["char[]", "int", "int"], ["int"], [""], [""], ["java.nio.CharBuffer", "java.nio.ByteBuffer", "boolean"], [""]], "passed_comments": "/"}, {"index": "616", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/ReaderInputStream.java", "methodName": "org.atmosphere.util.ReaderInputStream.read", "methodParameterType": "byte[]#int#int#", "methodParameterName": "b#off#len#", "methodBody": "@Override\n    public int read(byte[] b, int off, int len) throws IOException {\n        if (b == null) {\n            throw new NullPointerException(\"Byte array must not be null\");\n        }\n        if (len < 0 || off < 0 || (off + len) > b.length) {\n            throw new IndexOutOfBoundsException(\"Array Size=\" + b.length +\n                    \", offset=\" + off + \", length=\" + len);\n        }\n        int read = 0;\n        if (len == 0) {\n            return 0; // Always return 0 if len == 0\n        }\n        while (len > 0) {\n            if (encoderOut.hasRemaining()) {\n                int c = Math.min(encoderOut.remaining(), len);\n                encoderOut.get(b, off, c);\n                off += c;\n                len -= c;\n                read += c;\n            } else {\n                fillBuffer();\n                if (endOfInput && !encoderOut.hasRemaining()) {\n                    break;\n                }\n            }\n        }\n        return read == 0 && endOfInput ? -1 : read;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#NumberLiteral#ReturnStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#BreakStatement#Block#IfStatement#Block#IfStatement#Block#WhileStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#InfixExpression#NumberLiteral#PrefixExpression#SimpleName#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)IfStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(BreakStatement)BreakStatement)Block)IfStatement)Block)IfStatement)Block)WhileStatement(ReturnStatement(ConditionalExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression(SimpleName)SimpleName)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Read the specified number of bytes into an array.", "call_func_name": ["java.lang.NullPointerException.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IndexOutOfBoundsException.<init>", "java.nio.ByteBuffer.hasRemaining", "java.nio.ByteBuffer.remaining", "java.lang.Math.min", "java.nio.ByteBuffer.get", "org.atmosphere.util.ReaderInputStream.fillBuffer"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], ["int"], [""], ["java.lang.String"], [""], [""], ["int", "int"], ["byte[]", "int", "int"], [""]], "passed_comments": [{"org.atmosphere.util.ReaderInputStream.fillBuffer": "Fills the internal char buffer from the reader."}]}, {"index": "617", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/ReaderInputStream.java", "methodName": "org.atmosphere.util.ReaderInputStream.read", "methodParameterType": "byte[]#", "methodParameterName": "b#", "methodBody": "@Override\n    public int read(byte[] b) throws IOException {\n        return read(b, 0, b.length);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Read the specified number of bytes into an array.", "call_func_name": ["java.nio.ByteBuffer.hasRemaining", "java.nio.ByteBuffer.get", "org.atmosphere.util.ReaderInputStream.fillBuffer"], "call_func_parameter": [[""], [""], [""]], "passed_comments": [{"org.atmosphere.util.ReaderInputStream.fillBuffer": "Fills the internal char buffer from the reader."}]}, {"index": "618", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/ReaderInputStream.java", "methodName": "org.atmosphere.util.ReaderInputStream.read", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public int read() throws IOException {\n        for (; ; ) {\n            if (encoderOut.hasRemaining()) {\n                return encoderOut.get() & 0xFF;\n            } else {\n                fillBuffer();\n                if (endOfInput && !encoderOut.hasRemaining()) {\n                    return -1;\n                }\n            }\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ReturnStatement#Block#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#NumberLiteral#PrefixExpression#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ForStatement(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)ReturnStatement)Block)IfStatement)Block)IfStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Read a single byte.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "619", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/ReaderInputStream.java", "methodName": "org.atmosphere.util.ReaderInputStream.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void close() throws IOException {\n        reader.close();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Close the stream. This method will cause the underlying  {@link java.io.Reader}to be closed.", "call_func_name": ["java.io.Reader.close"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "620", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/analytics/JGoogleAnalyticsTracker.java", "methodName": "org.atmosphere.util.analytics.JGoogleAnalyticsTracker.JGoogleAnalyticsTracker", "methodParameterType": "String#String#", "methodParameterName": "appName#googleAnalyticsTrackingCode#", "methodBody": "public JGoogleAnalyticsTracker(String appName, String googleAnalyticsTrackingCode) {\n        this.urlBuildingStrategy = new GoogleAnalytics_v1_URLBuildingStrategy(appName, googleAnalyticsTrackingCode);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Simple constructor passing the application name & google analytics tracking code", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "621", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/analytics/JGoogleAnalyticsTracker.java", "methodName": "org.atmosphere.util.analytics.JGoogleAnalyticsTracker.JGoogleAnalyticsTracker", "methodParameterType": "String#String#String#", "methodParameterName": "appName#appVersion#googleAnalyticsTrackingCode#", "methodBody": "public JGoogleAnalyticsTracker(String appName, String appVersion, String googleAnalyticsTrackingCode) {\n        this.urlBuildingStrategy = new GoogleAnalytics_v1_URLBuildingStrategy(appName, appVersion, googleAnalyticsTrackingCode);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor passing the application name, application version & google analytics tracking code", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "622", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/analytics/JGoogleAnalyticsTracker.java", "methodName": "org.atmosphere.util.analytics.JGoogleAnalyticsTracker.setUrlBuildingStrategy", "methodParameterType": "URLBuildingStrategy#", "methodParameterName": "urlBuildingStrategy#", "methodBody": "public void setUrlBuildingStrategy(URLBuildingStrategy urlBuildingStrategy) {\n        this.urlBuildingStrategy = urlBuildingStrategy;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Setter injection for URLBuildingStrategy incase if you want to use a different url building logic.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "623", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/analytics/JGoogleAnalyticsTracker.java", "methodName": "org.atmosphere.util.analytics.JGoogleAnalyticsTracker.trackSynchronously", "methodParameterType": "FocusPoint#", "methodParameterName": "focusPoint#", "methodBody": "public void trackSynchronously(FocusPoint focusPoint) {\n        httpRequest.request(urlBuildingStrategy.buildURL(focusPoint));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Track the focusPoint in the application synchronously. <br/> <red><b>Please be cognizant while using this method. Since, it would have a peformance hit on the actual application. Use it unless it's really needed</b></red>", "call_func_name": ["org.atmosphere.util.analytics.URLBuildingStrategy.buildURL", "org.atmosphere.util.analytics.HTTPGetMethod.request"], "call_func_parameter": [["org.atmosphere.util.analytics.FocusPoint"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "624", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java", "methodName": "org.atmosphere.util.IntrospectionUtils.execute", "methodParameterType": "Object#String#", "methodParameterName": "proxy#method#", "methodBody": "public static void execute(Object proxy, String method) throws Exception {\n        Method executeM = null;\n        Class<?> c = proxy.getClass();\n        Class<?> params[] = new Class[0];\n        //    params[0]=args.getClass();\n        executeM = findMethod(c, method, params);\n        if (executeM == null) {\n            throw new RuntimeException(\"No execute in \" + proxy.getClass());\n        }\n        executeM.invoke(proxy, (Object[]) null);//new Object[] { args });\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#Dimension#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NullLiteral#CastExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(Dimension)Dimension(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NullLiteral)NullLiteral)CastExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Call execute() - any ant-like task should work", "call_func_name": ["java.lang.Object.getClass", "org.atmosphere.util.IntrospectionUtils.findMethod", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.RuntimeException.<init>", "java.lang.reflect.Method.invoke"], "call_func_parameter": [[""], ["java.lang.Class", "java.lang.String", "java.lang.Class[]"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.Object", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "625", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java", "methodName": "org.atmosphere.util.IntrospectionUtils.setAttribute", "methodParameterType": "Object#String#Object#", "methodParameterName": "proxy#name#value#", "methodBody": "public static void setAttribute(Object proxy, String name, Object value)\n            throws Exception {\n        if (proxy instanceof AttributeHolder) {\n            ((AttributeHolder) proxy).setAttribute(name, value);\n            return;\n        }\n\n        Method executeM = null;\n        Class<?> c = proxy.getClass();\n        Class<?> params[] = new Class[2];\n        params[0] = String.class;\n        params[1] = Object.class;\n        executeM = findMethod(c, \"setAttribute\", params);\n        if (executeM == null) {\n            logger.debug(\"No setAttribute in {}\", proxy.getClass());\n            return;\n        }\n\n        logger.debug(\"Setting {}={} in proxy: {}\", new Object[]{name, value, proxy});\n        executeM.invoke(proxy, new Object[]{name, value});\n        return;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#Dimension#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#ArrayAccess#SimpleName#SimpleType#TypeLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#ArrayAccess#SimpleName#SimpleType#TypeLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#ArrayInitializer#ArrayCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#ArrayInitializer#ArrayCreation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(Dimension)Dimension(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ArrayInitializer)ArrayCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName(SimpleName)SimpleName)ArrayInitializer)ArrayCreation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Call void setAttribute( String ,Object )", "call_func_name": ["java.lang.Object.getClass", "org.atmosphere.util.IntrospectionUtils.findMethod", "org.slf4j.Logger.debug", "org.slf4j.Logger.debug", "java.lang.reflect.Method.invoke"], "call_func_parameter": [[""], ["java.lang.Class", "java.lang.String", "java.lang.Class[]"], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.Object[]"], ["java.lang.Object", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "626", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java", "methodName": "org.atmosphere.util.IntrospectionUtils.getAttribute", "methodParameterType": "Object#String#", "methodParameterName": "proxy#name#", "methodBody": "public static Object getAttribute(Object proxy, String name) throws Exception {\n        Class<?> c = proxy.getClass();\n        Class<?> params[] = new Class[1];\n        params[0] = String.class;\n        Method executeM = findMethod(c, \"getAttribute\", params);\n        if (executeM == null) {\n            logger.debug(\"No getAttribute in {}\", proxy.getClass());\n            return null;\n        }\n        return executeM.invoke(proxy, new Object[]{name});\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#Dimension#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#ArrayAccess#SimpleName#SimpleType#TypeLiteral#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayInitializer#ArrayCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(Dimension)Dimension(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName)ArrayInitializer)ArrayCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Call void getAttribute( String )", "call_func_name": ["java.lang.Object.getClass", "org.atmosphere.util.IntrospectionUtils.findMethod", "org.slf4j.Logger.debug", "java.lang.reflect.Method.invoke"], "call_func_parameter": [[""], ["java.lang.Class", "java.lang.String", "java.lang.Class[]"], ["java.lang.String", "java.lang.Object"], ["java.lang.Object", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "627", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java", "methodName": "org.atmosphere.util.IntrospectionUtils.setProperty", "methodParameterType": "Object#String#String#", "methodParameterName": "o#name#value#", "methodBody": "final public static boolean setProperty(Object o, String name, String value) {\n        String setter = \"set\" + capitalize(name);\n        return invokeProperty(o, setter, name, value);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Find a method with the right name If found, call the method ( if param is int or boolean we'll convert value to the right type before) - that means you can have setDebug(1).", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.atmosphere.util.IntrospectionUtils.capitalize", "java.lang.StringBuilder.toString", "org.atmosphere.util.IntrospectionUtils.invokeProperty"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.Object", "java.lang.String", "java.lang.String", "java.lang.String"]], "passed_comments": [{"org.atmosphere.util.IntrospectionUtils.capitalize": "Reverse of Introspector.decapitalize"}]}, {"index": "628", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java", "methodName": "org.atmosphere.util.IntrospectionUtils.setProperty", "methodParameterType": "Object#String#", "methodParameterName": "object#name#", "methodBody": "public static void setProperty(Object object, String name) {\n        String setter = \"set\" + capitalize(name);\n        try {\n            Method methods[] = findMethods(object.getClass());\n            Method setPropertyMethod = null;\n            // find setFoo() method\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (setter.equals(methods[i].getName()) && paramT.length == 0) {\n                    methods[i].invoke(object, new Object[]{});\n                    return;\n                }\n            }\n        } catch (Exception e) {\n            if (dbg > 0) {\n                debug(\"Exception for \" + object.getClass() + \" \" + name);\n            }\n            if (dbg > 1) {\n                logger.debug(\"\", e);\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#Dimension#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#Dimension#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#ArrayInitializer#ArrayCreation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#Block#ForStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(Dimension)Dimension(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(Dimension)Dimension(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer)ArrayInitializer)ArrayCreation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement)Block)ForStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "/", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.atmosphere.util.IntrospectionUtils.capitalize", "java.lang.StringBuilder.toString", "java.lang.Object.getClass", "org.atmosphere.util.IntrospectionUtils.findMethods", "java.lang.reflect.Method.getParameterTypes", "java.lang.reflect.Method.getName", "java.lang.String.equals", "java.lang.reflect.Method.invoke"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], [""], [""], ["java.lang.Class"], [""], [""], ["java.lang.Object"], ["java.lang.Object", "java.lang.Object[]"]], "passed_comments": [{"org.atmosphere.util.IntrospectionUtils.capitalize": "Reverse of Introspector.decapitalize"}]}, {"index": "629", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java", "methodName": "org.atmosphere.util.IntrospectionUtils.replaceProperties", "methodParameterType": "String#Hashtable<String,String>#PropertySource#", "methodParameterName": "value#staticProp#dynamicProp#", "methodBody": "public static String replaceProperties(String value,\n                                           Hashtable<String, String> staticProp, PropertySource dynamicProp[]) {\n        if (value.indexOf(\"$\") < 0) {\n            return value;\n        }\n        StringBuilder sb = new StringBuilder();\n        int prev = 0;\n        // assert value!=nil\n        int pos;\n        while ((pos = value.indexOf(\"$\", prev)) >= 0) {\n            if (pos > 0) {\n                sb.append(value.substring(prev, pos));\n            }\n            if (pos == (value.length() - 1)) {\n                sb.append('$');\n                prev = pos + 1;\n            } else if (value.charAt(pos + 1) != '{') {\n                sb.append('$');\n                prev = pos + 1; // XXX\n            } else {\n                int endName = value.indexOf('}', pos);\n                if (endName < 0) {\n                    sb.append(value.substring(pos));\n                    prev = value.length();\n                    continue;\n                }\n                String n = value.substring(pos + 2, endName);\n                String v = null;\n                if (staticProp != null) {\n                    v = staticProp.get(n);\n                }\n                if (v == null && dynamicProp != null) {\n                    for (int i = 0; i < dynamicProp.length; i++) {\n                        v = dynamicProp[i].getProperty(n);\n                        if (v != null) {\n                            break;\n                        }\n                    }\n                }\n                if (v == null)\n                    v = \"${\" + n + \"}\";\n\n                sb.append(v);\n                prev = endName + 1;\n            }\n        }\n        if (prev < value.length())\n            sb.append(value.substring(prev));\n        return sb.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#Dimension#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#Assignment#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#CharacterLiteral#InfixExpression#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#Block#PrimitiveType#SimpleName#SimpleName#SimpleName#CharacterLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ContinueStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#BreakStatement#Block#IfStatement#Block#ForStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Dimension)Dimension)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)Block(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(BreakStatement)BreakStatement)Block)IfStatement)Block)ForStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement)IfStatement)Block)WhileStatement(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Replace ${NAME} with the property value", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "630", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java", "methodName": "org.atmosphere.util.IntrospectionUtils.capitalize", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public static String capitalize(String name) {\n        if (name == null || name.length() == 0) {\n            return name;\n        }\n        char chars[] = name.toCharArray();\n        chars[0] = Character.toUpperCase(chars[0]);\n        return new String(chars);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#Dimension#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#ArrayAccess#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(Dimension)Dimension(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Reverse of Introspector.decapitalize", "call_func_name": ["java.lang.String.length", "java.lang.String.toCharArray", "java.lang.Character.toUpperCase", "java.lang.String.<init>"], "call_func_parameter": [[""], [""], ["char"], ["char[]"]], "passed_comments": "/"}, {"index": "631", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java", "methodName": "org.atmosphere.util.IntrospectionUtils.addToClassPath", "methodParameterType": "Vector<URL>#String#", "methodParameterName": "cpV#dir#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static void addToClassPath(Vector<URL> cpV, String dir) {\n        try {\n            String cpComp[] = getFilesByExt(dir, \".jar\");\n            if (cpComp != null) {\n                int jarCount = cpComp.length;\n                for (int i = 0; i < jarCount; i++) {\n                    URL url = getURL(dir, cpComp[i]);\n                    if (url != null)\n                        cpV.addElement(url);\n                }\n            }\n        } catch (Exception ex) {\n            logger.debug(\"failed to add urls to classpath\", ex);\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#Dimension#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#Block#ForStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(Dimension)Dimension(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement)Block)ForStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Add all the jar files in a dir to the classpath, represented as a Vector of URLs.", "call_func_name": ["org.atmosphere.util.IntrospectionUtils.getFilesByExt", "org.atmosphere.util.IntrospectionUtils.getURL", "java.util.Vector.addElement", "org.slf4j.Logger.debug"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.Object"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.atmosphere.util.IntrospectionUtils.getFilesByExt": "Return all files with a given extension in a dir"}, {"org.atmosphere.util.IntrospectionUtils.getURL": "Construct a file url from a file, using a base dir"}]}, {"index": "632", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java", "methodName": "org.atmosphere.util.IntrospectionUtils.getFilesByExt", "methodParameterType": "String#String#", "methodParameterName": "ld#ext#", "methodBody": "public static String[] getFilesByExt(String ld, String ext) {\n        File dir = new File(ld);\n        String[] names = null;\n        final String lext = ext;\n        if (dir.isDirectory()) {\n            names = dir.list(new FilenameFilter() {\n                public boolean accept(File d, String name) {\n                    if (name.endsWith(lext)) {\n                        return true;\n                    }\n                    return false;\n                }\n            });\n        }\n        return names;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return all files with a given extension in a dir", "call_func_name": ["java.io.File.<init>", "java.io.File.isDirectory", "java.io.File.list"], "call_func_parameter": [["java.lang.String"], [""], ["java.io.FilenameFilter"]], "passed_comments": "/"}, {"index": "633", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java", "methodName": "org.atmosphere.util.IntrospectionUtils.getURL", "methodParameterType": "String#String#", "methodParameterName": "base#file#", "methodBody": "public static URL getURL(String base, String file) {\n        try {\n            File baseF = new File(base);\n            File f = new File(baseF, file);\n            String path = f.getCanonicalPath();\n            if (f.isDirectory()) {\n                path += \"/\";\n            }\n            if (!f.exists()) {\n                return null;\n            }\n            return new URL(\"file\", \"\", path);\n        } catch (Exception ex) {\n            logger.debug(\"failed to get url, base: \" + base + \", file: \" + file, ex);\n            return null;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#StringLiteral#StringLiteral#SimpleName#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Construct a file url from a file, using a base dir", "call_func_name": ["java.io.File.<init>", "java.io.File.<init>", "java.io.File.getCanonicalPath", "java.io.File.isDirectory", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.io.File.exists", "java.net.URL.<init>", "org.slf4j.Logger.debug"], "call_func_parameter": [["java.lang.String"], ["java.io.File", "java.lang.String"], [""], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "634", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java", "methodName": "org.atmosphere.util.IntrospectionUtils.addJarsFromClassPath", "methodParameterType": "Vector<URL>#String#", "methodParameterName": "jars#cp#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static void addJarsFromClassPath(Vector<URL> jars, String cp)\n            throws IOException, MalformedURLException {\n        String sep = System.getProperty(\"path.separator\");\n        String token;\n        StringTokenizer st;\n        if (cp != null) {\n            st = new StringTokenizer(cp, sep);\n            while (st.hasMoreTokens()) {\n                File f = new File(st.nextToken());\n                String path = f.getCanonicalPath();\n                if (f.isDirectory()) {\n                    path += \"/\";\n                }\n                URL url = new URL(\"file\", \"\", path);\n                if (!jars.contains(url)) {\n                    jars.addElement(url);\n                }\n            }\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#StringLiteral#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#WhileStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)WhileStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Add elements from the classpath <i>cp </i> to a Vector <i>jars </i> as file URLs (We use Vector for JDK 1.1 compat). <p/>", "call_func_name": ["java.lang.System.getProperty", "java.util.StringTokenizer.<init>", "java.util.StringTokenizer.hasMoreTokens", "java.util.StringTokenizer.nextToken", "java.io.File.<init>", "java.io.File.getCanonicalPath", "java.io.File.isDirectory", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.net.URL.<init>", "java.util.Vector.contains", "java.util.Vector.addElement"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "635", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java", "methodName": "org.atmosphere.util.IntrospectionUtils.getClassPath", "methodParameterType": "Vector<URL>#", "methodParameterName": "v#", "methodBody": "public static URL[] getClassPath(Vector<URL> v) {\n        URL[] urls = new URL[v.size()];\n        for (int i = 0; i < v.size(); i++) {\n            urls[i] = v.elementAt(i);\n        }\n        return urls;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return a URL[] that can be used to construct a class loader", "call_func_name": ["java.util.Vector.size", "java.util.Vector.elementAt"], "call_func_parameter": [[""], ["int"]], "passed_comments": "/"}, {"index": "636", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java", "methodName": "org.atmosphere.util.IntrospectionUtils.getClassPath", "methodParameterType": "String#String#String#boolean#", "methodParameterName": "dir#cpath#cpathProp#addTools#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static URL[] getClassPath(String dir, String cpath,\n                                     String cpathProp, boolean addTools) throws IOException,\n            MalformedURLException {\n        Vector<URL> jarsV = new Vector<URL>();\n        if (dir != null) {\n            // Add dir/classes first, if it exists\n            URL url = getURL(dir, \"classes\");\n            if (url != null)\n                jarsV.addElement(url);\n            addToClassPath(jarsV, dir);\n        }\n\n        if (cpath != null)\n            addJarsFromClassPath(jarsV, cpath);\n\n        if (cpathProp != null) {\n            String cpath1 = System.getProperty(cpathProp);\n            addJarsFromClassPath(jarsV, cpath1);\n        }\n\n        if (addTools)\n            addToolsJar(jarsV);\n\n        return getClassPath(jarsV);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Construct a URL classpath from files in a directory, a cpath property, and tools.jar.", "call_func_name": ["java.util.Vector.<init>", "org.atmosphere.util.IntrospectionUtils.getURL", "java.util.Vector.addElement", "org.atmosphere.util.IntrospectionUtils.addToClassPath", "org.atmosphere.util.IntrospectionUtils.addJarsFromClassPath", "java.lang.System.getProperty", "org.atmosphere.util.IntrospectionUtils.addToolsJar", "org.atmosphere.util.IntrospectionUtils.getClassPath"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], ["java.lang.Object"], ["java.util.Vector", "java.lang.String"], ["java.util.Vector", "java.lang.String"], ["java.lang.String"], ["java.util.Vector"], ["java.util.Vector"]], "passed_comments": [{"org.atmosphere.util.IntrospectionUtils.getURL": "Construct a file url from a file, using a base dir"}, {"org.atmosphere.util.IntrospectionUtils.addToClassPath": "Add all the jar files in a dir to the classpath, represented as a Vector of URLs."}, {"org.atmosphere.util.IntrospectionUtils.addJarsFromClassPath": "Add elements from the classpath <i>cp </i> to a Vector <i>jars </i> as file URLs (We use Vector for JDK 1.1 compat). <p/>"}, {"org.atmosphere.util.IntrospectionUtils.getClassPath": "Return a URL[] that can be used to construct a class loader"}]}, {"index": "637", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java", "methodName": "org.atmosphere.util.IntrospectionUtils.hasHook", "methodParameterType": "Object#String#", "methodParameterName": "obj#methodN#", "methodBody": "public static boolean hasHook(Object obj, String methodN) {\n        try {\n            Method myMethods[] = findMethods(obj.getClass());\n            for (int i = 0; i < myMethods.length; i++) {\n                if (methodN.equals(myMethods[i].getName())) {\n                    // check if it's overriden\n                    Class<?> declaring = myMethods[i].getDeclaringClass();\n                    Class<?> parentOfDeclaring = declaring.getSuperclass();\n                    // this works only if the base class doesn't extend\n                    // another class.\n\n                    // if the method is declared in a top level class\n                    // like BaseInterceptor parent is Object, otherwise\n                    // parent is BaseInterceptor or an intermediate class\n                    if (!\"java.lang.Object\".equals(parentOfDeclaring.getName())) {\n                        return true;\n                    }\n                }\n            }\n        } catch (Exception ex) {\n            logger.debug(\"hasHook() failed\", ex);\n        }\n        return false;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#Dimension#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#ForStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(Dimension)Dimension(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)IfStatement)Block)ForStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Test if the object implements a particular method", "call_func_name": ["java.lang.Object.getClass", "org.atmosphere.util.IntrospectionUtils.findMethods", "java.lang.reflect.Method.getName", "java.lang.String.equals", "java.lang.reflect.Method.getDeclaringClass", "java.lang.Class.getSuperclass", "java.lang.Class.getName", "org.slf4j.Logger.debug"], "call_func_parameter": [[""], ["java.lang.Class"], [""], ["java.lang.Object"], [""], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "638", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/ServletContextFactory.java", "methodName": "org.atmosphere.util.ServletContextFactory.init", "methodParameterType": "ServletContext#", "methodParameterName": "servletContext#", "methodBody": "public void init(ServletContext servletContext) {\n        this.servletContext = servletContext;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the ServletContext", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "639", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/QueryStringDecoder.java", "methodName": "org.atmosphere.util.QueryStringDecoder.QueryStringDecoder", "methodParameterType": "String#", "methodParameterName": "uri#", "methodBody": "public QueryStringDecoder(String uri) {\n        this(uri, UTF_8);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new decoder that decodes the specified URI. The decoder will assume that the query string is encoded in UTF-8.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "640", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/QueryStringDecoder.java", "methodName": "org.atmosphere.util.QueryStringDecoder.QueryStringDecoder", "methodParameterType": "String#boolean#", "methodParameterName": "uri#hasPath#", "methodBody": "public QueryStringDecoder(String uri, boolean hasPath) {\n        this(uri, UTF_8, hasPath);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new decoder that decodes the specified URI encoded in the specified charset.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "641", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/QueryStringDecoder.java", "methodName": "org.atmosphere.util.QueryStringDecoder.QueryStringDecoder", "methodParameterType": "String#Charset#", "methodParameterName": "uri#charset#", "methodBody": "public QueryStringDecoder(String uri, Charset charset) {\n        this(uri, charset, true);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new decoder that decodes the specified URI encoded in the specified charset.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "642", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/QueryStringDecoder.java", "methodName": "org.atmosphere.util.QueryStringDecoder.QueryStringDecoder", "methodParameterType": "String#Charset#boolean#", "methodParameterName": "uri#charset#hasPath#", "methodBody": "public QueryStringDecoder(String uri, Charset charset, boolean hasPath) {\n        this(uri, charset, hasPath, DEFAULT_MAX_PARAMS);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new decoder that decodes the specified URI encoded in the specified charset.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "643", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/QueryStringDecoder.java", "methodName": "org.atmosphere.util.QueryStringDecoder.QueryStringDecoder", "methodParameterType": "String#Charset#boolean#int#", "methodParameterName": "uri#charset#hasPath#maxParams#", "methodBody": "public QueryStringDecoder(String uri, Charset charset, boolean hasPath, int maxParams) {\n        if (uri == null) {\n            throw new NullPointerException(\"uri\");\n        }\n        if (charset == null) {\n            throw new NullPointerException(\"charset\");\n        }\n        if (maxParams <= 0) {\n            throw new IllegalArgumentException(\n                    \"maxParams: \" + maxParams + \" (expected: a positive integer)\");\n        }\n\n        // http://en.wikipedia.org/wiki/Query_string\n        this.uri = uri.replace(';', '&');\n        this.charset = charset;\n        this.maxParams = maxParams;\n        this.hasPath = hasPath;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#CharacterLiteral#CharacterLiteral#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(CharacterLiteral)CharacterLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new decoder that decodes the specified URI encoded in the specified charset.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "644", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/QueryStringDecoder.java", "methodName": "org.atmosphere.util.QueryStringDecoder.QueryStringDecoder", "methodParameterType": "String#String#", "methodParameterName": "uri#charset#", "methodBody": "@Deprecated\n    public QueryStringDecoder(String uri, String charset) {\n        this(uri, Charset.forName(charset));\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@deprecated Use {@link #QueryStringDecoder(String,Charset)} instead.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "645", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/QueryStringDecoder.java", "methodName": "org.atmosphere.util.QueryStringDecoder.QueryStringDecoder", "methodParameterType": "URI#", "methodParameterName": "uri#", "methodBody": "public QueryStringDecoder(URI uri) {\n        this(uri, UTF_8);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new decoder that decodes the specified URI. The decoder will assume that the query string is encoded in UTF-8.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "646", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/QueryStringDecoder.java", "methodName": "org.atmosphere.util.QueryStringDecoder.QueryStringDecoder", "methodParameterType": "URI#Charset#", "methodParameterName": "uri#charset#", "methodBody": "public QueryStringDecoder(URI uri, Charset charset) {\n        this(uri, charset, DEFAULT_MAX_PARAMS);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new decoder that decodes the specified URI encoded in the specified charset.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "647", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/QueryStringDecoder.java", "methodName": "org.atmosphere.util.QueryStringDecoder.QueryStringDecoder", "methodParameterType": "URI#Charset#int#", "methodParameterName": "uri#charset#maxParams#", "methodBody": "public QueryStringDecoder(URI uri, Charset charset, int maxParams) {\n        if (uri == null) {\n            throw new NullPointerException(\"uri\");\n        }\n        if (charset == null) {\n            throw new NullPointerException(\"charset\");\n        }\n        if (maxParams <= 0) {\n            throw new IllegalArgumentException(\n                    \"maxParams: \" + maxParams + \" (expected: a positive integer)\");\n        }\n\n        String rawPath = uri.getRawPath();\n        if (rawPath != null) {\n            hasPath = true;\n        } else {\n            rawPath = \"\";\n            hasPath = false;\n        }\n        // Also take care of cut of things like \"http://localhost\"\n        String newUri = rawPath + \"?\" + uri.getRawQuery();\n\n        // http://en.wikipedia.org/wiki/Query_string\n        this.uri = newUri.replace(';', '&');\n        this.charset = charset;\n        this.maxParams = maxParams;\n\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#SimpleName#StringLiteral#Assignment#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#CharacterLiteral#CharacterLiteral#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(CharacterLiteral)CharacterLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new decoder that decodes the specified URI encoded in the specified charset.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "648", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/QueryStringDecoder.java", "methodName": "org.atmosphere.util.QueryStringDecoder.QueryStringDecoder", "methodParameterType": "URI#String#", "methodParameterName": "uri#charset#", "methodBody": "@Deprecated\n    public QueryStringDecoder(URI uri, String charset) {\n        this(uri, Charset.forName(charset));\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@deprecated Use {@link #QueryStringDecoder(URI,Charset)} instead.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "649", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/QueryStringDecoder.java", "methodName": "org.atmosphere.util.QueryStringDecoder.getPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPath() {\n        if (path == null) {\n            if (!hasPath) {\n                return path = \"\";\n            }\n\n            int pathEndPos = uri.indexOf('?');\n            if (pathEndPos < 0) {\n                path = uri;\n            } else {\n                return path = uri.substring(0, pathEndPos);\n            }\n        }\n        return path;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#PrefixExpression#SimpleName#StringLiteral#Assignment#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#Assignment#ReturnStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ReturnStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(ReturnStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ReturnStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the decoded path string of the URI.", "call_func_name": ["java.lang.String.indexOf", "java.lang.String.substring"], "call_func_parameter": [["int"], ["int", "int"]], "passed_comments": "/"}, {"index": "650", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/QueryStringDecoder.java", "methodName": "org.atmosphere.util.QueryStringDecoder.getParameters", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, List<String>> getParameters() {\n        if (params == null) {\n            if (hasPath) {\n                int pathLength = getPath().length();\n                if (uri.length() == pathLength) {\n                    return Collections.emptyMap();\n                }\n                decodeParams(uri.substring(pathLength + 1));\n            } else {\n                if (uri.length() == 0) {\n                    return Collections.emptyMap();\n                }\n                decodeParams(uri);\n            }\n        }\n        return params;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the decoded key-value parameter pairs of the URI.", "call_func_name": ["org.atmosphere.util.QueryStringDecoder.getPath", "java.lang.String.length", "java.util.Collections.emptyMap", "java.lang.String.substring", "org.atmosphere.util.QueryStringDecoder.decodeParams"], "call_func_parameter": [[""], [""], [""], ["int"], ["java.lang.String"]], "passed_comments": [{"org.atmosphere.util.QueryStringDecoder.getPath": "Returns the decoded path string of the URI."}]}, {"index": "651", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/QueryStringDecoder.java", "methodName": "org.atmosphere.util.QueryStringDecoder.decodeComponent", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public static String decodeComponent(final String s) {\n        return decodeComponent(s, UTF_8);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Decodes a bit of an URL encoded by a browser. <p> This is equivalent to calling  {@link #decodeComponent(String,Charset)}with the UTF-8 charset (recommended to comply with RFC 3986, Section 2).", "call_func_name": ["org.atmosphere.util.QueryStringDecoder.decodeComponent"], "call_func_parameter": [["java.lang.String", "java.nio.charset.Charset"]], "passed_comments": [{"org.atmosphere.util.QueryStringDecoder.decodeComponent": "Decodes a bit of an URL encoded by a browser. <p> The string is expected to be encoded as per RFC 3986, Section 2. This is the encoding used by JavaScript functions  {@code encodeURI}and  {@code encodeURIComponent}, but not  {@code escape}.  For example in this encoding, &eacute; (in Unicode  {@code U+00E9} or in UTF-8{@code 0xC3 0xA9}) is encoded as  {@code %C3%A9} or {@code %c3%a9}. <p> This is essentially equivalent to calling <code> {@link URLDecoder#decode(String,String) URLDecoder.decode}(s, charset.name())</code> except that it's over 2x faster and generates less garbage for the GC. Actually this function doesn't allocate any memory if there's nothing to decode, the argument itself is returned."}]}, {"index": "652", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/QueryStringDecoder.java", "methodName": "org.atmosphere.util.QueryStringDecoder.decodeComponent", "methodParameterType": "String#Charset#", "methodParameterName": "s#charset#", "methodBody": "@SuppressWarnings(\"fallthrough\")\n    public static String decodeComponent(final String s,\n                                         final Charset charset) {\n        if (s == null) {\n            return \"\";\n        }\n        final int size = s.length();\n        boolean modified = false;\n        for (int i = 0; i < size; i++) {\n            final char c = s.charAt(i);\n            switch (c) {\n                case '%':\n                    i++;  // We can skip at least one char, e.g. `%%'.\n                    // Fall through.\n                case '+':\n                    modified = true;\n                    break;\n            }\n        }\n        if (!modified) {\n            return s;\n        }\n        final byte[] buf = new byte[size];\n        int pos = 0;  // position in `buf'.\n        for (int i = 0; i < size; i++) {\n            char c = s.charAt(i);\n            switch (c) {\n                case '+':\n                    buf[pos++] = ' ';  // \"+\" -> \" \"\n                    break;\n                case '%':\n                    if (i == size - 1) {\n                        throw new IllegalArgumentException(\"unterminated escape\"\n                                + \" sequence at end of string: \" + s);\n                    }\n                    c = s.charAt(++i);\n                    if (c == '%') {\n                        buf[pos++] = '%';  // \"%%\" -> \"%\"\n                        break;\n                    } else if (i == size - 1) {\n                        throw new IllegalArgumentException(\"partial escape\"\n                                + \" sequence at end of string: \" + s);\n                    }\n                    c = decodeHexNibble(c);\n                    final char c2 = decodeHexNibble(s.charAt(++i));\n                    if (c == Character.MAX_VALUE || c2 == Character.MAX_VALUE) {\n                        throw new IllegalArgumentException(\n                                \"invalid escape sequence `%\" + s.charAt(i - 1)\n                                + s.charAt(i) + \"' at index \" + (i - 2)\n                                + \" of: \" + s);\n                    }\n                    c = (char) (c * 16 + c2);\n                    // Fall through.\n                default:\n                    buf[pos++] = (byte) c;\n                    break;\n            }\n        }\n        try {\n            return new String(buf, 0, pos, charset.name());\n        } catch (UnsupportedEncodingException e) {\n            throw new IllegalArgumentException(\"unsupported encoding: \" + charset.name());\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#StringLiteral#ReturnStatement#Block#IfStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#CharacterLiteral#SwitchCase#SimpleName#PostfixExpression#ExpressionStatement#CharacterLiteral#SwitchCase#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#BreakStatement#SwitchStatement#Block#ForStatement#SimpleName#PrefixExpression#SimpleName#ReturnStatement#Block#IfStatement#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#CharacterLiteral#SwitchCase#SimpleName#SimpleName#PostfixExpression#ArrayAccess#CharacterLiteral#Assignment#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#PrefixExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#CharacterLiteral#InfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#CharacterLiteral#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#PrefixExpression#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#SimpleName#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SwitchCase#SimpleName#SimpleName#PostfixExpression#ArrayAccess#PrimitiveType#SimpleName#CastExpression#Assignment#ExpressionStatement#BreakStatement#SwitchStatement#Block#ForStatement#SimpleName#SimpleType#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement)SwitchStatement)Block)ForStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CharacterLiteral)CharacterLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(IfStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CharacterLiteral)CharacterLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(SwitchCase)SwitchCase(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement(BreakStatement)BreakStatement)SwitchStatement)Block)ForStatement(TryStatement(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Decodes a bit of an URL encoded by a browser. <p> The string is expected to be encoded as per RFC 3986, Section 2. This is the encoding used by JavaScript functions  {@code encodeURI}and  {@code encodeURIComponent}, but not  {@code escape}.  For example in this encoding, &eacute; (in Unicode  {@code U+00E9} or in UTF-8{@code 0xC3 0xA9}) is encoded as  {@code %C3%A9} or {@code %c3%a9}. <p> This is essentially equivalent to calling <code> {@link URLDecoder#decode(String,String) URLDecoder.decode}(s, charset.name())</code> except that it's over 2x faster and generates less garbage for the GC. Actually this function doesn't allocate any memory if there's nothing to decode, the argument itself is returned.", "call_func_name": ["java.lang.String.length", "java.lang.String.charAt", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "org.atmosphere.util.QueryStringDecoder.decodeHexNibble", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.nio.charset.Charset.name", "java.lang.String.<init>"], "call_func_parameter": [[""], ["int"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["char"], ["char"], ["int"], [""], ["byte[]", "int", "int", "java.lang.String"]], "passed_comments": [{"org.atmosphere.util.QueryStringDecoder.decodeHexNibble": "Helper to decode half of a hexadecimal number from a string."}]}, {"index": "653", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/QueryStringDecoder.java", "methodName": "org.atmosphere.util.QueryStringDecoder.decodeHexNibble", "methodParameterType": "char#", "methodParameterName": "c#", "methodBody": "private static char decodeHexNibble(final char c) {\n        if ('0' <= c && c <= '9') {\n            return (char) (c - '0');\n        } else if ('a' <= c && c <= 'f') {\n            return (char) (c - 'a' + 10);\n        } else if ('A' <= c && c <= 'F') {\n            return (char) (c - 'A' + 10);\n        } else {\n            return Character.MAX_VALUE;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#CharacterLiteral#SimpleName#InfixExpression#SimpleName#CharacterLiteral#InfixExpression#InfixExpression#PrimitiveType#SimpleName#CharacterLiteral#InfixExpression#ParenthesizedExpression#CastExpression#ReturnStatement#Block#CharacterLiteral#SimpleName#InfixExpression#SimpleName#CharacterLiteral#InfixExpression#InfixExpression#PrimitiveType#SimpleName#CharacterLiteral#InfixExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#ReturnStatement#Block#CharacterLiteral#SimpleName#InfixExpression#SimpleName#CharacterLiteral#InfixExpression#InfixExpression#PrimitiveType#SimpleName#CharacterLiteral#InfixExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)ParenthesizedExpression)CastExpression)ReturnStatement)Block(IfStatement(InfixExpression(InfixExpression(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)ReturnStatement)Block(IfStatement(InfixExpression(InfixExpression(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)ReturnStatement)Block(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Helper to decode half of a hexadecimal number from a string.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "654", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/FileIterator.java", "methodName": "org.atmosphere.util.annotation.FileIterator.FileIterator", "methodParameterType": "File#", "methodParameterName": "filesOrDirectories#", "methodBody": "public FileIterator(final File... filesOrDirectories) {\n        addReverse(filesOrDirectories);\n        rootCount = stack.size();\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create a new  {@code FileIterator} using the specified 'filesOrDirectories' as root.<br/> If 'filesOrDirectories' contains a file, the iterator just returns that single file.  If 'filesOrDirectories' contains a directory, all files in that directory  and its sub directories are returned (depth first).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "655", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/FileIterator.java", "methodName": "org.atmosphere.util.annotation.FileIterator.getFile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public File getFile() {\n        return current;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the last returned file or  {@code null} if no more files are available.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "656", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/FileIterator.java", "methodName": "org.atmosphere.util.annotation.FileIterator.isRootFile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isRootFile() {\n        if (current == null) {\n            throw new NoSuchElementException();\n        }\n        return stack.size() < rootCount;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return  {@code true} if the current file is one of the files originallyspecified as one of the constructor file parameters, i.e. is a root file or directory.", "call_func_name": ["java.util.NoSuchElementException.<init>", "java.util.Deque.size"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "657", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/FileIterator.java", "methodName": "org.atmosphere.util.annotation.FileIterator.next", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public File next() throws IOException {\n        if (stack.isEmpty()) {\n            current = null;\n            return null;\n        } else {\n            current = stack.removeLast();\n            if (current.isDirectory()) {\n                if (stack.size() < rootCount) {\n                    rootCount = stack.size();\n                }\n                addReverse(current.listFiles());\n                return next();\n            } else {\n                return current;\n            }\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#Assignment#ExpressionStatement#NullLiteral#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Return the next  {@link java.io.File} object or {@code null} if no more files areavailable.", "call_func_name": ["java.util.Deque.isEmpty", "java.util.Deque.removeLast", "java.io.File.isDirectory", "java.util.Deque.size", "java.io.File.listFiles", "org.atmosphere.util.annotation.FileIterator.addReverse", "org.atmosphere.util.annotation.FileIterator.next"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.io.File[]"], [""]], "passed_comments": [{"org.atmosphere.util.annotation.FileIterator.addReverse": "Add the specified files in reverse order."}, {"org.atmosphere.util.annotation.FileIterator.next": "Return the next  {@link java.io.File} object or {@code null} if no more files areavailable."}]}, {"index": "658", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/FileIterator.java", "methodName": "org.atmosphere.util.annotation.FileIterator.addReverse", "methodParameterType": "File[]#", "methodParameterName": "files#", "methodBody": "private void addReverse(final File[] files) {\n        if (files == null) return;\n\n        for (int i = files.length - 1; i >=0; --i) {\n            stack.add(files[i]);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#ReturnStatement#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement)ReturnStatement)IfStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Add the specified files in reverse order.", "call_func_name": ["java.util.Deque.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "659", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/ClassFileIterator.java", "methodName": "org.atmosphere.util.annotation.ClassFileIterator.ClassFileIterator", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "ClassFileIterator() throws IOException {\n        this(classPath(), null);\n    }", "AST": "Javadoc#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Create a new  {@code ClassFileIterator} returning all Java ClassFile files availablefrom the class path ( {@code System.getProperty(\"java.class.path\")}).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "660", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/ClassFileIterator.java", "methodName": "org.atmosphere.util.annotation.ClassFileIterator.ClassFileIterator", "methodParameterType": "File[]#String[]#", "methodParameterName": "filesOrDirectories#pkgNameFilter#", "methodBody": "ClassFileIterator(final File[] filesOrDirectories, final String[] pkgNameFilter)\n            throws IOException {\n\n        this.fileIterator = new FileIterator(filesOrDirectories);\n        this.pkgNameFilter = pkgNameFilter;\n        this.inputStreamIterator = null;\n    }", "AST": "Javadoc#SimpleName#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create a new  {@code ClassFileIterator} returning all Java ClassFile files availablefrom the specified files and/or directories, including sub directories. <p/> If the (optional) package filter is defined, only class files staring with one of the defined package names are returned. NOTE: package names must be defined in the native format (using '/' instead of '.').", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "661", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/ClassFileIterator.java", "methodName": "org.atmosphere.util.annotation.ClassFileIterator.ClassFileIterator", "methodParameterType": "InputStream[]#String[]#", "methodParameterName": "filesOrDirectories#pkgNameFilter#", "methodBody": "ClassFileIterator(final InputStream[] filesOrDirectories, final String[] pkgNameFilter)\n            throws IOException {\n\n        this.fileIterator = null;\n        this.pkgNameFilter = pkgNameFilter;\n        this.inputStreamIterator = new InputStreamIterator(filesOrDirectories);\n    }", "AST": "Javadoc#SimpleName#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#NullLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create a new  {@code ClassFileIterator} returning all Java ClassFile files availablefrom the specified files and/or directories, including sub directories. <p/> If the (optional) package filter is defined, only class files staring with one of the defined package names are returned. NOTE: package names must be defined in the native format (using '/' instead of '.').", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "662", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/ClassFileIterator.java", "methodName": "org.atmosphere.util.annotation.ClassFileIterator.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        // Both getPath() and getName() are very light weight method calls\n        return zipIterator == null ?\n                fileIterator.getFile().getPath() :\n                zipIterator.getEntry().getName();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the name of the Java ClassFile returned from the last call to  {@link #next()}. The name is either the path name of a file or the name of an ZIP/JAR file entry.", "call_func_name": ["org.atmosphere.util.annotation.FileIterator.getFile", "java.io.File.getPath", "org.atmosphere.util.annotation.ZipFileIterator.getEntry", "java.util.zip.ZipEntry.getName"], "call_func_parameter": [[""], [""], [""], [""]], "passed_comments": [{"org.atmosphere.util.annotation.FileIterator.getFile": "Return the last returned file or  {@code null} if no more files are available."}]}, {"index": "663", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/ClassFileIterator.java", "methodName": "org.atmosphere.util.annotation.ClassFileIterator.isFile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isFile() {\n        return isFile;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return  {@code true} if the current {@link InputStream} is reading from a plain{@link File}. Return  {@code false} if the current {@link InputStream} is reading from aZIP File Entry.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "664", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/ClassFileIterator.java", "methodName": "org.atmosphere.util.annotation.ClassFileIterator.next", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public InputStream next() throws IOException {\n        try {\n            while (true) {\n                if (fileIterator != null) {\n                    if (zipIterator == null) {\n                        final File file = fileIterator.next();\n                        if (file == null) {\n                            return null;\n                        } else {\n                            final String name = file.getName();\n                            if (name.endsWith(\".class\")) {\n                                isFile = true;\n                                return new FileInputStream(file);\n                            } else if (fileIterator.isRootFile() && (endsWithIgnoreCase(name, \".jar\") || isZipFile(file)) && file.exists()) {\n                                try {\n                                    zipIterator = new ZipFileIterator(new ZipFile(file), pkgNameFilter);\n                                } catch (Exception ex) {\n                                    logger.debug(\"Unable to construct file {}\", file);\n                                    return null;\n                                }\n                            } // else just ignore\n                        }\n                    } else {\n                        final InputStream is = zipIterator.next();\n                        if (is == null) {\n                            zipIterator = null;\n                        } else {\n                            isFile = false;\n                            return is;\n                        }\n                    }\n                } else {\n                    return inputStreamIterator.next();\n                }\n            }\n        } catch (Exception ex) {\n            logger.error(\"Unable to scan classes\", ex);\n            return null;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#BooleanLiteral#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#IfStatement#IfStatement#Block#IfStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#WhileStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(WhileStatement(BooleanLiteral)BooleanLiteral(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)IfStatement)IfStatement)Block)IfStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)IfStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)WhileStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Return the next Java ClassFile as an  {@code InputStream}. <p/> NOTICE: Client code MUST close the returned  {@code InputStream}!", "call_func_name": ["org.atmosphere.util.annotation.FileIterator.next", "java.io.File.getName", "java.lang.String.endsWith", "java.io.FileInputStream.<init>", "org.atmosphere.util.annotation.FileIterator.isRootFile", "org.atmosphere.util.annotation.ClassFileIterator.endsWithIgnoreCase", "org.atmosphere.util.annotation.ClassFileIterator.isZipFile", "java.io.File.exists", "java.util.zip.ZipFile.<init>", "org.atmosphere.util.annotation.ZipFileIterator.<init>", "org.slf4j.Logger.debug", "org.atmosphere.util.annotation.ZipFileIterator.next", "org.atmosphere.util.annotation.InputStreamIterator.next", "org.slf4j.Logger.error"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["java.io.File"], [""], ["java.lang.String", "java.lang.String"], ["java.io.File"], [""], ["java.io.File"], ["java.util.zip.ZipFile", "java.lang.String[]"], ["java.lang.String", "java.lang.Object"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.atmosphere.util.annotation.FileIterator.next": "Return the next  {@link java.io.File} object or {@code null} if no more files areavailable."}, {"org.atmosphere.util.annotation.FileIterator.isRootFile": "Return  {@code true} if the current file is one of the files originallyspecified as one of the constructor file parameters, i.e. is a root file or directory."}, {"org.atmosphere.util.annotation.InputStreamIterator.next": "Return the next  {@link java.io.File} object or {@code null} if no more files areavailable."}]}, {"index": "665", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/ClassFileIterator.java", "methodName": "org.atmosphere.util.annotation.ClassFileIterator.classPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private static File[] classPath() {\n        final String[] fileNames = System.getProperty(\"java.class.path\")\n                .split(File.pathSeparator);\n        final File[] files = new File[fileNames.length];\n        for (int i = 0; i < files.length; ++i) {\n            files[i] = new File(fileNames[i]);\n        }\n        return files;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PrefixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#ClassInstanceCreation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ClassInstanceCreation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the class path of the current JVM instance as an array of  {@link File} objects.", "call_func_name": ["java.lang.System.getProperty", "java.lang.String.split", "java.io.File.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "666", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/ZipFileIterator.java", "methodName": "org.atmosphere.util.annotation.ZipFileIterator.ZipFileIterator", "methodParameterType": "ZipFile#String[]#", "methodParameterName": "zipFile#entryNameFilter#", "methodBody": "ZipFileIterator(final ZipFile zipFile, final String[] entryNameFilter) throws IOException {\n        this.zipFile = zipFile;\n        this.entryNameFilter = entryNameFilter;\n\n        this.entries = zipFile.entries();\n    }", "AST": "Javadoc#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create a new  {@code ZipFileIterator} instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "667", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/InputStreamIterator.java", "methodName": "org.atmosphere.util.annotation.InputStreamIterator.InputStreamIterator", "methodParameterType": "InputStream#", "methodParameterName": "filesOrDirectories#", "methodBody": "public InputStreamIterator(final InputStream... filesOrDirectories) {\n        addReverse(filesOrDirectories);\n        rootCount = stack.size();\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create a new  {@code FileIterator} using the specified 'filesOrDirectories' as root.<br/> If 'filesOrDirectories' contains a file, the iterator just returns that single file. If 'filesOrDirectories' contains a directory, all files in that directory and its sub directories are returned (depth first).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "668", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/InputStreamIterator.java", "methodName": "org.atmosphere.util.annotation.InputStreamIterator.next", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public InputStream next() throws IOException {\n        if (stack.isEmpty()) {\n            current = null;\n            return null;\n        } else {\n            current = stack.removeLast();\n            return current;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#Assignment#ExpressionStatement#NullLiteral#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Return the next  {@link java.io.File} object or {@code null} if no more files areavailable.", "call_func_name": ["java.util.Deque.isEmpty", "java.util.Deque.removeLast"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "669", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/InputStreamIterator.java", "methodName": "org.atmosphere.util.annotation.InputStreamIterator.addReverse", "methodParameterType": "InputStream[]#", "methodParameterName": "files#", "methodBody": "private void addReverse(final InputStream[] files) {\n        for (int i = files.length - 1; i >=0; --i) {\n            stack.add(files[i]);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Add the specified files in reverse order.", "call_func_name": ["java.util.Deque.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "670", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/AnnotationDetector.java", "methodName": "org.atmosphere.util.annotation.AnnotationDetector.AnnotationDetector", "methodParameterType": "Reporter#", "methodParameterName": "reporter#", "methodBody": "public AnnotationDetector(final Reporter reporter) {\n\n        final Class<? extends Annotation>[] a = reporter.annotations();\n        annotations = new HashMap<String, Class<? extends Annotation>>(a.length);\n        // map \"raw\" type names to Class object\n        for (int i = 0; i < a.length; ++i) {\n            annotations.put(\"L\" + a[i].getName().replace('.', '/') + \";\", a[i]);\n        }\n        if (reporter instanceof TypeReporter) {\n            typeReporter = (TypeReporter) reporter;\n        }\n        if (reporter instanceof FieldReporter) {\n            fieldReporter = (FieldReporter) reporter;\n        }\n        if (reporter instanceof MethodReporter) {\n            methodReporter = (MethodReporter) reporter;\n        }\n        if (typeReporter == null && fieldReporter == null && methodReporter == null) {\n            throw new AssertionError(\"No reporter defined\");\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#SimpleName#CharacterLiteral#CharacterLiteral#MethodInvocation#StringLiteral#InfixExpression#SimpleName#SimpleName#ArrayAccess#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)Assignment)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(CharacterLiteral)CharacterLiteral)MethodInvocation(StringLiteral)StringLiteral)InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)ExpressionStatement)Block)ForStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Create a new  {@code AnnotationDetector}, reporting the detected annotations to the specified  {@code Reporter}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "671", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/AnnotationDetector.java", "methodName": "org.atmosphere.util.annotation.AnnotationDetector.detect", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void detect() throws IOException {\n        detect(new ClassFileIterator());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Report all Java ClassFile files available on the class path.", "call_func_name": ["org.atmosphere.util.annotation.ClassFileIterator.<init>", "org.atmosphere.util.annotation.AnnotationDetector.detect"], "call_func_parameter": [[""], ["org.atmosphere.util.annotation.ClassFileIterator"]], "passed_comments": "/"}, {"index": "672", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/AnnotationDetector.java", "methodName": "org.atmosphere.util.annotation.AnnotationDetector.detect", "methodParameterType": "String#", "methodParameterName": "packageNames#", "methodBody": "public final void detect(final String... packageNames) throws IOException {\n        final String[] pkgNameFilter = new String[packageNames.length];\n        for (int i = 0; i < pkgNameFilter.length; ++i) {\n            pkgNameFilter[i] = packageNames[i].replace('.', '/');\n            if (!pkgNameFilter[i].endsWith(\"/\")) {\n                pkgNameFilter[i] = pkgNameFilter[i].concat(\"/\");\n            }\n\n        }\n        final Set<File> files = new HashSet<File>();\n        final Set<InputStream> streams = new HashSet<InputStream>();\n\n        for (final String packageName : pkgNameFilter) {\n            final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n            final Enumeration<URL> resourceEnum = loader.getResources(packageName);\n            while (resourceEnum.hasMoreElements()) {\n                final URL url = resourceEnum.nextElement();\n                // Handle JBoss VFS URL's which look like (example package 'nl.dvelop'):\n                // vfs:/foo/bar/website.war/WEB-INF/classes/nl/dvelop/\n                // vfs:/foo/bar/website.war/WEB-INF/lib/dwebcore-0.0.1.jar/nl/dvelop/\n                // Different vfs protocols include vfs, vfsfile, vfszip, vfsjar, and vfsmemory\n                final boolean isVfs = url.getProtocol() != null && url.getProtocol().startsWith(\"vfs\");\n                if (\"file\".equals(url.getProtocol()) || isVfs) {\n                    final File dir = toFile(url);\n                    if (dir.isDirectory()) {\n                        files.add(dir);\n                        print(\"Add directory: '%s'\", dir);\n                    } else if (isVfs) {\n                        //Jar file via JBoss VFS protocol - strip package name\n                        String jarPath = dir.getPath();\n                        final int idx = jarPath.indexOf(\".jar\");\n                        if (idx > -1) {\n                            jarPath = jarPath.substring(0, idx + 4);\n                            final File jarFile = new File(jarPath);\n                            if (jarFile.isFile() && jarFile.exists()) {\n                                files.add(jarFile);\n                                print(\"Add jar file from VFS: '%s'\", jarFile);\n                            } else {\n                                try {\n                                    // VirtualFile#getChildren(java.lang.String) may return an object which refers a .jar managed by the deployer\n                                    // The problem is that this .jar file does not contains .class in sub-directories\n                                    // Ex: if your original file contains /foo/bar/Baz.class and /foo/Bar.class, VFS returns a .jar file with:\n                                    // - /foo\n                                    // - /foo/Bar.class\n                                    // - /foo/bar\n                                    // ==> /foo/bar/Baz.class is missing!\n                                    // Resolving child directories recursively solves the issue\n                                    List<org.jboss.vfs.VirtualFile> vfs = getVfsChildren(org.jboss.vfs.VFS.getChild(dir.getPath()));\n                                    for (org.jboss.vfs.VirtualFile f : vfs) {\n                                        files.add(f.getPhysicalFile());\n                                    }\n                                } catch (Throwable ex) {\n                                    vfs(url, packageName, streams);\n                                }\n                            }\n                        } else {\n                            vfs(url, packageName, streams);\n                        }\n                    }\n                } else if (isRunningJavaWebStart()) {\n                    try {\n                        loadJarContent((JarURLConnection) url.openConnection(), packageName, streams);\n                    } catch (ClassCastException cce) {\n                        throw new AssertionError(\"Not a File: \" + url.toExternalForm());\n                    }\n                } else {\n                    // Resource in Jar File\n                    File jarFile;\n\n                    try {\n                        jarFile = toFile(((JarURLConnection) url.openConnection()).getJarFileURL());\n                    } catch (ClassCastException cce) {\n                        try {\n                            // Weblogic crap\n                            String u = url.toExternalForm();\n                            if (u.startsWith(\"zip:\")) {\n                                u = u.substring(4);\n                                if (!u.startsWith(\"file:\")) {\n                                    u = \"file:\" + u;\n                                }\n                                u = u.substring(0, u.indexOf(\"!\"));\n                            }\n                            jarFile = toFile(new URL(u));\n                        } catch (Exception ex) {\n                            throw new AssertionError(\"Not a File: \" + url.toExternalForm());\n                        }\n                    }\n                    try {\n                        if (jarFile.isFile()) {\n                            files.add(jarFile);\n                            print(\"Add jar file: '%s'\", jarFile);\n                        } else {\n                            final URLConnection urlConnection = url.openConnection();\n                            if (urlConnection instanceof JarURLConnection) {\n                                loadJarContent((JarURLConnection) (url.openConnection()), packageName, streams);\n                            } else {\n                                streams.add(url.openConnection().getInputStream());\n                            }\n                        }\n                    } catch (Exception ex) {\n                        print(\"Cannot load from jar file\", ex);\n                    }\n                }\n            }\n        }\n\n        if (!files.isEmpty()) {\n            detect(new ClassFileIterator(files.toArray(new File[files.size()]), pkgNameFilter));\n        } else if (!streams.isEmpty()) {\n            detect(new ClassFileIterator(streams.toArray(new InputStream[streams.size()]), pkgNameFilter));\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PrefixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#ArrayAccess#SimpleName#CharacterLiteral#CharacterLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#ArrayAccess#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#ForStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#IfStatement#Block#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#StringLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ParenthesizedExpression#CastExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#IfStatement#Block#WhileStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(CharacterLiteral)CharacterLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)ForStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)IfStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)CatchClause)TryStatement(TryStatement(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ParenthesizedExpression)CastExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement)IfStatement)Block)WhileStatement)Block)EnhancedForStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Report all Java ClassFile files available on the class path within the specified packages and sub packages.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "673", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/AnnotationDetector.java", "methodName": "org.atmosphere.util.annotation.AnnotationDetector.getVfsChildren", "methodParameterType": "org.jboss.vfs.VirtualFile#", "methodParameterName": "vfs#", "methodBody": "private List<org.jboss.vfs.VirtualFile> getVfsChildren(final org.jboss.vfs.VirtualFile vfs) {\n        final List<org.jboss.vfs.VirtualFile> retval = new ArrayList<org.jboss.vfs.VirtualFile>();\n\n        for (org.jboss.vfs.VirtualFile f : vfs.getChildren()) {\n            if (f.isDirectory()) {\n                retval.addAll(getVfsChildren(org.jboss.vfs.VFS.getChild(vfs.getPathName() + File.separator + f.getName())));\n            } else {\n                retval.add(f);\n            }\n        }\n\n        return retval;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p> This method recursively retrieves VFS files when a directory is detected. </p>", "call_func_name": ["java.util.ArrayList.<init>", "org.jboss.vfs.VirtualFile.getChildren", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.jboss.vfs.VirtualFile.isDirectory", "java.lang.StringBuilder.<init>", "org.jboss.vfs.VirtualFile.getPathName", "java.lang.StringBuilder.append", "org.jboss.vfs.VirtualFile.getName", "java.lang.StringBuilder.toString", "org.jboss.vfs.VFS.getChild", "org.atmosphere.util.annotation.AnnotationDetector.getVfsChildren", "java.util.List.addAll", "java.util.List.add"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], ["org.jboss.vfs.VirtualFile"], ["java.util.Collection"], ["java.lang.Object"]], "passed_comments": [{"org.atmosphere.util.annotation.AnnotationDetector.getVfsChildren": "<p> This method recursively retrieves VFS files when a directory is detected. </p>"}]}, {"index": "674", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/AnnotationDetector.java", "methodName": "org.atmosphere.util.annotation.AnnotationDetector.detect", "methodParameterType": "File#", "methodParameterName": "filesOrDirectories#", "methodBody": "public void detect(final File... filesOrDirectories) throws IOException {\n        print(\"detectFilesOrDirectories: %s\", (Object) filesOrDirectories);\n        detect(new ClassFileIterator(filesOrDirectories, null));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#NullLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(NullLiteral)NullLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Report all Java ClassFile files available from the specified files and/or directories, including sub directories. <p/> Note that non-class files (files, not starting with the magic number {@code CAFEBABE} are silently ignored.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "675", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/AnnotationDetector.java", "methodName": "org.atmosphere.util.annotation.AnnotationDetector.detect", "methodParameterType": "DataInput#", "methodParameterName": "di#", "methodBody": "private void detect(final DataInput di) throws IOException {\n        readVersion(di);\n        readConstantPoolEntries(di);\n        readAccessFlags(di);\n        readThisClass(di);\n        readSuperClass(di);\n        readInterfaces(di);\n        readFields(di);\n        readMethods(di);\n        readAttributes(di, 'T', typeReporter == null);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#CharacterLiteral#SimpleName#NullLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Inspect the given (Java) class file in streaming mode.", "call_func_name": ["org.atmosphere.util.annotation.AnnotationDetector.readVersion", "org.atmosphere.util.annotation.AnnotationDetector.readConstantPoolEntries", "org.atmosphere.util.annotation.AnnotationDetector.readAccessFlags", "org.atmosphere.util.annotation.AnnotationDetector.readThisClass", "org.atmosphere.util.annotation.AnnotationDetector.readSuperClass", "org.atmosphere.util.annotation.AnnotationDetector.readInterfaces", "org.atmosphere.util.annotation.AnnotationDetector.readFields", "org.atmosphere.util.annotation.AnnotationDetector.readMethods", "org.atmosphere.util.annotation.AnnotationDetector.readAttributes"], "call_func_parameter": [["java.io.DataInput"], ["java.io.DataInput"], ["java.io.DataInput"], ["java.io.DataInput"], ["java.io.DataInput"], ["java.io.DataInput"], ["java.io.DataInput"], ["java.io.DataInput"], ["java.io.DataInput", "char", "boolean"]], "passed_comments": "/"}, {"index": "676", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/AnnotationDetector.java", "methodName": "org.atmosphere.util.annotation.AnnotationDetector.readConstantPoolEntry", "methodParameterType": "DataInput#int#", "methodParameterName": "di#index#", "methodBody": "private boolean readConstantPoolEntry(final DataInput di, final int index)\n            throws IOException {\n\n        final int tag = di.readUnsignedByte();\n        switch (tag) {\n            case CP_UTF8:\n                constantPool[index] = di.readUTF();\n                return false;\n            case CP_INTEGER:\n                di.skipBytes(4); // readInt()\n                return false;\n            case CP_FLOAT:\n                di.skipBytes(4); // readFloat()\n                return false;\n            case CP_LONG:\n                di.skipBytes(8); // readLong()\n                return true;\n            case CP_DOUBLE:\n                di.skipBytes(8); // readDouble()\n                return true;\n            case CP_CLASS:\n            case CP_STRING:\n                // reference to CP_UTF8 entry. The referenced index can have a higher number!\n                constantPool[index] = di.readUnsignedShort();\n                return false;\n            case CP_REF_FIELD:\n            case CP_REF_METHOD:\n            case CP_REF_INTERFACE:\n            case CP_NAME_AND_TYPE:\n                di.skipBytes(4);  // readUnsignedShort() * 2\n                return false;\n            case CP_METHOD_HANDLE:\n                di.skipBytes(3);\n                return false;\n            case CP_METHOD_TYPE:\n                di.skipBytes(2);  // readUnsignedShort()\n                return false;\n            case CP_INVOKE_DYNAMIC:\n                di.skipBytes(4);  // readUnsignedShort() * 2\n                return false;\n            default:\n                throw new ClassFormatError(\n                        \"Unkown tag value for constant pool entry: \" + tag);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SwitchCase#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#BooleanLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#BooleanLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#SwitchCase#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Return true if a double slot is read (in case of Double or Long constant).", "call_func_name": ["java.io.DataInput.readUnsignedByte", "java.io.DataInput.readUTF", "java.io.DataInput.skipBytes", "java.io.DataInput.readUnsignedShort", "java.lang.Integer.valueOf", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.ClassFormatError.<init>"], "call_func_parameter": [[""], [""], ["int"], [""], ["int"], [""], ["java.lang.String"], ["int"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "677", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/AnnotationDetector.java", "methodName": "org.atmosphere.util.annotation.AnnotationDetector.resolveUtf8", "methodParameterType": "DataInput#", "methodParameterName": "di#", "methodBody": "private String resolveUtf8(final DataInput di) throws IOException {\n        final int index = di.readUnsignedShort();\n        final Object value = constantPool[index];\n        final String s;\n        if (value instanceof Integer) {\n            s = (String) constantPool[(Integer) value];\n            print(\"resolveUtf8(%d): %d --> %s\", index, value, s);\n        } else {\n            s = (String) value;\n            print(\"resolveUtf8(%d): %s\", index, s);\n        }\n\n        return s;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ArrayAccess#CastExpression#Assignment#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#Assignment#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ArrayAccess)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Look up the String value, identified by the u2 index value from constant pool (direct or indirect).", "call_func_name": ["java.io.DataInput.readUnsignedShort", "java.lang.Integer.intValue", "java.lang.Integer.valueOf", "org.atmosphere.util.annotation.AnnotationDetector.print"], "call_func_parameter": [[""], [""], ["int"], ["java.lang.String", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "678", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/AnnotationDetector.java", "methodName": "org.atmosphere.util.annotation.AnnotationDetector.print", "methodParameterType": "String#Object#", "methodParameterName": "message#args#", "methodBody": "private static void print(final String message, final Object... args) {\n        if (logger.isDebugEnabled()) {\n            final String logMessage;\n            if (args.length == 0) {\n                logMessage = message;\n            } else {\n                for (int i = 0; i < args.length; ++i) {\n                    // arguments may be null\n                    if (args[i] == null) {\n                        continue;\n                    }\n                    if (args[i].getClass().isArray()) {\n                        // cast back to array! Note that primitive arrays are not supported\n                        args[i] = Arrays.toString((Object[]) args[i]);\n                    } else if (args[i] == Class.class) {\n                        args[i] = ((Class<?>) args[i]).getName();\n                    }\n                }\n                logMessage = String.format(message, args);\n            }\n            logger.trace(logMessage); // SUPPRESS CHECKSTYLE RegexpSinglelineJavaCheck\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PrefixExpression#SimpleName#SimpleName#ArrayAccess#NullLiteral#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#ArrayAccess#CastExpression#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#TypeLiteral#InfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#ArrayAccess#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(IfStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(NullLiteral)NullLiteral)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)CastExpression)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)IfStatement)Block)ForStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Helper method for simple (trace) logging.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "679", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/AnnotationDetector.java", "methodName": "org.atmosphere.util.annotation.AnnotationDetector.destroy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void destroy() {\n        annotations.clear();\n        constantPool = null;\n        cpBuffer.destroy();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Reclaim memory.", "call_func_name": ["java.util.Map.clear", "org.atmosphere.util.annotation.ClassFileBuffer.destroy"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "680", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/ClassFileBuffer.java", "methodName": "org.atmosphere.util.annotation.ClassFileBuffer.ClassFileBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "ClassFileBuffer() {\n        this(8 * 1024);\n    }", "AST": "Javadoc#SimpleName#NumberLiteral#NumberLiteral#InfixExpression#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(Block(ConstructorInvocation(InfixExpression(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)InfixExpression)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Create a new, empty  {@code ClassFileBuffer} with the default initial capacity (8 kb).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "681", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/ClassFileBuffer.java", "methodName": "org.atmosphere.util.annotation.ClassFileBuffer.ClassFileBuffer", "methodParameterType": "int#", "methodParameterName": "initialCapacity#", "methodBody": "ClassFileBuffer(final int initialCapacity) {\n        if (initialCapacity < 1) {\n            throw new IllegalArgumentException(\"initialCapacity < 1: \" + initialCapacity);\n        }\n        this.buffer = new byte[initialCapacity];\n    }", "AST": "Javadoc#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create a new, empty  {@code ClassFileBuffer} with the specified initial capacity.The initial capacity must be greater than zero. The internal buffer will grow automatically when a higher capacity is required. However, buffer resizing occurs extra overhead. So in good initial capacity is important in performance critical situations.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "682", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/ClassFileBuffer.java", "methodName": "org.atmosphere.util.annotation.ClassFileBuffer.readFrom", "methodParameterType": "InputStream#", "methodParameterName": "in#", "methodBody": "public void readFrom(final InputStream in) throws IOException {\n        pointer = 0;\n        size = 0;\n        int n;\n        do {\n            n = in.read(buffer, size, buffer.length - size);\n            if (n > 0) {\n                size += n;\n            }\n            resizeIfNeeded();\n        } while (n >= 0);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#NumberLiteral#InfixExpression#DoStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(DoStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)DoStatement)Block)MethodDeclaration", "methodDoc": "Clear and fill the buffer of this  {@code ClassFileBuffer} with thesupplied byte stream. The read pointer is reset to the start of the byte array.", "call_func_name": ["java.io.InputStream.read", "org.atmosphere.util.annotation.ClassFileBuffer.resizeIfNeeded"], "call_func_parameter": [["byte[]", "int", "int"], [""]], "passed_comments": "/"}, {"index": "683", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/ClassFileBuffer.java", "methodName": "org.atmosphere.util.annotation.ClassFileBuffer.seek", "methodParameterType": "int#", "methodParameterName": "position#", "methodBody": "public void seek(final int position) throws IOException {\n        if (position < 0) {\n            throw new IllegalArgumentException(\"position < 0: \" + position);\n        }\n        if (position > size) {\n            throw new EOFException();\n        }\n        this.pointer = position;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "java.io.EOFException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["int"], [""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "684", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/ClassFileBuffer.java", "methodName": "org.atmosphere.util.annotation.ClassFileBuffer.size", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int size() {\n        return size;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the size (in bytes) of this Java ClassFile file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "685", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/ClassFileBuffer.java", "methodName": "org.atmosphere.util.annotation.ClassFileBuffer.readLine", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    @Deprecated\n    public String readLine() throws IOException {\n        throw new UnsupportedOperationException(\"readLine() is deprecated and not supported\");\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "This methods throws an  {@link UnsupportedOperationException} because the methodis deprecated and not used in the context of this implementation.", "call_func_name": ["java.lang.UnsupportedOperationException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "686", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java", "methodName": "org.atmosphere.util.AbstractBroadcasterProxy.incomingBroadcast", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "abstract public void incomingBroadcast();", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Implement this method to broadcast message received from an external source like JGroups, Redis, etc.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "687", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java", "methodName": "org.atmosphere.util.AbstractBroadcasterProxy.outgoingBroadcast", "methodParameterType": "Object#", "methodParameterName": "message#", "methodBody": "abstract public void outgoingBroadcast(Object message);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Implement this method to broadcast message to external source like JGroups, Redis, etc.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "688", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriComponent.java", "methodName": "org.atmosphere.util.uri.UriComponent.validate", "methodParameterType": "String#Type#", "methodParameterName": "s#t#", "methodBody": "public static void validate(String s, Type t) {\n        validate(s, t, false);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Validates the legal characters of a percent-encoded string that  represents a URI component type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "689", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriComponent.java", "methodName": "org.atmosphere.util.uri.UriComponent.validate", "methodParameterType": "String#Type#boolean#", "methodParameterName": "s#t#template#", "methodBody": "public static void validate(String s, Type t, boolean template) {\n        int i = _valid(s, t, template);\n        if (i > -1) // TODO localize\n        {\n            throw new IllegalArgumentException(\"The string '\" + s +\n                    \"' for the URI component \" + t +\n                    \" contains an invalid character, '\" + s.charAt(i) + \"', at index \" + i);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Validates the legal characters of a percent-encoded string that  represents a URI component type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "690", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriComponent.java", "methodName": "org.atmosphere.util.uri.UriComponent.valid", "methodParameterType": "String#Type#", "methodParameterName": "s#t#", "methodBody": "public static boolean valid(String s, Type t) {\n        return valid(s, t, false);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Validates the legal characters of a percent-encoded string that  represents a URI component type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "691", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriComponent.java", "methodName": "org.atmosphere.util.uri.UriComponent.valid", "methodParameterType": "String#Type#boolean#", "methodParameterName": "s#t#template#", "methodBody": "public static boolean valid(String s, Type t, boolean template) {\n        return _valid(s, t, template) == -1;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#PrefixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Validates the legal characters of a percent-encoded string that  represents a URI component type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "692", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriComponent.java", "methodName": "org.atmosphere.util.uri.UriComponent.contextualEncode", "methodParameterType": "String#Type#", "methodParameterName": "s#t#", "methodBody": "public static String contextualEncode(String s, Type t) {\n        return _encode(s, t, false, true);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#BooleanLiteral#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Contextually encodes the characters of string that are either non-ASCII characters or are ASCII characters that must be percent-encoded using the UTF-8 encoding. Percent-encoded characters will be recognized and not double encoded.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "693", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriComponent.java", "methodName": "org.atmosphere.util.uri.UriComponent.contextualEncode", "methodParameterType": "String#Type#boolean#", "methodParameterName": "s#t#template#", "methodBody": "public static String contextualEncode(String s, Type t, boolean template) {\n        return _encode(s, t, template, true);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Contextually encodes the characters of string that are either non-ASCII characters or are ASCII characters that must be percent-encoded using the UTF-8 encoding. Percent-encoded characters will be recognized and not double encoded.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "694", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriComponent.java", "methodName": "org.atmosphere.util.uri.UriComponent.encode", "methodParameterType": "String#Type#", "methodParameterName": "s#t#", "methodBody": "public static String encode(String s, Type t) {\n        return _encode(s, t, false, false);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#BooleanLiteral#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Encodes the characters of string that are either non-ASCII characters  or are ASCII characters that must be percent-encoded using the  UTF-8 encoding.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "695", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriComponent.java", "methodName": "org.atmosphere.util.uri.UriComponent.encode", "methodParameterType": "String#Type#boolean#", "methodParameterName": "s#t#template#", "methodBody": "public static String encode(String s, Type t, boolean template) {\n        return _encode(s, t, template, false);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Encodes the characters of string that are either non-ASCII characters  or are ASCII characters that must be percent-encoded using the  UTF-8 encoding.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "696", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriComponent.java", "methodName": "org.atmosphere.util.uri.UriComponent.encodeTemplateNames", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public static String encodeTemplateNames(String s) {\n        int i = s.indexOf('{');\n        if (i != -1)\n            s = s.replace(\"{\", \"%7B\");\n        i = s.indexOf('}');\n        if (i != -1)\n            s = s.replace(\"}\", \"%7D\");\n\n        return s;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Encodes a string with template parameters names present, specifically the characters '{' and '}' will be percent-encoded.", "call_func_name": ["java.lang.String.indexOf", "java.lang.String.replace"], "call_func_parameter": [["int"], ["java.lang.CharSequence", "java.lang.CharSequence"]], "passed_comments": "/"}, {"index": "697", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriComponent.java", "methodName": "org.atmosphere.util.uri.UriComponent.decode", "methodParameterType": "String#Type#", "methodParameterName": "s#t#", "methodBody": "public static String decode(String s, Type t) {\n        if (s == null) {\n            throw new IllegalArgumentException();\n        }\n\n        final int n = s.length();\n        if (n == 0) {\n            return s;\n        }\n\n        // If there are no percent-escaped octets\n        if (s.indexOf('%') < 0) {\n            // If there are no '+' characters for query param\n            if (t == Type.QUERY_PARAM) {\n                if (s.indexOf('+') < 0) {\n                    return s;\n                }\n            } else {\n                return s;\n            }\n        } else {\n            // Malformed percent-escaped octet at the end\n            if (n < 2) // TODO localize\n            {\n                throw new IllegalArgumentException(\"Malformed percent-encoded octet at index 1\");\n            }\n\n            // Malformed percent-escaped octet at the end\n            if (s.charAt(n - 2) == '%') // TODO localize\n            {\n                throw new IllegalArgumentException(\"Malformed percent-encoded octet at index \" + (n - 2));\n            }\n        }\n\n        if (t == null)\n            return decode(s, n);\n        \n        switch (t) {\n            case HOST :\n                return decodeHost(s, n);\n            case QUERY_PARAM :\n                return decodeQueryParam(s, n);\n            default :\n                return decode(s, n);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#CharacterLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Decodes characters of a string that are percent-encoded octets using  UTF-8 decoding (if needed). <p> It is assumed that the string is valid according to an (unspecified) URI  component type. If a sequence of contiguous percent-encoded octets is  not a valid UTF-8 character then the octets are replaced with '\\uFFFD'. <p> If the URI component is of type HOST then any \"%\" found between \"[]\" is  left alone. It is an IPv6 literal with a scope_id. <p> If the URI component is of type QUERY_PARAM then any \"+\" is decoded as as ' '. <p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "698", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriComponent.java", "methodName": "org.atmosphere.util.uri.UriComponent.decodeQuery", "methodParameterType": "URI#boolean#", "methodParameterName": "u#decode#", "methodBody": "public static Map<String, String> decodeQuery(URI u, boolean decode) {\n        return decodeQuery(u.getRawQuery(), decode);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Decode the query component of a URI.", "call_func_name": ["java.net.URI.getRawQuery", "org.atmosphere.util.uri.UriComponent.decodeQuery"], "call_func_parameter": [[""], ["java.lang.String", "boolean"]], "passed_comments": [{"org.atmosphere.util.uri.UriComponent.decodeQuery": "Decode the query component of a URI."}]}, {"index": "699", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriComponent.java", "methodName": "org.atmosphere.util.uri.UriComponent.decodeQuery", "methodParameterType": "String#boolean#", "methodParameterName": "q#decode#", "methodBody": "public static Map<String, String> decodeQuery(String q, boolean decode) {\n        Map<String, String> queryParameters = new HashMap<String, String>();\n\n        if (q == null || q.length() == 0) {\n            return queryParameters;\n        }\n\n        int s = 0, e = 0;\n        do {\n            e = q.indexOf('&', s);\n\n            if (e == -1) {\n                decodeQueryParam(queryParameters, q.substring(s), decode);\n            } else if (e > s) {\n                decodeQueryParam(queryParameters, q.substring(s, e), decode);\n            }\n            s = e + 1;\n        } while (s > 0 && s < q.length());\n\n        return queryParameters;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#CharacterLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#Block#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#InfixExpression#DoStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(DoStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)Block(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)InfixExpression)DoStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Decode the query component of a URI.", "call_func_name": ["java.util.HashMap.<init>", "java.lang.String.length", "java.lang.String.indexOf", "java.lang.String.substring", "org.atmosphere.util.uri.UriComponent.decodeQueryParam", "java.lang.String.substring"], "call_func_parameter": [[""], [""], ["int", "int"], ["int"], ["java.util.Map", "java.lang.String", "boolean"], ["int", "int"]], "passed_comments": "/"}, {"index": "700", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriComponent.java", "methodName": "org.atmosphere.util.uri.UriComponent.decodePath", "methodParameterType": "URI#boolean#", "methodParameterName": "u#decode#", "methodBody": "public static List<PathSegmentImpl> decodePath(URI u, boolean decode) {\n        String rawPath = u.getRawPath();\n        if (rawPath != null && rawPath.length() > 0 && rawPath.charAt(0) == '/') {\n            rawPath = rawPath.substring(1);\n        }\n        return decodePath(rawPath, decode);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#NumberLiteral#MethodInvocation#CharacterLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(CharacterLiteral)CharacterLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Decode the path component of a URI as path segments.", "call_func_name": ["java.net.URI.getRawPath", "java.lang.String.length", "java.lang.String.charAt", "java.lang.String.substring", "org.atmosphere.util.uri.UriComponent.decodePath"], "call_func_parameter": [[""], [""], ["int"], ["int"], ["java.lang.String", "boolean"]], "passed_comments": [{"org.atmosphere.util.uri.UriComponent.decodePath": "Decode the path component of a URI as path segments. <p> Any '/' character in the path is considered to be a deliminator between two path segments. Thus if the path is '/' then the path segment list will contain two empty path segments. If the path is \"//\" then the path segment list will contain three empty path segments. If the path is \"/a/\" the path segment list will consist of the following path segments in order: \"\", \"a\" and \"\"."}]}, {"index": "701", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriComponent.java", "methodName": "org.atmosphere.util.uri.UriComponent.decodePath", "methodParameterType": "String#boolean#", "methodParameterName": "path#decode#", "methodBody": "public static List<PathSegmentImpl> decodePath(String path, boolean decode) {\n        List<PathSegmentImpl> segments = new LinkedList<PathSegmentImpl>();\n\n        if (path == null) {\n            return segments;\n        }\n\n        int s = 0;\n        int e = -1;\n        do {\n            s = e + 1;\n            e = path.indexOf('/', s);\n\n            if (e > s) {\n                decodePathSegment(segments, path.substring(s, e), decode);\n            } else if (e == s) {\n                segments.add(PathSegmentImpl.EMPTY_PATH_SEGMENT);\n            }\n        } while (e != -1);\n        if (s < path.length()) {\n            decodePathSegment(segments, path.substring(s), decode);\n        } else {\n            segments.add(PathSegmentImpl.EMPTY_PATH_SEGMENT);\n        }\n        return segments;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#PrefixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#CharacterLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#DoStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)VariableDeclarationFragment)VariableDeclarationStatement(DoStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression)DoStatement(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Decode the path component of a URI as path segments. <p> Any '/' character in the path is considered to be a deliminator between two path segments. Thus if the path is '/' then the path segment list will contain two empty path segments. If the path is \"//\" then the path segment list will contain three empty path segments. If the path is \"/a/\" the path segment list will consist of the following path segments in order: \"\", \"a\" and \"\".", "call_func_name": ["java.util.LinkedList.<init>", "java.lang.String.indexOf", "java.lang.String.substring", "org.atmosphere.util.uri.UriComponent.decodePathSegment", "java.util.List.add", "java.lang.String.length", "java.lang.String.substring"], "call_func_parameter": [[""], ["int", "int"], ["int", "int"], ["java.util.List", "java.lang.String", "boolean"], ["java.lang.Object"], [""], ["int"]], "passed_comments": "/"}, {"index": "702", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriComponent.java", "methodName": "org.atmosphere.util.uri.UriComponent.decodeMatrix", "methodParameterType": "String#boolean#", "methodParameterName": "pathSegment#decode#", "methodBody": "public static Map<String, String> decodeMatrix(String pathSegment, boolean decode) {\n        Map<String, String> matrixMap = new HashMap<String, String>();\n\n        // Skip over path segment\n        int s = pathSegment.indexOf(';') + 1;\n        if (s == 0 || s == pathSegment.length()) {\n            return matrixMap;\n        }\n\n        int e = 0;\n        do {\n            e = pathSegment.indexOf(';', s);\n\n            if (e == -1) {\n                decodeMatrixParam(matrixMap, pathSegment.substring(s), decode);\n            } else if (e > s) {\n                decodeMatrixParam(matrixMap, pathSegment.substring(s, e), decode);\n            }\n            s = e + 1;\n        } while (s > 0 && s < pathSegment.length());\n\n        return matrixMap;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#CharacterLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#Block#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#InfixExpression#DoStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(DoStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)Block(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)InfixExpression)DoStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Decode the matrix component of a URI path segment.", "call_func_name": ["java.util.HashMap.<init>", "java.lang.String.indexOf", "java.lang.String.length", "java.lang.String.indexOf", "java.lang.String.substring", "org.atmosphere.util.uri.UriComponent.decodeMatrixParam", "java.lang.String.substring"], "call_func_parameter": [[""], ["int"], [""], ["int", "int"], ["int"], ["java.util.Map", "java.lang.String", "boolean"], ["int", "int"]], "passed_comments": "/"}, {"index": "703", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriComponent.java", "methodName": "org.atmosphere.util.uri.UriComponent.decodePercentEncodedOctets", "methodParameterType": "String#int#ByteBuffer#", "methodParameterName": "s#i#bb#", "methodBody": "private static ByteBuffer decodePercentEncodedOctets(String s, int i, ByteBuffer bb) {\n        if (bb == null)\n            bb = ByteBuffer.allocate(1);\n        else\n            bb.clear();\n\n        while (true) {\n            // Decode the hex digits\n            bb.put((byte) (decodeHex(s, i++) << 4 | decodeHex(s, i++)));\n\n            // Finish if at the end of the string\n            if (i == s.length()) {\n                break;\n            }\n\n            // Finish if no more percent-encoded octets follow\n            if (s.charAt(i++) != '%') {\n                break;\n            }\n\n            // Check if the byte buffer needs to be increased in size\n            if (bb.position() == bb.capacity()) {\n                bb.flip();\n                // Create a new byte buffer with the maximum number of possible\n                // octets, hence resize should only occur once\n                ByteBuffer bb_new = ByteBuffer.allocate(s.length() / 3);\n                bb_new.put(bb);\n                bb = bb_new;\n            }\n        }\n\n        bb.flip();\n        return bb;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#BooleanLiteral#SimpleName#SimpleName#PrimitiveType#SimpleName#SimpleName#SimpleName#PostfixExpression#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#PostfixExpression#MethodInvocation#InfixExpression#ParenthesizedExpression#CastExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#BreakStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#PostfixExpression#MethodInvocation#CharacterLiteral#InfixExpression#BreakStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#WhileStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(WhileStatement(BooleanLiteral)BooleanLiteral(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)MethodInvocation)InfixExpression)ParenthesizedExpression)CastExpression)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(BreakStatement)BreakStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)MethodInvocation(CharacterLiteral)CharacterLiteral)InfixExpression(Block(BreakStatement)BreakStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)WhileStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Decode a contigious sequence of percent encoded octets. <p> Assumes the index, i, starts that the first hex digit of the first percent-encoded octet.", "call_func_name": ["java.nio.ByteBuffer.allocate", "java.nio.ByteBuffer.clear", "org.atmosphere.util.uri.UriComponent.decodeHex", "java.nio.ByteBuffer.put", "java.lang.String.length", "java.lang.String.charAt", "java.nio.ByteBuffer.position", "java.nio.ByteBuffer.capacity", "java.nio.ByteBuffer.flip", "java.nio.ByteBuffer.put"], "call_func_parameter": [["int"], [""], ["java.lang.String", "int"], ["byte"], [""], ["int"], [""], [""], [""], ["java.nio.ByteBuffer"]], "passed_comments": "/"}, {"index": "704", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriComponent.java", "methodName": "org.atmosphere.util.uri.UriComponent.decodeOctets", "methodParameterType": "int#ByteBuffer#StringBuilder#", "methodParameterName": "i#bb#sb#", "methodBody": "private static int decodeOctets(int i, ByteBuffer bb, StringBuilder sb) {\n        // If there is only one octet and is an ASCII character\n        if (bb.limit() == 1 && (bb.get(0) & 0xFF) < 0x80) {\n            // Octet can be appended directly\n            sb.append((char) bb.get(0));\n            return i + 2;\n        } else {\n            // \n            CharBuffer cb = UTF_8_CHARSET.decode(bb);\n            sb.append(cb.toString());\n            return i + bb.limit() * 3 - 1;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#PrimitiveType#SimpleName#SimpleName#NumberLiteral#MethodInvocation#CastExpression#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#NumberLiteral#InfixExpression#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)CastExpression)MethodInvocation)ExpressionStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Decodes octets to characters using the UTF-8 decoding and appends the characters to a StringBuffer.", "call_func_name": ["java.nio.ByteBuffer.limit", "java.nio.ByteBuffer.get", "java.lang.StringBuilder.append", "java.nio.charset.Charset.decode", "java.nio.CharBuffer.toString", "java.lang.StringBuilder.append"], "call_func_parameter": [[""], ["int"], ["char"], ["java.nio.ByteBuffer"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "705", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.UriTemplate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private UriTemplate() {\n        this.template = this.normalizedTemplate = \"\";\n        this.pattern = UriPattern.EMPTY;\n        this.endsWithSlash = false;\n        this.templateVariables = Collections.emptyList();\n        this.numOfExplicitRegexes = this.numOfCharacters = 0;\n    }", "AST": "Javadoc#Modifier#SimpleName#ThisExpression#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#StringLiteral#Assignment#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#NumberLiteral#Assignment#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)Assignment)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)Assignment)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor for NULL template", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "706", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.UriTemplate", "methodParameterType": "String#", "methodParameterName": "template#", "methodBody": "public UriTemplate(String template) throws\n            PatternSyntaxException, IllegalArgumentException {\n        this(new UriTemplateParser(template));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct a new URI template. <p> The template will be parsed to extract template variables. <p> A specific regular expression will be generated from the template to match URIs according to the template and map template variables to template values. <p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "707", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.UriTemplate", "methodParameterType": "UriTemplateParser#", "methodParameterName": "templateParser#", "methodBody": "protected UriTemplate(UriTemplateParser templateParser) throws \n            PatternSyntaxException, IllegalArgumentException {\n        this.template = templateParser.getTemplate();\n        \n        this.normalizedTemplate = templateParser.getNormalizedTemplate();\n\n        this.pattern = createUriPattern(templateParser);\n\n        this.numOfExplicitRegexes = templateParser.getNumberOfExplicitRegexes();\n        \n        this.numOfCharacters = templateParser.getNumberOfLiteralCharacters();\n\n        this.endsWithSlash = template.charAt(template.length() - 1) == '/';\n\n        this.templateVariables = templateParser.getNames();\n\n        templateParser.destroy();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#CharacterLiteral#InfixExpression#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation(CharacterLiteral)CharacterLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Construct a new URI template. <p> The template will be parsed to extract template variables. <p> A specific regular expression will be generated from the template to match URIs according to the template and map template variables to template values. <p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "708", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.createUriPattern", "methodParameterType": "UriTemplateParser#", "methodParameterName": "templateParser#", "methodBody": "protected UriPattern createUriPattern(UriTemplateParser templateParser) {\n        return new UriPattern(templateParser.getPattern(), templateParser.getGroupIndexes()); \n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create the URI pattern from a URI template parser.", "call_func_name": ["org.atmosphere.util.uri.UriTemplateParser.getPattern", "org.atmosphere.util.uri.UriTemplateParser.getGroupIndexes", "org.atmosphere.util.uri.UriPattern.<init>"], "call_func_parameter": [[""], [""], ["java.util.regex.Pattern", "int[]"]], "passed_comments": [{"org.atmosphere.util.uri.UriTemplateParser.getPattern": "Get the pattern."}, {"org.atmosphere.util.uri.UriTemplateParser.getGroupIndexes": "Get the group indexes to capturing groups. <p> Any nested capturing groups will be ignored and the the group index will refer to the top-level capturing groups associated with the templates variables."}]}, {"index": "709", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.getTemplate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final String getTemplate() {\n        return template;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the URI template as a String.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "710", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.getPattern", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final UriPattern getPattern() {\n        return pattern;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the URI pattern.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "711", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.endsWithSlash", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final boolean endsWithSlash() {\n        return endsWithSlash;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return true if the template ends in a '/', otherwise false.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "712", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.getTemplateVariables", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final List<String> getTemplateVariables() {\n        return templateVariables;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the list of template variables for the template.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "713", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.isTemplateVariablePresent", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public final boolean isTemplateVariablePresent(String name) {\n        for (String s : templateVariables) {\n            if (s.equals(name))\n                return true;\n        }\n        \n        return false;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Ascertain if a template variable is a member of this template.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.String.equals"], "call_func_parameter": [[""], [""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "714", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.getNumberOfExplicitRegexes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final int getNumberOfExplicitRegexes() {\n        return numOfExplicitRegexes;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the number of explicit regexes declared in template variables.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "715", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.getNumberOfExplicitCharacters", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final int getNumberOfExplicitCharacters() {\n        return numOfCharacters;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the number of characters in the regular expression not resulting from conversion of template variables.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "716", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.getNumberOfTemplateVariables", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final int getNumberOfTemplateVariables() {\n        return templateVariables.size();\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the number of template variables.", "call_func_name": ["java.util.List.size"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "717", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.match", "methodParameterType": "CharSequence#Map<String,String>#", "methodParameterName": "uri#templateVariableToValue#", "methodBody": "public final boolean match(CharSequence uri, Map<String, String> templateVariableToValue) throws\n            IllegalArgumentException {\n        if (templateVariableToValue == null) \n            throw new IllegalArgumentException();\n\n        return pattern.match(uri, templateVariables, templateVariableToValue);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Match a URI against the template. <p> If the URI matches against the pattern then the template variable to value  map will be filled with template variables as keys and template values as  values. <p>", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "org.atmosphere.util.uri.UriPattern.match"], "call_func_parameter": [[""], ["java.lang.CharSequence", "java.util.List", "java.util.Map"]], "passed_comments": [{"org.atmosphere.util.uri.UriPattern.match": "Match a URI against the pattern. <p> If the URI matches against the pattern then the capturing group values (if any) will be added to a map passed in as parameter."}]}, {"index": "718", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.match", "methodParameterType": "CharSequence#List<String>#", "methodParameterName": "uri#groupValues#", "methodBody": "public final boolean match(CharSequence uri, List<String> groupValues) throws\n            IllegalArgumentException {\n        if (groupValues == null) \n            throw new IllegalArgumentException();\n\n        return pattern.match(uri, groupValues);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Match a URI against the template. <p> If the URI matches against the pattern then the template variable to value  map will be filled with template variables as keys and template values as  values. <p>", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "org.atmosphere.util.uri.UriPattern.match"], "call_func_parameter": [[""], ["java.lang.CharSequence", "java.util.List"]], "passed_comments": [{"org.atmosphere.util.uri.UriPattern.match": "Match a URI against the pattern. <p> If the URI matches against the pattern then the capturing group values (if any) will be added to a list passed in as parameter."}]}, {"index": "719", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.createURI", "methodParameterType": "Map<String,String>#", "methodParameterName": "values#", "methodBody": "public final String createURI(Map<String, String> values) {\n        StringBuilder b = new StringBuilder();\n        // Find all template variables\n        Matcher m = TEMPLATE_NAMES_PATTERN.matcher(normalizedTemplate);\n        int i = 0;\n        while(m.find()) {\n            b.append(normalizedTemplate, i, m.start());\n            String tValue = values.get(m.group(1));\n            if (tValue != null) b.append(tValue);\n            i = m.end();\n        }\n        b.append(normalizedTemplate, i, normalizedTemplate.length());\n        return b.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a URI by substituting any template variables for corresponding template values. <p> A URI template variable without a value will be substituted by the  empty string.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.find", "java.util.regex.Matcher.start", "java.lang.StringBuilder.append", "java.util.regex.Matcher.group", "java.util.Map.get", "java.lang.StringBuilder.append", "java.util.regex.Matcher.end", "java.lang.String.length", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.CharSequence"], [""], [""], ["java.lang.CharSequence", "int", "int"], ["int"], ["java.lang.Object"], ["java.lang.String"], [""], [""], [""]], "passed_comments": "/"}, {"index": "720", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.createURI", "methodParameterType": "String#", "methodParameterName": "values#", "methodBody": "public final String createURI(String... values) {\n        return createURI(values, 0, values.length);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a URI by substituting any template variables for corresponding template values. <p> A URI template varibale without a value will be substituted by the  empty string.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "721", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.createURI", "methodParameterType": "String[]#int#int#", "methodParameterName": "values#offset#length#", "methodBody": "public final String createURI(String[] values, int offset, int length) {\n        Map<String, String> mapValues = new HashMap<String, String>();\n        StringBuilder b = new StringBuilder();\n        // Find all template variables\n        Matcher m = TEMPLATE_NAMES_PATTERN.matcher(normalizedTemplate);\n        int v = offset;\n        length += offset;\n        int i = 0;\n        while(m.find()) {\n            b.append(normalizedTemplate, i, m.start());\n            String tVariable = m.group(1);\n            // Check if a template variable has already occurred\n            // If so use the value to ensure that two or more declarations of \n            // a template variable have the same value\n            String tValue = mapValues.get(tVariable);\n            if (tValue != null) {\n                b.append(tValue);\n            } else {\n                if (v < length) {\n                    tValue = values[v++];\n                    if (tValue != null) {\n                        mapValues.put(tVariable, tValue);\n                        b.append(tValue);\n                    }\n                }\n            }\n            i = m.end();\n        }\n        b.append(normalizedTemplate, i, normalizedTemplate.length());\n        return b.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#PostfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a URI by substituting any template variables for corresponding template values. <p> A URI template variable without a value will be substituted by the  empty string.", "call_func_name": ["java.util.HashMap.<init>", "java.lang.StringBuilder.<init>", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.find", "java.util.regex.Matcher.start", "java.lang.StringBuilder.append", "java.util.regex.Matcher.group", "java.util.Map.get", "java.lang.StringBuilder.append", "java.util.Map.put", "java.util.regex.Matcher.end", "java.lang.String.length", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], ["java.lang.CharSequence"], [""], [""], ["java.lang.CharSequence", "int", "int"], ["int"], ["java.lang.Object"], ["java.lang.String"], ["java.lang.Object", "java.lang.Object"], [""], [""], [""]], "passed_comments": "/"}, {"index": "722", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.hashCode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public final int hashCode() {\n        return pattern.hashCode();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Hashcode is calculated from String of the regular expression  generated from the template.", "call_func_name": ["org.atmosphere.util.uri.UriPattern.hashCode"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "723", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.equals", "methodParameterType": "Object#", "methodParameterName": "o#", "methodBody": "@Override\n    public final boolean equals(Object o) {\n        if (o instanceof UriTemplate) {\n            UriTemplate that = (UriTemplate)o;\n            return this.pattern.equals(that.pattern);\n        } else {\n            return false;\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Equality is calculated from the String of the regular expression  generated from the templates.", "call_func_name": ["org.atmosphere.util.uri.UriPattern.equals"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "724", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.createURI", "methodParameterType": "String#String#String#String#String#String#String#Map<String,? extends Object>#boolean#", "methodParameterName": "scheme#userInfo#host#port#path#query#fragment#values#encode#", "methodBody": "public final static String createURI(final String scheme, \n            final String userInfo, final String host, final String port, \n            final String path, final String query, final String fragment,\n            final Map<String, ? extends Object> values, final boolean encode) {\n        return createURI(scheme, null, userInfo, host, port, path, query, fragment,\n                values, encode);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Construct a URI from the component parts each of which may contain  template variables. <p> A template values is an Object instance MUST support the toString()  method to convert the template value to a String instance.", "call_func_name": ["org.atmosphere.util.uri.UriTemplate.createURI"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.util.Map", "boolean"]], "passed_comments": [{"org.atmosphere.util.uri.UriTemplate.createURI": "Construct a URI from the component parts each of which may contain template variables. <p> A template values is an Object instance MUST support the toString() method to convert the template value to a String instance."}]}, {"index": "725", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.createURI", "methodParameterType": "String#String#String#String#String#String#String#String#Map<String,? extends Object>#boolean#", "methodParameterName": "scheme#authority#userInfo#host#port#path#query#fragment#values#encode#", "methodBody": "public final static String createURI(\n            final String scheme, String authority,\n            final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment,\n            final Map<String, ? extends Object> values, final boolean encode) {\n        Map<String, String> stringValues = new HashMap<String, String>();\n        for (Map.Entry<String, ? extends Object> e : values.entrySet()) {\n            if (e.getValue() != null)\n                stringValues.put(e.getKey(), e.getValue().toString());\n        }\n\n        return createURIWithStringValues(scheme, authority,\n                userInfo, host, port, path, query, fragment,\n                stringValues, encode);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)IfStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Construct a URI from the component parts each of which may contain template variables. <p> A template values is an Object instance MUST support the toString() method to convert the template value to a String instance.", "call_func_name": ["java.util.HashMap.<init>", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.Object.toString", "java.util.Map.put", "org.atmosphere.util.uri.UriTemplate.createURIWithStringValues"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.util.Map", "boolean"]], "passed_comments": [{"org.atmosphere.util.uri.UriTemplate.createURIWithStringValues": "Construct a URI from the component parts each of which may contain template variables. <p> A template value is an Object instance that MUST support the toString() method to convert the template value to a String instance."}]}, {"index": "726", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.createURIWithStringValues", "methodParameterType": "String#String#String#String#String#String#String#Map<String,? extends Object>#boolean#", "methodParameterName": "scheme#userInfo#host#port#path#query#fragment#values#encode#", "methodBody": "public final static String createURIWithStringValues(final String scheme, \n            final String userInfo, final String host, final String port, \n            final String path, final String query, final String fragment,\n            final Map<String, ? extends Object> values, final boolean encode) {\n        return createURIWithStringValues(scheme, null,\n                userInfo, host, port, path, query, fragment,\n                values, encode);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Construct a URI from the component parts each of which may contain  template variables. <p> A template value is an Object instance that MUST support the toString()  method to convert the template value to a String instance.", "call_func_name": ["org.atmosphere.util.uri.UriTemplate.createURIWithStringValues"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.util.Map", "boolean"]], "passed_comments": [{"org.atmosphere.util.uri.UriTemplate.createURIWithStringValues": "Construct a URI from the component parts each of which may contain template variables. <p> A template value is an Object instance that MUST support the toString() method to convert the template value to a String instance."}]}, {"index": "727", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.createURIWithStringValues", "methodParameterType": "String#String#String#String#String#String#String#String#Map<String,? extends Object>#boolean#", "methodParameterName": "scheme#authority#userInfo#host#port#path#query#fragment#values#encode#", "methodBody": "public final static String createURIWithStringValues(\n            final String scheme, final String authority,\n            final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment,\n            final Map<String, ? extends Object> values, final boolean encode) {\n\n        StringBuilder sb = new StringBuilder();\n\n        if (scheme != null)\n            createURIComponent(UriComponent.Type.SCHEME, scheme, values, false, sb).\n                    append(':');\n\n        if (userInfo != null || host != null || port != null) {\n            sb.append(\"//\");\n\n            if (userInfo != null && userInfo.length() > 0)\n                createURIComponent(UriComponent.Type.USER_INFO, userInfo, values, encode, sb).\n                    append('@');\n\n            if (host != null) {\n                // TODO check IPv6 address\n                createURIComponent(UriComponent.Type.HOST, host, values, encode, sb);\n            }\n\n            if (port != null && port.length() > 0) {\n                sb.append(':');\n                createURIComponent(UriComponent.Type.PORT, port, values, false, sb);\n            }\n        } else if (authority != null) {\n            sb.append(\"//\");\n            \n            createURIComponent(UriComponent.Type.AUTHORITY, authority, values, encode, sb);\n        }\n\n        if (path != null)\n            createURIComponent(UriComponent.Type.PATH, path, values, encode, sb);\n\n        if (query != null && query.length() > 0) {\n            sb.append('?');\n            createURIComponent(UriComponent.Type.QUERY_PARAM, query, values, encode, sb);\n        }\n\n        if (fragment != null && fragment.length() > 0) {\n            sb.append('#');\n            createURIComponent(UriComponent.Type.FRAGMENT, fragment, values, encode, sb);\n        }\n        return sb.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#BooleanLiteral#SimpleName#MethodInvocation#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#BooleanLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Construct a URI from the component parts each of which may contain template variables. <p> A template value is an Object instance that MUST support the toString() method to convert the template value to a String instance.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.String.length", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["char"], ["java.lang.String"], [""], [""]], "passed_comments": "/"}, {"index": "728", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.createURI", "methodParameterType": "String#String#String#String#String#String#String#Object[]#boolean#", "methodParameterName": "scheme#userInfo#host#port#path#query#fragment#values#encode#", "methodBody": "public final static String createURI(final String scheme, \n            final String userInfo, final String host, final String port, \n            final String path, final String query, final String fragment,\n            final Object[] values, final boolean encode) {\n        return createURI(scheme, null,\n                userInfo, host, port, path, query, fragment,\n                values, encode);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Construct a URI from the component parts each of which may contain  template variables. <p> The template values are an array of Object and each Object instance MUST support the toString() method to convert the template value to a String instance.", "call_func_name": ["org.atmosphere.util.uri.UriTemplate.createURI"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Object[]", "boolean"]], "passed_comments": [{"org.atmosphere.util.uri.UriTemplate.createURI": "Construct a URI from the component parts each of which may contain template variables. <p> The template values are an array of Object and each Object instance MUST support the toString() method to convert the template value to a String instance."}]}, {"index": "729", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.createURI", "methodParameterType": "String#String#String#String#String#String#String#String#Object[]#boolean#", "methodParameterName": "scheme#authority#userInfo#host#port#path#query#fragment#values#encode#", "methodBody": "public final static String createURI(\n            final String scheme, String authority,\n            final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment,\n            final Object[] values, final boolean encode) {\n\n        String[] stringValues = new String[values.length];\n        for (int i = 0; i < values.length; i++) {\n            if (values[i] != null)\n                stringValues[i] = values[i].toString();\n        }\n\n        return createURIWithStringValues(\n                scheme, authority,\n                userInfo, host, port, path, query, fragment,\n                stringValues, encode);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#NullLiteral#InfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#Assignment#ExpressionStatement#IfStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)IfStatement)Block)ForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Construct a URI from the component parts each of which may contain template variables. <p> The template values are an array of Object and each Object instance MUST support the toString() method to convert the template value to a String instance.", "call_func_name": ["java.lang.Object.toString", "org.atmosphere.util.uri.UriTemplate.createURIWithStringValues"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String[]", "boolean"]], "passed_comments": [{"org.atmosphere.util.uri.UriTemplate.createURIWithStringValues": "Construct a URI from the component parts each of which may contain template variables."}]}, {"index": "730", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.createURIWithStringValues", "methodParameterType": "String#String#String#String#String#String#String#String[]#boolean#", "methodParameterName": "scheme#userInfo#host#port#path#query#fragment#values#encode#", "methodBody": "public final static String createURIWithStringValues(final String scheme, \n            final String userInfo, final String host, final String port, \n            final String path, final String query, final String fragment,\n            final String[] values, final boolean encode) {\n        return createURIWithStringValues(\n                scheme, null,\n                userInfo, host, port, path, query, fragment,\n                values, encode);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Construct a URI from the component parts each of which may contain  template variables.", "call_func_name": ["org.atmosphere.util.uri.UriTemplate.createURIWithStringValues"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String[]", "boolean"]], "passed_comments": [{"org.atmosphere.util.uri.UriTemplate.createURIWithStringValues": "Construct a URI from the component parts each of which may contain template variables."}]}, {"index": "731", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplate.java", "methodName": "org.atmosphere.util.uri.UriTemplate.createURIWithStringValues", "methodParameterType": "String#String#String#String#String#String#String#String#String[]#boolean#", "methodParameterName": "scheme#authority#userInfo#host#port#path#query#fragment#values#encode#", "methodBody": "public final static String createURIWithStringValues(\n            final String scheme, final String authority,\n            final String userInfo, final String host, final String port,\n            final String path, final String query, final String fragment,\n            final String[] values, final boolean encode) {\n\n        final Map<String, String> mapValues = new HashMap<String, String>();\n        final StringBuilder sb = new StringBuilder();\n        int offset = 0;\n\n        if (scheme != null) {\n            offset = createURIComponent(UriComponent.Type.SCHEME, scheme, values,\n                    offset, false, mapValues, sb);\n            sb.append(':');\n        }\n\n        if (userInfo != null || host != null || port != null) {\n            sb.append(\"//\");\n\n            if (userInfo != null && userInfo.length() > 0) {\n                offset = createURIComponent(UriComponent.Type.USER_INFO, userInfo, values,\n                        offset, encode, mapValues, sb);\n                sb.append('@');\n            }\n\n            if (host != null) {\n                // TODO check IPv6 address\n                offset = createURIComponent(UriComponent.Type.HOST, host, values,\n                        offset, encode, mapValues, sb);\n            }\n\n            if (port != null && port.length() > 0) {\n                sb.append(':');\n                offset = createURIComponent(UriComponent.Type.PORT, port, values,\n                        offset, false, mapValues, sb);\n            }\n        } else if (authority != null) {\n            sb.append(\"//\");\n            \n            offset = createURIComponent(UriComponent.Type.AUTHORITY, authority, values,\n                    offset, encode, mapValues, sb);\n        }\n\n        if (path != null)\n            offset = createURIComponent(UriComponent.Type.PATH, path, values,\n                    offset, encode, mapValues, sb);\n\n        if (query != null && query.length() > 0) {\n            sb.append('?');\n            offset = createURIComponent(UriComponent.Type.QUERY_PARAM, query, values,\n                    offset, encode, mapValues, sb);\n        }\n\n        if (fragment != null && fragment.length() > 0) {\n            sb.append('#');\n            offset = createURIComponent(UriComponent.Type.FRAGMENT, fragment, values,\n                    offset, encode, mapValues, sb);\n        }\n        return sb.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#BooleanLiteral#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#BooleanLiteral#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Construct a URI from the component parts each of which may contain template variables.", "call_func_name": ["java.util.HashMap.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.String.length", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], ["char"], ["java.lang.String"], [""], [""]], "passed_comments": "/"}, {"index": "732", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplateParser.java", "methodName": "org.atmosphere.util.uri.UriTemplateParser.UriTemplateParser", "methodParameterType": "String#", "methodParameterName": "template#", "methodBody": "public UriTemplateParser(String template) {\n        if (template == null || template.length() == 0)\n            throw new IllegalArgumentException();\n\n        this.template = template;\n        parse(new StringCharacterIterator(template));\n        try {\n            pattern = Pattern.compile(regex.toString());\n        } catch (PatternSyntaxException ex) {\n            throw new IllegalArgumentException(\"Invalid syntax for the template expression '\" + \n                    regex + \"'\", \n                    ex);            \n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Parse a template.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "733", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplateParser.java", "methodName": "org.atmosphere.util.uri.UriTemplateParser.getTemplate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final String getTemplate() {\n        return template;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the template.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "734", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplateParser.java", "methodName": "org.atmosphere.util.uri.UriTemplateParser.getPattern", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final Pattern getPattern() {\n        return pattern;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the pattern.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "735", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplateParser.java", "methodName": "org.atmosphere.util.uri.UriTemplateParser.getNormalizedTemplate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final String getNormalizedTemplate() {\n        return normalizedTemplate.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the normalized template. <p> A normalized template is a template without any explicit regular expressions.", "call_func_name": ["java.lang.StringBuffer.toString"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "736", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplateParser.java", "methodName": "org.atmosphere.util.uri.UriTemplateParser.getNameToPattern", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final Map<String, Pattern> getNameToPattern() {\n        return nameToPattern;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the map of template names to patterns.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "737", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplateParser.java", "methodName": "org.atmosphere.util.uri.UriTemplateParser.getNames", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final List<String> getNames() {\n        return names;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the list of template names.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "738", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplateParser.java", "methodName": "org.atmosphere.util.uri.UriTemplateParser.getGroupCounts", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final List<Integer> getGroupCounts() {\n        return groupCounts;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the capturing group counts for each template variable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "739", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplateParser.java", "methodName": "org.atmosphere.util.uri.UriTemplateParser.getGroupIndexes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final int[] getGroupIndexes() {\n        if (names.isEmpty()) return EMPTY_INT_ARRAY;\n\n        int[] indexes = new int[names.size() + 1];        \n        indexes[0] = 1;\n        for (int i = 1; i < indexes.length; i++) {\n            indexes[i] = indexes[i - 1] + groupCounts.get(i - 1);\n        }\n        for (int i = 0; i < indexes.length; i++) {\n            if (indexes[i] != i + 1)\n                return indexes;\n        }\n        return EMPTY_INT_ARRAY;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#IfStatement#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#ArrayAccess#NumberLiteral#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#InfixExpression#Assignment#ExpressionStatement#Block#ForStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#ReturnStatement#IfStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(InfixExpression(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)InfixExpression)Assignment)ExpressionStatement)Block)ForStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the group indexes to capturing groups. <p> Any nested capturing groups will be ignored and the the group index will refer to the top-level capturing groups associated with the templates variables.", "call_func_name": ["java.util.List.isEmpty", "java.util.List.size", "java.util.List.get", "java.lang.Integer.intValue"], "call_func_parameter": [[""], [""], ["int"], [""]], "passed_comments": "/"}, {"index": "740", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplateParser.java", "methodName": "org.atmosphere.util.uri.UriTemplateParser.getNumberOfExplicitRegexes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final int getNumberOfExplicitRegexes() {\n        return numOfExplicitRegexes;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the number of explicit regular expressions.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "741", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplateParser.java", "methodName": "org.atmosphere.util.uri.UriTemplateParser.getNumberOfLiteralCharacters", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final int getNumberOfLiteralCharacters() {\n        return literalCharacters;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the number of literal characters.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "742", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriTemplateParser.java", "methodName": "org.atmosphere.util.uri.UriTemplateParser.encodeLiteralCharacters", "methodParameterType": "String#", "methodParameterName": "literalCharacters#", "methodBody": "protected String encodeLiteralCharacters(String literalCharacters) {\n        return literalCharacters;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Encode literal characters of a template.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "743", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriPattern.java", "methodName": "org.atmosphere.util.uri.UriPattern.UriPattern", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected UriPattern() {\n        this.regex = \"\";\n        this.regexPattern = null;\n        this.groupIndexes = null;\n    }", "AST": "Javadoc#Modifier#SimpleName#ThisExpression#SimpleName#FieldAccess#StringLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Construct an empty pattern.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "744", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriPattern.java", "methodName": "org.atmosphere.util.uri.UriPattern.UriPattern", "methodParameterType": "String#", "methodParameterName": "regex#", "methodBody": "public UriPattern(String regex) {\n        this(regex, UriTemplateParser.EMPTY_INT_ARRAY);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct a new URI pattern.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "745", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriPattern.java", "methodName": "org.atmosphere.util.uri.UriPattern.UriPattern", "methodParameterType": "String#int[]#", "methodParameterName": "regex#groupIndexes#", "methodBody": "public UriPattern(String regex, int[] groupIndexes) {\n        this(compile(regex), groupIndexes);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct a new URI pattern.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "746", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriPattern.java", "methodName": "org.atmosphere.util.uri.UriPattern.UriPattern", "methodParameterType": "Pattern#", "methodParameterName": "regexPattern#", "methodBody": "public UriPattern(Pattern regexPattern) {\n        this(regexPattern, UriTemplateParser.EMPTY_INT_ARRAY);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct a new URI pattern.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "747", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriPattern.java", "methodName": "org.atmosphere.util.uri.UriPattern.UriPattern", "methodParameterType": "Pattern#int[]#", "methodParameterName": "regexPattern#groupIndexes#", "methodBody": "public UriPattern(Pattern regexPattern, int[] groupIndexes) {\n        if (regexPattern == null)\n            throw new IllegalArgumentException();\n\n        this.regex = regexPattern.toString();\n        this.regexPattern = regexPattern;\n        this.groupIndexes = groupIndexes;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Construct a new URI pattern.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "748", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriPattern.java", "methodName": "org.atmosphere.util.uri.UriPattern.getRegex", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final String getRegex() {\n        return regex;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the regular expression.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "749", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriPattern.java", "methodName": "org.atmosphere.util.uri.UriPattern.getGroupIndexes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final int[] getGroupIndexes() {\n        return groupIndexes;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the group indexes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "750", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriPattern.java", "methodName": "org.atmosphere.util.uri.UriPattern.match", "methodParameterType": "CharSequence#", "methodParameterName": "uri#", "methodBody": "public final MatchResult match(CharSequence uri) {\n        // Check for match against the empty pattern\n        if (uri == null || uri.length() == 0)\n            return (regexPattern == null) ? EMPTY_STRING_MATCH_RESULT : null;\n        else if (regexPattern == null)\n            return null;\n\n        // Match the URI to the URI template regular expression\n        Matcher m = regexPattern.matcher(uri);\n        if (!m.matches())\n            return null;\n\n        return (groupIndexes.length > 0) ? new GroupIndexMatchResult(m) : m;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#NullLiteral#ConditionalExpression#ReturnStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#IfStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#NullLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(ReturnStatement(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)ConditionalExpression)ReturnStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)IfStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)IfStatement(ReturnStatement(ConditionalExpression(ParenthesizedExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Match a URI against the pattern.", "call_func_name": ["java.lang.CharSequence.length", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches"], "call_func_parameter": [[""], ["java.lang.CharSequence"], [""]], "passed_comments": "/"}, {"index": "751", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriPattern.java", "methodName": "org.atmosphere.util.uri.UriPattern.match", "methodParameterType": "CharSequence#List<String>#", "methodParameterName": "uri#groupValues#", "methodBody": "public final boolean match(CharSequence uri, List<String> groupValues) {\n        if (groupValues == null)\n            throw new IllegalArgumentException();\n\n        // Check for match against the empty pattern\n        if (uri == null || uri.length() == 0)\n            return (regexPattern == null) ? true : false;\n        else if (regexPattern == null)\n            return false;\n\n        // Match the URI to the URI template regular expression\n        Matcher m = regexPattern.matcher(uri);\n        if (!m.matches())\n            return false;\n\n        groupValues.clear();\n        if (groupIndexes.length > 0) {\n            for (int i = 0; i < groupIndexes.length - 1; i++) {\n                groupValues.add(m.group(groupIndexes[i]));\n            }\n        } else {\n            for (int i = 1; i <= m.groupCount(); i++) {\n                groupValues.add(m.group(i));\n            }\n        }\n\n        // TODO check for consistency of different capturing groups\n        // that must have the same value\n\n        return true;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#BooleanLiteral#BooleanLiteral#ConditionalExpression#ReturnStatement#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#IfStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(ReturnStatement(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral)ConditionalExpression)ReturnStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)MethodInvocation)ExpressionStatement)Block)ForStatement)Block(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Match a URI against the pattern. <p> If the URI matches against the pattern then the capturing group values (if any) will be added to a list passed in as parameter.", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "java.lang.CharSequence.length", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "java.util.List.clear", "java.util.regex.Matcher.group", "java.util.List.add", "java.util.regex.Matcher.groupCount"], "call_func_parameter": [[""], [""], ["java.lang.CharSequence"], [""], [""], ["int"], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "752", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriPattern.java", "methodName": "org.atmosphere.util.uri.UriPattern.match", "methodParameterType": "CharSequence#List<String>#Map<String,String>#", "methodParameterName": "uri#groupNames#groupValues#", "methodBody": "public final boolean match(CharSequence uri,\n            List<String> groupNames, Map<String, String> groupValues) {\n        if (groupValues == null)\n            throw new IllegalArgumentException();\n\n        // Check for match against the empty pattern\n        if (uri == null || uri.length() == 0)\n            return (regexPattern == null) ? true : false;\n        else if (regexPattern == null)\n            return false;\n\n        // Match the URI to the URI template regular expression\n        Matcher m = regexPattern.matcher(uri);\n        if (!m.matches())\n            return false;\n\n        // Assign the matched group values to group names\n        groupValues.clear();\n        for (int i = 0; i < groupNames.size(); i++) {\n            String name  = groupNames.get(i);\n            String currentValue = m.group((groupIndexes.length > 0) ? groupIndexes[i] : i + 1);\n\n            // Group names can have the same name occuring more than once, \n            // check that groups values are same.\n            String previousValue = groupValues.get(name);\n            if (previousValue != null && !previousValue.equals(currentValue))\n                return false;\n\n            groupValues.put(name, currentValue);\n        }\n\n        return true;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#BooleanLiteral#BooleanLiteral#ConditionalExpression#ReturnStatement#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#IfStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#NumberLiteral#InfixExpression#ConditionalExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#BooleanLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(ReturnStatement(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral)ConditionalExpression)ReturnStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(ParenthesizedExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ConditionalExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Match a URI against the pattern. <p> If the URI matches against the pattern then the capturing group values (if any) will be added to a map passed in as parameter.", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "java.lang.CharSequence.length", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "java.util.Map.clear", "java.util.List.size", "java.util.List.get", "java.util.regex.Matcher.group", "java.util.Map.get", "java.lang.String.equals", "java.util.Map.put"], "call_func_parameter": [[""], [""], ["java.lang.CharSequence"], [""], [""], [""], ["int"], ["int"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "753", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java", "methodName": "org.atmosphere.util.IOUtils.deliver", "methodParameterType": "Object#DeliverTo#DeliverTo.DELIVER_TO#AtmosphereResource#", "methodParameterName": "o#deliverConfig#defaultDeliver#r#", "methodBody": "public static void deliver(final Object o,\n                               final DeliverTo deliverConfig,\n                               final DeliverTo.DELIVER_TO defaultDeliver,\n                               final AtmosphereResource r) {\n        final DeliverTo.DELIVER_TO deliverTo = deliverConfig == null ? defaultDeliver : deliverConfig.value();\n        switch (deliverTo) {\n            case RESOURCE:\n                r.getBroadcaster().broadcast(o, r);\n                break;\n            case BROADCASTER:\n                r.getBroadcaster().broadcast(o);\n                break;\n            case ALL:\n                for (Broadcaster b : r.getAtmosphereConfig().getBroadcasterFactory().lookupAll()) {\n                    b.broadcast(o);\n                }\n                break;\n\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#BreakStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(BreakStatement)BreakStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "<p> Delivers the given message according to the specified  {@link org.atmosphere.config.service.DeliverTo configuration).</p>}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "754", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java", "methodName": "org.atmosphere.util.IOUtils.forceReadEntirelyAsByte", "methodParameterType": "AtmosphereResource#", "methodParameterName": "r#", "methodBody": "public static byte[] forceReadEntirelyAsByte(AtmosphereResource r) throws IOException {\n        AtmosphereRequest request = r.getRequest();\n\n        AtmosphereRequestImpl.Body body = request.body();\n        if (request.body().isEmpty()) {\n            BufferedInputStream bufferedStream = null;\n            ByteArrayOutputStream bbIS = new ByteArrayOutputStream();\n            try {\n                try {\n                    InputStream inputStream = request.getInputStream();\n                    if (inputStream != null) {\n                        bufferedStream = new BufferedInputStream(inputStream);\n                    }\n                } catch (IllegalStateException ex) {\n                    logger.trace(\"\", ex);\n                    Reader reader = request.getReader();\n                    if (reader != null) {\n                        bufferedStream = new BufferedInputStream(new ReaderInputStream(reader));\n                    }\n                }\n\n                if (bufferedStream != null) {\n                    byte[] bytes = new byte[8192];\n                    int bytesRead = 0;\n                    while (bytesRead != -1) {\n                        bytesRead = bufferedStream.read(bytes);\n                        if (bytesRead > 0)\n                            bbIS.write(bytes, 0, bytesRead);\n                    }\n\n                } else {\n                    bbIS.write(\"\".getBytes());\n                }\n            } finally {\n                if (bufferedStream != null) {\n                    try {\n                        bufferedStream.close();\n                    } catch (IOException ex) {\n                        logger.warn(\"\", ex);\n                    }\n                }\n            }\n            return bbIS.toByteArray();\n        } else if (body.hasString()) {\n            try {\n                return body.asString().getBytes(request.getCharacterEncoding());\n            } catch (UnsupportedEncodingException e) {\n                logger.error(\"\", e);\n            }\n        } else if (body.hasBytes()) {\n            return Arrays.copyOfRange(body.asBytes(), body.byteOffset(), body.byteOffset() + body.byteLength());\n        }\n        throw new IllegalStateException(\"No body \" + r);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#Block#CatchClause#TryStatement#SimpleName#NullLiteral#InfixExpression#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#NumberLiteral#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#Block#WhileStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#TryStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement)Block)WhileStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)TryStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ReturnStatement)Block)IfStatement)IfStatement)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Reads request body as bytes without respect  {@link ApplicationConfig#READ_GET_BODY} parameter", "call_func_name": ["org.atmosphere.cpr.AtmosphereResource.getRequest", "org.atmosphere.cpr.AtmosphereRequest.body", "java.io.ByteArrayOutputStream.<init>", "org.atmosphere.cpr.AtmosphereRequest.getInputStream", "java.io.BufferedInputStream.<init>", "org.slf4j.Logger.trace", "org.atmosphere.cpr.AtmosphereRequest.getReader", "org.atmosphere.util.ReaderInputStream.<init>", "java.io.BufferedInputStream.read", "java.io.ByteArrayOutputStream.write", "java.lang.String.getBytes", "java.io.ByteArrayOutputStream.write", "java.io.BufferedInputStream.close", "org.slf4j.Logger.warn", "java.io.ByteArrayOutputStream.toByteArray", "org.atmosphere.cpr.AtmosphereRequest.getCharacterEncoding", "java.lang.String.getBytes", "org.slf4j.Logger.error", "java.util.Arrays.copyOfRange", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalStateException.<init>"], "call_func_parameter": [[""], [""], [""], [""], ["java.io.InputStream"], ["java.lang.String", "java.lang.Throwable"], [""], ["java.io.Reader"], ["byte[]"], ["byte[]", "int", "int"], [""], ["byte[]"], [""], ["java.lang.String", "java.lang.Throwable"], [""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Throwable"], ["byte[]", "int", "int"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.getRequest": "Return the underlying  {@link AtmosphereRequest} request."}, {"org.atmosphere.cpr.AtmosphereRequest.body": "Return the request's body. This method will return an empty Body if the underlying container or framework is using InputStream or Reader."}, {"org.atmosphere.cpr.AtmosphereRequest.getInputStream": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.getReader": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.getCharacterEncoding": "{@inheritDoc}"}]}, {"index": "755", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java", "methodName": "org.atmosphere.util.IOUtils.getCleanedServletPath", "methodParameterType": "String#", "methodParameterName": "fullServletPath#", "methodBody": "public static String getCleanedServletPath(String fullServletPath) {\n\n        if (fullServletPath.equalsIgnoreCase(\"/*\")) return \"\";\n\n        Matcher matcher = SERVLET_PATH_PATTERN.matcher(fullServletPath);\n\n        // It should not happen if the servlet path is valid\n        if (!matcher.find()) return fullServletPath;\n\n        String servletPath = matcher.group(0);\n        if (!servletPath.startsWith(\"/\")) {\n            servletPath = \"/\" + servletPath;\n        }\n\n        return servletPath;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#StringLiteral#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#StringLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Used to remove trailing slash and wildcard from a servlet path.<br/><br/> Examples :<br/> - \"/foo/\" becomes \"/foo\"<br/> - \"foo/bar\" becomes \"/foo/bar\"<br/>", "call_func_name": ["java.lang.String.equalsIgnoreCase", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.find", "java.util.regex.Matcher.group", "java.lang.String.startsWith", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [["java.lang.String"], ["java.lang.CharSequence"], [""], ["int"], ["java.lang.String"], [""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "756", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java", "methodName": "org.atmosphere.util.IOUtils.loadClass", "methodParameterType": "Class<?>#String#", "methodParameterName": "thisClass#className#", "methodBody": "public static Class<?> loadClass(Class<?> thisClass, String className) throws Exception {\n        try {\n            return Thread.currentThread().getContextClassLoader().loadClass(className);\n        } catch (Throwable t) {\n            try {\n                return Class.forName(className);\n            } catch (Exception t2) {\n                if (thisClass != null) {\n                    return thisClass.getClassLoader().loadClass(className);\n                }\n                throw t2;\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#ThrowStatement#Block#CatchClause#TryStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause)TryStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Loading the specified class using some heuristics to support various containers The order of preferece is: 1. Thread.currentThread().getContextClassLoader() 2. Class.forName 3. thisClass.getClassLoader()", "call_func_name": ["java.lang.Thread.currentThread", "java.lang.Thread.getContextClassLoader", "java.lang.ClassLoader.loadClass", "java.lang.Class.forName", "java.lang.Class.getClassLoader"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "757", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java", "methodName": "org.atmosphere.util.IOUtils.readServiceFile", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "public static Map<String, AtmosphereFramework.MetaServiceAction> readServiceFile(final String path) {\n        final Map<String, AtmosphereFramework.MetaServiceAction> b = new LinkedHashMap<String, AtmosphereFramework.MetaServiceAction>();\n\n        String line;\n        InputStream is = null;\n        BufferedReader reader = null;\n        AtmosphereFramework.MetaServiceAction action = AtmosphereFramework.MetaServiceAction.INSTALL;\n\n        try {\n            is = AtmosphereFramework.class.getClassLoader().getResourceAsStream(path);\n\n            if (is == null) {\n                logger.trace(\"META-INF/services/{} not found in class loader\", path);\n                return b;\n            }\n\n            reader = new BufferedReader(new InputStreamReader(is));\n\n            while (true) {\n                line = reader.readLine();\n\n                if (line == null) {\n                    break;\n                } else if (line.isEmpty()) {\n                    continue;\n                } else if (line.indexOf('.') == -1) {\n                    action = AtmosphereFramework.MetaServiceAction.valueOf(line);\n                } else {\n                    b.put(line, action);\n                }\n            }\n            logger.info(\"Successfully loaded and installed {}\", path);\n        } catch (IOException e) {\n            logger.trace(\"Unable to read META-INF/services/{} from class loader\", path, e);\n        } finally {\n            close(is, reader);\n        }\n\n        return b;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#Assignment#ExpressionStatement#BooleanLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#BreakStatement#Block#SimpleName#SimpleName#MethodInvocation#ContinueStatement#Block#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#IfStatement#Block#WhileStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)Assignment)ExpressionStatement(WhileStatement(BooleanLiteral)BooleanLiteral(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(BreakStatement)BreakStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ContinueStatement)ContinueStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)IfStatement)Block)WhileStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p> This method reads the given file stored under \"META-INF/services\" and accessed through the framework's class loader to specify a list of  {@link org.atmosphere.cpr.AtmosphereFramework.MetaServiceAction actions} to be done on differentservice classes ( {@link org.atmosphere.cpr.AtmosphereInterceptor},  {@link org.atmosphere.cpr.BroadcastFilter}, etc). </p> <p/> <p> The file content should follows the following format: <pre> INSTALL com.mycompany.MyInterceptor com.mycompany.MyFilter EXCLUDE org.atmosphere.interceptor.HeartbeatInterceptor </pre> </p> <p/> <p> If you don't specify any  {@link org.atmosphere.cpr.AtmosphereFramework.MetaServiceAction} before a class, thendefault action will be  {@link org.atmosphere.cpr.AtmosphereFramework.MetaServiceAction#INSTALL}. </p> <p/> <p> Important note: you must specify a class declared inside a package. Since creating classes in the source root is a bad practice, the method does not deal with it to improve its performances. </p>", "call_func_name": ["java.util.LinkedHashMap.<init>", "java.lang.Class.getClassLoader", "java.lang.ClassLoader.getResourceAsStream", "org.slf4j.Logger.trace", "org.atmosphere.util.IOUtils.close", "java.io.InputStreamReader.<init>", "java.io.BufferedReader.<init>", "java.io.BufferedReader.readLine", "java.lang.String.isEmpty", "java.lang.String.indexOf", "java.util.Map.put", "org.slf4j.Logger.info", "org.slf4j.Logger.trace"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Object"], ["java.io.Closeable[]"], ["java.io.InputStream"], ["java.io.Reader"], [""], [""], ["int"], ["java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "758", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java", "methodName": "org.atmosphere.util.IOUtils.close", "methodParameterType": "Closeable#", "methodParameterName": "closeableArray#", "methodBody": "public static void close(final Closeable... closeableArray) {\n        for (Closeable closeable : closeableArray) {\n            try {\n                if (closeable != null) {\n                    closeable.close();\n                }\n            } catch (IOException ioe) {\n                logger.info(\"Can't close the object\", ioe);\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(TryStatement(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "<p> Tries to close the given objects and log the  {@link IOException} at INFO levelto make the code more readable when we assume that the  {@link IOException} won't be managed.</p> <p/> <p> Also ignore  {@code null} parameters.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "759", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/ChunkConcatReaderPool.java", "methodName": "org.atmosphere.util.ChunkConcatReaderPool.addChunk", "methodParameterType": "String#Reader#boolean#", "methodParameterName": "key#chunk#continued#", "methodBody": "public void addChunk(String key, Reader chunk, boolean continued) throws IllegalArgumentException {\n        ChunkConcatReader reader = readersPool.get(key);\n        // assume there is no concurrent request for the same key\n        if (reader == null) {\n            throw new IllegalArgumentException(\"No reader with key: \" + key);\n        }\n        reader.addChunk(chunk, continued);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Return a reader if the reader specified by the key has not been previously created. If the reader has been created, the content is added to that reader and returns null.", "call_func_name": ["java.util.Map.get", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "760", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/ChunkConcatReaderPool.java", "methodName": "org.atmosphere.util.ChunkConcatReaderPool.getReader", "methodParameterType": "String#boolean#", "methodParameterName": "key#create#", "methodBody": "public Reader getReader(String key, boolean create) {\n        ChunkConcatReader reader = readersPool.get(key);\n        // assume there is no concurrent request for the same key\n        if (create && reader == null) {\n            reader = new ChunkConcatReader(key);\n            readersPool.put(key, reader);\n        }\n        return reader;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the specified reader. If the reader is absent, returns null. If create is set to true, a new reader is created.", "call_func_name": ["java.util.Map.get", "java.util.Map.put"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "761", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/AtmosphereFilterChain.java", "methodName": "org.atmosphere.util.AtmosphereFilterChain.init", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void init() throws ServletException {\n        for (FilterConfigImpl f : filters) {\n            if (f != null) {\n                f.getFilter().init(f);\n            }\n        }\n        if (servlet != null) {\n            servlet.init(configImpl);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Initialize the  {@link Filter}", "call_func_name": ["org.atmosphere.util.FilterConfigImpl.getFilter", "javax.servlet.Filter.init", "javax.servlet.Servlet.init"], "call_func_parameter": [[""], ["javax.servlet.FilterConfig"], ["javax.servlet.ServletConfig"]], "passed_comments": [{"org.atmosphere.util.FilterConfigImpl.getFilter": "Return the application Filter we are configured for."}]}, {"index": "762", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/AtmosphereFilterChain.java", "methodName": "org.atmosphere.util.AtmosphereFilterChain.doFilter", "methodParameterType": "ServletRequest#ServletResponse#", "methodParameterName": "request#response#", "methodBody": "public void doFilter(ServletRequest request, ServletResponse response)\n            throws IOException, ServletException {\n\n        // Call the next filter if there is one\n        AtomicInteger pos = ((AtomicInteger) request.getAttribute(\"pos\"));\n        if (pos.get() < n) {\n            FilterConfigImpl filterConfig = filters[pos.getAndIncrement()];\n            Filter filter = null;\n            try {\n                filter = filterConfig.getFilter();\n                filter.doFilter(request, response, this);\n            } catch (IOException e) {\n                throw e;\n            } catch (ServletException e) {\n                throw e;\n            } catch (RuntimeException e) {\n                throw e;\n            } catch (Throwable e) {\n                throw new ServletException(\"Throwable\", e);\n            }\n\n            return;\n        }\n\n        try {\n            if (servlet != null) {\n                servlet.service(request, response);\n            } else {\n                RequestDispatcher rd = configImpl.getServletContext().getNamedDispatcher(\"default\");\n                if (rd == null) {\n                    throw new ServletException(\"No Servlet Found\");\n                }\n                rd.forward(request, response);\n            }\n\n        } catch (IOException e) {\n            throw e;\n        } catch (ServletException e) {\n            throw e;\n        } catch (RuntimeException e) {\n            throw e;\n        } catch (Throwable e) {\n            throw new ServletException(\"Throwable\", e);\n        }\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#CastExpression#ParenthesizedExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)CastExpression)ParenthesizedExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement)ReturnStatement)Block)IfStatement(TryStatement(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Invoke the next filter in this chain, passing the specified request and response.  If there are no more filters in this chain, invoke the <code>service()</code> method of the servlet itself.", "call_func_name": ["javax.servlet.ServletRequest.getAttribute", "java.util.concurrent.atomic.AtomicInteger.get", "java.util.concurrent.atomic.AtomicInteger.getAndIncrement", "org.atmosphere.util.FilterConfigImpl.getFilter", "javax.servlet.Filter.doFilter", "javax.servlet.ServletException.<init>", "javax.servlet.Servlet.service", "javax.servlet.ServletConfig.getServletContext", "javax.servlet.ServletContext.getNamedDispatcher", "javax.servlet.ServletException.<init>", "javax.servlet.RequestDispatcher.forward"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], ["javax.servlet.ServletRequest", "javax.servlet.ServletResponse", "javax.servlet.FilterChain"], ["java.lang.String", "java.lang.Throwable"], ["javax.servlet.ServletRequest", "javax.servlet.ServletResponse"], [""], ["java.lang.String"], ["java.lang.String"], ["javax.servlet.ServletRequest", "javax.servlet.ServletResponse"]], "passed_comments": [{"org.atmosphere.util.FilterConfigImpl.getFilter": "Return the application Filter we are configured for."}]}, {"index": "763", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/AtmosphereFilterChain.java", "methodName": "org.atmosphere.util.AtmosphereFilterChain.addFilter", "methodParameterType": "FilterConfigImpl#", "methodParameterName": "filterConfig#", "methodBody": "public void addFilter(FilterConfigImpl filterConfig) {\n\n        if (filterConfig.getFilter() == null) {\n            throw new NullPointerException(\"Filter is null\");\n        }\n\n        if (n == filters.length) {\n            FilterConfigImpl[] newFilters =\n                    new FilterConfigImpl[n + INCREMENT];\n            System.arraycopy(filters, 0, newFilters, 0, n);\n            filters = newFilters;\n        }\n\n        filters[n++] = filterConfig;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#InfixExpression#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add a filter to the set of filters that will be executed in this chain.", "call_func_name": ["org.atmosphere.util.FilterConfigImpl.getFilter", "java.lang.NullPointerException.<init>", "java.lang.System.arraycopy"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object", "int", "java.lang.Object", "int", "int"]], "passed_comments": [{"org.atmosphere.util.FilterConfigImpl.getFilter": "Return the application Filter we are configured for."}]}, {"index": "764", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/AtmosphereFilterChain.java", "methodName": "org.atmosphere.util.AtmosphereFilterChain.setServlet", "methodParameterType": "ServletConfig#Servlet#", "methodParameterName": "configImpl#servlet#", "methodBody": "public void setServlet(ServletConfig configImpl, Servlet servlet) {\n        this.configImpl = configImpl;\n        this.servlet = servlet;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the servlet that will be executed at the end of this chain. Set by the mapper filter", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "765", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/CookieUtil.java", "methodName": "org.atmosphere.util.CookieUtil.maybeQuote", "methodParameterType": "StringBuffer#String#", "methodParameterName": "buf#value#", "methodBody": "private static void maybeQuote(StringBuffer buf, String value) {\n        if (value == null || value.length() == 0) {\n            buf.append(\"\\\"\\\"\");\n        } else if (alreadyQuoted(value)) {\n            buf.append('\"');\n            buf.append(escapeDoubleQuotes(value, 1, value.length() - 1));\n            buf.append('\"');\n        } else {\n            buf.append(value);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Quotes values if required.", "call_func_name": ["java.lang.String.length", "java.lang.StringBuffer.append", "org.atmosphere.util.CookieUtil.alreadyQuoted", "java.lang.StringBuffer.append", "org.atmosphere.util.CookieUtil.escapeDoubleQuotes"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], ["char"], ["java.lang.String", "int", "int"]], "passed_comments": [{"org.atmosphere.util.CookieUtil.escapeDoubleQuotes": "Escapes any double quotes in the given string."}]}, {"index": "766", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/CookieUtil.java", "methodName": "org.atmosphere.util.CookieUtil.escapeDoubleQuotes", "methodParameterType": "String#int#int#", "methodParameterName": "s#beginIndex#endIndex#", "methodBody": "private static String escapeDoubleQuotes(String s, int beginIndex, int endIndex) {\n\n        if (s == null || s.length() == 0 || s.indexOf('\"') == -1) {\n            return s;\n        }\n\n        StringBuffer b = new StringBuffer();\n        for (int i = beginIndex; i < endIndex; i++) {\n            char c = s.charAt(i);\n            if (c == '\\\\') {\n                b.append(c);\n                //ignore the character after an escape, just append it\n                if (++i >= endIndex) {\n                    throw new IllegalArgumentException(\"Invalid escape character in cookie value.\");\n                }\n                b.append(s.charAt(i));\n            } else if (c == '\"') {\n                b.append('\\\\').append('\"');\n            } else {\n                b.append(c);\n            }\n        }\n\n        return b.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#NumberLiteral#PrefixExpression#InfixExpression#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#CharacterLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PrefixExpression#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#CharacterLiteral#InfixExpression#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)ForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Escapes any double quotes in the given string.", "call_func_name": ["java.lang.String.length", "java.lang.String.indexOf", "java.lang.StringBuffer.<init>", "java.lang.String.charAt", "java.lang.StringBuffer.append", "java.lang.IllegalArgumentException.<init>", "java.lang.StringBuffer.toString"], "call_func_parameter": [[""], ["int"], [""], ["int"], ["char"], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "767", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/AtmosphereConfigReader.java", "methodName": "org.atmosphere.util.AtmosphereConfigReader.parse", "methodParameterType": "AtmosphereConfig#Document#", "methodParameterName": "config#document#", "methodBody": "private AtmosphereConfig parse(AtmosphereConfig config, Document document) {\n\n        Element element = document.getDocumentElement();\n        NodeList atmosphereHandlers = element.getElementsByTagName(\"atmosphere-handler\");\n        for (int i = 0; i < atmosphereHandlers.getLength(); i++) {\n            AtmosphereHandlerConfig atmoHandler = new AtmosphereHandlerConfig();\n\n            Node root = atmosphereHandlers.item(i);\n\n            // parse Attributes\n            for (int j = 0; j < root.getAttributes().getLength(); j++) {\n\n                Node attribute = root.getAttributes().item(j);\n\n                if (attribute.getNodeName().equals(\"support-session\")) {\n                    atmoHandler.setSupportSession(attribute.getNodeValue());\n                } else if (attribute.getNodeName().equals(\"context-root\")) {\n                    atmoHandler.setContextRoot(attribute.getNodeValue());\n                } else if (attribute.getNodeName().equals(\"class-name\")) {\n                    atmoHandler.setClassName(attribute.getNodeValue());\n                } else if (attribute.getNodeName().equals(\"broadcaster\")) {\n                    atmoHandler.setBroadcaster(attribute.getNodeValue());\n                } else if (attribute.getNodeName().equals(\"broadcasterCache\")) {\n                    atmoHandler.setBroadcasterCache(attribute.getNodeValue());\n                } else if (attribute.getNodeName().equals(\"broadcastFilterClasses\")) {\n                    String[] values = attribute.getNodeValue().split(\",\");\n                    for (String value : values) {\n                        atmoHandler.getBroadcastFilterClasses().add(value);\n                    }\n                } else if (attribute.getNodeName().equals(\"comet-support\")) {\n                    atmoHandler.setCometSupport(attribute.getNodeValue());\n                } else if (attribute.getNodeName().equals(\"interceptorClasses\")) {\n                    String[] values = attribute.getNodeValue().split(\",\");\n                    for (String value : values) {\n                        atmoHandler.getAtmosphereInterceptorClasses().add(value);\n                    }\n                }\n            }\n\n            NodeList list = root.getChildNodes();\n\n            for (int j = 0; j < list.getLength(); j++) {\n                Node n = list.item(j);\n                if (n.getNodeName().equals(\"property\")) {\n                    String param = n.getAttributes().getNamedItem(\"name\").getNodeValue();\n                    String value = n.getAttributes().getNamedItem(\"value\").getNodeValue();\n\n                    atmoHandler.getProperties().add(new AtmosphereHandlerProperty(param, value));\n                } else if (n.getNodeName().equals(\"applicationConfig\")) {\n\n                    String param = null;\n                    String value = null;\n                    for (int k = 0; k < n.getChildNodes().getLength(); k++) {\n\n                        Node n2 = n.getChildNodes().item(k);\n\n                        if (n2.getNodeName().equals(\"param-name\")) {\n                            param = n2.getFirstChild().getNodeValue();\n                        } else if (n2.getNodeName().equals(\"param-value\")) {\n                            if (n2 != null) {\n                                value = n2.getFirstChild().getNodeValue();\n                            }\n                        }\n\n                    }\n\n                    if (param != null) {\n                        atmoHandler.getApplicationConfig().add(new ApplicationConfiguration(param, value));\n                    }\n\n                } else if (n.getNodeName().equals(\"frameworkConfig\")) {\n                    String param = null;\n                    String value = null;\n                    for (int k = 0; k < n.getChildNodes().getLength(); k++) {\n\n                        Node n2 = n.getChildNodes().item(k);\n\n                        if (n2.getNodeName().equals(\"param-name\")) {\n                            param = n2.getFirstChild().getNodeValue();\n                        } else if (n2.getNodeName().equals(\"param-value\")) {\n                            if (n2 != null) {\n                                value = n2.getFirstChild().getNodeValue();\n                            }\n                        }\n\n                    }\n\n                    if (param != null) {\n                        atmoHandler.getFrameworkConfig().add(\n                                new FrameworkConfiguration(param, value));\n                    }\n\n                }\n\n            }\n\n            config.getAtmosphereHandlerConfig().add(atmoHandler);\n        }\n\n        return config;\n\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#Block#ForStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#IfStatement#Block#ForStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#IfStatement#Block#ForStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#IfStatement#IfStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)Block)ForStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement)IfStatement)Block)ForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement)IfStatement)Block)ForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)IfStatement)IfStatement)Block)ForStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Parse the atmosphere-handlers element.", "call_func_name": ["org.w3c.dom.Document.getDocumentElement", "org.w3c.dom.Element.getElementsByTagName", "org.w3c.dom.NodeList.getLength", "org.atmosphere.config.AtmosphereHandlerConfig.<init>", "org.w3c.dom.NodeList.item", "org.w3c.dom.Node.getAttributes", "org.w3c.dom.NamedNodeMap.getLength", "org.w3c.dom.NamedNodeMap.item", "org.w3c.dom.Node.getNodeName", "java.lang.String.equals", "org.w3c.dom.Node.getNodeValue", "org.atmosphere.config.AtmosphereHandlerConfig.setSupportSession", "org.atmosphere.config.AtmosphereHandlerConfig.setContextRoot", "org.atmosphere.config.AtmosphereHandlerConfig.setClassName", "org.atmosphere.config.AtmosphereHandlerConfig.setBroadcaster", "org.atmosphere.config.AtmosphereHandlerConfig.setBroadcasterCache", "java.lang.String.split", "org.atmosphere.config.AtmosphereHandlerConfig.getBroadcastFilterClasses", "java.util.List.add", "org.atmosphere.config.AtmosphereHandlerConfig.setCometSupport", "org.atmosphere.config.AtmosphereHandlerConfig.getAtmosphereInterceptorClasses", "org.w3c.dom.Node.getChildNodes", "org.w3c.dom.NamedNodeMap.getNamedItem", "org.atmosphere.config.AtmosphereHandlerConfig.getProperties", "org.atmosphere.config.AtmosphereHandlerProperty.<init>", "org.w3c.dom.Node.getFirstChild", "org.atmosphere.config.AtmosphereHandlerConfig.getApplicationConfig", "org.atmosphere.config.ApplicationConfiguration.<init>", "org.atmosphere.config.AtmosphereHandlerConfig.getFrameworkConfig", "org.atmosphere.config.FrameworkConfiguration.<init>", "org.atmosphere.cpr.AtmosphereConfig.getAtmosphereHandlerConfig"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["int"], [""], [""], ["int"], [""], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.Object"], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.String"], [""]], "passed_comments": "/"}, {"index": "768", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/FilterConfigImpl.java", "methodName": "org.atmosphere.util.FilterConfigImpl.getFilter", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Filter getFilter() {\n        return filter;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the application Filter we are configured for.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "769", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/FilterConfigImpl.java", "methodName": "org.atmosphere.util.FilterConfigImpl.recycle", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void recycle() {\n        if (this.filter != null) {\n            filter.destroy();\n        }\n        this.filter = null;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Release the Filter instance associated with this FilterConfig, if there is one.", "call_func_name": ["javax.servlet.Filter.destroy"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "770", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/FilterConfigImpl.java", "methodName": "org.atmosphere.util.FilterConfigImpl.setFilter", "methodParameterType": "Filter#", "methodParameterName": "filter#", "methodBody": "public void setFilter(Filter filter) {\n        this.filter = filter;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the  {@link Filter} associated with this object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "771", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/FilterConfigImpl.java", "methodName": "org.atmosphere.util.FilterConfigImpl.setFilterName", "methodParameterType": "String#", "methodParameterName": "filterName#", "methodBody": "public void setFilterName(String filterName) {\n        this.filterName = filterName;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the  {@link Filter}'s name associated with this object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "772", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/Version.java", "methodName": "org.atmosphere.util.Version.getRawVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static String getRawVersion() {\n        return version;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the raw version derived frok the project's pom.xml", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "773", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/Version.java", "methodName": "org.atmosphere.util.Version.getDotedVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static String getDotedVersion() {\n        return dotedVersion;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the dotted version of the curent release.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "774", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/Version.java", "methodName": "org.atmosphere.util.Version.getMajorVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static int getMajorVersion() {\n        return major;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get Atmosphere framework major version", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "775", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/Version.java", "methodName": "org.atmosphere.util.Version.getMinorVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static int getMinorVersion() {\n        return minor;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get Atmosphere framework minor version", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "776", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/Version.java", "methodName": "org.atmosphere.util.Version.getMicroVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static int getMicroVersion() {\n        return micro;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the micro version", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "777", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/Version.java", "methodName": "org.atmosphere.util.Version.equalVersion", "methodParameterType": "int#int#", "methodParameterName": "major#minor#", "methodBody": "public static boolean equalVersion(int major, int minor) {\n        return minor == Version.minor && major == Version.major;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if current Atmosphere framework version equals to one passed", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "778", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/XSSHtmlFilter.java", "methodName": "org.atmosphere.util.XSSHtmlFilter.filter", "methodParameterType": "String#Object#Object#", "methodParameterName": "broadcasterId#originalMessage#o#", "methodBody": "public BroadcastAction filter(String broadcasterId, Object originalMessage, Object o) {\n        if (o instanceof String) {\n            String message = (String) o;\n\n            StringBuffer buffer = new StringBuffer(message.length());\n\n            for (int i = 0; i < message.length(); i++) {\n                char c = message.charAt(i);\n                switch (c) {\n                    case '\\b':\n                        buffer.append(\"\\\\b\");\n                        break;\n                    case '\\f':\n                        buffer.append(\"\\\\f\");\n                        break;\n                    case '\\n':\n                        buffer.append(\"<br />\");\n                        break;\n                    case '\\r':\n                        // ignore\n                        break;\n                    case '\\t':\n                        buffer.append(\"\\\\t\");\n                        break;\n                    case '\\'':\n                        buffer.append(\"\\\\'\");\n                        break;\n                    case '\\\"':\n                        buffer.append(\"\\\\\\\"\");\n                        break;\n                    case '\\\\':\n                        buffer.append(\"\\\\\\\\\");\n                        break;\n                    case '<':\n                        buffer.append(\"&lt;\");\n                        break;\n                    case '>':\n                        buffer.append(\"&gt;\");\n                        break;\n                    case '&':\n                        buffer.append(\"&amp;\");\n                        break;\n                    default:\n                        buffer.append(c);\n                }\n            }\n            return new BroadcastAction(buffer.toString());\n        } else {\n            return new BroadcastAction(o);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BreakStatement#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SwitchStatement#Block#ForStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)SwitchStatement)Block)ForStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Transform a message into a well formed HTML message.", "call_func_name": ["java.lang.String.length", "java.lang.StringBuffer.<init>", "java.lang.String.charAt", "java.lang.StringBuffer.append", "java.lang.StringBuffer.append", "java.lang.StringBuffer.toString"], "call_func_parameter": [[""], ["int"], ["int"], ["java.lang.String"], ["char"], [""]], "passed_comments": "/"}, {"index": "779", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/ExcludeSessionBroadcaster.java", "methodName": "org.atmosphere.util.ExcludeSessionBroadcaster.broadcast", "methodParameterType": "Object#AtmosphereResource#", "methodParameterName": "msg#r#", "methodBody": "@Override\n    public Future<Object> broadcast(Object msg, AtmosphereResource r) {\n\n        if (destroyed.get()) {\n            throw new IllegalStateException(\"This Broadcaster has been destroyed and cannot be used\");\n        }\n\n        Set<AtmosphereResource> sub = new HashSet<AtmosphereResource>();\n        sub.addAll(resources);\n        sub.remove(r);\n        start();\n        Object newMsg = filter(msg);\n        if (newMsg == null) {\n            return null;\n        }\n\n        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg, sub.size());\n        dispatchMessages(new Deliver(newMsg, sub, f, msg));\n        return f;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "the AtmosphereResource r will be exclude for this broadcast", "call_func_name": ["java.util.concurrent.atomic.AtomicBoolean.get", "java.lang.IllegalStateException.<init>", "java.util.HashSet.<init>", "java.util.Set.addAll", "java.util.Set.remove", "org.atmosphere.util.ExcludeSessionBroadcaster.start", "org.atmosphere.util.ExcludeSessionBroadcaster.filter", "java.util.Set.size", "org.atmosphere.cpr.BroadcasterFuture.<init>", "org.atmosphere.cpr.Deliver.<init>", "org.atmosphere.util.ExcludeSessionBroadcaster.dispatchMessages"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.util.Collection"], ["java.lang.Object"], [""], ["java.lang.Object"], [""], ["java.lang.Object", "int"], ["java.lang.Object", "java.util.Set", "org.atmosphere.cpr.BroadcasterFuture", "java.lang.Object"], ["org.atmosphere.cpr.Deliver"]], "passed_comments": "/"}, {"index": "780", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/ExcludeSessionBroadcaster.java", "methodName": "org.atmosphere.util.ExcludeSessionBroadcaster.broadcast", "methodParameterType": "Object#Set<AtmosphereResource>#", "methodParameterName": "msg#subset#", "methodBody": "@Override\n    public Future<Object> broadcast(Object msg, Set<AtmosphereResource> subset) {\n\n        if (destroyed.get()) {\n            return futureDone(msg);\n        }\n\n        subset.retainAll(resources);\n        start();\n        Object newMsg = filter(msg);\n        if (newMsg == null) {\n            return futureDone(msg);\n        }\n\n        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg, subset.size());\n        dispatchMessages(new Deliver(newMsg, subset, f, msg));\n        return f;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "the AtmosphereResources subset will be exclude for this broadcast", "call_func_name": ["java.util.concurrent.atomic.AtomicBoolean.get", "org.atmosphere.util.ExcludeSessionBroadcaster.futureDone", "java.util.Set.retainAll", "org.atmosphere.util.ExcludeSessionBroadcaster.start", "org.atmosphere.util.ExcludeSessionBroadcaster.filter", "java.util.Set.size", "org.atmosphere.cpr.BroadcasterFuture.<init>", "org.atmosphere.cpr.Deliver.<init>", "org.atmosphere.util.ExcludeSessionBroadcaster.dispatchMessages"], "call_func_parameter": [[""], ["java.lang.Object"], ["java.util.Collection"], [""], ["java.lang.Object"], [""], ["java.lang.Object", "int"], ["java.lang.Object", "java.util.Set", "org.atmosphere.cpr.BroadcasterFuture", "java.lang.Object"], ["org.atmosphere.cpr.Deliver"]], "passed_comments": "/"}, {"index": "781", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/ExcludeSessionBroadcaster.java", "methodName": "org.atmosphere.util.ExcludeSessionBroadcaster.broadcast", "methodParameterType": "Object#List<HttpSession>#", "methodParameterName": "msg#sessions#", "methodBody": "public Future<Object> broadcast(Object msg, List<HttpSession> sessions) {\n\n        if (destroyed.get()) {\n            return futureDone(msg);\n        }\n\n        Set<AtmosphereResource> subset = new HashSet<AtmosphereResource>();\n        subset.addAll(resources);\n        for (AtmosphereResource r : resources) {\n            if (!r.getAtmosphereResourceEvent().isCancelled() &&\n                    sessions.contains(r.getRequest().getSession())) {\n                subset.remove(r);\n            }\n        }\n        start();\n        Object newMsg = filter(msg);\n        if (newMsg == null) {\n            return futureDone(msg);\n        }\n\n        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg, subset.size());\n        dispatchMessages(new Deliver(newMsg, subset, f, msg));\n        return f;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "a list of sessions will be exclude for this broadcast", "call_func_name": ["java.util.concurrent.atomic.AtomicBoolean.get", "org.atmosphere.util.ExcludeSessionBroadcaster.futureDone", "java.util.HashSet.<init>", "java.util.Set.addAll", "java.util.concurrent.ConcurrentLinkedQueue.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.atmosphere.cpr.AtmosphereResource.getAtmosphereResourceEvent", "org.atmosphere.cpr.AtmosphereResourceEvent.isCancelled", "org.atmosphere.cpr.AtmosphereResource.getRequest", "org.atmosphere.cpr.AtmosphereRequest.getSession", "java.lang.Object.equals", "java.util.Set.remove", "org.atmosphere.util.ExcludeSessionBroadcaster.start", "org.atmosphere.util.ExcludeSessionBroadcaster.filter", "java.util.Set.size", "org.atmosphere.cpr.BroadcasterFuture.<init>", "org.atmosphere.cpr.Deliver.<init>", "org.atmosphere.util.ExcludeSessionBroadcaster.dispatchMessages"], "call_func_parameter": [[""], ["java.lang.Object"], [""], ["java.util.Collection"], [""], [""], [""], [""], [""], [""], [""], ["java.lang.Object"], ["java.lang.Object"], [""], ["java.lang.Object"], [""], ["java.lang.Object", "int"], ["java.lang.Object", "java.util.Set", "org.atmosphere.cpr.BroadcasterFuture", "java.lang.Object"], ["org.atmosphere.cpr.Deliver"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.getAtmosphereResourceEvent": "Return the current  {@link AtmosphereResourceEvent}."}, {"org.atmosphere.cpr.AtmosphereResourceEvent.isCancelled": "Return true when the remote client close the connection."}, {"org.atmosphere.cpr.AtmosphereResource.getRequest": "Return the underlying  {@link AtmosphereRequest} request."}, {"org.atmosphere.cpr.AtmosphereRequest.getSession": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereRequest.getSession": "{@inheritDoc}"}]}, {"index": "782", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/ExcludeSessionBroadcaster.java", "methodName": "org.atmosphere.util.ExcludeSessionBroadcaster.broadcast", "methodParameterType": "Object#HttpSession#", "methodParameterName": "msg#s#", "methodBody": "public Future<Object> broadcast(Object msg, HttpSession s) {\n\n        if (destroyed.get()) {\n            return futureDone(msg);\n        }\n\n        Set<AtmosphereResource> subset = new HashSet<AtmosphereResource>();\n        subset.addAll(resources);\n\n        for (AtmosphereResource r : resources) {\n            if (!r.getAtmosphereResourceEvent().isCancelled() &&\n                    s.equals(r.getRequest().getSession())) {\n                subset.remove(r);\n            }\n        }\n\n        start();\n        Object newMsg = filter(msg);\n        if (newMsg == null) {\n            return futureDone(msg);\n        }\n\n        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg, subset.size());\n        dispatchMessages(new Deliver(newMsg, subset, f, msg));\n        return f;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "session will be exclude for this broadcast", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "783", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/EndpointMapper.java", "methodName": "org.atmosphere.util.EndpointMapper.map", "methodParameterType": "AtmosphereRequest#Map<String,U>#", "methodParameterName": "req#handlers#", "methodBody": "U map(AtmosphereRequest req, Map<String, U> handlers);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Mape the request to its associated endpoint.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "784", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/EndpointMapper.java", "methodName": "org.atmosphere.util.EndpointMapper.map", "methodParameterType": "String#Map<String,U>#", "methodParameterName": "path#handlers#", "methodBody": "U map(String path, Map<String, U> handlers);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Mape the request to its associated endpoint.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "785", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/ExecutorsFactory.java", "methodName": "org.atmosphere.util.ExecutorsFactory.getMessageDispatcher", "methodParameterType": "AtmosphereConfig#String#", "methodParameterName": "config#name#", "methodBody": "public static ExecutorService getMessageDispatcher(final AtmosphereConfig config, final String name) {\n        final boolean shared = config.framework().isShareExecutorServices();\n\n        boolean useForkJoinPool = config.getInitParameter(USE_FORJOINPOOL, true);\n        if (!shared || config.properties().get(BROADCASTER_THREAD_POOL) == null) {\n            int numberOfMessageProcessingThread = DEFAULT_MESSAGE_THREAD;\n            String s = config.getInitParameter(ApplicationConfig.BROADCASTER_MESSAGE_PROCESSING_THREADPOOL_MAXSIZE);\n            if (s != null) {\n                numberOfMessageProcessingThread = Integer.parseInt(s);\n            }\n\n            if (shared && numberOfMessageProcessingThread == 1) {\n                logger.warn(\"Not enough numberOfMessageProcessingThread for a shareable thread pool {}, \" +\n                        \"Setting it to a newCachedThreadPool\", numberOfMessageProcessingThread);\n                numberOfMessageProcessingThread = -1;\n            }\n\n            AbstractExecutorService messageService;\n            logger.trace(\"Max number of DispatchOp {}\", numberOfMessageProcessingThread == -1 ? \"Unlimited\" : numberOfMessageProcessingThread);\n            String threadName = name + \"-DispatchOp-\";\n\n            if (numberOfMessageProcessingThread == -1) {\n                messageService = !useForkJoinPool ? (ThreadPoolExecutor) Executors.newCachedThreadPool(new AtmosphereThreadFactory(shared, threadName))\n                        : new ForkJoinPool(shared, threadName);\n            } else {\n                messageService = (ThreadPoolExecutor) Executors.newFixedThreadPool(numberOfMessageProcessingThread,\n                        new AtmosphereThreadFactory(shared, threadName));\n            }\n\n            keepAliveThreads(messageService, config);\n\n            if (shared) {\n                config.properties().put(BROADCASTER_THREAD_POOL, messageService);\n            }\n            return messageService;\n        } else {\n            return (ExecutorService) config.properties().get(BROADCASTER_THREAD_POOL);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#StringLiteral#SimpleName#ConditionalExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#CastExpression#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ConditionalExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#CastExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ConditionalExpression(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)ConditionalExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)CastExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ConditionalExpression)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)CastExpression)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Create an  {@link ExecutorService} to be used for dispatching messages, not I/O events.", "call_func_name": ["org.atmosphere.cpr.AtmosphereConfig.framework", "org.atmosphere.cpr.AtmosphereFramework.isShareExecutorServices", "org.atmosphere.cpr.AtmosphereConfig.getInitParameter", "org.atmosphere.cpr.AtmosphereConfig.properties", "java.util.Map.get", "org.atmosphere.cpr.AtmosphereConfig.getInitParameter", "java.lang.Integer.parseInt", "java.lang.Integer.valueOf", "org.slf4j.Logger.warn", "org.slf4j.Logger.trace", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.concurrent.Executors.newCachedThreadPool", "org.atmosphere.util.ForkJoinPool.<init>", "java.util.concurrent.Executors.newFixedThreadPool", "org.atmosphere.util.ExecutorsFactory.keepAliveThreads", "java.util.Map.put"], "call_func_parameter": [[""], [""], ["java.lang.String", "boolean"], [""], ["java.lang.Object"], ["java.lang.String"], ["java.lang.String"], ["int"], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String"], [""], ["java.util.concurrent.ThreadFactory"], ["boolean", "java.lang.String"], ["int", "java.util.concurrent.ThreadFactory"], ["java.util.concurrent.AbstractExecutorService", "org.atmosphere.cpr.AtmosphereConfig"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.framework": "Return the  {@link AtmosphereFramework}."}, {"org.atmosphere.cpr.AtmosphereFramework.isShareExecutorServices": "Returns true if  {@link java.util.concurrent.ExecutorService} is shared among all components."}, {"org.atmosphere.cpr.AtmosphereConfig.getInitParameter": "Return an init-param, or its default value."}, {"org.atmosphere.cpr.AtmosphereConfig.properties": "Return the  {@link Map} of Applications's properties."}, {"org.atmosphere.cpr.AtmosphereConfig.getInitParameter": "Return the value of the init params defined in web.xml or application.xml."}]}, {"index": "786", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/ExecutorsFactory.java", "methodName": "org.atmosphere.util.ExecutorsFactory.getAsyncOperationExecutor", "methodParameterType": "AtmosphereConfig#String#", "methodParameterName": "config#name#", "methodBody": "public static ExecutorService getAsyncOperationExecutor(final AtmosphereConfig config, final String name) {\n        final boolean shared = config.framework().isShareExecutorServices();\n\n        if (!shared || config.properties().get(ASYNC_WRITE_THREAD_POOL) == null) {\n            int numberOfAsyncThread = DEFAULT_ASYNC_THREAD;\n            String s = config.getInitParameter(ApplicationConfig.BROADCASTER_ASYNC_WRITE_THREADPOOL_MAXSIZE);\n            if (s != null) {\n                numberOfAsyncThread = Integer.parseInt(s);\n            }\n\n            if (shared && numberOfAsyncThread == 1) {\n                logger.warn(\"Not enough numberOfAsyncThread for a shareable thread pool {}, \" +\n                        \"Setting it to a newCachedThreadPool\", numberOfAsyncThread);\n                numberOfAsyncThread = -1;\n            }\n\n            AbstractExecutorService asyncWriteService;\n            boolean useForkJoinPool = config.getInitParameter(USE_FORJOINPOOL, true);\n            logger.trace(\"Max number of AsyncOp {}\", numberOfAsyncThread == -1 ? \"Unlimited\" : numberOfAsyncThread);\n            String threadName = name + \"-AsyncOp-\";\n\n            if (numberOfAsyncThread == -1) {\n                asyncWriteService = !useForkJoinPool ? (ThreadPoolExecutor) Executors.newCachedThreadPool(new AtmosphereThreadFactory(shared, threadName))\n                        : new ForkJoinPool(shared, threadName);\n            } else {\n                asyncWriteService = (ThreadPoolExecutor) Executors.newFixedThreadPool(numberOfAsyncThread,\n                        new AtmosphereThreadFactory(shared, threadName));\n            }\n\n            keepAliveThreads(asyncWriteService, config);\n\n            if (shared) {\n                config.properties().put(ASYNC_WRITE_THREAD_POOL, asyncWriteService);\n            }\n            return asyncWriteService;\n        } else {\n            return (ExecutorService) config.properties().get(ASYNC_WRITE_THREAD_POOL);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#StringLiteral#SimpleName#ConditionalExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#CastExpression#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ConditionalExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#CastExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ConditionalExpression(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)ConditionalExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)CastExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ConditionalExpression)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)CastExpression)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Create an  {@link ExecutorService} to be used for dispatching I/O events.", "call_func_name": ["org.atmosphere.cpr.AtmosphereConfig.framework", "org.atmosphere.cpr.AtmosphereFramework.isShareExecutorServices", "org.atmosphere.cpr.AtmosphereConfig.properties", "java.util.Map.get", "org.atmosphere.cpr.AtmosphereConfig.getInitParameter", "java.lang.Integer.parseInt", "java.lang.Integer.valueOf", "org.slf4j.Logger.warn", "org.atmosphere.cpr.AtmosphereConfig.getInitParameter", "org.slf4j.Logger.trace", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.concurrent.Executors.newCachedThreadPool", "org.atmosphere.util.ForkJoinPool.<init>", "java.util.concurrent.Executors.newFixedThreadPool", "org.atmosphere.util.ExecutorsFactory.keepAliveThreads", "java.util.Map.put"], "call_func_parameter": [[""], [""], [""], ["java.lang.Object"], ["java.lang.String"], ["java.lang.String"], ["int"], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "boolean"], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String"], [""], ["java.util.concurrent.ThreadFactory"], ["boolean", "java.lang.String"], ["int", "java.util.concurrent.ThreadFactory"], ["java.util.concurrent.AbstractExecutorService", "org.atmosphere.cpr.AtmosphereConfig"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.framework": "Return the  {@link AtmosphereFramework}."}, {"org.atmosphere.cpr.AtmosphereFramework.isShareExecutorServices": "Returns true if  {@link java.util.concurrent.ExecutorService} is shared among all components."}, {"org.atmosphere.cpr.AtmosphereConfig.properties": "Return the  {@link Map} of Applications's properties."}, {"org.atmosphere.cpr.AtmosphereConfig.getInitParameter": "Return the value of the init params defined in web.xml or application.xml."}, {"org.atmosphere.cpr.AtmosphereConfig.getInitParameter": "Return an init-param, or its default value."}]}, {"index": "787", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/ExecutorsFactory.java", "methodName": "org.atmosphere.util.ExecutorsFactory.getScheduler", "methodParameterType": "AtmosphereConfig#", "methodParameterName": "config#", "methodBody": "public static ScheduledExecutorService getScheduler(final AtmosphereConfig config) {\n        final boolean shared = config.framework().isShareExecutorServices();\n\n        if (!shared || config.properties().get(SCHEDULER_THREAD_POOL) == null) {\n            int threads = config.getInitParameter(ApplicationConfig.SCHEDULER_THREADPOOL_MAXSIZE, Runtime.getRuntime().availableProcessors());\n            logger.trace(\"Max number of Atmosphere-Scheduler {}\", threads);\n            ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(threads, new ThreadFactory() {\n\n                private final AtomicInteger count = new AtomicInteger();\n\n                @Override\n                public Thread newThread(final Runnable runnable) {\n                    Thread t = new Thread(runnable, \"Atmosphere-Scheduler-\" + count.getAndIncrement());\n                    t.setDaemon(true);\n                    return t;\n                }\n            });\n\n            if (shared) {\n                config.properties().put(SCHEDULER_THREAD_POOL, scheduler);\n            }\n\n            keepAliveThreads((ThreadPoolExecutor) scheduler, config);\n\n            return scheduler;\n        } else {\n            return (ScheduledExecutorService) config.properties().get(SCHEDULER_THREAD_POOL);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#FieldDeclaration#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(FieldDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)FieldDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Create a  {@link ScheduledExecutorService} used ot schedule I/O and non I/O events.", "call_func_name": ["org.atmosphere.cpr.AtmosphereConfig.framework", "org.atmosphere.cpr.AtmosphereFramework.isShareExecutorServices", "org.atmosphere.cpr.AtmosphereConfig.properties", "java.util.Map.get", "java.lang.Runtime.getRuntime", "java.lang.Runtime.availableProcessors", "org.atmosphere.cpr.AtmosphereConfig.getInitParameter", "java.lang.Integer.valueOf", "org.slf4j.Logger.trace", "java.util.concurrent.Executors.newScheduledThreadPool", "java.util.Map.put", "org.atmosphere.util.ExecutorsFactory.keepAliveThreads"], "call_func_parameter": [[""], [""], [""], ["java.lang.Object"], [""], [""], ["java.lang.String", "int"], ["int"], ["java.lang.String", "java.lang.Object"], ["int", "java.util.concurrent.ThreadFactory"], ["java.lang.Object", "java.lang.Object"], ["java.util.concurrent.AbstractExecutorService", "org.atmosphere.cpr.AtmosphereConfig"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.framework": "Return the  {@link AtmosphereFramework}."}, {"org.atmosphere.cpr.AtmosphereFramework.isShareExecutorServices": "Returns true if  {@link java.util.concurrent.ExecutorService} is shared among all components."}, {"org.atmosphere.cpr.AtmosphereConfig.properties": "Return the  {@link Map} of Applications's properties."}, {"org.atmosphere.cpr.AtmosphereConfig.getInitParameter": "Return an init-param, or its default value."}]}, {"index": "788", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/WebDotXmlReader.java", "methodName": "org.atmosphere.util.WebDotXmlReader.WebDotXmlReader", "methodParameterType": "InputStream#", "methodParameterName": "stream#", "methodBody": "public WebDotXmlReader(InputStream stream) {\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        try {\n            parse(factory.newDocumentBuilder().parse(stream));\n        } catch (SAXException e) {\n            logger.error(e.getMessage(), e);\n            throw new RuntimeException(e);\n        } catch (IOException e) {\n            logger.error(e.getMessage(), e);\n            throw new RuntimeException(e);\n        } catch (ParserConfigurationException e) {\n            logger.error(e.getMessage(), e);\n            throw new RuntimeException(e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Create a  {@link DocumentBuilderFactory} element from WEB-INF/web.xml", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "789", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/WebDotXmlReader.java", "methodName": "org.atmosphere.util.WebDotXmlReader.parse", "methodParameterType": "Document#", "methodParameterName": "document#", "methodBody": "private void parse(Document document) {\n        Element element = document.getDocumentElement();\n        NodeList servlets = element.getElementsByTagName(\"servlet\");\n        String atmosphereServletName = null;\n        for (int i = 0; i < servlets.getLength(); i++) {\n            Node m = servlets.item(i);\n            NodeList list = m.getChildNodes();\n            for (int j = 0; j < list.getLength(); j++) {\n                Node n = list.item(j);\n                if (n.getNodeName().equals(\"servlet-name\")) {\n                    atmosphereServletName = n.getFirstChild().getNodeValue();\n                }\n\n                if (n.getNodeName().equals(\"servlet-class\")) {\n                    if (n.getFirstChild().getNodeValue().equals(FrameworkConfig.ATMOSPHERE_SERVLET)) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        NodeList servletMappings = element.getElementsByTagName(\"servlet-mapping\");\n        for (int i = 0; i < servletMappings.getLength(); i++) {\n            Node m = servletMappings.item(i);\n            NodeList list = m.getChildNodes();\n\n            String urlMapping = null;\n            String servletName = null;\n            for (int j = 0; j < list.getLength(); j++) {\n                Node n = list.item(j);\n                if (n.getNodeName().equals(\"servlet-name\")) {\n                    servletName = n.getFirstChild().getNodeValue();\n                    if (!servletName.equals(atmosphereServletName)) {\n                        servletName = null;\n                    }\n                }\n\n                if (n.getNodeName().equals(\"url-pattern\")) {\n                    urlMapping = n.getFirstChild().getNodeValue();\n                }\n\n                if (servletName != null && urlMapping != null) {\n                    mappings.add(urlMapping);\n                    servletName = null;\n                    urlMapping = null;\n                }\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#BreakStatement#Block#IfStatement#Block#IfStatement#Block#ForStatement#Block#ForStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#ForStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(IfStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(BreakStatement)BreakStatement)Block)IfStatement)Block)IfStatement)Block)ForStatement)Block)ForStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)ForStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Parse the web.xml element.", "call_func_name": ["org.w3c.dom.Document.getDocumentElement", "org.w3c.dom.Element.getElementsByTagName", "org.w3c.dom.NodeList.getLength", "org.w3c.dom.NodeList.item", "org.w3c.dom.Node.getChildNodes", "org.w3c.dom.Node.getNodeName", "java.lang.String.equals", "org.w3c.dom.Node.getFirstChild", "org.w3c.dom.Node.getNodeValue", "java.util.ArrayList.add"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["int"], [""], [""], ["java.lang.Object"], [""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "790", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/WebDotXmlReader.java", "methodName": "org.atmosphere.util.WebDotXmlReader.getMappings", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ArrayList<String> getMappings() {\n        return mappings;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return an  {@link ArrayList} which maps to the {@link org.atmosphere.cpr.AtmosphereServlet}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "791", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/Utils.java", "methodName": "org.atmosphere.util.Utils.invoke", "methodParameterType": "Object#Method#Object#", "methodParameterName": "proxiedInstance#m#o#", "methodBody": "public static Object invoke(final Object proxiedInstance, Method m, Object o) {\n        if (m != null) {\n            try {\n                return m.invoke(proxiedInstance, (o == null || m.getParameterTypes().length == 0) ? new Object[]{} : new Object[]{o});\n            } catch (IllegalAccessException e) {\n                LOGGER.debug(\"\", e);\n            } catch (InvocationTargetException e) {\n                LOGGER.debug(\"\", e);\n            }\n        }\n        LOGGER.trace(\"No Method Mapped for {}\", o);\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#NumberLiteral#InfixExpression#InfixExpression#ParenthesizedExpression#SimpleName#SimpleType#Dimension#ArrayType#ArrayInitializer#ArrayCreation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayInitializer#ArrayCreation#ConditionalExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)ParenthesizedExpression(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer)ArrayInitializer)ArrayCreation(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName)ArrayInitializer)ArrayCreation)ConditionalExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p> Manages the invocation of the given method on the specified 'proxied' instance. Logs any invocation failure. </p>", "call_func_name": ["java.lang.reflect.Method.getParameterTypes", "java.lang.reflect.Method.invoke", "org.slf4j.Logger.debug", "org.slf4j.Logger.trace"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.Object[]"], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String", "java.lang.Object"]], "passed_comments": "/"}, {"index": "792", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/Utils.java", "methodName": "org.atmosphere.util.Utils.requestScopedInjection", "methodParameterType": "AtmosphereConfig#Object#", "methodParameterName": "config#o#", "methodBody": "public static final boolean requestScopedInjection(AtmosphereConfig config, Object o) {\n        AtmosphereObjectFactory injectableFactory = config.framework().objectFactory();\n        if (!InjectableObjectFactory.class.isAssignableFrom(injectableFactory.getClass())) {\n            return false;\n        }\n\n        try {\n            return InjectableObjectFactory.class.cast(config.framework().objectFactory()).needRequestScoped(o.getClass());\n        } catch (Exception var4) {\n            LOGGER.error(\"\", var4);\n            return false;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(TryStatement(Block(ReturnStatement(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Inject custom object. This method is mostly for external framework.", "call_func_name": ["org.atmosphere.cpr.AtmosphereConfig.framework", "org.atmosphere.cpr.AtmosphereFramework.objectFactory", "java.lang.Object.getClass", "java.lang.Class.isAssignableFrom", "java.lang.Class.cast", "org.atmosphere.inject.InjectableObjectFactory.needRequestScoped", "org.slf4j.Logger.error"], "call_func_parameter": [[""], [""], [""], ["java.lang.Class"], ["java.lang.Object"], ["java.lang.Class"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereConfig.framework": "Return the  {@link AtmosphereFramework}."}, {"org.atmosphere.cpr.AtmosphereFramework.objectFactory": "Set an object used for class instantiation. Allows for integration with dependency injection frameworks."}]}, {"index": "793", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/StringEscapeUtils.java", "methodName": "org.atmosphere.util.StringEscapeUtils.StringEscapeUtils", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public StringEscapeUtils() {\n    super();\n  }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "<p><code>StringEscapeUtils</code> instances should NOT be constructed in standard programming.</p> <p/> <p>Instead, the class should be used as: <pre>StringEscapeUtils.escapeJava(\"foo\");</pre></p> <p/> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "794", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/StringEscapeUtils.java", "methodName": "org.atmosphere.util.StringEscapeUtils.escapeJava", "methodParameterType": "String#", "methodParameterName": "str#", "methodBody": "public static String escapeJava(String str) throws Exception {\n    return escapeJavaStyleString(str, false, false);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#BooleanLiteral#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>Escapes the characters in a <code>String</code> using Java String rules.</p> <p/> <p>Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p> <p/> <p>So a tab becomes the characters <code>'\\\\'</code> and <code>'t'</code>.</p> <p/> <p>The only difference between Java strings and JavaScript strings is that in JavaScript, a single quote must be escaped.</p> <p/> <p>Example: <pre> input string: He didn't say, \"Stop!\" output string: He didn't say, \\\"Stop!\\\" </pre> </p>", "call_func_name": ["org.atmosphere.util.StringEscapeUtils.escapeJavaStyleString"], "call_func_parameter": [["java.lang.String", "boolean", "boolean"]], "passed_comments": [{"org.atmosphere.util.StringEscapeUtils.escapeJavaStyleString": "<p>Worker method for the  {@link #escapeJavaScript(String)} method.</p>"}]}, {"index": "795", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/StringEscapeUtils.java", "methodName": "org.atmosphere.util.StringEscapeUtils.escapeJava", "methodParameterType": "Writer#String#", "methodParameterName": "out#str#", "methodBody": "public static void escapeJava(Writer out, String str) throws IOException {\n    escapeJavaStyleString(out, str, false, false);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#BooleanLiteral#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "<p>Escapes the characters in a <code>String</code> using Java String rules to a <code>Writer</code>.</p> <p/> <p>A <code>null</code> string input has no effect.</p>", "call_func_name": ["org.atmosphere.util.StringEscapeUtils.escapeJavaStyleString"], "call_func_parameter": [["java.io.Writer", "java.lang.String", "boolean", "boolean"]], "passed_comments": [{"org.atmosphere.util.StringEscapeUtils.escapeJavaStyleString": "<p>Worker method for the  {@link #escapeJavaScript(String)} method.</p>"}]}, {"index": "796", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/StringEscapeUtils.java", "methodName": "org.atmosphere.util.StringEscapeUtils.escapeJavaScript", "methodParameterType": "String#", "methodParameterName": "str#", "methodBody": "public static String escapeJavaScript(String str) throws Exception {\n    return escapeJavaStyleString(str, true, true);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#BooleanLiteral#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>Escapes the characters in a <code>String</code> using JavaScript String rules.</p> <p>Escapes any values it finds into their JavaScript String form. Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p> <p/> <p>So a tab becomes the characters <code>'\\\\'</code> and <code>'t'</code>.</p> <p/> <p>The only difference between Java strings and JavaScript strings is that in JavaScript, a single quote must be escaped.</p> <p/> <p>Example: <pre> input string: He didn't say, \"Stop!\" output string: He didn\\'t say, \\\"Stop!\\\" </pre> </p>", "call_func_name": ["org.atmosphere.util.StringEscapeUtils.escapeJavaStyleString"], "call_func_parameter": [["java.lang.String", "boolean", "boolean"]], "passed_comments": [{"org.atmosphere.util.StringEscapeUtils.escapeJavaStyleString": "<p>Worker method for the  {@link #escapeJavaScript(String)} method.</p>"}]}, {"index": "797", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/StringEscapeUtils.java", "methodName": "org.atmosphere.util.StringEscapeUtils.escapeJavaScript", "methodParameterType": "Writer#String#", "methodParameterName": "out#str#", "methodBody": "public static void escapeJavaScript(Writer out, String str) throws Exception {\n    escapeJavaStyleString(out, str, true, true);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#BooleanLiteral#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "<p>Escapes the characters in a <code>String</code> using JavaScript String rules to a <code>Writer</code>.</p> <p/> <p>A <code>null</code> string input has no effect.</p>", "call_func_name": ["org.atmosphere.util.StringEscapeUtils.escapeJavaStyleString"], "call_func_parameter": [["java.io.Writer", "java.lang.String", "boolean", "boolean"]], "passed_comments": [{"org.atmosphere.util.StringEscapeUtils.escapeJavaStyleString": "<p>Worker method for the  {@link #escapeJavaScript(String)} method.</p>"}]}, {"index": "798", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/StringEscapeUtils.java", "methodName": "org.atmosphere.util.StringEscapeUtils.escapeJavaStyleString", "methodParameterType": "String#boolean#boolean#", "methodParameterName": "str#escapeSingleQuotes#escapeForwardSlash#", "methodBody": "private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes, boolean escapeForwardSlash)\n      throws Exception {\n    if (str == null) {\n      return null;\n    }\n    StringWriter writer = new StringWriter(str.length() * 2);\n    escapeJavaStyleString(writer, str, escapeSingleQuotes, escapeForwardSlash);\n    return writer.toString();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>Worker method for the  {@link #escapeJavaScript(String)} method.</p>", "call_func_name": ["java.lang.String.length", "java.io.StringWriter.<init>", "org.atmosphere.util.StringEscapeUtils.escapeJavaStyleString", "java.io.StringWriter.toString"], "call_func_parameter": [[""], ["int"], ["java.io.Writer", "java.lang.String", "boolean", "boolean"], [""]], "passed_comments": [{"org.atmosphere.util.StringEscapeUtils.escapeJavaStyleString": "<p>Worker method for the  {@link #escapeJavaScript(String)} method.</p>"}]}, {"index": "799", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/StringEscapeUtils.java", "methodName": "org.atmosphere.util.StringEscapeUtils.escapeJavaStyleString", "methodParameterType": "Writer#String#boolean#boolean#", "methodParameterName": "out#str#escapeSingleQuote#escapeForwardSlash#", "methodBody": "private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote,\n                                            boolean escapeForwardSlash) throws IOException {\n    if (out == null) {\n      throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (str == null) {\n      return;\n    }\n    int sz;\n    sz = str.length();\n    for (int i = 0; i < sz; i++) {\n      char ch = str.charAt(i);\n\n      // handle unicode\n      if (ch > 0xfff) {\n        out.write(\"\\\\u\" + hex(ch));\n      } else if (ch > 0xff) {\n        out.write(\"\\\\u0\" + hex(ch));\n      } else if (ch > 0x7f) {\n        out.write(\"\\\\u00\" + hex(ch));\n      } else if (ch < 32) {\n        switch (ch) {\n          case '\\b':\n            out.write('\\\\');\n            out.write('b');\n            break;\n          case '\\n':\n            out.write('\\\\');\n            out.write('n');\n            break;\n          case '\\t':\n            out.write('\\\\');\n            out.write('t');\n            break;\n          case '\\f':\n            out.write('\\\\');\n            out.write('f');\n            break;\n          case '\\r':\n            out.write('\\\\');\n            out.write('r');\n            break;\n          default:\n            if (ch > 0xf) {\n              out.write(\"\\\\u00\" + hex(ch));\n            } else {\n              out.write(\"\\\\u000\" + hex(ch));\n            }\n            break;\n        }\n      } else {\n        switch (ch) {\n          case '\\'':\n            if (escapeSingleQuote) {\n              out.write('\\\\');\n            }\n            out.write('\\'');\n            break;\n          case '\"':\n            out.write('\\\\');\n            out.write('\"');\n            break;\n          case '\\\\':\n            out.write('\\\\');\n            out.write('\\\\');\n            break;\n          case '/':\n            if (escapeForwardSlash) {\n              out.write('\\\\');\n            }\n            out.write('/');\n            break;\n          default:\n            out.write(ch);\n            break;\n        }\n      }\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#NumberLiteral#InfixExpression#SimpleName#CharacterLiteral#SwitchCase#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#BreakStatement#SwitchCase#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#BreakStatement#SwitchStatement#Block#SimpleName#CharacterLiteral#SwitchCase#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#BreakStatement#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SwitchStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(SwitchStatement(SimpleName)SimpleName(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(BreakStatement)BreakStatement)SwitchStatement)Block(Block(SwitchStatement(SimpleName)SimpleName(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement)SwitchStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "<p>Worker method for the  {@link #escapeJavaScript(String)} method.</p>", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "java.lang.String.length", "java.lang.String.charAt", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.atmosphere.util.StringEscapeUtils.hex", "java.lang.StringBuilder.toString", "java.io.Writer.write", "java.io.Writer.write"], "call_func_parameter": [["java.lang.String"], [""], ["int"], [""], ["java.lang.String"], ["char"], [""], ["java.lang.String"], ["int"]], "passed_comments": [{"org.atmosphere.util.StringEscapeUtils.hex": "<p>Returns an upper case hexadecimal <code>String</code> for the given character.</p>"}]}, {"index": "800", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/StringEscapeUtils.java", "methodName": "org.atmosphere.util.StringEscapeUtils.hex", "methodParameterType": "char#", "methodParameterName": "ch#", "methodBody": "private static String hex(char ch) {\n    return Integer.toHexString(ch).toUpperCase(Locale.ENGLISH);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>Returns an upper case hexadecimal <code>String</code> for the given character.</p>", "call_func_name": ["java.lang.Integer.toHexString", "java.lang.String.toUpperCase"], "call_func_parameter": [["int"], ["java.util.Locale"]], "passed_comments": "/"}, {"index": "801", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/StringEscapeUtils.java", "methodName": "org.atmosphere.util.StringEscapeUtils.unescapeJava", "methodParameterType": "String#", "methodParameterName": "str#", "methodBody": "public static String unescapeJava(String str) throws Exception {\n    if (str == null) {\n      return null;\n    }\n    StringWriter writer = new StringWriter(str.length());\n    unescapeJava(writer, str);\n    return writer.toString();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>Unescapes any Java literals found in the <code>String</code>. For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code> into a newline character, unless the <code>'\\'</code> is preceded by another <code>'\\'</code>.</p>", "call_func_name": ["java.lang.String.length", "java.io.StringWriter.<init>", "org.atmosphere.util.StringEscapeUtils.unescapeJava", "java.io.StringWriter.toString"], "call_func_parameter": [[""], ["int"], ["java.io.Writer", "java.lang.String"], [""]], "passed_comments": [{"org.atmosphere.util.StringEscapeUtils.unescapeJava": "<p>Unescapes any Java literals found in the <code>String</code> to a <code>Writer</code>.</p> <p/> <p>For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code> into a newline character, unless the <code>'\\'</code> is preceded by another <code>'\\'</code>.</p> <p/> <p>A <code>null</code> string input has no effect.</p>"}]}, {"index": "802", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/StringEscapeUtils.java", "methodName": "org.atmosphere.util.StringEscapeUtils.unescapeJava", "methodParameterType": "Writer#String#", "methodParameterName": "out#str#", "methodBody": "public static void unescapeJava(Writer out, String str) throws Exception {\n    if (out == null) {\n      throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (str == null) {\n      return;\n    }\n    int sz = str.length();\n    StringBuilder unicode = new StringBuilder();\n    boolean hadSlash = false;\n    boolean inUnicode = false;\n    for (int i = 0; i < sz; i++) {\n      char ch = str.charAt(i);\n      if (inUnicode) {\n        // if in unicode, then we're reading unicode\n        // values in somehow\n        unicode.append(ch);\n        if (unicode.length() == 4) {\n          // unicode now contains the four hex digits\n          // which represents our unicode character\n          int value = Integer.parseInt(unicode.toString(), 16);\n          out.write((char) value);\n          unicode.setLength(0);\n          inUnicode = false;\n          hadSlash = false;\n        }\n        continue;\n      }\n      if (hadSlash) {\n        // handle an escaped value\n        hadSlash = false;\n        switch (ch) {\n          case '\\\\':\n            out.write('\\\\');\n            break;\n          case '\\'':\n            out.write('\\'');\n            break;\n          case '\\\"':\n            out.write('\"');\n            break;\n          case 'r':\n            out.write('\\r');\n            break;\n          case 'f':\n            out.write('\\f');\n            break;\n          case 't':\n            out.write('\\t');\n            break;\n          case 'n':\n            out.write('\\n');\n            break;\n          case 'b':\n            out.write('\\b');\n            break;\n          case 'u': {\n            // uh-oh, we're in unicode country....\n            inUnicode = true;\n            break;\n          }\n          default:\n            out.write(ch);\n            break;\n        }\n        continue;\n      } else if (ch == '\\\\') {\n        hadSlash = true;\n        continue;\n      }\n      out.write(ch);\n    }\n    if (hadSlash) {\n      // then we're in the weird case of a \\ at the end of the\n      // string, let's output it anyway.\n      out.write('\\\\');\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#PrimitiveType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#CharacterLiteral#SwitchCase#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#BreakStatement#Block#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SwitchStatement#ContinueStatement#Block#SimpleName#CharacterLiteral#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#ContinueStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement)SwitchStatement(ContinueStatement)ContinueStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "<p>Unescapes any Java literals found in the <code>String</code> to a <code>Writer</code>.</p> <p/> <p>For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code> into a newline character, unless the <code>'\\'</code> is preceded by another <code>'\\'</code>.</p> <p/> <p>A <code>null</code> string input has no effect.</p>", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "java.lang.String.length", "java.lang.StringBuilder.<init>", "java.lang.String.charAt", "java.lang.StringBuilder.append", "java.lang.StringBuilder.length", "java.lang.StringBuilder.toString", "java.lang.Integer.parseInt", "java.io.Writer.write", "java.lang.StringBuilder.setLength"], "call_func_parameter": [["java.lang.String"], [""], [""], ["int"], ["char"], [""], [""], ["java.lang.String", "int"], ["int"], ["int"]], "passed_comments": "/"}, {"index": "803", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/StringEscapeUtils.java", "methodName": "org.atmosphere.util.StringEscapeUtils.unescapeJavaScript", "methodParameterType": "String#", "methodParameterName": "str#", "methodBody": "public static String unescapeJavaScript(String str) throws Exception {\n    return unescapeJava(str);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>Unescapes any JavaScript literals found in the <code>String</code>.</p> <p/> <p>For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code> into a newline character, unless the <code>'\\'</code> is preceded by another <code>'\\'</code>.</p>", "call_func_name": ["org.atmosphere.util.StringEscapeUtils.unescapeJava"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.atmosphere.util.StringEscapeUtils.unescapeJava": "<p>Unescapes any Java literals found in the <code>String</code>. For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code> into a newline character, unless the <code>'\\'</code> is preceded by another <code>'\\'</code>.</p>"}]}, {"index": "804", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/StringEscapeUtils.java", "methodName": "org.atmosphere.util.StringEscapeUtils.unescapeJavaScript", "methodParameterType": "Writer#String#", "methodParameterName": "out#str#", "methodBody": "public static void unescapeJavaScript(Writer out, String str) throws Exception {\n    unescapeJava(out, str);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "<p>Unescapes any JavaScript literals found in the <code>String</code> to a <code>Writer</code>.</p> <p/> <p>For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code> into a newline character, unless the <code>'\\'</code> is preceded by another <code>'\\'</code>.</p> <p/> <p>A <code>null</code> string input has no effect.</p>", "call_func_name": ["org.atmosphere.util.StringEscapeUtils.unescapeJava"], "call_func_parameter": [["java.io.Writer", "java.lang.String"]], "passed_comments": [{"org.atmosphere.util.StringEscapeUtils.unescapeJava": "<p>Unescapes any Java literals found in the <code>String</code> to a <code>Writer</code>.</p> <p/> <p>For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code> into a newline character, unless the <code>'\\'</code> is preceded by another <code>'\\'</code>.</p> <p/> <p>A <code>null</code> string input has no effect.</p>"}]}, {"index": "805", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/inject/InjectableObjectFactory.java", "methodName": "org.atmosphere.inject.InjectableObjectFactory.inject", "methodParameterType": "T#", "methodParameterName": "instance#", "methodBody": "/* @Override */\n    public <T> T inject(T instance) throws InstantiationException, IllegalAccessException {\n\n        injectInjectable(instance, instance.getClass(), config.framework());\n        applyMethods(instance, (Class<T>) instance.getClass());\n\n        return instance;\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#CastExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Apply  {@link Injectable} and {@link InjectIntrospector} to a class already constructed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "806", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/inject/InjectableObjectFactory.java", "methodName": "org.atmosphere.inject.InjectableObjectFactory.applyMethods", "methodParameterType": "U#Class<U>#", "methodParameterName": "instance#defaultType#", "methodBody": "public <U> void applyMethods(U instance, Class<U> defaultType) throws IllegalAccessException {\n        if (!pushBackInjection.contains(instance)) {\n            Set<Method> methods = (getInheritedPrivateMethod(defaultType));\n            injectMethods(methods, instance);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ParenthesizedExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ParenthesizedExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Execute  {@link InjectIntrospector#introspectMethod}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "807", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/inject/InjectableObjectFactory.java", "methodName": "org.atmosphere.inject.InjectableObjectFactory.injectInjectable", "methodParameterType": "U#Class<? extends U>#AtmosphereFramework#", "methodParameterName": "instance#defaultType#framework#", "methodBody": "public <U> void injectInjectable(U instance, Class<? extends U> defaultType, AtmosphereFramework framework) throws IllegalAccessException {\n        Set<Field> fields = getInheritedPrivateFields(defaultType);\n\n        injectFields(fields, instance, framework, injectables);\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param instance    the requested object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "808", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/inject/InjectableObjectFactory.java", "methodName": "org.atmosphere.inject.InjectableObjectFactory.getInjectable", "methodParameterType": "Class<U>#", "methodParameterName": "u#", "methodBody": "public <U> U getInjectable(Class<U> u) {\n        for (Injectable c : injectables) {\n            if (c.supportedType(u)) {\n                return (U) c.injectable(config);\n            }\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Use this method to retrieve available  {@link Injectable}. This method is for application that inject their own  {@link Injectable} and needs already constructed classes.", "call_func_name": ["java.util.LinkedList.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.atmosphere.inject.Injectable.supportedType", "org.atmosphere.inject.Injectable.injectable"], "call_func_parameter": [[""], [""], [""], ["java.lang.reflect.Type"], ["org.atmosphere.cpr.AtmosphereConfig"]], "passed_comments": [{"org.atmosphere.inject.Injectable.supportedType": "Return true if this class support injection of this type."}, {"org.atmosphere.inject.Injectable.injectable": "Returns an instance of the T"}]}, {"index": "809", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/inject/AtmosphereConfigAware.java", "methodName": "org.atmosphere.inject.AtmosphereConfigAware.configure", "methodParameterType": "AtmosphereConfig#", "methodParameterName": "config#", "methodBody": "void configure(AtmosphereConfig config);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Configure an AtmosphereFramework object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "810", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/inject/Injectable.java", "methodName": "org.atmosphere.inject.Injectable.supportedType", "methodParameterType": "Type#", "methodParameterName": "t#", "methodBody": "boolean supportedType(Type t);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Return true if this class support injection of this type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "811", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/inject/Injectable.java", "methodName": "org.atmosphere.inject.Injectable.injectable", "methodParameterType": "AtmosphereConfig#", "methodParameterName": "config#", "methodBody": "T injectable(AtmosphereConfig config);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns an instance of the T", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "812", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/inject/InjectIntrospector.java", "methodName": "org.atmosphere.inject.InjectIntrospector.introspectField", "methodParameterType": "Class<T>#Field#", "methodParameterName": "clazz#f#", "methodBody": "void introspectField(Class<T> clazz, Field f);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Introspect the field", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "813", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/inject/InjectIntrospector.java", "methodName": "org.atmosphere.inject.InjectIntrospector.introspectMethod", "methodParameterType": "Method#Object#", "methodParameterName": "m#instance#", "methodBody": "void introspectMethod(Method m, Object instance);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Introspect the method", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "814", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/inject/InjectIntrospector.java", "methodName": "org.atmosphere.inject.InjectIntrospector.injectable", "methodParameterType": "AtmosphereResource#", "methodParameterName": "resource#", "methodBody": "T injectable(AtmosphereResource resource);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns an instance of the T", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "815", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/client/TrackMessageSizeInterceptor.java", "methodName": "org.atmosphere.client.TrackMessageSizeInterceptor.messageDelimiter", "methodParameterType": "String#", "methodParameterName": "endString#", "methodBody": "public TrackMessageSizeInterceptor messageDelimiter(String endString) {\n        this.endString = endString;\n        end = endString.getBytes();\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set the character delimiter used by this class to separate message.", "call_func_name": ["java.lang.String.getBytes"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "816", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/client/TrackMessageSizeInterceptor.java", "methodName": "org.atmosphere.client.TrackMessageSizeInterceptor.excludedContentType", "methodParameterType": "String#", "methodParameterName": "excludedContentType#", "methodBody": "public TrackMessageSizeInterceptor excludedContentType(String excludedContentType) {\n        excludedContentTypes.add(excludedContentType.toLowerCase());\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Exclude response's content-type from being processed by this class.", "call_func_name": ["java.lang.String.toLowerCase", "java.util.HashSet.add"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "817", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocol.java", "methodName": "org.atmosphere.websocket.WebSocketProtocol.onMessage", "methodParameterType": "WebSocket#String#", "methodParameterName": "webSocket#data#", "methodBody": "List<AtmosphereRequest> onMessage(WebSocket webSocket, String data);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Parse the WebSocket message, and delegate the processing to the  {@link org.atmosphere.cpr.AtmosphereFramework#asyncSupport} orto any existing technology. Invoking   {@link org.atmosphere.cpr.AtmosphereFramework#asyncSupport} will delegate the request processingto the  {@link org.atmosphere.cpr.AtmosphereHandler} implementation. Returning null means this implementation willhandle itself the processing/dispatching of the WebSocket's request; <br> As an example, this is how Websocket messages are delegated to the Jersey runtime. <br>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "818", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocol.java", "methodName": "org.atmosphere.websocket.WebSocketProtocol.onMessage", "methodParameterType": "WebSocket#byte[]#int#int#", "methodParameterName": "webSocket#data#offset#length#", "methodBody": "List<AtmosphereRequest> onMessage(WebSocket webSocket, byte[] data, int offset, int length);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Parse the WebSocket message, and delegate the processing to the  {@link org.atmosphere.cpr.AtmosphereFramework#asyncSupport} orto any existing technology. Invoking   {@link org.atmosphere.cpr.AtmosphereFramework#asyncSupport} will delegate the request processingto the  {@link org.atmosphere.cpr.AtmosphereHandler} implementation. Returning null means this implementation willhandle itself the processing/dispatching of the WebSocket's request; <br> As an example, this is how Websocket messages are delegated to the Jersey runtime. <br>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "819", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocol.java", "methodName": "org.atmosphere.websocket.WebSocketProtocol.onOpen", "methodParameterType": "WebSocket#", "methodParameterName": "webSocket#", "methodBody": "void onOpen(WebSocket webSocket);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when a WebSocket is opened", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "820", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocol.java", "methodName": "org.atmosphere.websocket.WebSocketProtocol.onClose", "methodParameterType": "WebSocket#", "methodParameterName": "webSocket#", "methodBody": "void onClose(WebSocket webSocket);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when a WebSocket is closed", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "821", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocol.java", "methodName": "org.atmosphere.websocket.WebSocketProtocol.onError", "methodParameterType": "WebSocket#WebSocketProcessor.WebSocketException#", "methodParameterName": "webSocket#t#", "methodBody": "void onError(WebSocket webSocket, WebSocketProcessor.WebSocketException t);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when an error occurs.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "822", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java", "methodName": "org.atmosphere.websocket.WebSocketProcessor.configure", "methodParameterType": "AtmosphereConfig#", "methodParameterName": "config#", "methodBody": "WebSocketProcessor configure(AtmosphereConfig config);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Configure, or post construct a WebSocketProcessor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "823", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java", "methodName": "org.atmosphere.websocket.WebSocketProcessor.handshake", "methodParameterType": "HttpServletRequest#", "methodParameterName": "request#", "methodBody": "boolean handshake(HttpServletRequest request);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Determine if the WebSocket's handshake data can be processed, or if the request be cancelled. Since it's container related native API, the  {@link HttpServletRequest} might be null, so implementation must check for null.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "824", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java", "methodName": "org.atmosphere.websocket.WebSocketProcessor.registerWebSocketHandler", "methodParameterType": "String#WebSocketHandlerProxy#", "methodParameterName": "path#webSockethandler#", "methodBody": "WebSocketProcessor registerWebSocketHandler(String path, WebSocketHandlerProxy webSockethandler);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Register a  {@link WebSocketHandler}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "825", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java", "methodName": "org.atmosphere.websocket.WebSocketProcessor.open", "methodParameterType": "WebSocket#AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "webSocket#request#response#", "methodBody": "void open(WebSocket webSocket, AtmosphereRequest request, AtmosphereResponse response) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Invoked when a WebSocket gets opened by the underlying container", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "826", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java", "methodName": "org.atmosphere.websocket.WebSocketProcessor.invokeWebSocketProtocol", "methodParameterType": "WebSocket#String#", "methodParameterName": "webSocket#webSocketMessage#", "methodBody": "void invokeWebSocketProtocol(WebSocket webSocket, String webSocketMessage);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when a WebSocket message gets received from the underlying container", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "827", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java", "methodName": "org.atmosphere.websocket.WebSocketProcessor.invokeWebSocketProtocol", "methodParameterType": "WebSocket#byte[]#int#int#", "methodParameterName": "webSocket#data#offset#length#", "methodBody": "void invokeWebSocketProtocol(WebSocket webSocket, byte[] data, int offset, int length);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when a WebSocket message gets received from the underlying container", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "828", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java", "methodName": "org.atmosphere.websocket.WebSocketProcessor.invokeWebSocketProtocol", "methodParameterType": "WebSocket#InputStream#", "methodParameterName": "webSocket#stream#", "methodBody": "void invokeWebSocketProtocol(WebSocket webSocket, InputStream stream);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when a WebSocket message gets received from the underlying container", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "829", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java", "methodName": "org.atmosphere.websocket.WebSocketProcessor.invokeWebSocketProtocol", "methodParameterType": "WebSocket#Reader#", "methodParameterName": "webSocket#reader#", "methodBody": "void invokeWebSocketProtocol(WebSocket webSocket, Reader reader) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Invoked when a WebSocket message gets received from the underlying container", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "830", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java", "methodName": "org.atmosphere.websocket.WebSocketProcessor.close", "methodParameterType": "WebSocket#int#", "methodParameterName": "webSocket#closeCode#", "methodBody": "public void close(WebSocket webSocket, int closeCode);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invked when the WebServer is closing the native WebSocket", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "831", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java", "methodName": "org.atmosphere.websocket.WebSocketProcessor.notifyListener", "methodParameterType": "WebSocket#WebSocketEvent#", "methodParameterName": "webSocket#webSocketEvent#", "methodBody": "void notifyListener(WebSocket webSocket, WebSocketEvent webSocketEvent);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Notify all  {@link WebSocketEventListener}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "832", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java", "methodName": "org.atmosphere.websocket.WebSocketProcessor.destroy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void destroy();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Destroy all resources associated with this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "833", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketHandler.java", "methodName": "org.atmosphere.websocket.WebSocketHandler.onByteMessage", "methodParameterType": "WebSocket#byte[]#int#int#", "methodParameterName": "webSocket#data#offset#length#", "methodBody": "void onByteMessage(WebSocket webSocket, byte[] data, int offset, int length) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Invoked when a byte message is received.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "834", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketHandler.java", "methodName": "org.atmosphere.websocket.WebSocketHandler.onTextMessage", "methodParameterType": "WebSocket#String#", "methodParameterName": "webSocket#data#", "methodBody": "void onTextMessage(WebSocket webSocket, String data) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Invoked when a String message is received", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "835", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketHandler.java", "methodName": "org.atmosphere.websocket.WebSocketHandler.onOpen", "methodParameterType": "WebSocket#", "methodParameterName": "webSocket#", "methodBody": "void onOpen(WebSocket webSocket) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Invoked when a  {@link WebSocket} is opened.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "836", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketHandler.java", "methodName": "org.atmosphere.websocket.WebSocketHandler.onClose", "methodParameterType": "WebSocket#", "methodParameterName": "webSocket#", "methodBody": "void onClose(WebSocket webSocket);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when a  {@link WebSocket} is closed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "837", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketHandler.java", "methodName": "org.atmosphere.websocket.WebSocketHandler.onError", "methodParameterType": "WebSocket#WebSocketProcessor.WebSocketException#", "methodParameterName": "webSocket#t#", "methodBody": "void onError(WebSocket webSocket, WebSocketProcessor.WebSocketException t);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked when a  {@link WebSocket} produces an error.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "838", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketStreamingHandler.java", "methodName": "org.atmosphere.websocket.WebSocketStreamingHandler.onBinaryStream", "methodParameterType": "WebSocket#InputStream#", "methodParameterName": "webSocket#inputStream#", "methodBody": "void onBinaryStream(WebSocket webSocket, InputStream inputStream) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Invoked when a byte message is received.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "839", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketStreamingHandler.java", "methodName": "org.atmosphere.websocket.WebSocketStreamingHandler.onTextStream", "methodParameterType": "WebSocket#Reader#", "methodParameterName": "webSocket#reader#", "methodBody": "void onTextStream(WebSocket webSocket, Reader reader) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Invoked when a String message is received", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "840", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocolStream.java", "methodName": "org.atmosphere.websocket.WebSocketProtocolStream.onTextStream", "methodParameterType": "WebSocket#Reader#", "methodParameterName": "webSocket#r#", "methodBody": "List<AtmosphereRequest> onTextStream(WebSocket webSocket, Reader r);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Parse the WebSocket stream, and delegate the processing to the  {@link org.atmosphere.cpr.AtmosphereFramework#asyncSupport} orto any existing technology. Invoking   {@link org.atmosphere.cpr.AtmosphereFramework#asyncSupport} will delegate the request processingto the  {@link org.atmosphere.cpr.AtmosphereHandler} implementation. Returning null means this implementation willhandle itself the processing/dispatching of the WebSocket's request; <br> As an example, this is how Websocket messages are delegated to the Jersey runtime. <br>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "841", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocolStream.java", "methodName": "org.atmosphere.websocket.WebSocketProtocolStream.onBinaryStream", "methodParameterType": "WebSocket#InputStream#", "methodParameterName": "webSocket#stream#", "methodBody": "List<AtmosphereRequest> onBinaryStream(WebSocket webSocket, InputStream stream);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Parse the WebSocket stream, and delegate the processing to the  {@link org.atmosphere.cpr.AtmosphereFramework#asyncSupport} orto any existing technology. Invoking   {@link org.atmosphere.cpr.AtmosphereFramework#asyncSupport} will delegate the request processingto the  {@link org.atmosphere.cpr.AtmosphereHandler} implementation. Returning null means this implementation willhandle itself the processing/dispatching of the WebSocket's request; <br> As an example, this is how Websocket messages are delegated to the Jersey runtime. <br>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "842", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java", "methodName": "org.atmosphere.websocket.WebSocket.binaryWrite", "methodParameterType": "boolean#", "methodParameterName": "binaryWrite#", "methodBody": "public WebSocket binaryWrite(boolean binaryWrite) {\n        this.binaryWrite = binaryWrite;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Switch to binary write, or go back to text write. Default is false.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "843", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java", "methodName": "org.atmosphere.websocket.WebSocket.resource", "methodParameterType": "AtmosphereResource#", "methodParameterName": "r#", "methodBody": "public WebSocket resource(AtmosphereResource r) {\n\n        // Make sure we carry what was set at the onOpen stage.\n        if (this.r != null && r != null) {\n            // TODO: This is all over the place and quite ugly (the cast). Need to fix this in 1.1\n            AtmosphereResourceImpl.class.cast(r).cloneState(this.r);\n        }\n        this.r = r;\n        if (r != null) uuid = r.uuid();\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#IfStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)IfStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Associate an  {@link AtmosphereResource} to this WebSocket", "call_func_name": ["java.lang.Class.cast", "org.atmosphere.cpr.AtmosphereResourceImpl.cloneState", "org.atmosphere.cpr.AtmosphereResource.uuid"], "call_func_parameter": [["java.lang.Object"], ["org.atmosphere.cpr.AtmosphereResource"], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.uuid": "Return the unique ID associated with this AtmosphereResource."}]}, {"index": "844", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java", "methodName": "org.atmosphere.websocket.WebSocket.shiftAttributes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public synchronized WebSocket shiftAttributes() {\n        attributesAtWebSocketOpen = new ConcurrentHashMap<String, Object>();\n        attributesAtWebSocketOpen.putAll(AtmosphereResourceImpl.class.cast(r).getRequest(false).localAttributes().unmodifiableMap());\n        return this;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Copy  {@link AtmosphereRequestImpl#localAttributes()} that where set when the websocket was opened.", "call_func_name": ["java.util.concurrent.ConcurrentHashMap.<init>", "java.lang.Class.cast", "org.atmosphere.cpr.AtmosphereResourceImpl.getRequest", "org.atmosphere.cpr.AtmosphereRequest.localAttributes", "java.util.Map.putAll"], "call_func_parameter": [[""], ["java.lang.Object"], ["boolean"], [""], ["java.util.Map"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequest.localAttributes": "Return a subset of the attributes set on this AtmosphereRequest, set locally by the framework or by an application. Attributes added using this method won't be propagated to the original, container-only, native request object."}]}, {"index": "845", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java", "methodName": "org.atmosphere.websocket.WebSocket.attributes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, Object> attributes() {\n        return attributesAtWebSocketOpen;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the attribute that was set during the websocket's open operation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "846", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java", "methodName": "org.atmosphere.websocket.WebSocket.resource", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AtmosphereResource resource() {\n        return r;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the an  {@link AtmosphereResource} used by this WebSocket, or null if the WebSocket has been closedbefore the WebSocket message has been processed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "847", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java", "methodName": "org.atmosphere.websocket.WebSocket.lastWriteTimeStampInMilliseconds", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long lastWriteTimeStampInMilliseconds() {\n        return lastWrite == -1 ? System.currentTimeMillis() : lastWrite;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The last time, in milliseconds, a write operation occurred.", "call_func_name": ["java.lang.System.currentTimeMillis"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "848", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java", "methodName": "org.atmosphere.websocket.WebSocket.broadcast", "methodParameterType": "Object#", "methodParameterName": "o#", "methodBody": "public WebSocket broadcast(Object o) {\n        if (r != null) {\n            r.getBroadcaster().broadcast(o);\n        } else {\n            logger.debug(\"No AtmosphereResource Associated with this WebSocket.\");\n        }\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Broadcast, using the  {@link org.atmosphere.cpr.AtmosphereResource#getBroadcaster()} the object to all{@link WebSocket} associated with the {@link org.atmosphere.cpr.Broadcaster}. This method does the same as websocket.resource().getBroadcaster().broadcast(o).", "call_func_name": ["org.atmosphere.cpr.AtmosphereResource.getBroadcaster", "org.atmosphere.cpr.Broadcaster.broadcast", "org.slf4j.Logger.debug"], "call_func_parameter": [[""], ["java.lang.Object"], ["java.lang.String"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.getBroadcaster": "Return the first added  {@link Broadcaster}."}, {"org.atmosphere.cpr.Broadcaster.broadcast": "Broadcast the  {@link Object} to all suspended responses, eg. invoke {@link AtmosphereHandler#onStateChange}."}]}, {"index": "849", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java", "methodName": "org.atmosphere.websocket.WebSocket.isOpen", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "abstract public boolean isOpen();", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Is the underlying WebSocket open.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "850", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java", "methodName": "org.atmosphere.websocket.WebSocket.write", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "abstract public WebSocket write(String s) throws IOException;", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Use the underlying container's websocket to write the String.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "851", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java", "methodName": "org.atmosphere.websocket.WebSocket.write", "methodParameterType": "byte[]#int#int#", "methodParameterName": "b#offset#length#", "methodBody": "abstract public WebSocket write(byte[] b, int offset, int length) throws IOException;", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Use the underlying container's websocket to write the byte.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "852", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java", "methodName": "org.atmosphere.websocket.WebSocket.write", "methodParameterType": "byte[]#", "methodParameterName": "b#", "methodBody": "public WebSocket write(byte[] b) throws IOException {\n        return write(b, 0, b.length);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Use the underlying container's websocket to write the byte.", "call_func_name": ["org.atmosphere.websocket.WebSocket.write"], "call_func_parameter": [["byte[]", "int", "int"]], "passed_comments": [{"org.atmosphere.websocket.WebSocket.write": "Use the underlying container's websocket to write the byte."}]}, {"index": "853", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java", "methodName": "org.atmosphere.websocket.WebSocket.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "abstract public void close();", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Close the underlying WebSocket", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "854", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java", "methodName": "org.atmosphere.websocket.WebSocket.sendPing", "methodParameterType": "byte[]#", "methodParameterName": "payload#", "methodBody": "public WebSocket sendPing(byte[] payload) {\n        throw new UnsupportedOperationException();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Send a WebSocket Ping", "call_func_name": ["java.lang.UnsupportedOperationException.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "855", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java", "methodName": "org.atmosphere.websocket.WebSocket.sendPong", "methodParameterType": "byte[]#", "methodParameterName": "payload#", "methodBody": "public WebSocket sendPong(byte[] payload) {\n        throw new UnsupportedOperationException();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Send a WebSocket Pong", "call_func_name": ["java.lang.UnsupportedOperationException.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "856", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java", "methodName": "org.atmosphere.websocket.WebSocket.attachment", "methodParameterType": "Object#", "methodParameterName": "attachment#", "methodBody": "public WebSocket attachment(Object attachment) {\n        this.attachment = attachment;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Attach an object. Be careful when attaching an object as it can cause memory leak", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "857", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java", "methodName": "org.atmosphere.websocket.WebSocket.attachment", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Object attachment() {\n        return attachment;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the attachment", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "858", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketFactory.java", "methodName": "org.atmosphere.websocket.WebSocketFactory.find", "methodParameterType": "String#", "methodParameterName": "uuid#", "methodBody": "WebSocket find(String uuid);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Retrieve the  {@link WebSocket} associated with a uuid. The uuid could be the one returned bythe  {@link AtmosphereResource#uuid()} or an application generated one.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "859", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketEventListener.java", "methodName": "org.atmosphere.websocket.WebSocketEventListener.onHandshake", "methodParameterType": "WebSocketEvent#", "methodParameterName": "event#", "methodBody": "void onHandshake(WebSocketEvent event);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "When the hanshake occurs", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "860", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketEventListener.java", "methodName": "org.atmosphere.websocket.WebSocketEventListener.onMessage", "methodParameterType": "WebSocketEvent#", "methodParameterName": "event#", "methodBody": "void onMessage(WebSocketEvent event);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "When a message is sent", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "861", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketEventListener.java", "methodName": "org.atmosphere.websocket.WebSocketEventListener.onClose", "methodParameterType": "WebSocketEvent#", "methodParameterName": "event#", "methodBody": "void onClose(WebSocketEvent event);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "When the close occurs", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "862", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketEventListener.java", "methodName": "org.atmosphere.websocket.WebSocketEventListener.onControl", "methodParameterType": "WebSocketEvent#", "methodParameterName": "event#", "methodBody": "void onControl(WebSocketEvent event);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "When the control occurs", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "863", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketEventListener.java", "methodName": "org.atmosphere.websocket.WebSocketEventListener.onDisconnect", "methodParameterType": "WebSocketEvent#", "methodParameterName": "event#", "methodBody": "void onDisconnect(WebSocketEvent event);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "When the disconnect occurs", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "864", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketEventListener.java", "methodName": "org.atmosphere.websocket.WebSocketEventListener.onConnect", "methodParameterType": "WebSocketEvent#", "methodParameterName": "event#", "methodBody": "void onConnect(WebSocketEvent event);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "When the connect occurs", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "865", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java", "methodName": "org.atmosphere.websocket.DefaultWebSocketProcessor.dispatch", "methodParameterType": "WebSocket#AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "webSocket#request#r#", "methodBody": "public final void dispatch(WebSocket webSocket, final AtmosphereRequest request, final AtmosphereResponse r) {\n        if (request == null) return;\n\n        try {\n            framework.doCometSupport(request, r);\n        } catch (Throwable e) {\n            logger.warn(\"Failed invoking AtmosphereFramework.doCometSupport()\", e);\n            webSocketProtocol.onError(webSocket, new WebSocketException(e,\n                    new AtmosphereResponseImpl.Builder()\n                            .request(request)\n                            .status(500)\n                            .statusMessage(\"Server Error\").build()));\n            return;\n        }\n\n        if (r.getStatus() >= 400) {\n            webSocketProtocol.onError(webSocket, new WebSocketException(\"Status code higher or equal than 400\", r));\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement)ReturnStatement)IfStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Dispatch to request/response to the  {@link org.atmosphere.cpr.AsyncSupport} implementation as it was a normal HTTP request.", "call_func_name": ["org.atmosphere.cpr.AtmosphereFramework.doCometSupport", "org.slf4j.Logger.warn", "org.atmosphere.cpr.AtmosphereResponse.getStatus"], "call_func_parameter": [["org.atmosphere.cpr.AtmosphereRequest", "org.atmosphere.cpr.AtmosphereResponse"], ["java.lang.String", "java.lang.Throwable"], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereFramework.doCometSupport": "Invoke the proprietary  {@link AsyncSupport}."}]}, {"index": "866", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketPingPongListener.java", "methodName": "org.atmosphere.websocket.WebSocketPingPongListener.onPong", "methodParameterType": "WebSocket#byte[]#int#int#", "methodParameterName": "webSocket#payload#offset#length#", "methodBody": "void onPong(WebSocket webSocket, byte[] payload, int offset, int length);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Handle WebSocket PONG", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "867", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketPingPongListener.java", "methodName": "org.atmosphere.websocket.WebSocketPingPongListener.onPing", "methodParameterType": "WebSocket#byte[]#int#int#", "methodParameterName": "webSocket#payload#offset#length#", "methodBody": "void onPing(WebSocket webSocket, byte[] payload, int offset, int length);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Handle WebSocket PING", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "868", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedAtmosphereHandler.java", "methodName": "org.atmosphere.config.managed.ManagedAtmosphereHandler.onHeartbeat", "methodParameterType": "AtmosphereResourceEvent#", "methodParameterName": "event#", "methodBody": "@Override\n    public void onHeartbeat(final AtmosphereResourceEvent event) {\n        if (onHeartbeatMethod != null) {\n            invoke(onHeartbeatMethod, event);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "<p> Notifies the heartbeat for the given resource to the annotated method if exists. </p>", "call_func_name": ["org.atmosphere.config.managed.ManagedAtmosphereHandler.invoke"], "call_func_parameter": [["java.lang.reflect.Method", "java.lang.Object"]], "passed_comments": "/"}, {"index": "869", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/config/managed/Encoder.java", "methodName": "org.atmosphere.config.managed.Encoder.encode", "methodParameterType": "U#", "methodParameterName": "s#", "methodBody": "T encode(U s);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Encode the object of type U into an object of type T.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "870", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/config/managed/Decoder.java", "methodName": "org.atmosphere.config.managed.Decoder.decode", "methodParameterType": "U#", "methodParameterName": "s#", "methodBody": "T decode(U s);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Decode the specified object of type U into object of type T", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "871", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/config/managed/TypeResolver.java", "methodName": "org.atmosphere.config.managed.TypeResolver.enableCache", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static void enableCache() {\n        cacheEnabled = true;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Enables the internal caching of TypeVariables.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "872", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/config/managed/TypeResolver.java", "methodName": "org.atmosphere.config.managed.TypeResolver.disableCache", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static void disableCache() {\n        typeVariableCache.clear();\n        cacheEnabled = false;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Disables the internal caching of TypeVariables.", "call_func_name": ["java.util.Map.clear"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "873", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/config/managed/TypeResolver.java", "methodName": "org.atmosphere.config.managed.TypeResolver.resolveArgument", "methodParameterType": "Class<I>#Class<T>#", "methodParameterName": "initialType#targetType#", "methodBody": "public static <T, I extends T> Class<?> resolveArgument(Class<I> initialType, Class<T> targetType) {\n        return resolveArgument(resolveGenericType(initialType, targetType), initialType);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the raw class representing the type argument for the  {@code targetType} resolvedupwards from the  {@code initialType}. If no arguments can be resolved then {@code Unknown.class} is returned.", "call_func_name": ["org.atmosphere.config.managed.TypeResolver.resolveGenericType", "org.atmosphere.config.managed.TypeResolver.resolveArgument"], "call_func_parameter": [["java.lang.reflect.Type", "java.lang.Class"], ["java.lang.reflect.Type", "java.lang.Class"]], "passed_comments": [{"org.atmosphere.config.managed.TypeResolver.resolveGenericType": "Resolves the generic Type for the  {@code targetType} by walking the type hierarchy upwards fromthe  {@code initialType}."}, {"org.atmosphere.config.managed.TypeResolver.resolveArgument": "Resolves the type argument for the  {@code genericType} using type variable information from the{@code sourceType}. If  {@code genericType} is an instance of class, then {@code genericType} isreturned. If no arguments can be resolved then  {@code Unknown.class} is returned."}]}, {"index": "874", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/config/managed/TypeResolver.java", "methodName": "org.atmosphere.config.managed.TypeResolver.resolveArgument", "methodParameterType": "Type#Class<?>#", "methodParameterName": "genericType#targetType#", "methodBody": "public static Class<?> resolveArgument(Type genericType, Class<?> targetType) {\n        Class<?>[] arguments = resolveArguments(genericType, targetType);\n        if (arguments == null)\n            return Unknown.class;\n\n        if (arguments.length != 1)\n            throw new IllegalArgumentException(\"Expected 1 type argument on generic type \"\n                    + targetType.getName() + \" but found \" + arguments.length);\n\n        return arguments[0];\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#TypeLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#QualifiedName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#NumberLiteral#ArrayAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ReturnStatement)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ReturnStatement(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Resolves the type argument for the  {@code genericType} using type variable information from the{@code sourceType}. If  {@code genericType} is an instance of class, then {@code genericType} isreturned. If no arguments can be resolved then  {@code Unknown.class} is returned.", "call_func_name": ["org.atmosphere.config.managed.TypeResolver.resolveArguments", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Class.getName", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.reflect.Type", "java.lang.Class"], [""], ["java.lang.String"], [""], ["int"], [""], ["java.lang.String"]], "passed_comments": [{"org.atmosphere.config.managed.TypeResolver.resolveArguments": "Resolves the arguments for the  {@code genericType} using the type variable information for the{@code targetType}. Returns  {@code null} if {@code genericType} is not parameterized or ifarguments cannot be resolved."}]}, {"index": "875", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/config/managed/TypeResolver.java", "methodName": "org.atmosphere.config.managed.TypeResolver.resolveArguments", "methodParameterType": "Class<I>#Class<T>#", "methodParameterName": "initialType#targetType#", "methodBody": "public static <T, I extends T> Class<?>[] resolveArguments(Class<I> initialType,\n                                                               Class<T> targetType) {\n        return resolveArguments(resolveGenericType(initialType, targetType), initialType);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#WildcardType#ParameterizedType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(ArrayType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an array of raw classes representing type arguments for the  {@code targetType} resolvedupwards from the  {@code initialType}. Arguments for  {@code targetType} that cannot be resolvedto a Class are returned as  {@code Unknown.class}. If no arguments can be resolved then {@code null} is returned.", "call_func_name": ["org.atmosphere.config.managed.TypeResolver.resolveGenericType", "org.atmosphere.config.managed.TypeResolver.resolveArguments"], "call_func_parameter": [["java.lang.reflect.Type", "java.lang.Class"], ["java.lang.reflect.Type", "java.lang.Class"]], "passed_comments": [{"org.atmosphere.config.managed.TypeResolver.resolveGenericType": "Resolves the generic Type for the  {@code targetType} by walking the type hierarchy upwards fromthe  {@code initialType}."}, {"org.atmosphere.config.managed.TypeResolver.resolveArguments": "Resolves the arguments for the  {@code genericType} using the type variable information for the{@code targetType}. Returns  {@code null} if {@code genericType} is not parameterized or ifarguments cannot be resolved."}]}, {"index": "876", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/config/managed/TypeResolver.java", "methodName": "org.atmosphere.config.managed.TypeResolver.resolveArguments", "methodParameterType": "Type#Class<?>#", "methodParameterName": "genericType#targetType#", "methodBody": "public static Class<?>[] resolveArguments(Type genericType, Class<?> targetType) {\n        Class<?>[] result = null;\n\n        if (genericType instanceof ParameterizedType) {\n            ParameterizedType paramType = (ParameterizedType) genericType;\n            Type[] arguments = paramType.getActualTypeArguments();\n            result = new Class[arguments.length];\n            for (int i = 0; i < arguments.length; i++)\n                result[i] = resolveClass(arguments[i], targetType);\n        } else if (genericType instanceof TypeVariable) {\n            result = new Class[1];\n            result[0] = resolveClass(genericType, targetType);\n        }\n\n        return result;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#Dimension#ArrayType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ForStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)Assignment)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)ForStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Resolves the arguments for the  {@code genericType} using the type variable information for the{@code targetType}. Returns  {@code null} if {@code genericType} is not parameterized or ifarguments cannot be resolved.", "call_func_name": ["java.lang.reflect.ParameterizedType.getActualTypeArguments", "org.atmosphere.config.managed.TypeResolver.resolveClass"], "call_func_parameter": [[""], ["java.lang.reflect.Type", "java.lang.Class"]], "passed_comments": [{"org.atmosphere.config.managed.TypeResolver.resolveClass": "Resolves the raw class for the given  {@code genericType}, using the type variable information from the  {@code targetType}."}]}, {"index": "877", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/config/managed/TypeResolver.java", "methodName": "org.atmosphere.config.managed.TypeResolver.resolveGenericType", "methodParameterType": "Type#Class<?>#", "methodParameterName": "initialType#targetType#", "methodBody": "public static Type resolveGenericType(Type initialType, Class<?> targetType) {\n        Class<?> rawType;\n        if (initialType instanceof ParameterizedType)\n            rawType = (Class<?>) ((ParameterizedType) initialType).getRawType();\n        else\n            rawType = (Class<?>) initialType;\n\n        if (targetType.equals(rawType))\n            return initialType;\n\n        Type result;\n        if (targetType.isInterface()) {\n            for (Type superInterface : rawType.getGenericInterfaces())\n                if (superInterface != null && !superInterface.equals(Object.class))\n                    if ((result = resolveGenericType(superInterface, targetType)) != null)\n                        return result;\n        }\n\n        Type superType = rawType.getGenericSuperclass();\n        if (superType != null && !superType.equals(Object.class))\n            if ((result = resolveGenericType(superType, targetType)) != null)\n                return result;\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#CastExpression#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ParenthesizedExpression#NullLiteral#InfixExpression#SimpleName#ReturnStatement#IfStatement#IfStatement#EnhancedForStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ParenthesizedExpression#NullLiteral#InfixExpression#SimpleName#ReturnStatement#IfStatement#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)PrefixExpression)InfixExpression(IfStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ParenthesizedExpression(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement)IfStatement)EnhancedForStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)PrefixExpression)InfixExpression(IfStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ParenthesizedExpression(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Resolves the generic Type for the  {@code targetType} by walking the type hierarchy upwards fromthe  {@code initialType}.", "call_func_name": ["java.lang.reflect.ParameterizedType.getRawType", "java.lang.Object.equals", "java.lang.Class.isInterface", "java.lang.Class.getGenericInterfaces", "org.atmosphere.config.managed.TypeResolver.resolveGenericType", "java.lang.Class.getGenericSuperclass"], "call_func_parameter": [[""], ["java.lang.Object"], [""], [""], ["java.lang.reflect.Type", "java.lang.Class"], [""]], "passed_comments": [{"org.atmosphere.config.managed.TypeResolver.resolveGenericType": "Resolves the generic Type for the  {@code targetType} by walking the type hierarchy upwards fromthe  {@code initialType}."}]}, {"index": "878", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/config/managed/TypeResolver.java", "methodName": "org.atmosphere.config.managed.TypeResolver.resolveClass", "methodParameterType": "Type#Class<?>#", "methodParameterName": "genericType#targetType#", "methodBody": "public static Class<?> resolveClass(Type genericType, Class<?> targetType) {\n        if (genericType instanceof Class) {\n            return (Class<?>) genericType;\n        } else if (genericType instanceof ParameterizedType) {\n            return resolveClass(((ParameterizedType) genericType).getRawType(), targetType);\n        } else if (genericType instanceof GenericArrayType) {\n            GenericArrayType arrayType = (GenericArrayType) genericType;\n            Class<?> compoment = resolveClass(arrayType.getGenericComponentType(), targetType);\n            return Array.newInstance(compoment, 0).getClass();\n        } else if (genericType instanceof TypeVariable) {\n            TypeVariable<?> variable = (TypeVariable<?>) genericType;\n            genericType = getTypeVariableMap(targetType).get(variable);\n            genericType = genericType == null ? resolveBound(variable) : resolveClass(genericType,\n                    targetType);\n        }\n\n        return genericType instanceof Class ? (Class<?>) genericType : Unknown.class;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#CastExpression#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#CastExpression#SimpleName#SimpleType#TypeLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)CastExpression)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)Assignment)ExpressionStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement(ReturnStatement(ConditionalExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)CastExpression(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Resolves the raw class for the given  {@code genericType}, using the type variable information from the  {@code targetType}.", "call_func_name": ["java.lang.reflect.ParameterizedType.getRawType", "org.atmosphere.config.managed.TypeResolver.resolveClass", "java.lang.reflect.GenericArrayType.getGenericComponentType", "java.lang.reflect.Array.newInstance", "java.lang.Object.getClass", "org.atmosphere.config.managed.TypeResolver.getTypeVariableMap", "java.util.Map.get", "org.atmosphere.config.managed.TypeResolver.resolveBound"], "call_func_parameter": [[""], ["java.lang.reflect.Type", "java.lang.Class"], [""], ["java.lang.Class", "int"], [""], ["java.lang.Class"], ["java.lang.Object"], ["java.lang.reflect.TypeVariable"]], "passed_comments": [{"org.atmosphere.config.managed.TypeResolver.resolveClass": "Resolves the raw class for the given  {@code genericType}, using the type variable information from the  {@code targetType}."}, {"org.atmosphere.config.managed.TypeResolver.resolveBound": "Resolves the first bound for the  {@code typeVariable}, returning  {@code Unknown.class} if nonecan be resolved."}]}, {"index": "879", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/config/managed/TypeResolver.java", "methodName": "org.atmosphere.config.managed.TypeResolver.buildTypeVariableMap", "methodParameterType": "Type[]#Map<TypeVariable<?>,Type>#", "methodParameterName": "types#map#", "methodBody": "static void buildTypeVariableMap(final Type[] types, final Map<TypeVariable<?>, Type> map) {\n        for (Type type : types) {\n            if (type instanceof ParameterizedType) {\n                ParameterizedType parameterizedType = (ParameterizedType) type;\n                buildTypeVariableMap(parameterizedType, map);\n                Type rawType = parameterizedType.getRawType();\n                if (rawType instanceof Class)\n                    buildTypeVariableMap(((Class<?>) rawType).getGenericInterfaces(), map);\n            } else if (type instanceof Class) {\n                buildTypeVariableMap(((Class<?>) type).getGenericInterfaces(), map);\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Populates the  {@code map} with with variable/argument pairs for the given {@code types}.", "call_func_name": ["org.atmosphere.config.managed.TypeResolver.buildTypeVariableMap", "java.lang.reflect.ParameterizedType.getRawType", "java.lang.Class.getGenericInterfaces", "org.atmosphere.config.managed.TypeResolver.buildTypeVariableMap"], "call_func_parameter": [["java.lang.reflect.ParameterizedType", "java.util.Map"], [""], [""], ["java.lang.reflect.Type[]", "java.util.Map"]], "passed_comments": [{"org.atmosphere.config.managed.TypeResolver.buildTypeVariableMap": "Populates the  {@code typeVariableMap} with type arguments and parameters for the given{@code type}."}, {"org.atmosphere.config.managed.TypeResolver.buildTypeVariableMap": "Populates the  {@code map} with with variable/argument pairs for the given {@code types}."}]}, {"index": "880", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/config/managed/TypeResolver.java", "methodName": "org.atmosphere.config.managed.TypeResolver.buildTypeVariableMap", "methodParameterType": "ParameterizedType#Map<TypeVariable<?>,Type>#", "methodParameterName": "type#typeVariableMap#", "methodBody": "private static void buildTypeVariableMap(ParameterizedType type,\n                                             Map<TypeVariable<?>, Type> typeVariableMap) {\n        if (type.getRawType() instanceof Class) {\n            TypeVariable<?>[] typeVariables = ((Class<?>) type.getRawType()).getTypeParameters();\n            Type[] typeArguments = type.getActualTypeArguments();\n\n            for (int i = 0; i < typeArguments.length; i++) {\n                TypeVariable<?> variable = typeVariables[i];\n                Type typeArgument = typeArguments[i];\n\n                if (typeArgument instanceof Class) {\n                    typeVariableMap.put(variable, typeArgument);\n                } else if (typeArgument instanceof GenericArrayType) {\n                    typeVariableMap.put(variable, typeArgument);\n                } else if (typeArgument instanceof ParameterizedType) {\n                    typeVariableMap.put(variable, typeArgument);\n                } else if (typeArgument instanceof TypeVariable) {\n                    TypeVariable<?> typeVariableArgument = (TypeVariable<?>) typeArgument;\n                    Type resolvedType = typeVariableMap.get(typeVariableArgument);\n                    if (resolvedType == null)\n                        resolvedType = resolveBound(typeVariableArgument);\n                    typeVariableMap.put(variable, resolvedType);\n                }\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#WildcardType#ParameterizedType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#Block#ForStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(ArrayType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)Block)ForStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Populates the  {@code typeVariableMap} with type arguments and parameters for the given{@code type}.", "call_func_name": ["java.lang.reflect.ParameterizedType.getRawType", "java.lang.Class.getTypeParameters", "java.lang.reflect.ParameterizedType.getActualTypeArguments", "java.util.Map.put", "java.util.Map.get", "org.atmosphere.config.managed.TypeResolver.resolveBound"], "call_func_parameter": [[""], [""], [""], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object"], ["java.lang.reflect.TypeVariable"]], "passed_comments": [{"org.atmosphere.config.managed.TypeResolver.resolveBound": "Resolves the first bound for the  {@code typeVariable}, returning  {@code Unknown.class} if nonecan be resolved."}]}, {"index": "881", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/config/managed/TypeResolver.java", "methodName": "org.atmosphere.config.managed.TypeResolver.resolveBound", "methodParameterType": "TypeVariable<?>#", "methodParameterName": "typeVariable#", "methodBody": "public static Type resolveBound(TypeVariable<?> typeVariable) {\n        Type[] bounds = typeVariable.getBounds();\n        if (bounds.length == 0)\n            return Unknown.class;\n\n        Type bound = bounds[0];\n        if (bound instanceof TypeVariable)\n            bound = resolveBound((TypeVariable<?>) bound);\n\n        return bound == Object.class ? Unknown.class : bound;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleType#TypeLiteral#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#CastExpression#MethodInvocation#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#InfixExpression#SimpleName#SimpleType#TypeLiteral#SimpleName#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(ReturnStatement(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)CastExpression)MethodInvocation)Assignment)ExpressionStatement)IfStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)InfixExpression(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Resolves the first bound for the  {@code typeVariable}, returning  {@code Unknown.class} if nonecan be resolved.", "call_func_name": ["java.lang.reflect.TypeVariable.getBounds", "org.atmosphere.config.managed.TypeResolver.resolveBound"], "call_func_parameter": [[""], ["java.lang.reflect.TypeVariable"]], "passed_comments": [{"org.atmosphere.config.managed.TypeResolver.resolveBound": "Resolves the first bound for the  {@code typeVariable}, returning  {@code Unknown.class} if nonecan be resolved."}]}, {"index": "882", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/config/managed/ServiceInterceptor.java", "methodName": "org.atmosphere.config.managed.ServiceInterceptor.mapAnnotatedService", "methodParameterType": "AtmosphereRequest#AtmosphereFramework.AtmosphereHandlerWrapper#", "methodParameterName": "request#w#", "methodBody": "protected void mapAnnotatedService(AtmosphereRequest request, AtmosphereFramework.AtmosphereHandlerWrapper w) {\n        Broadcaster b = w.broadcaster;\n\n        String path;\n        String pathInfo = null;\n        boolean reMap = false;\n\n        path = Utils.pathInfo(request);\n\n        // Remove the Broadcaster with curly braces\n        if (b.getID().contains(\"{\")) {\n            reMap = true;\n            config.getBroadcasterFactory().remove(b.getID());\n        }\n\n        request.localAttributes().put(Named.class.getName(), path);\n\n        mapAnnotatedService(reMap, path, request, w);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Inspect the request and its mapped  {@link org.atmosphere.cpr.AtmosphereHandler} to determine if the '{}' was used when defined theannotation's path value. It will create a new  {@link org.atmosphere.cpr.AtmosphereHandler} in case {} is detected .", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "883", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/lifecycle/BroadcasterLifecyclePolicyHandler.java", "methodName": "org.atmosphere.lifecycle.BroadcasterLifecyclePolicyHandler.onPostCreate", "methodParameterType": "Broadcaster#", "methodParameterName": "b#", "methodBody": "@Override\n    public void onPostCreate(Broadcaster b) {\n        if (DefaultBroadcaster.class.isAssignableFrom(b.getClass())) {\n            DefaultBroadcaster broadcaster = DefaultBroadcaster.class.cast(b);\n            broadcaster.lifecycleHandler(liferCycleHandler.on(broadcaster));\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.lang.Object.getClass", "java.lang.Class.isAssignableFrom", "java.lang.Class.cast", "org.atmosphere.lifecycle.LifecycleHandler.on", "org.atmosphere.cpr.DefaultBroadcaster.lifecycleHandler"], "call_func_parameter": [[""], ["java.lang.Class"], ["java.lang.Object"], ["org.atmosphere.cpr.DefaultBroadcaster"], ["org.atmosphere.lifecycle.LifecycleHandler"]], "passed_comments": "/"}, {"index": "884", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/lifecycle/BroadcasterLifecyclePolicyHandler.java", "methodName": "org.atmosphere.lifecycle.BroadcasterLifecyclePolicyHandler.onPreDestroy", "methodParameterType": "Broadcaster#", "methodParameterName": "b#", "methodBody": "@Override\n    public void onPreDestroy(Broadcaster b) {\n        if (DefaultBroadcaster.class.isAssignableFrom(b.getClass())) {\n            DefaultBroadcaster broadcaster = DefaultBroadcaster.class.cast(b);\n            if (broadcaster.lifecycleHandler() != null) {\n                broadcaster.lifecycleHandler().off(broadcaster);\n            }\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.lang.Object.getClass", "java.lang.Class.isAssignableFrom", "java.lang.Class.cast", "org.atmosphere.cpr.DefaultBroadcaster.lifecycleHandler", "org.atmosphere.lifecycle.LifecycleHandler.off"], "call_func_parameter": [[""], ["java.lang.Class"], ["java.lang.Object"], [""], ["org.atmosphere.cpr.DefaultBroadcaster"]], "passed_comments": "/"}, {"index": "885", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/lifecycle/BroadcasterLifecyclePolicyHandler.java", "methodName": "org.atmosphere.lifecycle.BroadcasterLifecyclePolicyHandler.onRemoveAtmosphereResource", "methodParameterType": "Broadcaster#AtmosphereResource#", "methodParameterName": "b#r#", "methodBody": "@Override\n    public void onRemoveAtmosphereResource(Broadcaster b, AtmosphereResource r) {\n        if (DefaultBroadcaster.class.isAssignableFrom(b.getClass())) {\n            DefaultBroadcaster broadcaster = DefaultBroadcaster.class.cast(b);\n            if (broadcaster.lifecycleHandler() != null) {\n                broadcaster.lifecycleHandler().offIfEmpty(broadcaster);\n            }\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.lang.Object.getClass", "java.lang.Class.isAssignableFrom", "java.lang.Class.cast", "org.atmosphere.cpr.DefaultBroadcaster.lifecycleHandler", "org.atmosphere.lifecycle.LifecycleHandler.offIfEmpty"], "call_func_parameter": [[""], ["java.lang.Class"], ["java.lang.Object"], [""], ["org.atmosphere.cpr.DefaultBroadcaster"]], "passed_comments": "/"}, {"index": "886", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/pool/PoolableBroadcasterFactory.java", "methodName": "org.atmosphere.pool.PoolableBroadcasterFactory.trackPooledBroadcaster", "methodParameterType": "boolean#", "methodParameterName": "trackPooledBroadcaster#", "methodBody": "public PoolableBroadcasterFactory trackPooledBroadcaster(boolean trackPooledBroadcaster) {\n        this.trackPooledBroadcaster = trackPooledBroadcaster;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set to true to enable tracking of  {@link org.atmosphere.cpr.Broadcaster#getID()} duplication. Enabling thisfeature will significantly reduce the performance of the  {@link org.atmosphere.pool.PoolableProvider}. Use the {@link org.atmosphere.cpr.DefaultBroadcasterFactory} if you need to track's duplication.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "887", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/pool/PoolableBroadcasterFactory.java", "methodName": "org.atmosphere.pool.PoolableBroadcasterFactory.trackPooledBroadcaster", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean trackPooledBroadcaster() {\n        return trackPooledBroadcaster;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true is  {@link Broadcaster} instance are tracked, e.g stored in a Collection for duplicate id.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "888", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/pool/PoolableBroadcasterFactory.java", "methodName": "org.atmosphere.pool.PoolableBroadcasterFactory.poolableProvider", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public PoolableProvider<? extends Broadcaster, ?> poolableProvider() {\n        return poolableProvider;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#WildcardType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The current  {@link org.atmosphere.pool.PoolableProvider}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "889", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/pool/PoolableBroadcasterFactory.java", "methodName": "org.atmosphere.pool.PoolableBroadcasterFactory.poolableProvider", "methodParameterType": "PoolableProvider<? extends Broadcaster,?>#", "methodParameterName": "poolableProvider#", "methodBody": "public PoolableBroadcasterFactory poolableProvider(PoolableProvider<? extends Broadcaster, ?> poolableProvider) {\n        this.poolableProvider = poolableProvider;\n        this.poolableProvider.configure(config);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set the implementation of  {@link org.atmosphere.pool.PoolableProvider}", "call_func_name": ["org.atmosphere.pool.PoolableProvider.configure"], "call_func_parameter": [["org.atmosphere.cpr.AtmosphereConfig"]], "passed_comments": "/"}, {"index": "890", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/pool/PoolableProvider.java", "methodName": "org.atmosphere.pool.PoolableProvider.borrowBroadcaster", "methodParameterType": "Object#", "methodParameterName": "id#", "methodBody": "T borrowBroadcaster(Object id);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Return a  {@link org.atmosphere.cpr.Broadcaster}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "891", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/pool/PoolableProvider.java", "methodName": "org.atmosphere.pool.PoolableProvider.returnBroadcaster", "methodParameterType": "T#", "methodParameterName": "b#", "methodBody": "<T extends Broadcaster, U> PoolableProvider returnBroadcaster(T b);", "AST": "Javadoc#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Return a destroyed  {@link Broadcaster} instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "892", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/pool/PoolableProvider.java", "methodName": "org.atmosphere.pool.PoolableProvider.poolSize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "long poolSize();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The current Pool Size", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "893", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/pool/PoolableProvider.java", "methodName": "org.atmosphere.pool.PoolableProvider.activeBroadcaster", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "long activeBroadcaster();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Current number of active Broadcaster borrowed from the pool", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "894", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/pool/PoolableProvider.java", "methodName": "org.atmosphere.pool.PoolableProvider.implementation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "U implementation();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the current native pool implementation. For example, the GenericObjectPool from Apache Common will be returned if the  {@link org.atmosphere.pool.UnboundedApachePoolableProvider} is used.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "895", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/handler/AnnotatedProxy.java", "methodName": "org.atmosphere.handler.AnnotatedProxy.target", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Object target();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The Object the  {@link org.atmosphere.cpr.AtmosphereHandler} is proxying.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "896", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/handler/AnnotatedProxy.java", "methodName": "org.atmosphere.handler.AnnotatedProxy.pathParams", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean pathParams();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return true if  {@link org.atmosphere.config.service.PathParam} are supported.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "897", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/handler/AnnotatedProxy.java", "methodName": "org.atmosphere.handler.AnnotatedProxy.configure", "methodParameterType": "AtmosphereConfig#Object#", "methodParameterName": "config#c#", "methodBody": "AnnotatedProxy configure(AtmosphereConfig config, Object c);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Configure the proxy.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "898", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/handler/OnMessage.java", "methodName": "org.atmosphere.handler.OnMessage.onOpen", "methodParameterType": "AtmosphereResource#", "methodParameterName": "resource#", "methodBody": "public void onOpen(AtmosphereResource resource) throws IOException {\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block)Block)MethodDeclaration", "methodDoc": "This method will be invoked when an connection has been received and not haven't yet be suspended. Note that the connection will be suspended AFTER the method has been invoked when used with  {@link org.atmosphere.interceptor.AtmosphereResourceLifecycleInterceptor}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "899", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/handler/OnMessage.java", "methodName": "org.atmosphere.handler.OnMessage.onMessage", "methodParameterType": "AtmosphereResponse#T#", "methodParameterName": "response#message#", "methodBody": "abstract public void onMessage(AtmosphereResponse response, T message) throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Implement this method to get invoked every time a new  {@link org.atmosphere.cpr.Broadcaster#broadcast(Object)}occurs.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "900", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/handler/OnMessage.java", "methodName": "org.atmosphere.handler.OnMessage.onResume", "methodParameterType": "AtmosphereResponse#", "methodParameterName": "response#", "methodBody": "public void onResume(AtmosphereResponse response) throws IOException {\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block)Block)MethodDeclaration", "methodDoc": "This method will be invoked during the process of resuming a connection. By default this method does nothing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "901", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/handler/OnMessage.java", "methodName": "org.atmosphere.handler.OnMessage.onTimeout", "methodParameterType": "AtmosphereResponse#", "methodParameterName": "response#", "methodBody": "public void onTimeout(AtmosphereResponse response) throws IOException {\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block)Block)MethodDeclaration", "methodDoc": "This method will be invoked when a suspended connection times out, e.g no activity has occurred for the specified time used when suspending. By default this method does nothing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "902", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/handler/OnMessage.java", "methodName": "org.atmosphere.handler.OnMessage.onDisconnect", "methodParameterType": "AtmosphereResponse#", "methodParameterName": "response#", "methodBody": "public void onDisconnect(AtmosphereResponse response) throws IOException {\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block)Block)MethodDeclaration", "methodDoc": "This method will be invoked when the underlying WebServer detects a connection has been closed. Please note that not all WebServer supports that features (see Atmosphere's WIKI for help). By default this method does nothing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "903", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java", "methodName": "org.atmosphere.handler.ReflectorServletProcessor.onRequest", "methodParameterType": "AtmosphereResource#", "methodParameterName": "r#", "methodBody": "public void onRequest(AtmosphereResource r)\n            throws IOException {\n        final boolean completionAware =\n            Boolean.parseBoolean(r.getAtmosphereConfig().getInitParameter(ApplicationConfig.RESPONSE_COMPLETION_AWARE));\n        try {\n            if (completionAware) {\n                r.getRequest().setAttribute(ApplicationConfig.RESPONSE_COMPLETION_AWARE, Boolean.TRUE);\n                if (Boolean.parseBoolean(r.getAtmosphereConfig().getInitParameter(ApplicationConfig.RESPONSE_COMPLETION_RESET))) {\n                    r.getRequest().setAttribute(ApplicationConfig.RESPONSE_COMPLETION_RESET, Boolean.TRUE);\n                }\n            }\n            wrapper.service(r.getRequest(), r.getResponse());\n        } catch (Throwable ex) {\n            logger.error(\"onRequest()\", ex);\n            throw new RuntimeException(ex);\n        } finally {\n            // For the sync case, the completion is notified here. For the async case, it is notified by AsyncContext later\n            if (completionAware && r.getResponse() instanceof CompletionAware && !r.getRequest().isAsyncStarted()) {\n                ((CompletionAware)r.getResponse()).onComplete();\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(Block(IfStatement(InfixExpression(SimpleName)SimpleName(InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Delegate the request to the Servlet.service method, and add the  {@link AtmosphereResource}to the  {@link HttpServletRequest#setAttribute(java.lang.String, java.lang.Object))}. The  {@link AtmosphereResource} can ve retrieved using {@link org.atmosphere.cpr.FrameworkConfig#ATMOSPHERE_RESOURCE}value.", "call_func_name": ["org.atmosphere.cpr.AtmosphereResource.getAtmosphereConfig", "org.atmosphere.cpr.AtmosphereConfig.getInitParameter", "java.lang.Boolean.parseBoolean", "org.atmosphere.cpr.AtmosphereResource.getRequest", "org.atmosphere.cpr.AtmosphereRequest.setAttribute", "org.atmosphere.cpr.AtmosphereResource.getResponse", "org.atmosphere.cpr.AtmosphereRequest.isAsyncStarted", "org.atmosphere.cpr.CompletionAware.onComplete", "org.slf4j.Logger.error", "java.lang.RuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Object"], [""], [""], [""], ["java.lang.String", "java.lang.Throwable"], ["java.lang.Throwable"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.getAtmosphereConfig": "Return the  {@link AtmosphereConfig}."}, {"org.atmosphere.cpr.AtmosphereConfig.getInitParameter": "Return the value of the init params defined in web.xml or application.xml."}, {"org.atmosphere.cpr.AtmosphereResource.getRequest": "Return the underlying  {@link AtmosphereRequest} request."}, {"org.atmosphere.cpr.AtmosphereRequest.setAttribute": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereResource.getResponse": "Return the  {@link AtmosphereResponse}."}, {"org.atmosphere.cpr.AtmosphereRequest.isAsyncStarted": "{@inheritDoc}"}]}, {"index": "904", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java", "methodName": "org.atmosphere.handler.ReflectorServletProcessor.getServletClass", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public String getServletClass() {\n        return servletClassName;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set the Servlet class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "905", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java", "methodName": "org.atmosphere.handler.ReflectorServletProcessor.setServletClass", "methodParameterType": "String#", "methodParameterName": "servletClass#", "methodBody": "@Deprecated\n    public void setServletClass(String servletClass) {\n        this.servletClassName = servletClass;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Return the Servlet class name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "906", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java", "methodName": "org.atmosphere.handler.ReflectorServletProcessor.getServletClassName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getServletClassName() {\n        return servletClassName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set the Servlet class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "907", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java", "methodName": "org.atmosphere.handler.ReflectorServletProcessor.setServletClassName", "methodParameterType": "String#", "methodParameterName": "servletClass#", "methodBody": "public void setServletClassName(String servletClass) {\n        this.servletClassName = servletClass;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Return the Servlet class name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "908", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java", "methodName": "org.atmosphere.handler.ReflectorServletProcessor.setFilterClassName", "methodParameterType": "String#", "methodParameterName": "filterClass#", "methodBody": "public void setFilterClassName(String filterClass) {\n        if (filterClass == null) return;\n        filtersClassAndNames.put(filterClass, filterClass);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement)ReturnStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add a FilterClass. Since we are using Reflection to call this method, what we are really doing is addFilterClass. <p/>", "call_func_name": ["java.util.HashMap.put"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "909", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java", "methodName": "org.atmosphere.handler.ReflectorServletProcessor.addFilterClassName", "methodParameterType": "String#String#", "methodParameterName": "filterClass#filterName#", "methodBody": "public void addFilterClassName(String filterClass, String filterName) {\n        if (filterClass == null || filterName == null) return;\n        filtersClassAndNames.put(filterClass, filterName);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(ReturnStatement)ReturnStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add a FilterClass. Since we are using Reflection to call this method, what we are really doing is addFilterClass.", "call_func_name": ["java.util.HashMap.put"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "910", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/handler/AbstractReflectorAtmosphereHandler.java", "methodName": "org.atmosphere.handler.AbstractReflectorAtmosphereHandler.onStateChange", "methodParameterType": "AtmosphereResourceEvent#", "methodParameterName": "event#", "methodBody": "@Override\n    public void onStateChange(AtmosphereResourceEvent event)\n            throws IOException {\n\n        Object message = event.getMessage();\n        AtmosphereResource resource = event.getResource();\n        AtmosphereResponse r = resource.getResponse();\n        AtmosphereRequest request = resource.getRequest();\n\n        boolean writeAsBytes = IOUtils.isBodyBinary(request);\n        if (message == null) {\n            logger.trace(\"Message was null for AtmosphereEvent {}\", event);\n            return;\n        }\n\n        if (resource.getSerializer() != null) {\n            try {\n\n                if (message instanceof List) {\n                    for (Object s : (List<Object>) message) {\n                        resource.getSerializer().write(resource.getResponse().getOutputStream(), s);\n                    }\n                } else {\n                    resource.getSerializer().write(resource.getResponse().getOutputStream(), message);\n                }\n            } catch (Throwable ex) {\n                logger.warn(\"Serializer exception: message: {}\", message, ex);\n                throw new IOException(ex);\n            }\n        } else {\n            boolean isUsingStream = true;\n            Object o = resource.getRequest().getAttribute(PROPERTY_USE_STREAM);\n            if (o != null) {\n                isUsingStream = (Boolean) o;\n            }\n\n            if (!isUsingStream) {\n                try {\n                    r.getWriter();\n                } catch (IllegalStateException e) {\n                    isUsingStream = true;\n                }\n                if (writeAsBytes) {\n                    throw new IllegalStateException(\"Cannot write bytes using PrintWriter\");\n                }\n            }\n\n            if (message instanceof List) {\n                Iterator<Object> i = ((List) message).iterator();\n                try {\n                    Object s;\n                    while (i.hasNext()) {\n                        s = i.next();\n                        if (String.class.isAssignableFrom(s.getClass())) {\n                            if (isUsingStream) {\n                                r.getOutputStream().write(s.toString().getBytes(r.getCharacterEncoding()));\n                            } else {\n                                r.getWriter().write(s.toString());\n                            }\n                        } else if (byte[].class.isAssignableFrom(s.getClass())) {\n                            if (isUsingStream) {\n                                r.getOutputStream().write((byte[]) s);\n                            } else {\n                                r.getWriter().write(s.toString());\n                            }\n                        } else {\n                            if (isUsingStream) {\n                                r.getOutputStream().write(s.toString().getBytes(r.getCharacterEncoding()));\n                            } else {\n                                r.getWriter().write(s.toString());\n                            }\n                        }\n                        i.remove();\n                    }\n                } catch (IOException ex) {\n                    event.setMessage(new ArrayList<String>().addAll((List) message));\n                    throw ex;\n                }\n\n                if (isUsingStream) {\n                    r.getOutputStream().flush();\n                } else {\n                    r.getWriter().flush();\n                }\n            } else {\n                if (isUsingStream) {\n                    r.getOutputStream().write(writeAsBytes ? (byte[]) message : message.toString().getBytes(r.getCharacterEncoding()));\n                    r.getOutputStream().flush();\n                } else {\n                    r.getWriter().write(message.toString());\n                    r.getWriter().flush();\n                }\n            }\n        }\n        postStateChange(event);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#CastExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#PrimitiveType#Dimension#ArrayType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#CastExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ConditionalExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)CastExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)CatchClause)TryStatement(IfStatement(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(IfStatement(MethodInvocation(TypeLiteral(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(CastExpression(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)MethodInvocation)ExpressionStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause)TryStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ConditionalExpression(SimpleName)SimpleName(CastExpression(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)CastExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ConditionalExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Write the  {@link AtmosphereResourceEvent#getMessage()} back to the client usingthe  {@link AtmosphereResponseImpl#getOutputStream()} or {@link AtmosphereResponseImpl#getWriter()}. If a  {@link org.atmosphere.cpr.Serializer} is defined, it will be invoked and the write operationwill be delegated to it. <p/> By default, this method will try to use  {@link AtmosphereResponseImpl#getWriter()}.", "call_func_name": ["org.atmosphere.cpr.AtmosphereResourceEvent.getMessage", "org.atmosphere.cpr.AtmosphereResourceEvent.getResource", "org.atmosphere.cpr.AtmosphereResource.getResponse", "org.atmosphere.cpr.AtmosphereResource.getRequest", "org.atmosphere.util.IOUtils.isBodyBinary", "org.slf4j.Logger.trace", "org.atmosphere.cpr.AtmosphereResource.getSerializer", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.atmosphere.cpr.AtmosphereResponse.getOutputStream", "org.atmosphere.cpr.Serializer.write", "org.slf4j.Logger.warn", "java.io.IOException.<init>", "org.atmosphere.cpr.AtmosphereRequest.getAttribute", "java.lang.Boolean.booleanValue", "org.atmosphere.cpr.AtmosphereResponse.getWriter", "java.lang.IllegalStateException.<init>", "java.lang.Object.getClass", "java.lang.Class.isAssignableFrom", "java.lang.Object.toString", "org.atmosphere.cpr.AtmosphereResponse.getCharacterEncoding", "java.lang.String.getBytes", "javax.servlet.ServletOutputStream.write", "java.io.PrintWriter.write", "java.util.Iterator.remove", "java.util.ArrayList.<init>", "java.util.ArrayList.addAll", "java.lang.Boolean.valueOf", "org.atmosphere.cpr.AtmosphereResourceEvent.setMessage", "javax.servlet.ServletOutputStream.flush", "java.io.PrintWriter.flush", "org.atmosphere.handler.AbstractReflectorAtmosphereHandler.postStateChange"], "call_func_parameter": [[""], [""], [""], [""], ["org.atmosphere.cpr.AtmosphereRequest"], ["java.lang.String", "java.lang.Object"], [""], [""], [""], [""], [""], ["java.io.OutputStream", "java.lang.Object"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.Throwable"], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], ["java.lang.Class"], [""], [""], ["java.lang.String"], ["byte[]"], ["java.lang.String"], [""], [""], ["java.util.Collection"], ["boolean"], ["java.lang.Object"], [""], [""], ["org.atmosphere.cpr.AtmosphereResourceEvent"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResourceEvent.getMessage": "Return the object that was passed to  {@link Broadcaster#broadcast(java.lang.Object)}."}, {"org.atmosphere.cpr.AtmosphereResourceEvent.getResource": "Return the  {@link AtmosphereResource} associated with this event."}, {"org.atmosphere.cpr.AtmosphereResource.getResponse": "Return the  {@link AtmosphereResponse}."}, {"org.atmosphere.cpr.AtmosphereResource.getRequest": "Return the underlying  {@link AtmosphereRequest} request."}, {"org.atmosphere.cpr.AtmosphereResource.getSerializer": "Get the  {@link Serializer} or null if not defined."}, {"org.atmosphere.cpr.Serializer.write": "Serialize the  {@link Object} using the {@link OutputStream}."}, {"org.atmosphere.cpr.AtmosphereRequest.getAttribute": "{@inheritDoc}"}, {"org.atmosphere.cpr.AtmosphereResourceEvent.setMessage": "Set an Object that can be retrieved with  {@link #getMessage()}. Note that the value may be overridden when {@link Broadcaster#broadcast(java.lang.Object)} gets invoked."}, {"org.atmosphere.handler.AbstractReflectorAtmosphereHandler.postStateChange": "Inspect the event and decide if the underlying connection must be resumed."}]}, {"index": "911", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/handler/AbstractReflectorAtmosphereHandler.java", "methodName": "org.atmosphere.handler.AbstractReflectorAtmosphereHandler.twoStepWrite", "methodParameterType": "ServletOutputStream#byte[]#", "methodParameterName": "o#data#", "methodBody": "private void twoStepWrite(ServletOutputStream o, byte[] data) throws IOException {\n        o.write(data, 0, 1);\n        o.flush();\n        o.write(data, 1, data.length - 1);\n        o.flush();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Writes the given data to the given outputstream in two steps with extra flushes to make servers notice if the connection has been closed. This enables caching the message instead of losing it, if the client is in the progress of reconnecting", "call_func_name": ["javax.servlet.ServletOutputStream.write", "javax.servlet.ServletOutputStream.flush"], "call_func_parameter": [["byte[]", "int", "int"], [""]], "passed_comments": "/"}, {"index": "912", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/handler/AbstractReflectorAtmosphereHandler.java", "methodName": "org.atmosphere.handler.AbstractReflectorAtmosphereHandler.postStateChange", "methodParameterType": "AtmosphereResourceEvent#", "methodParameterName": "event#", "methodBody": "protected final void postStateChange(AtmosphereResourceEvent event) {\n        if (event.isCancelled() || event.isResuming()) return;\n\n        AtmosphereResourceImpl r = AtmosphereResourceImpl.class.cast(event.getResource());\n        // Between event.isCancelled and resource, the connection has been remotly closed.\n        if (r == null) {\n            logger.trace(\"Event {} returned a null AtmosphereResource\", event);\n            return;\n        }\n        Boolean resumeOnBroadcast = r.resumeOnBroadcast();\n        if (!resumeOnBroadcast) {\n            // For legacy reason, check the attribute as well\n            Object o = r.getRequest(false).getAttribute(ApplicationConfig.RESUME_ON_BROADCAST);\n            if (o != null && Boolean.class.isAssignableFrom(o.getClass())) {\n                resumeOnBroadcast = Boolean.class.cast(o);\n            }\n        }\n\n        if (resumeOnBroadcast != null && resumeOnBroadcast) {\n            r.resume();\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(ReturnStatement)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Inspect the event and decide if the underlying connection must be resumed.", "call_func_name": ["org.atmosphere.cpr.AtmosphereResourceEvent.isCancelled", "org.atmosphere.cpr.AtmosphereResourceEvent.isResuming", "org.atmosphere.cpr.AtmosphereResourceEvent.getResource", "java.lang.Class.cast", "org.slf4j.Logger.trace", "org.atmosphere.cpr.AtmosphereResourceImpl.resumeOnBroadcast", "java.lang.Boolean.valueOf", "java.lang.Boolean.booleanValue", "org.atmosphere.cpr.AtmosphereResourceImpl.getRequest", "org.atmosphere.cpr.AtmosphereRequest.getAttribute", "java.lang.Object.getClass", "java.lang.Class.isAssignableFrom", "org.atmosphere.cpr.AtmosphereResourceImpl.resume"], "call_func_parameter": [[""], [""], [""], ["java.lang.Object"], ["java.lang.String", "java.lang.Object"], [""], ["boolean"], [""], ["boolean"], ["java.lang.String"], [""], ["java.lang.Class"], [""]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResourceEvent.isCancelled": "Return true when the remote client close the connection."}, {"org.atmosphere.cpr.AtmosphereResourceEvent.isResuming": "Return <tt>true</tt> if  {@link AtmosphereResource#resume()} has been invoked."}, {"org.atmosphere.cpr.AtmosphereResourceEvent.getResource": "Return the  {@link AtmosphereResource} associated with this event."}, {"org.atmosphere.cpr.AtmosphereRequest.getAttribute": "{@inheritDoc}"}]}, {"index": "913", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/interceptor/TrackMessageSizeB64Interceptor.java", "methodName": "org.atmosphere.interceptor.TrackMessageSizeB64Interceptor.excludedContentType", "methodParameterType": "String#", "methodParameterName": "excludedContentType#", "methodBody": "public TrackMessageSizeB64Interceptor excludedContentType(String excludedContentType) {\n        excludedContentTypes.add(excludedContentType.toLowerCase());\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Excluse response's content-type from being processed by this class.", "call_func_name": ["java.lang.String.toLowerCase", "java.util.HashSet.add"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "914", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceLifecycleInterceptor.java", "methodName": "org.atmosphere.interceptor.AtmosphereResourceLifecycleInterceptor.inspect", "methodParameterType": "AtmosphereResource#", "methodParameterName": "r#", "methodBody": "@Override\n    public Action inspect(AtmosphereResource r) {\n\n        switch (r.transport()) {\n            case JSONP:\n            case AJAX:\n            case LONG_POLLING:\n                r.resumeOnBroadcast(true);\n                break;\n            default:\n                break;\n        }\n        return Action.CONTINUE;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#BreakStatement#SwitchCase#BreakStatement#SwitchStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(BreakStatement)BreakStatement)SwitchStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Automatically suspend the  {@link AtmosphereResource} based on {@link AtmosphereResource.TRANSPORT} value.", "call_func_name": ["org.atmosphere.cpr.AtmosphereResource.transport", "org.atmosphere.cpr.AtmosphereResource.resumeOnBroadcast"], "call_func_parameter": [[""], ["boolean"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereResource.transport": "Return the current  {@link TRANSPORT}. The transport value is retrieved using the  {@link HeaderConfig#X_ATMOSPHERE_TRANSPORT}header value."}, {"org.atmosphere.cpr.AtmosphereResource.resumeOnBroadcast": "Set to true to resume the response after the first broadcast. False by default."}]}, {"index": "915", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/interceptor/InvokationOrder.java", "methodName": "org.atmosphere.interceptor.InvokationOrder.priority", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "PRIORITY priority();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the priority an AtmosphereInterceptor must be executed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "916", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/interceptor/HeartbeatInterceptor.java", "methodName": "org.atmosphere.interceptor.HeartbeatInterceptor.getPaddingBytes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public byte[] getPaddingBytes() {\n        return this.paddingBytes;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p> Gets the bytes to use when sending an heartbeat for both client and server. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "917", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/interceptor/HeartbeatInterceptor.java", "methodName": "org.atmosphere.interceptor.HeartbeatInterceptor.clientHeartbeatFrequencyInSeconds", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int clientHeartbeatFrequencyInSeconds() {\n        return clientHeartbeatFrequencyInSeconds;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p> Gets the desired heartbeat frequency from client. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "918", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/interceptor/HeartbeatInterceptor.java", "methodName": "org.atmosphere.interceptor.HeartbeatInterceptor.extractHeartbeatInterval", "methodParameterType": "AtmosphereResourceImpl#", "methodParameterName": "resource#", "methodBody": "protected int extractHeartbeatInterval(final AtmosphereResourceImpl resource) {\n        // Extract the desired heartbeat interval\n        // Won't be applied if lower config value\n        int interval = heartbeatFrequencyInSeconds;\n        final String s = resource.getRequest(false).getHeader(HeaderConfig.X_HEARTBEAT_SERVER);\n\n        if (s != null) {\n            try {\n                interval = Integer.parseInt(s);\n\n                if (interval != 0 && interval < heartbeatFrequencyInSeconds) {\n                    interval = heartbeatFrequencyInSeconds;\n                }\n            } catch (NumberFormatException nfe) {\n                logger.warn(\"{} header is not an integer\", HeaderConfig.X_HEARTBEAT_SERVER, nfe);\n            }\n        }\n\n        return interval;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p> Extracts the heartbeat interval as explained in class description. This method could be overridden to change the the configuration points. </p>", "call_func_name": ["org.atmosphere.cpr.AtmosphereResourceImpl.getRequest", "org.atmosphere.cpr.AtmosphereRequest.getHeader", "java.lang.Integer.parseInt", "org.slf4j.Logger.warn"], "call_func_parameter": [["boolean"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequest.getHeader": "{@inheritDoc}"}]}, {"index": "919", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/interceptor/HeartbeatInterceptor.java", "methodName": "org.atmosphere.interceptor.HeartbeatInterceptor.clock", "methodParameterType": "int#AtmosphereResource#AtmosphereRequest#AtmosphereResponse#", "methodParameterName": "interval#r#request#response#", "methodBody": "public HeartbeatInterceptor clock(final int interval,\n                                      final AtmosphereResource r,\n                                      final AtmosphereRequest request,\n                                      final AtmosphereResponse response) {\n\n        try {\n            request.setAttribute(HEARTBEAT_FUTURE, heartBeat.schedule(new Callable<Object>() {\n                @Override\n                public Object call() throws Exception {\n                    synchronized (r) {\n                        if (AtmosphereResourceImpl.class.cast(r).isInScope() && r.isSuspended()) {\n                            try {\n                                logger.trace(\"Heartbeat for Resource {}\", r);\n                                response.write(paddingBytes, false);\n                                if (Utils.resumableTransport(r.transport()) && resumeOnHeartbeat) {\n                                    r.resume();\n                                } else if (flushBuffer) {\n                                    response.flushBuffer();\n                                }\n                            } catch (Throwable t) {\n                                logger.trace(\"{}\", r.uuid(), t);\n                                cancelF(request);\n                            }\n                        } else {\n                            cancelF(request);\n                        }\n                    }\n                    return null;\n                }\n            }, interval, TimeUnit.SECONDS));\n        } catch (Throwable t) {\n            logger.warn(\"\", t);\n        }\n\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SynchronizedStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(SynchronizedStatement(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)SynchronizedStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p> Configures the heartbeat sent by the server in an interval in seconds specified in parameter for the given resource. </p>", "call_func_name": ["java.util.concurrent.ScheduledExecutorService.schedule", "org.atmosphere.cpr.AtmosphereRequest.setAttribute", "org.slf4j.Logger.warn"], "call_func_parameter": [["java.util.concurrent.Callable", "long", "java.util.concurrent.TimeUnit"], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.atmosphere.cpr.AtmosphereRequest.setAttribute": "{@inheritDoc}"}]}, {"index": "920", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cache/BroadcasterCacheInspector.java", "methodName": "org.atmosphere.cache.BroadcasterCacheInspector.inspect", "methodParameterType": "BroadcastMessage#", "methodParameterName": "message#", "methodBody": "boolean inspect(BroadcastMessage message);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Inspect the  {@link BroadcastMessage} and return true if the message can be cached, false if not.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "921", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cache/AbstractBroadcasterCache.java", "methodName": "org.atmosphere.cache.AbstractBroadcasterCache.setInvalidateCacheInterval", "methodParameterType": "long#", "methodParameterName": "invalidateCacheInterval#", "methodBody": "public AbstractBroadcasterCache setInvalidateCacheInterval(long invalidateCacheInterval) {\n        this.invalidateCacheInterval = invalidateCacheInterval;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set the delay between cache purges.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "922", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cache/AbstractBroadcasterCache.java", "methodName": "org.atmosphere.cache.AbstractBroadcasterCache.setMaxCacheTime", "methodParameterType": "long#", "methodParameterName": "maxCacheTime#", "methodBody": "public AbstractBroadcasterCache setMaxCacheTime(long maxCacheTime) {\n        this.maxCacheTime = maxCacheTime;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set the maximum time a message stays alive in the cache.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "923", "file": "/root/repos/repos2/atmosphere/modules/cpr/src/main/java/org/atmosphere/cache/CacheMessage.java", "methodName": "org.atmosphere.cache.CacheMessage.uuid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String uuid(){\n        return uuid;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link org.atmosphere.cpr.AtmosphereResource#uuid()}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "924", "file": "/root/repos/repos2/atmosphere/modules/jersey/src/main/java/org/atmosphere/jersey/SuspendResponse.java", "methodName": "org.atmosphere.jersey.SuspendResponse.scope", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Suspend.SCOPE scope() {\n        return scope;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link org.atmosphere.annotation.Suspend.SCOPE} value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "925", "file": "/root/repos/repos2/atmosphere/modules/jersey/src/main/java/org/atmosphere/jersey/SuspendResponse.java", "methodName": "org.atmosphere.jersey.SuspendResponse.period", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public TimeSpan period() {\n        return suspendTimeout;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link org.atmosphere.jersey.SuspendResponse.TimeSpan} used to suspend the response.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "926", "file": "/root/repos/repos2/atmosphere/modules/jersey/src/main/java/org/atmosphere/jersey/SuspendResponse.java", "methodName": "org.atmosphere.jersey.SuspendResponse.outputComments", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean outputComments() {\n        return outputComments;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tell Atmosphere to write some comments during the connection suspension.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "927", "file": "/root/repos/repos2/atmosphere/modules/jersey/src/main/java/org/atmosphere/jersey/SuspendResponse.java", "methodName": "org.atmosphere.jersey.SuspendResponse.resumeOnBroadcast", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean resumeOnBroadcast() {\n        return resumeOnBroadcast;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Resume the connection on the first  {@link org.atmosphere.cpr.Broadcaster#broadcast(Object)} operations.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "928", "file": "/root/repos/repos2/atmosphere/modules/jersey/src/main/java/org/atmosphere/jersey/SuspendResponse.java", "methodName": "org.atmosphere.jersey.SuspendResponse.writeEntity", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean writeEntity() {\n        return writeEntity;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Write the returned entity back to the calling connection. Default is false.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "929", "file": "/root/repos/repos2/atmosphere/modules/jersey/src/main/java/org/atmosphere/jersey/SuspendResponse.java", "methodName": "org.atmosphere.jersey.SuspendResponse.broadcaster", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Broadcaster broadcaster() {\n        return broadcaster;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link Broadcaster} that will be used to broadcast events.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "930", "file": "/root/repos/repos2/atmosphere/modules/jersey/src/main/java/org/atmosphere/jersey/SuspendResponse.java", "methodName": "org.atmosphere.jersey.SuspendResponse.listeners", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Collection<AtmosphereResourceEventListener> listeners() {\n        return Collections.unmodifiableCollection(listeners);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the current list of  {@link AtmosphereResourceEventListener} classes.", "call_func_name": ["java.util.Collections.unmodifiableCollection"], "call_func_parameter": [["java.util.Collection"]], "passed_comments": "/"}, {"index": "931", "file": "/root/repos/repos2/atmosphere/modules/jersey/src/main/java/org/atmosphere/jersey/Broadcastable.java", "methodName": "org.atmosphere.jersey.Broadcastable.Broadcastable", "methodParameterType": "Object#Broadcaster#", "methodParameterName": "message#b#", "methodBody": "public Broadcastable(Object message, Broadcaster b) {\n        this.b = b;\n        this.message = message;\n        callerMessage = message;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Broadcast the <tt>message</tt> to the set of suspended  {@link AtmosphereResource}, and write back the <tt>message</tt> to the request which invoked the current resource method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "932", "file": "/root/repos/repos2/atmosphere/modules/jersey/src/main/java/org/atmosphere/jersey/Broadcastable.java", "methodName": "org.atmosphere.jersey.Broadcastable.Broadcastable", "methodParameterType": "Object#Object#Broadcaster#", "methodParameterName": "message#callerMessage#b#", "methodBody": "public Broadcastable(Object message, Object callerMessage, Broadcaster b) {\n        this.b = b;\n        this.message = message;\n        this.callerMessage = callerMessage;\n        if (callerMessage == null) {\n            throw new NullPointerException(\"callerMessage cannot be null\");\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Broadcast the <tt>message</tt> to the set of suspended  {@link AtmosphereResource}, and write back the <tt>callerMessage</tt> to the request which invoked the current resource method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "933", "file": "/root/repos/repos2/atmosphere/modules/jersey/src/main/java/org/atmosphere/jersey/Broadcastable.java", "methodName": "org.atmosphere.jersey.Broadcastable.broadcast", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Object broadcast() {\n        try {\n            return b.broadcast(message).get();\n        } catch (Exception ex) {\n            logger.error(\"failed to broadcast message: \" + message, ex);\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(TryStatement(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Broadcast the message.", "call_func_name": ["org.atmosphere.cpr.Broadcaster.broadcast", "java.util.concurrent.Future.get", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.slf4j.Logger.error"], "call_func_parameter": [["java.lang.Object"], [""], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.atmosphere.cpr.Broadcaster.broadcast": "Broadcast the  {@link Object} to all suspended responses, eg. invoke {@link AtmosphereHandler#onStateChange}."}]}, {"index": "934", "file": "/root/repos/repos2/atmosphere/modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java", "methodName": "org.atmosphere.jersey.AtmosphereFilter.create", "methodParameterType": "AbstractMethod#", "methodParameterName": "am#", "methodBody": "@Override\n    public List<ResourceFilter> create(AbstractMethod am) {\n        LinkedList<ResourceFilter> list = new LinkedList<ResourceFilter>();\n        Filter f;\n\n        for (Annotation annotation : am.getAnnotations()) {\n            logger.trace(\"AtmosphereFilter processing annotation: {}\", annotation);\n        }\n\n        if (am.getMethod() == null) {\n            return null;\n        }\n\n        if (SuspendResponse.class.isAssignableFrom(am.getMethod().getReturnType())) {\n            list.addLast(new Filter(Action.SUSPEND_RESPONSE));\n            return list;\n        }\n\n        if (am.isAnnotationPresent(Broadcast.class)) {\n            int delay = am.getAnnotation(Broadcast.class).delay();\n            Class[] broadcastFilter = am.getAnnotation(Broadcast.class).filters();\n\n            if (am.getAnnotation(Broadcast.class).resumeOnBroadcast()) {\n                f = new Filter(Action.RESUME_ON_BROADCAST, delay, 0, Suspend.SCOPE.APPLICATION, broadcastFilter, null,\n                        am.getAnnotation(Broadcast.class).writeEntity());\n            } else {\n                f = new Filter(Action.BROADCAST, delay, 0, Suspend.SCOPE.APPLICATION, broadcastFilter, null,\n                        am.getAnnotation(Broadcast.class).writeEntity());\n            }\n\n            list.addLast(f);\n\n            if (am.isAnnotationPresent(Cluster.class)) {\n                broadcastFilter = am.getAnnotation(Cluster.class).value();\n                for (Class<ClusterBroadcastFilter> c : broadcastFilter) {\n                    try {\n                        ClusterBroadcastFilter cbf = c.newInstance();\n                        cbf.setUri(am.getAnnotation(Cluster.class).name());\n                        f.addCluster(cbf);\n                    } catch (Throwable t) {\n                        logger.warn(\"Invalid ClusterBroadcastFilter\", t);\n                    }\n                }\n            }\n        }\n\n        if (am.isAnnotationPresent(Asynchronous.class)) {\n            int suspendTimeout = am.getAnnotation(Asynchronous.class).period();\n            Class[] broadcastFilter = am.getAnnotation(Asynchronous.class).broadcastFilter();\n\n            boolean wait = am.getAnnotation(Asynchronous.class).waitForResource();\n            f = new Filter(Action.ASYNCHRONOUS,\n                    suspendTimeout,\n                    wait ? -1 : 0,\n                    null,\n                    broadcastFilter,\n                    am.getAnnotation(Asynchronous.class).header(),\n                    am.getAnnotation(Asynchronous.class).writeEntity(),\n                    am.getAnnotation(Asynchronous.class).contentType());\n            f.setListeners(am.getAnnotation(Asynchronous.class).eventListeners());\n            list.addFirst(f);\n        }\n\n        if (am.isAnnotationPresent(Suspend.class)) {\n\n            long suspendTimeout = am.getAnnotation(Suspend.class).period();\n            TimeUnit tu = am.getAnnotation(Suspend.class).timeUnit();\n            suspendTimeout = translateTimeUnit(suspendTimeout, tu);\n\n            Suspend.SCOPE scope = am.getAnnotation(Suspend.class).scope();\n\n            if (am.getAnnotation(Suspend.class).resumeOnBroadcast()) {\n                f = new Filter(Action.SUSPEND_RESUME,\n                        suspendTimeout,\n                        0,\n                        scope,\n                        null,\n                        null,\n                        am.getAnnotation(Suspend.class).writeEntity(),\n                        am.getAnnotation(Suspend.class).contentType());\n            } else {\n                f = new Filter(Action.SUSPEND,\n                        suspendTimeout,\n                        0,\n                        scope,\n                        null,\n                        null,\n                        am.getAnnotation(Suspend.class).writeEntity(),\n                        am.getAnnotation(Suspend.class).contentType());\n            }\n            f.setListeners(am.getAnnotation(Suspend.class).listeners());\n\n            list.addFirst(f);\n        }\n\n        if (am.isAnnotationPresent(Subscribe.class)) {\n            int timeout = am.getAnnotation(Subscribe.class).timeout();\n            f = new Filter(Action.SUBSCRIBE, timeout, -1, Suspend.SCOPE.APPLICATION,\n                     null, am.getAnnotation(Subscribe.class).value(), am.getAnnotation(Subscribe.class).writeEntity());\n\n            f.setListeners(am.getAnnotation(Subscribe.class).listeners());\n\n            list.addFirst(f);\n        }\n\n        if (am.isAnnotationPresent(Publish.class)) {\n            f = new Filter(Action.PUBLISH, -1, -1, Suspend.SCOPE.APPLICATION,\n                     null, am.getAnnotation(Publish.class).value(), true);\n            list.addFirst(f);\n        }\n\n        if (am.isAnnotationPresent(Resume.class)) {\n            useResumeAnnotation = true;\n            int suspendTimeout = am.getAnnotation(Resume.class).value();\n            list.addFirst(new Filter(Action.RESUME, suspendTimeout));\n        }\n\n        if (am.isAnnotationPresent(Schedule.class)) {\n            int period = am.getAnnotation(Schedule.class).period();\n            int waitFor = am.getAnnotation(Schedule.class).waitFor();\n\n            if (am.getAnnotation(Schedule.class).resumeOnBroadcast()) {\n                list.addFirst(new Filter(Action.SCHEDULE_RESUME, period, waitFor));\n            } else {\n                list.addFirst(new Filter(Action.SCHEDULE, period, waitFor));\n            }\n        }\n\n        if (!list.isEmpty()) {\n            f = new Filter(Action.NONE);\n            list.addFirst(f);\n        }\n\n        return list;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#NumberLiteral#PrefixExpression#NumberLiteral#ConditionalExpression#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#SimpleName#NullLiteral#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#SimpleName#NullLiteral#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#PrefixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#NumberLiteral#PrefixExpression#NumberLiteral#PrefixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#BooleanLiteral#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NullLiteral)NullLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NullLiteral)NullLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement)Block)IfStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(ConditionalExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression(NumberLiteral)NumberLiteral)ConditionalExpression(NullLiteral)NullLiteral(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a  {@link ResourceFilter} which contains the information about theannotation being processed. <p/> XXX Need to filter invalid mix of annotation.", "call_func_name": ["java.util.LinkedList.<init>", "com.sun.jersey.api.model.AbstractMethod.getAnnotations", "org.slf4j.Logger.trace", "com.sun.jersey.api.model.AbstractMethod.getMethod", "java.lang.reflect.Method.getReturnType", "java.lang.Class.isAssignableFrom", "java.util.LinkedList.addLast", "com.sun.jersey.api.model.AbstractMethod.isAnnotationPresent", "com.sun.jersey.api.model.AbstractMethod.getAnnotation", "org.atmosphere.annotation.Broadcast.delay", "org.atmosphere.annotation.Broadcast.filters", "org.atmosphere.annotation.Broadcast.resumeOnBroadcast", "org.atmosphere.annotation.Broadcast.writeEntity", "org.atmosphere.annotation.Cluster.value", "java.lang.Class.newInstance", "org.atmosphere.annotation.Cluster.name", "org.atmosphere.cpr.ClusterBroadcastFilter.setUri", "org.slf4j.Logger.warn", "org.atmosphere.annotation.Asynchronous.period", "org.atmosphere.annotation.Asynchronous.broadcastFilter", "org.atmosphere.annotation.Asynchronous.waitForResource", "org.atmosphere.annotation.Asynchronous.header", "org.atmosphere.annotation.Asynchronous.writeEntity", "org.atmosphere.annotation.Asynchronous.contentType", "org.atmosphere.annotation.Asynchronous.eventListeners", "java.util.LinkedList.addFirst", "org.atmosphere.annotation.Suspend.period", "org.atmosphere.annotation.Suspend.timeUnit", "org.atmosphere.jersey.AtmosphereFilter.translateTimeUnit", "org.atmosphere.annotation.Suspend.scope", "org.atmosphere.annotation.Suspend.resumeOnBroadcast", "org.atmosphere.annotation.Suspend.writeEntity", "org.atmosphere.annotation.Suspend.contentType", "org.atmosphere.annotation.Suspend.listeners", "org.atmosphere.annotation.Subscribe.timeout", "org.atmosphere.annotation.Subscribe.value", "org.atmosphere.annotation.Subscribe.writeEntity", "org.atmosphere.annotation.Subscribe.listeners", "org.atmosphere.annotation.Publish.value", "org.atmosphere.annotation.Resume.value", "org.atmosphere.annotation.Schedule.period", "org.atmosphere.annotation.Schedule.waitFor", "org.atmosphere.annotation.Schedule.resumeOnBroadcast", "java.util.LinkedList.isEmpty"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.Object"], [""], [""], ["java.lang.Class"], ["java.lang.Object"], ["java.lang.Class"], ["java.lang.Class"], [""], [""], [""], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Throwable"], [""], [""], [""], [""], [""], [""], [""], ["java.lang.Object"], [""], [""], ["long", "java.util.concurrent.TimeUnit"], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""]], "passed_comments": [{"org.atmosphere.cpr.ClusterBroadcastFilter.setUri": "Cluster's name or address."}]}]