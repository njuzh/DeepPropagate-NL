[{"index": "0", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/lang/LangHelper.java", "methodName": "com.hm.achievement.lang.LangHelper.get", "methodParameterType": "Lang#CommentedYamlConfiguration#", "methodParameterName": "lang#langConfig#", "methodBody": "public static String get(Lang lang, CommentedYamlConfiguration langConfig) {\n\t\treturn langConfig.getString(lang.toLangKey(), lang.toLangDefault());\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the value in language file (with key) or default if not found.", "call_func_name": ["com.hm.achievement.lang.Lang.toLangKey", "com.hm.achievement.lang.Lang.toLangDefault", "com.hm.achievement.file.CommentedYamlConfiguration.getString"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"com.hm.achievement.lang.Lang.toLangKey": "Converts to the key in the language file."}, {"com.hm.achievement.lang.Lang.toLangDefault": "Converts to the default message that is returned, if key is not found in the configuration."}]}, {"index": "1", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/lang/LangHelper.java", "methodName": "com.hm.achievement.lang.LangHelper.getReplacedOnce", "methodParameterType": "Lang#String#String#CommentedYamlConfiguration#", "methodParameterName": "lang#replace#with#langConfig#", "methodBody": "public static String getReplacedOnce(Lang lang, String replace, String with, CommentedYamlConfiguration langConfig) {\n\t\treturn StringUtils.replaceOnce(get(lang, langConfig), replace, with);\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the value in language file (with key) or default if not found, with a single instance of a String replaced.", "call_func_name": ["com.hm.achievement.lang.LangHelper.get", "com.hm.apache.commons.lang3.StringUtils.replaceOnce"], "call_func_parameter": [["com.hm.achievement.lang.Lang", "com.hm.achievement.file.CommentedYamlConfiguration"], ["java.lang.String", "java.lang.String", "java.lang.String"]], "passed_comments": [{"com.hm.achievement.lang.LangHelper.get": "Get the value in language file (with key) or default if not found."}]}, {"index": "2", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/lang/LangHelper.java", "methodName": "com.hm.achievement.lang.LangHelper.getEachReplaced", "methodParameterType": "Lang#CommentedYamlConfiguration#String[]#String[]#", "methodParameterName": "lang#langConfig#replace#with#", "methodBody": "public static String getEachReplaced(Lang lang, CommentedYamlConfiguration langConfig, String[] replace, String[] with) {\n\t\treturn StringUtils.replaceEach(get(lang, langConfig), replace, with);\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the value in language file (with key) or default if not found, with instances of replace replaced.", "call_func_name": ["com.hm.achievement.lang.LangHelper.get", "com.hm.apache.commons.lang3.StringUtils.replaceEach"], "call_func_parameter": [["com.hm.achievement.lang.Lang", "com.hm.achievement.file.CommentedYamlConfiguration"], ["java.lang.String", "java.lang.String[]", "java.lang.String[]"]], "passed_comments": [{"com.hm.achievement.lang.LangHelper.get": "Get the value in language file (with key) or default if not found."}]}, {"index": "3", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/lang/LangHelper.java", "methodName": "com.hm.achievement.lang.LangHelper.toPath", "methodParameterType": "String#", "methodParameterName": "enumName#", "methodBody": "public static String toPath(String enumName) {\n\t\treturn enumName.toLowerCase().replace('_', '-');\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#CharacterLiteral#CharacterLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(CharacterLiteral)CharacterLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Used to turn enum names into lang.yml keys. <p> Example: ENUM_VALUE_EXAMPLE -> enum-value-example", "call_func_name": ["java.lang.String.toLowerCase", "java.lang.String.replace"], "call_func_parameter": [[""], ["char", "char"]], "passed_comments": "/"}, {"index": "4", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/api/AdvancedAchievementsBukkitAPI.java", "methodName": "com.hm.achievement.api.AdvancedAchievementsBukkitAPI.linkAdvancedAchievements", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n\tpublic static AdvancedAchievementsAPI linkAdvancedAchievements() {\n\t\treturn ((AdvancedAchievements) Bukkit.getPluginManager().getPlugin(\"AdvancedAchievements\"))\n\t\t\t\t.getAdvancedAchievementsAPI();\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a ready to use API instance. The caller must previously check whether the plugin is enabled and has a minimum version of 5.0.", "call_func_name": ["org.bukkit.Bukkit.getPluginManager", "org.bukkit.plugin.PluginManager.getPlugin", "com.hm.achievement.AdvancedAchievements.getAdvancedAchievementsAPI"], "call_func_parameter": [[""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "5", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/api/AdvancedAchievementsBukkitAPI.java", "methodName": "com.hm.achievement.api.AdvancedAchievementsBukkitAPI.isPlayerOnline", "methodParameterType": "UUID#", "methodParameterName": "player#", "methodBody": "private boolean isPlayerOnline(UUID player) {\n\t\tif (Bukkit.isPrimaryThread()) {\n\t\t\treturn Bukkit.getPlayer(player) != null;\n\t\t}\n\t\t// Called asynchronously. To ensure thread safety we must issue a call on the server's main thread of execution.\n\t\tFuture<Boolean> onlineCheckFuture = Bukkit.getScheduler().callSyncMethod(advancedAchievements,\n\t\t\t\t() -> Bukkit.getPlayer(player) != null);\n\n\t\tboolean playerOnline = true;\n\t\ttry {\n\t\t\tplayerOnline = onlineCheckFuture.get();\n\t\t} catch (InterruptedException e) {\n\t\t\tlogger.log(Level.SEVERE, \"Thread interrupted while checking whether player online:\", e);\n\t\t\tThread.currentThread().interrupt();\n\t\t} catch (ExecutionException e) {\n\t\t\tlogger.log(Level.SEVERE, \"Unexpected execution exception while checking whether player online:\", e);\n\t\t} catch (CancellationException ignored) {\n\t\t\t// Task can be cancelled when plugin disabled.\n\t\t}\n\t\treturn playerOnline;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks whether the player is online by making a call on the server's main thread of execution.", "call_func_name": ["org.bukkit.Bukkit.isPrimaryThread", "org.bukkit.Bukkit.getPlayer", "org.bukkit.Bukkit.getScheduler", "java.util.concurrent.Callable.call", "org.bukkit.scheduler.BukkitScheduler.callSyncMethod", "java.util.concurrent.Future.get", "java.lang.Boolean.booleanValue", "java.util.logging.Logger.log", "java.lang.Thread.currentThread", "java.lang.Thread.interrupt"], "call_func_parameter": [[""], ["java.util.UUID"], [""], ["java.util.UUID"], ["org.bukkit.plugin.Plugin", "java.util.concurrent.Callable"], [""], [""], ["java.util.logging.Level", "java.lang.String", "java.lang.Throwable"], [""], [""]], "passed_comments": "/"}, {"index": "6", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/api/AdvancedAchievementsBukkitAPI.java", "methodName": "com.hm.achievement.api.AdvancedAchievementsBukkitAPI.validateNotNull", "methodParameterType": "Object#String#", "methodParameterName": "argument#argumentName#", "methodBody": "private void validateNotNull(Object argument, String argumentName) {\n\t\tif (argument == null) {\n\t\t\tthrow new IllegalArgumentException(argumentName + \" cannot be null.\");\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Throws an IllegalArgumentException if the argument is null.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "7", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/api/AdvancedAchievementsBukkitAPI.java", "methodName": "com.hm.achievement.api.AdvancedAchievementsBukkitAPI.validateNotEmpty", "methodParameterType": "String#String#", "methodParameterName": "argument#argumentName#", "methodBody": "private void validateNotEmpty(String argument, String argumentName) {\n\t\tif (StringUtils.isEmpty(argument)) {\n\t\t\tthrow new IllegalArgumentException(argumentName + \" cannot be empty.\");\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Throws an IllegalArgumentException if the string is empty (i.e. null or \"\").", "call_func_name": ["com.hm.apache.commons.lang3.StringUtils.isEmpty", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.CharSequence"], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "8", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/ListGUIListener.java", "methodName": "com.hm.achievement.listener.ListGUIListener.isButtonClicked", "methodParameterType": "InventoryClickEvent#ItemStack#", "methodParameterName": "event#button#", "methodBody": "private boolean isButtonClicked(InventoryClickEvent event, ItemStack button) {\n\t\tif (event.getCurrentItem().isSimilar(button)) {\n\t\t\t// Clicked item seems to be the button. But player could have clicked on item in his personal inventory that\n\t\t\t// matches the properties of the button used by Advanced Achievements. The first item matching the\n\t\t\t// properties of the button is the real one, check that this is indeed the clicked one.\n\t\t\tMap<Integer, ItemStack> backButtonCandidates = new TreeMap<>(\n\t\t\t\t\tevent.getInventory().all(event.getCurrentItem().getType()));\n\t\t\tfor (Entry<Integer, ItemStack> entry : backButtonCandidates.entrySet()) {\n\t\t\t\tif (event.getCurrentItem().isSimilar(entry.getValue())) {\n\t\t\t\t\t// Found real button. Did the player click on it?\n\t\t\t\t\tif (entry.getKey() == event.getRawSlot()) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#BreakStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Verifies whether the user has clicked on the given navigation button.", "call_func_name": ["org.bukkit.event.inventory.InventoryClickEvent.getCurrentItem", "org.bukkit.inventory.ItemStack.isSimilar", "org.bukkit.event.inventory.InventoryClickEvent.getInventory", "org.bukkit.inventory.ItemStack.getType", "org.bukkit.inventory.Inventory.all", "java.util.TreeMap.<init>", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.Integer.intValue", "org.bukkit.event.inventory.InventoryClickEvent.getRawSlot"], "call_func_parameter": [[""], ["org.bukkit.inventory.ItemStack"], [""], [""], ["org.bukkit.Material"], ["java.util.Map"], [""], [""], [""], [""], [""], [""]], "passed_comments": "/"}, {"index": "9", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/ListGUIListener.java", "methodName": "com.hm.achievement.listener.ListGUIListener.getMainGUIItemCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private int getMainGUIItemCount() {\n\t\treturn NormalAchievements.values().length + MultipleAchievements.values().length - disabledCategories.size() + 1;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#NumberLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(InfixExpression(InfixExpression(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of items in the main GUI.", "call_func_name": ["com.hm.achievement.category.NormalAchievements.values", "com.hm.achievement.category.MultipleAchievements.values", "java.util.Set.size"], "call_func_parameter": [[""], [""], [""]], "passed_comments": "/"}, {"index": "10", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/PlayerAdvancedAchievementListener.java", "methodName": "com.hm.achievement.listener.PlayerAdvancedAchievementListener.giveRewardsAndPrepareTexts", "methodParameterType": "Player#String[]#List<String>#ItemStack#int#int#int#int#", "methodParameterName": "player#commands#commandMessages#item#money#experience#health#oxygen#", "methodBody": "private List<String> giveRewardsAndPrepareTexts(Player player, String[] commands, List<String> commandMessages,\n\t\t\tItemStack item, int money, int experience, int health, int oxygen) {\n\t\tList<String> rewardTexts = new ArrayList<>();\n\t\tif (commands != null && commands.length > 0) {\n\t\t\trewardTexts.addAll(rewardCommands(commands, commandMessages));\n\t\t}\n\t\tif (item != null) {\n\t\t\trewardTexts.add(rewardItem(player, item));\n\t\t}\n\t\tif (money > 0) {\n\t\t\trewardTexts.add(rewardMoney(player, money));\n\t\t}\n\t\tif (experience > 0) {\n\t\t\trewardTexts.add(rewardExperience(player, experience));\n\t\t}\n\t\tif (health > 0) {\n\t\t\trewardTexts.add(rewardMaxHealth(player, health));\n\t\t}\n\t\tif (oxygen > 0) {\n\t\t\trewardTexts.add(rewardMaxOxygen(player, oxygen));\n\t\t}\n\t\treturn rewardTexts;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gives relevant rewards and prepares the texts to be displayed to the receiver.", "call_func_name": ["java.util.ArrayList.<init>", "com.hm.achievement.listener.PlayerAdvancedAchievementListener.rewardCommands", "java.util.List.addAll", "com.hm.achievement.listener.PlayerAdvancedAchievementListener.rewardItem", "java.util.List.add", "com.hm.achievement.listener.PlayerAdvancedAchievementListener.rewardMoney", "com.hm.achievement.listener.PlayerAdvancedAchievementListener.rewardExperience", "com.hm.achievement.listener.PlayerAdvancedAchievementListener.rewardMaxHealth", "com.hm.achievement.listener.PlayerAdvancedAchievementListener.rewardMaxOxygen"], "call_func_parameter": [[""], ["java.lang.String[]", "java.util.List"], ["java.util.Collection"], ["org.bukkit.entity.Player", "org.bukkit.inventory.ItemStack"], ["java.lang.Object"], ["org.bukkit.entity.Player", "int"], ["org.bukkit.entity.Player", "int"], ["org.bukkit.entity.Player", "int"], ["org.bukkit.entity.Player", "int"]], "passed_comments": [{"com.hm.achievement.listener.PlayerAdvancedAchievementListener.rewardCommands": "Executes player command rewards."}, {"com.hm.achievement.listener.PlayerAdvancedAchievementListener.rewardItem": "Gives an item reward to a player."}, {"com.hm.achievement.listener.PlayerAdvancedAchievementListener.rewardMoney": "Gives a money reward to a player."}, {"com.hm.achievement.listener.PlayerAdvancedAchievementListener.rewardExperience": "Gives an experience reward to a player."}, {"com.hm.achievement.listener.PlayerAdvancedAchievementListener.rewardMaxHealth": "Gives an increased max health reward to a player."}, {"com.hm.achievement.listener.PlayerAdvancedAchievementListener.rewardMaxOxygen": "Gives an increased max oxygen reward to a player."}]}, {"index": "11", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/PlayerAdvancedAchievementListener.java", "methodName": "com.hm.achievement.listener.PlayerAdvancedAchievementListener.rewardCommands", "methodParameterType": "String[]#List<String>#", "methodParameterName": "commands#messages#", "methodBody": "private List<String> rewardCommands(String[] commands, List<String> messages) {\n\t\tfor (String command : commands) {\n\t\t\tadvancedAchievements.getServer().dispatchCommand(advancedAchievements.getServer().getConsoleSender(), command);\n\t\t}\n\t\tif (!configRewardCommandNotif || langCommandReward.length() == 0) {\n\t\t\treturn new ArrayList<>();\n\t\t}\n\n\t\tif (messages.isEmpty()) {\n\t\t\treturn Collections.singletonList(langCommandReward);\n\t\t}\n\t\treturn messages.stream()\n\t\t\t\t.map(message -> StringUtils.replace(langCustomMessageCommandReward, \"MESSAGE\", message))\n\t\t\t\t.collect(Collectors.toList());\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Executes player command rewards.", "call_func_name": ["com.hm.achievement.AdvancedAchievements.getServer", "org.bukkit.Server.getConsoleSender", "org.bukkit.Server.dispatchCommand", "java.lang.String.length", "java.util.ArrayList.<init>", "java.util.List.isEmpty", "java.util.Collections.singletonList", "java.util.List.stream", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect"], "call_func_parameter": [[""], [""], ["org.bukkit.command.CommandSender", "java.lang.String"], [""], [""], [""], ["java.lang.Object"], [""], ["com.hm.achievement.listener.PlayerAdvancedAchievementListener"], ["java.util.function.Function"], [""], ["java.util.stream.Collector"]], "passed_comments": "/"}, {"index": "12", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/PlayerAdvancedAchievementListener.java", "methodName": "com.hm.achievement.listener.PlayerAdvancedAchievementListener.rewardItem", "methodParameterType": "Player#ItemStack#", "methodParameterName": "player#item#", "methodBody": "private String rewardItem(Player player, ItemStack item) {\n\t\tif (player.getInventory().firstEmpty() != -1) {\n\t\t\tplayer.getInventory().addItem(item);\n\t\t} else {\n\t\t\tplayer.getWorld().dropItem(player.getLocation(), item);\n\t\t}\n\n\t\tString name = item.getItemMeta().getDisplayName();\n\t\tif (name == null || name.isEmpty()) {\n\t\t\tname = rewardParser.getItemName(item);\n\t\t}\n\n\t\treturn langItemRewardReceived + name;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gives an item reward to a player.", "call_func_name": ["org.bukkit.entity.Player.getInventory", "org.bukkit.inventory.PlayerInventory.firstEmpty", "org.bukkit.inventory.PlayerInventory.addItem", "org.bukkit.entity.Player.getWorld", "org.bukkit.entity.Player.getLocation", "org.bukkit.World.dropItem", "org.bukkit.inventory.ItemStack.getItemMeta", "org.bukkit.inventory.meta.ItemMeta.getDisplayName", "java.lang.String.isEmpty", "com.hm.achievement.utils.RewardParser.getItemName", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], ["org.bukkit.inventory.ItemStack[]"], [""], [""], ["org.bukkit.Location", "org.bukkit.inventory.ItemStack"], [""], [""], [""], ["org.bukkit.inventory.ItemStack"], [""], ["java.lang.String"], [""]], "passed_comments": [{"com.hm.achievement.utils.RewardParser.getItemName": "Returns the name of an item reward, in a readable format."}]}, {"index": "13", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/PlayerAdvancedAchievementListener.java", "methodName": "com.hm.achievement.listener.PlayerAdvancedAchievementListener.rewardMoney", "methodParameterType": "Player#int#", "methodParameterName": "player#amount#", "methodBody": "private String rewardMoney(Player player, int amount) {\n\t\tEconomy economy = rewardParser.getEconomy();\n\t\tif (economy != null) {\n\t\t\teconomy.depositPlayer(player, amount);\n\n\t\t\tString currencyName = rewardParser.getCurrencyName(amount);\n\t\t\treturn ChatColor.translateAlternateColorCodes('&',\n\t\t\t\t\tStringUtils.replaceOnce(langMoneyRewardReceived, \"AMOUNT\", amount + \" \" + currencyName));\n\t\t}\n\t\tlogger.warning(\"You have specified a money reward but Vault was not linked successfully.\");\n\t\treturn \"\";\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#CharacterLiteral#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gives a money reward to a player.", "call_func_name": ["com.hm.achievement.utils.RewardParser.getEconomy", "net.milkbowl.vault.economy.Economy.depositPlayer", "com.hm.achievement.utils.RewardParser.getCurrencyName", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.apache.commons.lang3.StringUtils.replaceOnce", "org.bukkit.ChatColor.translateAlternateColorCodes", "java.util.logging.Logger.warning"], "call_func_parameter": [[""], ["org.bukkit.OfflinePlayer", "double"], ["int"], [""], ["int"], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String", "java.lang.String"], ["char", "java.lang.String"], ["java.lang.String"]], "passed_comments": [{"com.hm.achievement.utils.RewardParser.getCurrencyName": "Returns name of currency depending on amount."}]}, {"index": "14", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/PlayerAdvancedAchievementListener.java", "methodName": "com.hm.achievement.listener.PlayerAdvancedAchievementListener.rewardExperience", "methodParameterType": "Player#int#", "methodParameterName": "player#amount#", "methodBody": "private String rewardExperience(Player player, int amount) {\n\t\tplayer.giveExp(amount);\n\t\treturn ChatColor.translateAlternateColorCodes('&',\n\t\t\t\tStringUtils.replaceOnce(langExperienceRewardReceived, \"AMOUNT\", Integer.toString(amount)));\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#CharacterLiteral#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gives an experience reward to a player.", "call_func_name": ["org.bukkit.entity.Player.giveExp", "java.lang.Integer.toString", "com.hm.apache.commons.lang3.StringUtils.replaceOnce", "org.bukkit.ChatColor.translateAlternateColorCodes"], "call_func_parameter": [["int"], ["int"], ["java.lang.String", "java.lang.String", "java.lang.String"], ["char", "java.lang.String"]], "passed_comments": "/"}, {"index": "15", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/PlayerAdvancedAchievementListener.java", "methodName": "com.hm.achievement.listener.PlayerAdvancedAchievementListener.rewardMaxHealth", "methodParameterType": "Player#int#", "methodParameterName": "player#amount#", "methodBody": "@SuppressWarnings(\"deprecation\")\n\tprivate String rewardMaxHealth(Player player, int amount) {\n\t\tif (serverVersion >= 9) {\n\t\t\tAttributeInstance playerAttribute = player.getAttribute(Attribute.GENERIC_MAX_HEALTH);\n\t\t\tplayerAttribute.setBaseValue(playerAttribute.getBaseValue() + amount);\n\t\t} else {\n\t\t\tplayer.setMaxHealth(player.getMaxHealth() + amount);\n\t\t}\n\t\treturn ChatColor.translateAlternateColorCodes('&',\n\t\t\t\tStringUtils.replaceOnce(langIncreaseMaxHealthRewardReceived, \"AMOUNT\", Integer.toString(amount)));\n\t}", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#CharacterLiteral#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gives an increased max health reward to a player.", "call_func_name": ["org.bukkit.entity.Player.getAttribute", "org.bukkit.attribute.AttributeInstance.getBaseValue", "org.bukkit.attribute.AttributeInstance.setBaseValue", "org.bukkit.entity.Player.getMaxHealth", "org.bukkit.entity.Player.setMaxHealth", "java.lang.Integer.toString", "com.hm.apache.commons.lang3.StringUtils.replaceOnce", "org.bukkit.ChatColor.translateAlternateColorCodes"], "call_func_parameter": [["org.bukkit.attribute.Attribute"], [""], ["double"], [""], ["double"], ["int"], ["java.lang.String", "java.lang.String", "java.lang.String"], ["char", "java.lang.String"]], "passed_comments": "/"}, {"index": "16", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/PlayerAdvancedAchievementListener.java", "methodName": "com.hm.achievement.listener.PlayerAdvancedAchievementListener.rewardMaxOxygen", "methodParameterType": "Player#int#", "methodParameterName": "player#amount#", "methodBody": "private String rewardMaxOxygen(Player player, int amount) {\n\t\tplayer.setMaximumAir(player.getMaximumAir() + amount);\n\t\treturn ChatColor.translateAlternateColorCodes('&',\n\t\t\t\tStringUtils.replaceOnce(langIncreaseMaxOxygenRewardReceived, \"AMOUNT\", Integer.toString(amount)));\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#CharacterLiteral#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gives an increased max oxygen reward to a player.", "call_func_name": ["org.bukkit.entity.Player.getMaximumAir", "org.bukkit.entity.Player.setMaximumAir", "java.lang.Integer.toString", "com.hm.apache.commons.lang3.StringUtils.replaceOnce", "org.bukkit.ChatColor.translateAlternateColorCodes"], "call_func_parameter": [[""], ["int"], ["int"], ["java.lang.String", "java.lang.String", "java.lang.String"], ["char", "java.lang.String"]], "passed_comments": "/"}, {"index": "17", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/PlayerAdvancedAchievementListener.java", "methodName": "com.hm.achievement.listener.PlayerAdvancedAchievementListener.displayAchievement", "methodParameterType": "Player#String#String#String#List<String>#", "methodParameterName": "player#name#displayName#message#rewardTexts#", "methodBody": "private void displayAchievement(Player player, String name, String displayName, String message,\n\t\t\tList<String> rewardTexts) {\n\t\tString nameToShowUser;\n\t\tif (StringUtils.isNotBlank(displayName)) {\n\t\t\t// Display name is defined; use it.\n\t\t\tnameToShowUser = ChatColor.translateAlternateColorCodes('&', displayName);\n\t\t\tlogger.info(\"Player \" + player.getName() + \" received the achievement: \" + name + \" (\" + displayName + \")\");\n\t\t} else {\n\t\t\t// Use the achievement key name (this name is used in the achievements table in the database).\n\t\t\tnameToShowUser = ChatColor.translateAlternateColorCodes('&', name);\n\t\t\tlogger.info(\"Player \" + player.getName() + \" received the achievement: \" + name);\n\n\t\t}\n\t\tString messageToShowUser = ChatColor.translateAlternateColorCodes('&', message);\n\n\t\tdisplayReceiverMessages(player, nameToShowUser, messageToShowUser, rewardTexts);\n\n\t\t// Notify other online players that the player has received an achievement.\n\t\tfor (Player p : advancedAchievements.getServer().getOnlinePlayers()) {\n\t\t\t// Notify other players only if NotifyOtherPlayers is enabled and player has not used /aach toggle, or if\n\t\t\t// NotifyOtherPlayers is disabled and player has used /aach toggle.\n\t\t\tif (!p.getName().equals(player.getName()) && (configNotifyOtherPlayers ^ toggleCommand.isPlayerToggled(p))) {\n\t\t\t\tdisplayNotification(player, nameToShowUser, p);\n\t\t\t}\n\t\t}\n\n\t\tif (configFirework) {\n\t\t\tdisplayFirework(player);\n\t\t} else if (configSimplifiedReception) {\n\t\t\tdisplaySimplifiedReception(player);\n\t\t}\n\n\t\tif (configTitleScreen) {\n\t\t\tdisplayTitle(player, nameToShowUser, messageToShowUser);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#CharacterLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#CharacterLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#CharacterLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Displays chat messages, screen title and launches a firework when a player receives an achievement.", "call_func_name": ["com.hm.apache.commons.lang3.StringUtils.isNotBlank", "org.bukkit.ChatColor.translateAlternateColorCodes", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.bukkit.entity.Player.getName", "java.lang.StringBuilder.toString", "java.util.logging.Logger.info", "com.hm.achievement.listener.PlayerAdvancedAchievementListener.displayReceiverMessages", "com.hm.achievement.AdvancedAchievements.getServer", "org.bukkit.Server.getOnlinePlayers", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.String.equals", "com.hm.achievement.command.executable.ToggleCommand.isPlayerToggled", "com.hm.achievement.listener.PlayerAdvancedAchievementListener.displayNotification", "com.hm.achievement.listener.PlayerAdvancedAchievementListener.displayFirework", "com.hm.achievement.listener.PlayerAdvancedAchievementListener.displaySimplifiedReception", "com.hm.achievement.listener.PlayerAdvancedAchievementListener.displayTitle"], "call_func_parameter": [["java.lang.CharSequence"], ["char", "java.lang.String"], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], ["org.bukkit.entity.Player", "java.lang.String", "java.lang.String", "java.util.List"], [""], [""], [""], [""], [""], ["java.lang.Object"], ["org.bukkit.entity.Player"], ["org.bukkit.entity.Player", "java.lang.String", "org.bukkit.entity.Player"], ["org.bukkit.entity.Player"], ["org.bukkit.entity.Player"], ["org.bukkit.entity.Player", "java.lang.String", "java.lang.String"]], "passed_comments": [{"com.hm.achievement.listener.PlayerAdvancedAchievementListener.displayReceiverMessages": "Displays texts related to the achievement in the receiver's chat. This method can display a single hoverable message or several messages one after the other."}, {"com.hm.achievement.command.executable.ToggleCommand.isPlayerToggled": "Indicates whether player has used the /aach toggle command since the last server restart/plugin reload."}, {"com.hm.achievement.listener.PlayerAdvancedAchievementListener.displayNotification": "Displays an action bar message or chat notification to another player."}, {"com.hm.achievement.listener.PlayerAdvancedAchievementListener.displayFirework": "Launches firework when receiving an achievement."}, {"com.hm.achievement.listener.PlayerAdvancedAchievementListener.displaySimplifiedReception": "Displays a simplified particle effect and calm sound when receiving an achievement. Is used instead of displayFirework."}, {"com.hm.achievement.listener.PlayerAdvancedAchievementListener.displayTitle": "Displays title when receiving an achievement."}]}, {"index": "18", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/PlayerAdvancedAchievementListener.java", "methodName": "com.hm.achievement.listener.PlayerAdvancedAchievementListener.displayReceiverMessages", "methodParameterType": "Player#String#String#List<String>#", "methodParameterName": "player#nameToShowUser#messageToShowUser#rewardTexts#", "methodBody": "private void displayReceiverMessages(Player player, String nameToShowUser, String messageToShowUser,\n\t\t\tList<String> rewardTexts) {\n\t\tif (configHoverableReceiverChatText) {\n\t\t\tStringBuilder hover = new StringBuilder(messageToShowUser + \"\\n\");\n\t\t\trewardTexts.stream().filter(StringUtils::isNotBlank)\n\t\t\t\t\t.forEach(t -> hover.append(ChatColor.translateAlternateColorCodes('&', t)).append(\"\\n\"));\n\t\t\ttry {\n\t\t\t\tFancyMessageSender.sendHoverableMessage(player, langAchievementNew + nameToShowUser,\n\t\t\t\t\t\thover.substring(0, hover.length() - 1), \"white\");\n\t\t\t\treturn;\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.warning(\n\t\t\t\t\t\t\"Failed to display hoverable message for achievement reception. Displaying standard messages instead.\");\n\t\t\t}\n\t\t}\n\t\tplayer.sendMessage(langAchievementNew + nameToShowUser);\n\t\tplayer.sendMessage(pluginHeader.toString() + ChatColor.WHITE + messageToShowUser);\n\t\trewardTexts.stream().filter(StringUtils::isNotBlank)\n\t\t\t\t.forEach(t -> player.sendMessage(pluginHeader + ChatColor.translateAlternateColorCodes('&', t)));\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#CharacterLiteral#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#StringLiteral#MethodInvocation#ExpressionStatement#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#CharacterLiteral#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Displays texts related to the achievement in the receiver's chat. This method can display a single hoverable message or several messages one after the other.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.StringBuilder.<init>", "java.util.List.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.function.Consumer.accept", "java.util.stream.Stream.forEach", "java.lang.StringBuilder.length", "java.lang.StringBuilder.substring", "com.hm.achievement.particle.FancyMessageSender.sendHoverableMessage", "java.util.logging.Logger.warning", "org.bukkit.entity.Player.sendMessage", "java.lang.StringBuilder.append", "java.util.function.Consumer.accept"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], [""], [""], ["java.util.function.Predicate"], ["java.lang.StringBuilder"], ["java.util.function.Consumer"], [""], ["int", "int"], ["org.bukkit.entity.Player", "java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object"], ["com.hm.achievement.listener.PlayerAdvancedAchievementListener", "org.bukkit.entity.Player"]], "passed_comments": "/"}, {"index": "19", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/PlayerAdvancedAchievementListener.java", "methodName": "com.hm.achievement.listener.PlayerAdvancedAchievementListener.displayNotification", "methodParameterType": "Player#String#Player#", "methodParameterName": "achievementReceiver#nameToShowUser#otherPlayer#", "methodBody": "private void displayNotification(Player achievementReceiver, String nameToShowUser, Player otherPlayer) {\n\t\tif (configActionBarNotify) {\n\t\t\ttry {\n\t\t\t\tFancyMessageSender.sendActionBarMessage(otherPlayer,\n\t\t\t\t\t\t\"&o\" + StringUtils.replaceOnce(langAchievementReceived, \"PLAYER\", achievementReceiver.getName())\n\t\t\t\t\t\t\t\t+ nameToShowUser);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.warning(\"Failed to display action bar message for achievement reception notification.\");\n\t\t\t}\n\t\t} else {\n\t\t\totherPlayer.sendMessage(\n\t\t\t\t\tpluginHeader + StringUtils.replaceOnce(langAchievementReceived, \"PLAYER\", achievementReceiver.getName())\n\t\t\t\t\t\t\t+ nameToShowUser);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Displays an action bar message or chat notification to another player.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.bukkit.entity.Player.getName", "com.hm.apache.commons.lang3.StringUtils.replaceOnce", "java.lang.StringBuilder.toString", "com.hm.achievement.particle.FancyMessageSender.sendActionBarMessage", "java.util.logging.Logger.warning", "java.lang.StringBuilder.append", "org.bukkit.entity.Player.sendMessage"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String", "java.lang.String"], [""], ["org.bukkit.entity.Player", "java.lang.String"], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "20", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/PlayerAdvancedAchievementListener.java", "methodName": "com.hm.achievement.listener.PlayerAdvancedAchievementListener.displayTitle", "methodParameterType": "Player#String#String#", "methodParameterName": "player#nameToShowUser#messageToShowUser#", "methodBody": "private void displayTitle(Player player, String nameToShowUser, String messageToShowUser) {\n\t\ttry {\n\t\t\tFancyMessageSender.sendTitle(player, nameToShowUser, messageToShowUser);\n\t\t} catch (Exception e) {\n\t\t\tlogger.warning(\"Failed to display achievement screen title.\");\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Displays title when receiving an achievement.", "call_func_name": ["com.hm.achievement.particle.FancyMessageSender.sendTitle", "java.util.logging.Logger.warning"], "call_func_parameter": [["org.bukkit.entity.Player", "java.lang.String", "java.lang.String"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "21", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/PlayerAdvancedAchievementListener.java", "methodName": "com.hm.achievement.listener.PlayerAdvancedAchievementListener.displayFirework", "methodParameterType": "Player#", "methodParameterName": "player#", "methodBody": "private void displayFirework(Player player) {\n\t\t// Set firework to launch beneath player.\n\t\tLocation location = player.getLocation().subtract(0, 1, 0);\n\t\ttry {\n\t\t\tFirework firework = player.getWorld().spawn(location, Firework.class);\n\t\t\tFireworkMeta fireworkMeta = firework.getFireworkMeta();\n\t\t\tFireworkEffect fireworkEffect = FireworkEffect.builder()\n\t\t\t\t\t.flicker(false)\n\t\t\t\t\t.trail(false)\n\t\t\t\t\t.withColor(Color.WHITE.mixColors(Color.BLUE.mixColors(Color.NAVY)))\n\t\t\t\t\t.withFade(Color.PURPLE)\n\t\t\t\t\t.with(getFireworkType())\n\t\t\t\t\t.build();\n\t\t\tfireworkMeta.addEffects(fireworkEffect);\n\t\t\tfirework.setFireworkMeta(fireworkMeta);\n\t\t\tfirework.setVelocity(location.getDirection().multiply(0));\n\n\t\t\t// Firework launched by plugin: damage will later be cancelled out.\n\t\t\tfireworkListener.addFirework(firework);\n\t\t} catch (Exception e) {\n\t\t\t// Particle effect workaround to handle various bugs in early Spigot 1.9 and 1.11 releases. We try to\n\t\t\t// simulate a firework.\n\t\t\tsoundPlayer.play(player, \"ENTITY_FIREWORK_ROCKET_LAUNCH\", \"ENTITY_FIREWORK_ROCKET_LAUNCH\",\n\t\t\t\t\t\"ENTITY_FIREWORK_LAUNCH\");\n\t\t\tif (serverVersion >= 13) {\n\t\t\t\tplayer.spawnParticle(Particle.FIREWORKS_SPARK, player.getLocation(), 500, 0, 3, 0, 0.1f);\n\t\t\t} else {\n\t\t\t\tParticleEffect.FIREWORKS_SPARK.display(0, 3, 0, 0.1f, 500, player.getLocation(), 1);\n\t\t\t}\n\t\t\tsoundPlayer.play(player, \"ENTITY_FIREWORK_ROCKET_BLAST\", \"ENTITY_FIREWORK_ROCKET_BLAST\",\n\t\t\t\t\t\"ENTITY_FIREWORK_BLAST\");\n\t\t\tsoundPlayer.play(player, \"ENTITY_FIREWORK_ROCKET_BLAST\", \"ENTITY_FIREWORK_ROCKET_BLAST\",\n\t\t\t\t\t\"ENTITY_FIREWORK_TWINKLE\");\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#NumberLiteral#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#NumberLiteral#NumberLiteral#NumberLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#NumberLiteral#NumberLiteral#NumberLiteral#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Launches firework when receiving an achievement.", "call_func_name": ["org.bukkit.entity.Player.getLocation", "org.bukkit.Location.subtract", "org.bukkit.entity.Player.getWorld", "org.bukkit.World.spawn", "org.bukkit.entity.Firework.getFireworkMeta", "org.bukkit.FireworkEffect.builder", "org.bukkit.Color.mixColors", "com.hm.achievement.listener.PlayerAdvancedAchievementListener.getFireworkType", "org.bukkit.inventory.meta.FireworkMeta.addEffects", "org.bukkit.entity.Firework.setFireworkMeta", "org.bukkit.Location.getDirection", "org.bukkit.util.Vector.multiply", "org.bukkit.entity.Firework.setVelocity", "com.hm.achievement.listener.FireworkListener.addFirework", "com.hm.achievement.utils.SoundPlayer.play", "org.bukkit.entity.Player.spawnParticle", "com.hm.achievement.particle.ParticleEffect.display"], "call_func_parameter": [[""], ["double", "double", "double"], [""], ["org.bukkit.Location", "java.lang.Class"], [""], [""], ["org.bukkit.Color[]"], [""], ["org.bukkit.FireworkEffect[]"], ["org.bukkit.inventory.meta.FireworkMeta"], [""], ["int"], ["org.bukkit.util.Vector"], ["org.bukkit.entity.Firework"], ["org.bukkit.entity.Player", "java.lang.String", "java.lang.String", "java.lang.String"], ["org.bukkit.Particle", "org.bukkit.Location", "int", "double", "double", "double", "double"], ["float", "float", "float", "float", "int", "org.bukkit.Location", "double"]], "passed_comments": [{"com.hm.achievement.listener.PlayerAdvancedAchievementListener.getFireworkType": "Gets the type of the firework, which can either be predefined or random."}, {"com.hm.achievement.utils.SoundPlayer.play": "Plays a sound dependent on the Minecraft version."}]}, {"index": "22", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/PlayerAdvancedAchievementListener.java", "methodName": "com.hm.achievement.listener.PlayerAdvancedAchievementListener.getFireworkType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private Type getFireworkType() {\n\t\tif (\"RANDOM\".equals(configFireworkStyle)) {\n\t\t\tType[] fireworkTypes = Type.values();\n\t\t\treturn fireworkTypes[RANDOM.nextInt(fireworkTypes.length)];\n\t\t} else {\n\t\t\treturn Type.valueOf(configFireworkStyle);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ArrayAccess#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ArrayAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ArrayAccess)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Gets the type of the firework, which can either be predefined or random.", "call_func_name": ["java.lang.String.equals", "java.util.Random.nextInt"], "call_func_parameter": [["java.lang.Object"], ["int"]], "passed_comments": "/"}, {"index": "23", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/PlayerAdvancedAchievementListener.java", "methodName": "com.hm.achievement.listener.PlayerAdvancedAchievementListener.displaySimplifiedReception", "methodParameterType": "Player#", "methodParameterName": "player#", "methodBody": "private void displaySimplifiedReception(Player player) {\n\t\tsoundPlayer.play(player, \"ENTITY_PLAYER_LEVELUP\", \"ENTITY_PLAYER_LEVELUP\", \"LEVEL_UP\");\n\t\tif (serverVersion >= 13) {\n\t\t\tplayer.spawnParticle(Particle.FIREWORKS_SPARK, player.getLocation(), 500, 0, 3, 0, 0.1f);\n\t\t} else {\n\t\t\tParticleEffect.FIREWORKS_SPARK.display(0, 3, 0, 0.1f, 500, player.getLocation(), 1);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#NumberLiteral#NumberLiteral#NumberLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#NumberLiteral#NumberLiteral#NumberLiteral#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Displays a simplified particle effect and calm sound when receiving an achievement. Is used instead of displayFirework.", "call_func_name": ["com.hm.achievement.utils.SoundPlayer.play", "org.bukkit.entity.Player.getLocation", "org.bukkit.entity.Player.spawnParticle", "com.hm.achievement.particle.ParticleEffect.display"], "call_func_parameter": [["org.bukkit.entity.Player", "java.lang.String", "java.lang.String", "java.lang.String"], [""], ["org.bukkit.Particle", "org.bukkit.Location", "int", "double", "double", "double", "double"], ["float", "float", "float", "float", "int", "org.bukkit.Location", "double"]], "passed_comments": [{"com.hm.achievement.utils.SoundPlayer.play": "Plays a sound dependent on the Minecraft version."}]}, {"index": "24", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/PlayerAdvancedAchievementListener.java", "methodName": "com.hm.achievement.listener.PlayerAdvancedAchievementListener.handleAllAchievementsReceived", "methodParameterType": "Player#", "methodParameterName": "player#", "methodBody": "private void handleAllAchievementsReceived(Player player) {\n\t\tList<String> rewardTexts = giveRewardsAndPrepareTexts(player,\n\t\t\t\trewardParser.getCommandRewards(\"AllAchievementsReceivedRewards\", player),\n\t\t\t\trewardParser.getCustomCommandMessages(\"AllAchievementsReceivedRewards\"),\n\t\t\t\trewardParser.getItemReward(\"AllAchievementsReceivedRewards\", player),\n\t\t\t\trewardParser.getRewardAmount(\"AllAchievementsReceivedRewards\", \"Money\"),\n\t\t\t\trewardParser.getRewardAmount(\"AllAchievementsReceivedRewards\", \"Experience\"),\n\t\t\t\trewardParser.getRewardAmount(\"AllAchievementsReceivedRewards\", \"IncreaseMaxHealth\"),\n\t\t\t\trewardParser.getRewardAmount(\"AllAchievementsReceivedRewards\", \"IncreaseMaxOxygen\"));\n\t\tplayer.sendMessage(langAllAchievementsReceived);\n\t\trewardTexts.stream().filter(StringUtils::isNotBlank)\n\t\t\t\t.forEach(t -> player.sendMessage(pluginHeader + ChatColor.translateAlternateColorCodes('&', t)));\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#CharacterLiteral#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Handles rewards and displaying messages when a player has received all achievements.", "call_func_name": ["com.hm.achievement.utils.RewardParser.getCommandRewards", "com.hm.achievement.utils.RewardParser.getCustomCommandMessages", "com.hm.achievement.utils.RewardParser.getItemReward", "com.hm.achievement.utils.RewardParser.getRewardAmount", "com.hm.achievement.listener.PlayerAdvancedAchievementListener.giveRewardsAndPrepareTexts", "org.bukkit.entity.Player.sendMessage", "java.util.List.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.function.Consumer.accept", "java.util.stream.Stream.forEach"], "call_func_parameter": [["java.lang.String", "org.bukkit.entity.Player"], ["java.lang.String"], ["java.lang.String", "org.bukkit.entity.Player"], ["java.lang.String", "java.lang.String"], ["org.bukkit.entity.Player", "java.lang.String[]", "java.util.List", "org.bukkit.inventory.ItemStack", "int", "int", "int", "int"], ["java.lang.String"], [""], [""], ["java.util.function.Predicate"], ["com.hm.achievement.listener.PlayerAdvancedAchievementListener", "org.bukkit.entity.Player"], ["java.util.function.Consumer"]], "passed_comments": [{"com.hm.achievement.utils.RewardParser.getCommandRewards": "Extracts the list of commands to be executed as rewards."}, {"com.hm.achievement.utils.RewardParser.getCustomCommandMessages": "Extracts custom command message from config. Might be null."}, {"com.hm.achievement.utils.RewardParser.getItemReward": "Returns an item reward for a given achievement (specified in configuration file)."}, {"com.hm.achievement.utils.RewardParser.getRewardAmount": "Extracts the money, experience, increased max health or increased max oxygen rewards amount from the configuration."}, {"com.hm.achievement.listener.PlayerAdvancedAchievementListener.giveRewardsAndPrepareTexts": "Gives relevant rewards and prepares the texts to be displayed to the receiver."}]}, {"index": "25", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/JoinListener.java", "methodName": "com.hm.achievement.listener.JoinListener.scheduleAwardAdvancements", "methodParameterType": "Player#", "methodParameterName": "player#", "methodBody": "private void scheduleAwardAdvancements(Player player) {\n\t\tBukkit.getScheduler().scheduleSyncDelayedTask(advancedAchievements, () -> {\n\t\t\t// Check that the player is still connected.\n\t\t\tif (!player.isOnline()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tAdvancement advancement = Bukkit.getAdvancement(new NamespacedKey(advancedAchievements,\n\t\t\t\t\tAdvancementManager.ADVANCED_ACHIEVEMENTS_PARENT));\n\t\t\t// If no parent, user has not used /aach generate, do not do anything.\n\t\t\tif (advancement != null) {\n\t\t\t\tAdvancementProgress advancementProgress = player.getAdvancementProgress(advancement);\n\t\t\t\tif (!advancementProgress.isDone()) {\n\t\t\t\t\tadvancementProgress.awardCriteria(AchievementAdvancement.CRITERIA_NAME);\n\t\t\t\t}\n\t\t\t\tfor (String achName : databaseManager.getPlayerAchievementNamesList(player.getUniqueId())) {\n\t\t\t\t\tadvancement = Bukkit.getAdvancement(new NamespacedKey(advancedAchievements,\n\t\t\t\t\t\t\tAdvancementManager.getKey(achName)));\n\t\t\t\t\t// Matching advancement might not exist if user has not called /aach generate.\n\t\t\t\t\tif (advancement != null) {\n\t\t\t\t\t\tadvancementProgress = player.getAdvancementProgress(advancement);\n\t\t\t\t\t\tif (!advancementProgress.isDone()) {\n\t\t\t\t\t\t\tadvancementProgress.awardCriteria(AchievementAdvancement.CRITERIA_NAME);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, 200);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#Block#LambdaExpression#NumberLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement)Block)LambdaExpression(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Schedules a delayed task to award advancements created by Advanced Achievements. This method can be seen as a synchronisation to give advancements which were generated after the corresponding achievement was received for a given player.", "call_func_name": ["org.bukkit.Bukkit.getScheduler", "java.lang.Runnable.run", "org.bukkit.scheduler.BukkitScheduler.scheduleSyncDelayedTask"], "call_func_parameter": [[""], ["com.hm.achievement.listener.JoinListener", "org.bukkit.entity.Player"], ["org.bukkit.plugin.Plugin", "java.lang.Runnable", "long"]], "passed_comments": "/"}, {"index": "26", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/statistics/AbstractListener.java", "methodName": "com.hm.achievement.listener.statistics.AbstractListener.updateStatisticAndAwardAchievementsIfAvailable", "methodParameterType": "Player#int#", "methodParameterName": "player#incrementValue#", "methodBody": "void updateStatisticAndAwardAchievementsIfAvailable(Player player, int incrementValue) {\n\t\tif (shouldIncreaseBeTakenIntoAccount(player, category)) {\n\t\t\tlong amount = cacheManager.getAndIncrementStatisticAmount((NormalAchievements) category, player.getUniqueId(),\n\t\t\t\t\tincrementValue);\n\t\t\tcheckThresholdsAndAchievements(player, category.toString(), amount);\n\t\t}\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Updates the statistic in the database for a NormalAchievement and awards an achievement if an available one is found.", "call_func_name": ["com.hm.achievement.listener.statistics.AbstractListener.shouldIncreaseBeTakenIntoAccount", "org.bukkit.entity.Player.getUniqueId", "com.hm.achievement.db.CacheManager.getAndIncrementStatisticAmount", "java.lang.Object.toString", "com.hm.achievement.listener.statistics.AbstractListener.checkThresholdsAndAchievements"], "call_func_parameter": [["org.bukkit.entity.Player", "com.hm.achievement.category.Category"], [""], ["com.hm.achievement.category.NormalAchievements", "java.util.UUID", "int"], [""], ["org.bukkit.entity.Player", "java.lang.String", "long"]], "passed_comments": [{"com.hm.achievement.db.CacheManager.getAndIncrementStatisticAmount": "Increases the statistic for a NormalAchievement by the given value and returns the updated statistic value. Calls the database if not found in the cache."}]}, {"index": "27", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/statistics/AbstractListener.java", "methodName": "com.hm.achievement.listener.statistics.AbstractListener.updateStatisticAndAwardAchievementsIfAvailable", "methodParameterType": "Player#Set<String>#int#", "methodParameterName": "player#subcategories#incrementValue#", "methodBody": "void updateStatisticAndAwardAchievementsIfAvailable(Player player, Set<String> subcategories, int incrementValue) {\n\t\tif (shouldIncreaseBeTakenIntoAccount(player, category)) {\n\t\t\tsubcategories.forEach(subcategory -> {\n\t\t\t\tlong amount = cacheManager.getAndIncrementStatisticAmount((MultipleAchievements) category, subcategory,\n\t\t\t\t\t\tplayer.getUniqueId(), incrementValue);\n\t\t\t\tcheckThresholdsAndAchievements(player, category + \".\" + subcategory, amount);\n\t\t\t});\n\t\t}\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Updates the statistic in the database for a MultipleAchievement and awards an achievement if an available one is found.", "call_func_name": ["com.hm.achievement.listener.statistics.AbstractListener.shouldIncreaseBeTakenIntoAccount", "java.util.function.Consumer.accept", "java.util.Set.forEach"], "call_func_parameter": [["org.bukkit.entity.Player", "com.hm.achievement.category.Category"], ["com.hm.achievement.listener.statistics.AbstractListener", "org.bukkit.entity.Player", "int"], ["java.util.function.Consumer"]], "passed_comments": "/"}, {"index": "28", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/statistics/AbstractListener.java", "methodName": "com.hm.achievement.listener.statistics.AbstractListener.findAchievementsByCategoryAndName", "methodParameterType": "String#", "methodParameterName": "id#", "methodBody": "Set<String> findAchievementsByCategoryAndName(String id) {\n\t\treturn categoryKeys.stream()\n\t\t\t\t.filter(keys -> keys.startsWith(id + '|') || keys.contains('|' + id + '|') || keys.endsWith('|' + id))\n\t\t\t\t.collect(Collectors.toSet());\n\t}", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#CharacterLiteral#InfixExpression#MethodInvocation#SimpleName#SimpleName#CharacterLiteral#SimpleName#CharacterLiteral#InfixExpression#MethodInvocation#SimpleName#SimpleName#CharacterLiteral#SimpleName#InfixExpression#MethodInvocation#InfixExpression#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)InfixExpression)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns all achievements that match the provided identifier. This methods accounts for groups of sub-categories, e.g. 'zombie|pig_zombie|zombie_horse|zombie_villager'.", "call_func_name": ["java.util.Set.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.stream.Collectors.toSet", "java.util.stream.Stream.collect"], "call_func_parameter": [[""], ["java.lang.String"], ["java.util.function.Predicate"], [""], ["java.util.stream.Collector"]], "passed_comments": "/"}, {"index": "29", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/statistics/PlayerCommandsListener.java", "methodName": "com.hm.achievement.listener.statistics.PlayerCommandsListener.getEquivalentCommands", "methodParameterType": "String#", "methodParameterName": "command#", "methodBody": "private List<String> getEquivalentCommands(String command) {\n\t\tint firstSpaceIndex = command.indexOf(' ');\n\t\tString commandName;\n\t\tString commandParameters;\n\t\tif (firstSpaceIndex >= 0) {\n\t\t\tcommandName = command.substring(1, firstSpaceIndex);\n\t\t\t// Command parameters start with an initial space.\n\t\t\tcommandParameters = command.substring(firstSpaceIndex).toLowerCase();\n\t\t} else {\n\t\t\tcommandName = command.substring(1);\n\t\t\tcommandParameters = \"\";\n\t\t}\n\n\t\tPluginCommand pluginCommand = Bukkit.getPluginCommand(commandName);\n\t\tif (pluginCommand == null || pluginCommand.getAliases() == null) {\n\t\t\treturn Arrays.asList(commandName.toLowerCase() + commandParameters);\n\t\t}\n\n\t\tList<String> equivalentCommands = new ArrayList<>(pluginCommand.getAliases().size() + 1);\n\t\t// Aliases don't contain the main plugin command, add it to the returned list.\n\t\tequivalentCommands.add(pluginCommand.getName().toLowerCase() + commandParameters);\n\t\tfor (String alias : pluginCommand.getAliases()) {\n\t\t\tequivalentCommands.add(alias.toLowerCase() + commandParameters);\n\t\t}\n\t\treturn equivalentCommands;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#StringLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Computes a list containing equivalent commands of an input command. For instance, if input is \"/aach stats\", the returned list is: [\"aach stats\", \"advancedachievements stats\", \"aachievements stats\", \"aa stats\"]", "call_func_name": ["java.lang.String.indexOf", "java.lang.String.substring", "java.lang.String.substring", "java.lang.String.toLowerCase", "org.bukkit.Bukkit.getPluginCommand", "org.bukkit.command.PluginCommand.getAliases", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.Arrays.asList", "java.util.List.size", "java.util.ArrayList.<init>", "org.bukkit.command.PluginCommand.getName", "java.util.List.add", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next"], "call_func_parameter": [["int"], ["int", "int"], ["int"], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], ["java.lang.Object[]"], [""], ["int"], [""], ["java.lang.Object"], [""], [""], [""]], "passed_comments": "/"}, {"index": "30", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/statistics/ConnectionsListener.java", "methodName": "com.hm.achievement.listener.statistics.ConnectionsListener.scheduleAwardConnection", "methodParameterType": "Player#", "methodParameterName": "player#", "methodBody": "private void scheduleAwardConnection(Player player) {\n\t\tif (!playersConnectionProcessed.contains(player.getUniqueId())) {\n\t\t\tBukkit.getScheduler().scheduleSyncDelayedTask(advancedAchievements, () -> {\n\t\t\t\t// In addition to the usual reception conditions, check that the player is still connected and that\n\t\t\t\t// another runnable hasn't already done the work (even though this method is intended to run once per\n\t\t\t\t// player per connection instance, it might happen with some server settings).\n\t\t\t\tif (shouldIncreaseBeTakenIntoAccount(player, category) && player.isOnline()\n\t\t\t\t\t\t&& !playersConnectionProcessed.contains(player.getUniqueId())) {\n\t\t\t\t\thandleConnectionAchievements(player);\n\t\t\t\t\t// Ran successfully to completion: no need to re-run while player is connected.\n\t\t\t\t\tplayersConnectionProcessed.add(player.getUniqueId());\n\t\t\t\t}\n\t\t\t}, 100);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#NumberLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Schedules a delayed task to deal with Connection achievements.", "call_func_name": ["org.bukkit.entity.Player.getUniqueId", "java.util.Set.contains", "org.bukkit.Bukkit.getScheduler", "java.lang.Runnable.run", "org.bukkit.scheduler.BukkitScheduler.scheduleSyncDelayedTask"], "call_func_parameter": [[""], ["java.lang.Object"], [""], ["com.hm.achievement.listener.statistics.ConnectionsListener", "org.bukkit.entity.Player"], ["org.bukkit.plugin.Plugin", "java.lang.Runnable", "long"]], "passed_comments": "/"}, {"index": "31", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/statistics/ConnectionsListener.java", "methodName": "com.hm.achievement.listener.statistics.ConnectionsListener.handleConnectionAchievements", "methodParameterType": "Player#", "methodParameterName": "player#", "methodBody": "private void handleConnectionAchievements(Player player) {\n\t\tString dateString = LocalDate.now().format(DATE_TIME_FORMATTER);\n\t\tif (!dateString.equals(databaseManager.getPlayerConnectionDate(player.getUniqueId()))) {\n\t\t\tint connections = databaseManager.updateAndGetConnection(player.getUniqueId(), dateString);\n\t\t\tString achievementPath = category + \".\" + connections;\n\t\t\tif (mainConfig.contains(achievementPath)) {\n\t\t\t\tString rewardPath = achievementPath + \".Reward\";\n\t\t\t\t// Fire achievement event.\n\t\t\t\tPlayerAdvancedAchievementEventBuilder playerAdvancedAchievementEventBuilder = new PlayerAdvancedAchievementEventBuilder()\n\t\t\t\t\t\t.player(player).name(mainConfig.getString(achievementPath + \".Name\"))\n\t\t\t\t\t\t.displayName(mainConfig.getString(achievementPath + \".DisplayName\"))\n\t\t\t\t\t\t.message(mainConfig.getString(achievementPath + \".Message\"))\n\t\t\t\t\t\t.commandRewards(rewardParser.getCommandRewards(rewardPath, player))\n\t\t\t\t\t\t.commandMessage(rewardParser.getCustomCommandMessages(rewardPath))\n\t\t\t\t\t\t.itemReward(rewardParser.getItemReward(rewardPath, player))\n\t\t\t\t\t\t.moneyReward(rewardParser.getRewardAmount(rewardPath, \"Money\"))\n\t\t\t\t\t\t.experienceReward(rewardParser.getRewardAmount(rewardPath, \"Experience\"))\n\t\t\t\t\t\t.maxHealthReward(rewardParser.getRewardAmount(rewardPath, \"IncreaseMaxHealth\"))\n\t\t\t\t\t\t.maxOxygenReward(rewardParser.getRewardAmount(rewardPath, \"IncreaseMaxOxygen\"));\n\n\t\t\t\tBukkit.getPluginManager().callEvent(playerAdvancedAchievementEventBuilder.build());\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#PrefixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Updates Connection statistics and awards an achievement if need-be.", "call_func_name": ["java.time.LocalDate.now", "java.time.LocalDate.format", "org.bukkit.entity.Player.getUniqueId", "com.hm.achievement.db.AbstractDatabaseManager.getPlayerConnectionDate", "java.lang.String.equals", "com.hm.achievement.db.AbstractDatabaseManager.updateAndGetConnection", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.file.CommentedYamlConfiguration.contains", "com.hm.achievement.file.CommentedYamlConfiguration.getString", "com.hm.achievement.utils.RewardParser.getCommandRewards", "com.hm.achievement.utils.RewardParser.getCustomCommandMessages", "com.hm.achievement.utils.RewardParser.getItemReward", "com.hm.achievement.utils.RewardParser.getRewardAmount", "org.bukkit.Bukkit.getPluginManager", "org.bukkit.plugin.PluginManager.callEvent"], "call_func_parameter": [[""], ["java.time.format.DateTimeFormatter"], [""], ["java.util.UUID"], ["java.lang.Object"], ["java.util.UUID", "java.lang.String"], [""], ["java.lang.Object"], ["java.lang.String"], ["int"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String", "org.bukkit.entity.Player"], ["java.lang.String"], ["java.lang.String", "org.bukkit.entity.Player"], ["java.lang.String", "java.lang.String"], [""], ["org.bukkit.event.Event"]], "passed_comments": [{"com.hm.achievement.db.AbstractDatabaseManager.getPlayerConnectionDate": "Gets a player's last connection date."}, {"com.hm.achievement.db.AbstractDatabaseManager.updateAndGetConnection": "Updates a player's number of connections and last connection date and returns number of connections (used by Connections listener)."}, {"com.hm.achievement.utils.RewardParser.getCommandRewards": "Extracts the list of commands to be executed as rewards."}, {"com.hm.achievement.utils.RewardParser.getCustomCommandMessages": "Extracts custom command message from config. Might be null."}, {"com.hm.achievement.utils.RewardParser.getItemReward": "Returns an item reward for a given achievement (specified in configuration file)."}, {"com.hm.achievement.utils.RewardParser.getRewardAmount": "Extracts the money, experience, increased max health or increased max oxygen rewards amount from the configuration."}]}, {"index": "32", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/statistics/AbstractRateLimitedListener.java", "methodName": "com.hm.achievement.listener.statistics.AbstractRateLimitedListener.isInCooldownPeriod", "methodParameterType": "Player#int#", "methodParameterName": "player#slotNumber#", "methodBody": "private boolean isInCooldownPeriod(Player player, int slotNumber) {\n\t\tUUID uuid = player.getUniqueId();\n\t\tlong currentPlayerStatistic = cacheManager.getAndIncrementStatisticAmount((NormalAchievements) category, uuid, 0);\n\t\t// Ignore cooldown if player has received all achievements in the category.\n\t\tif (currentPlayerStatistic >= hardestCategoryThreshold) {\n\t\t\treturn false;\n\t\t}\n\n\t\tMap<UUID, Long> playersLastActionTimes = slotsToPlayersLastActionTimes.computeIfAbsent(slotNumber, HashMap::new);\n\t\tlong currentTimeMillis = System.currentTimeMillis();\n\t\tlong timeToWait = playersLastActionTimes.getOrDefault(uuid, 0L) + categoryCooldown - currentTimeMillis;\n\t\tif (timeToWait > 0) {\n\t\t\tif (configCooldownActionBar) {\n\t\t\t\tif (category == NormalAchievements.MUSICDISCS) {\n\t\t\t\t\t// Display message with a delay to avoid it being overwritten by disc name message.s\n\t\t\t\t\tBukkit.getScheduler().scheduleSyncDelayedTask(advancedAchievements,\n\t\t\t\t\t\t\t() -> displayActionBarMessage(player, timeToWait), 20);\n\t\t\t\t} else {\n\t\t\t\t\tdisplayActionBarMessage(player, timeToWait);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tplayersLastActionTimes.put(uuid, currentTimeMillis);\n\t\treturn false;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#CreationReference#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#SimpleName#InfixExpression#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#NumberLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(CreationReference(SimpleType(SimpleName)SimpleName)SimpleType)CreationReference)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(IfStatement(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines whether the player is in cooldown, i.e. a similar action was taken into account too recently.", "call_func_name": ["org.bukkit.entity.Player.getUniqueId", "com.hm.achievement.db.CacheManager.getAndIncrementStatisticAmount", "java.lang.Integer.valueOf", "java.util.function.Function.apply", "java.util.Map.computeIfAbsent", "java.lang.System.currentTimeMillis", "java.lang.Long.valueOf", "java.util.Map.getOrDefault", "java.lang.Long.longValue", "org.bukkit.Bukkit.getScheduler", "java.lang.Runnable.run", "org.bukkit.scheduler.BukkitScheduler.scheduleSyncDelayedTask", "com.hm.achievement.listener.statistics.AbstractRateLimitedListener.displayActionBarMessage", "java.util.Map.put"], "call_func_parameter": [[""], ["com.hm.achievement.category.NormalAchievements", "java.util.UUID", "int"], ["int"], [""], ["java.lang.Object", "java.util.function.Function"], [""], ["long"], ["java.lang.Object", "java.lang.Object"], [""], [""], ["com.hm.achievement.listener.statistics.AbstractRateLimitedListener", "org.bukkit.entity.Player", "long"], ["org.bukkit.plugin.Plugin", "java.lang.Runnable", "long"], ["org.bukkit.entity.Player", "long"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"com.hm.achievement.db.CacheManager.getAndIncrementStatisticAmount": "Increases the statistic for a NormalAchievement by the given value and returns the updated statistic value. Calls the database if not found in the cache."}, {"com.hm.achievement.listener.statistics.AbstractRateLimitedListener.displayActionBarMessage": "Displays the cooldown action bar message."}]}, {"index": "33", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/statistics/AbstractRateLimitedListener.java", "methodName": "com.hm.achievement.listener.statistics.AbstractRateLimitedListener.displayActionBarMessage", "methodParameterType": "Player#long#", "methodParameterName": "player#timeToWait#", "methodBody": "private void displayActionBarMessage(Player player, long timeToWait) {\n\t\tString timeWithOneDecimal = String.format(\"%.1f\", (double) timeToWait / 1000);\n\t\tString message = \"&o\" + StringUtils.replaceOnce(langStatisticCooldown, \"TIME\", timeWithOneDecimal);\n\t\ttry {\n\t\t\tFancyMessageSender.sendActionBarMessage(player, message);\n\t\t} catch (Exception e) {\n\t\t\tlogger.warning(\"Failed to display action bar message for cooldown.\");\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#PrimitiveType#SimpleName#CastExpression#NumberLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Displays the cooldown action bar message.", "call_func_name": ["java.lang.Double.valueOf", "java.lang.String.format", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.hm.apache.commons.lang3.StringUtils.replaceOnce", "java.lang.StringBuilder.toString", "com.hm.achievement.particle.FancyMessageSender.sendActionBarMessage", "java.util.logging.Logger.warning"], "call_func_parameter": [["double"], ["java.lang.String", "java.lang.Object[]"], [""], ["java.lang.String"], ["java.lang.String", "java.lang.String", "java.lang.String"], [""], ["org.bukkit.entity.Player", "java.lang.String"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "34", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/statistics/FireworksListener.java", "methodName": "com.hm.achievement.listener.statistics.FireworksListener.isFirework", "methodParameterType": "Material#", "methodParameterName": "material#", "methodBody": "private boolean isFirework(Material material) {\n\t\treturn serverVersion >= 13 ? material == Material.FIREWORK_ROCKET : \"FIREWORK\".equals(material.name());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines whether the used material is a firework.", "call_func_name": ["org.bukkit.Material.name", "java.lang.String.equals"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "35", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/statistics/FireworksListener.java", "methodName": "com.hm.achievement.listener.statistics.FireworksListener.canAccommodateFireworkLaunch", "methodParameterType": "Block#Player#Action#", "methodParameterName": "clickedBlock#player#action#", "methodBody": "private boolean canAccommodateFireworkLaunch(Block clickedBlock, Player player, Action action) {\n\t\t// Players can launch fireworks without interacting with a block only if they're gliding.\n\t\tif (serverVersion >= 9 && player.isGliding() && action == Action.RIGHT_CLICK_AIR) {\n\t\t\treturn true;\n\t\t} else if (action != Action.RIGHT_CLICK_BLOCK) {\n\t\t\treturn false;\n\t\t}\n\t\tMaterial clickedMaterial = clickedBlock.getType();\n\t\tif (!player.isSneaking()) {\n\t\t\tif (serverVersion >= 14 && clickedMaterial == Material.SWEET_BERRY_BUSH\n\t\t\t\t\t&& ((Ageable) clickedBlock.getBlockData()).getAge() > 1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// The following materials only prevent firework launches whilst not sneaking.\n\t\t\tswitch (clickedMaterial.name()) {\n\t\t\t\tcase \"FURNACE\":\n\t\t\t\tcase \"DISPENSER\":\n\t\t\t\tcase \"CHEST\":\n\t\t\t\tcase \"NOTE_BLOCK\":\n\t\t\t\tcase \"LEVER\":\n\t\t\t\tcase \"STONE_BUTTON\":\n\t\t\t\tcase \"ENDER_CHEST\":\n\t\t\t\tcase \"BEACON\":\n\t\t\t\tcase \"ANVIL\":\n\t\t\t\tcase \"TRAPPED_CHEST\":\n\t\t\t\tcase \"HOPPER\":\n\t\t\t\tcase \"DROPPER\":\n\t\t\t\tcase \"BREWING_STAND\":\n\t\t\t\tcase \"CRAFTING_TABLE\":\n\t\t\t\tcase \"ACACIA_BUTTON\":\n\t\t\t\tcase \"BIRCH_BUTTON\":\n\t\t\t\tcase \"DARK_OAK_BUTTON\":\n\t\t\t\tcase \"JUNGLE_BUTTON\":\n\t\t\t\tcase \"OAK_BUTTON\":\n\t\t\t\tcase \"SPRUCE_BUTTON\":\n\t\t\t\tcase \"ACACIA_DOOR\":\n\t\t\t\tcase \"BIRCH_DOOR\":\n\t\t\t\tcase \"DARK_OAK_DOOR\":\n\t\t\t\tcase \"JUNGLE_DOOR\":\n\t\t\t\tcase \"OAK_DOOR\":\n\t\t\t\tcase \"SPRUCE_DOOR\":\n\t\t\t\tcase \"ACACIA_FENCE_GATE\":\n\t\t\t\tcase \"BIRCH_FENCE_GATE\":\n\t\t\t\tcase \"DARK_OAK_FENCE_GATE\":\n\t\t\t\tcase \"JUNGLE_FENCE_GATE\":\n\t\t\t\tcase \"OAK_FENCE_GATE\":\n\t\t\t\tcase \"SPRUCE_FENCE_GATE\":\n\t\t\t\tcase \"ENCHANTING_TABLE\":\n\t\t\t\tcase \"ACACIA_TRAPDOOR\":\n\t\t\t\tcase \"BIRCH_TRAPDOOR\":\n\t\t\t\tcase \"DARK_OAK_TRAPDOOR\":\n\t\t\t\tcase \"JUNGLE_TRAPDOOR\":\n\t\t\t\tcase \"OAK_TRAPDOOR\":\n\t\t\t\tcase \"SPRUCE_TRAPDOOR\":\n\t\t\t\tcase \"ACACIA_BOAT\":\n\t\t\t\tcase \"BIRCH_BOAT\":\n\t\t\t\tcase \"DARK_OAK_BOAT\":\n\t\t\t\tcase \"JUNGLE_BOAT\":\n\t\t\t\tcase \"OAK_BOAT\":\n\t\t\t\tcase \"SPRUCE_BOAT\":\n\t\t\t\tcase \"BLACK_BED\":\n\t\t\t\tcase \"BLUE_BED\":\n\t\t\t\tcase \"BROWN_BED\":\n\t\t\t\tcase \"CYAN_BED\":\n\t\t\t\tcase \"GRAY_BED\":\n\t\t\t\tcase \"GREEN_BED\":\n\t\t\t\tcase \"LIGHT_BLUE_BED\":\n\t\t\t\tcase \"LIGHT_GRAY_BED\":\n\t\t\t\tcase \"LIME_BED\":\n\t\t\t\tcase \"MAGENTA_BED\":\n\t\t\t\tcase \"ORANGE_BED\":\n\t\t\t\tcase \"PINK_BED\":\n\t\t\t\tcase \"PURPLE_BED\":\n\t\t\t\tcase \"RED_BED\":\n\t\t\t\tcase \"WHITE_BED\":\n\t\t\t\tcase \"YELLOW_BED\":\n\t\t\t\tcase \"CAKE\":\n\t\t\t\tcase \"COMPARATOR\":\n\t\t\t\tcase \"REPEATER\":\n\t\t\t\tcase \"COMMAND_BLOCK\":\n\t\t\t\tcase \"ARMOR_STAND\":\n\t\t\t\tcase \"CHAIN_COMMAND_BLOCK\":\n\t\t\t\tcase \"REPEATING_COMMAND_BLOCK\":\n\t\t\t\tcase \"BLACK_SHULKER_BOX\":\n\t\t\t\tcase \"BLUE_SHULKER_BOX\":\n\t\t\t\tcase \"BROWN_SHULKER_BOX\":\n\t\t\t\tcase \"CYAN_SHULKER_BOX\":\n\t\t\t\tcase \"GRAY_SHULKER_BOX\":\n\t\t\t\tcase \"GREEN_SHULKER_BOX\":\n\t\t\t\tcase \"LIGHT_BLUE_SHULKER_BOX\":\n\t\t\t\tcase \"LIME_SHULKER_BOX\":\n\t\t\t\tcase \"MAGENTA_SHULKER_BOX\":\n\t\t\t\tcase \"ORANGE_SHULKER_BOX\":\n\t\t\t\tcase \"PINK_SHULKER_BOX\":\n\t\t\t\tcase \"PURPLE_SHULKER_BOX\":\n\t\t\t\tcase \"RED_SHULKER_BOX\":\n\t\t\t\tcase \"WHITE_SHULKER_BOX\":\n\t\t\t\tcase \"YELLOW_SHULKER_BOX\":\n\t\t\t\tcase \"SHULKER_BOX\":\n\t\t\t\tcase \"BARREL\":\n\t\t\t\tcase \"BELL\":\n\t\t\t\tcase \"BLAST_FURNACE\":\n\t\t\t\tcase \"CARTOGRAPHY_TABLE\":\n\t\t\t\tcase \"GRINDSTONE\":\n\t\t\t\tcase \"LOOM\":\n\t\t\t\tcase \"SMOKER\":\n\t\t\t\tcase \"STONECUTTER\":\n\t\t\t\tcase \"ACACIA_SIGN\":\n\t\t\t\tcase \"ACACIA_WALL_SIGN\":\n\t\t\t\tcase \"BIRCH_SIGN\":\n\t\t\t\tcase \"BIRCH_WALL_SIGN\":\n\t\t\t\tcase \"DARK_OAK_SIGN\":\n\t\t\t\tcase \"DARK_OAK_WALL_SIGN\":\n\t\t\t\tcase \"JUNGLE_SIGN\":\n\t\t\t\tcase \"JUNGLE_WALL_SIGN\":\n\t\t\t\tcase \"OAK_SIGN\":\n\t\t\t\tcase \"OAK_WALL_SIGN\":\n\t\t\t\tcase \"SPRUCE_SIGN\":\n\t\t\t\tcase \"SPRUCE_WALL_SIGN\":\n\t\t\t\t\t// Pre Minecraft 1.14\":\n\t\t\t\tcase \"SIGN\":\n\t\t\t\tcase \"WALL_SIGN\":\n\t\t\t\t\t// Pre Minecraft 1.13\":\n\t\t\t\tcase \"WORKBENCH\":\n\t\t\t\tcase \"BURNING_FURNACE\":\n\t\t\t\tcase \"WOOD_BUTTON\":\n\t\t\t\tcase \"TRAP_DOOR\":\n\t\t\t\tcase \"FENCE_GATE\":\n\t\t\t\tcase \"ENCHANTMENT_TABLE\":\n\t\t\t\tcase \"WOOD_DOOR\":\n\t\t\t\tcase \"WOODEN_DOOR\":\n\t\t\t\tcase \"BOAT\":\n\t\t\t\tcase \"BED_BLOCK\":\n\t\t\t\tcase \"CAKE_BLOCK\":\n\t\t\t\tcase \"REDSTONE_COMPARATOR_OFF\":\n\t\t\t\tcase \"REDSTONE_COMPARATOR_ON\":\n\t\t\t\tcase \"DIODE_BLOCK_OFF\":\n\t\t\t\tcase \"DIODE_BLOCK_ON\":\n\t\t\t\tcase \"COMMAND\":\n\t\t\t\tcase \"BOAT_ACACIA\":\n\t\t\t\tcase \"BOAT_BIRCH\":\n\t\t\t\tcase \"BOAT_DARK_OAK\":\n\t\t\t\tcase \"BOAT_JUNGLE\":\n\t\t\t\tcase \"BOAT_SPRUCE\":\n\t\t\t\tcase \"COMMAND_REPEATING\":\n\t\t\t\tcase \"COMMAND_CHAIN\":\n\t\t\t\tcase \"SILVER_SHULKER_BOX\":\n\t\t\t\tcase \"SIGN_POST\":\n\t\t\t\t\treturn false;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// The following materials prevent firework launches regardless of whether the player is sneaking or not.\n\t\tswitch (clickedMaterial.name()) {\n\t\t\tcase \"PAINTING\":\n\t\t\tcase \"ITEM_FRAME\":\n\t\t\tcase \"MINECART\":\n\t\t\tcase \"HOPPER_MINECART\":\n\t\t\tcase \"TNT_MINECART\":\n\t\t\tcase \"COMMAND_BLOCK_MINECART\":\n\t\t\tcase \"FURNACE_MINECART\":\n\t\t\tcase \"CHEST_MINECART\":\n\t\t\t\t// Pre Minecraft 1.13\":\n\t\t\tcase \"EXPLOSIVE_MINECART\":\n\t\t\tcase \"COMMAND_MINECART\":\n\t\t\tcase \"POWERED_MINECART\":\n\t\t\tcase \"STORAGE_MINECART\":\n\t\t\t\treturn false;\n\t\t\tdefault:\n\t\t\t\treturn true;\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#BooleanLiteral#ReturnStatement#SwitchCase#BreakStatement#SwitchStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#BooleanLiteral#ReturnStatement#SwitchCase#BooleanLiteral#ReturnStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase)SwitchCase(BreakStatement)BreakStatement)SwitchStatement)Block)IfStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase)SwitchCase(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Determines whether a firework can be launched when interacting with this block.", "call_func_name": ["org.bukkit.entity.Player.isGliding", "org.bukkit.block.Block.getType", "org.bukkit.entity.Player.isSneaking", "org.bukkit.block.Block.getBlockData", "org.bukkit.block.data.Ageable.getAge", "org.bukkit.Material.name", "java.lang.String.hashCode", "java.lang.String.equals"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "36", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/statistics/HoePlowingListener.java", "methodName": "com.hm.achievement.listener.statistics.HoePlowingListener.canBePlowed", "methodParameterType": "Block#", "methodParameterName": "block#", "methodBody": "private boolean canBePlowed(Block block) {\n\t\treturn (serverVersion < 13 && block.getType() == Material.GRASS || block.getType() == Material.DIRT\n\t\t\t\t|| serverVersion >= 13 && block.getType() == Material.GRASS_BLOCK)\n\t\t\t\t&& block.getRelative(BlockFace.UP).getType() == Material.AIR;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression)InfixExpression)ParenthesizedExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines whether a material can be plowed with a hoe.", "call_func_name": ["org.bukkit.block.Block.getType", "org.bukkit.block.Block.getRelative"], "call_func_parameter": [[""], ["org.bukkit.block.BlockFace"]], "passed_comments": "/"}, {"index": "37", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/statistics/BrewingListener.java", "methodName": "com.hm.achievement.listener.statistics.BrewingListener.isBrewablePotion", "methodParameterType": "InventoryClickEvent#", "methodParameterName": "event#", "methodBody": "private boolean isBrewablePotion(InventoryClickEvent event) {\n\t\tItemStack item = event.getCurrentItem();\n\t\treturn item != null &&\n\t\t\t\t(materialHelper.isAnyPotionButWater(item) || serverVersion >= 9 && item.getType() == Material.SPLASH_POTION);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#InfixExpression#ParenthesizedExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression)InfixExpression)ParenthesizedExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine whether the event corresponds to a brewable potion, i.e. not water.", "call_func_name": ["org.bukkit.event.inventory.InventoryClickEvent.getCurrentItem", "com.hm.achievement.utils.MaterialHelper.isAnyPotionButWater", "org.bukkit.inventory.ItemStack.getType"], "call_func_parameter": [[""], ["org.bukkit.inventory.ItemStack"], [""]], "passed_comments": [{"com.hm.achievement.utils.MaterialHelper.isAnyPotionButWater": "Determines whether an item is any Material.POTION apart from water."}]}, {"index": "38", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/statistics/BreaksListener.java", "methodName": "com.hm.achievement.listener.statistics.BreaksListener.isOre", "methodParameterType": "String#", "methodParameterName": "materialName#", "methodBody": "private boolean isOre(String materialName) {\n\t\tswitch (materialName) {\n\t\t\tcase \"COAL_ORE\":\n\t\t\tcase \"DIAMOND_ORE\":\n\t\t\tcase \"EMERALD_ORE\":\n\t\t\tcase \"LAPIS_ORE\":\n\t\t\tcase \"NETHER_QUARTZ_ORE\":\n\t\t\tcase \"REDSTONE_ORE\":\n\t\t\t\t// Pre Minecraft 1.13:\n\t\t\tcase \"QUARTZ_ORE\":\n\t\t\tcase \"GLOWING_REDSTONE_ORE\":\n\t\t\t\treturn true;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#BooleanLiteral#ReturnStatement#SwitchCase#BooleanLiteral#ReturnStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SwitchStatement(SimpleName)SimpleName(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase)SwitchCase(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Determines whether the borken material is an ore.", "call_func_name": ["java.lang.String.hashCode", "java.lang.String.equals"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "39", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/statistics/FertilisingLegacyListener.java", "methodName": "com.hm.achievement.listener.statistics.FertilisingLegacyListener.isBoneMeal", "methodParameterType": "ItemStack#", "methodParameterName": "itemStack#", "methodBody": "@SuppressWarnings(\"deprecation\")\n\tprivate boolean isBoneMeal(ItemStack itemStack) {\n\t\treturn itemStack != null && itemStack.isSimilar(new ItemStack(Material.valueOf(\"INK_SACK\"), 1, (short) 15));\n\t}", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#NumberLiteral#PrimitiveType#NumberLiteral#CastExpression#ClassInstanceCreation#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NumberLiteral)NumberLiteral(CastExpression(PrimitiveType)PrimitiveType(NumberLiteral)NumberLiteral)CastExpression)ClassInstanceCreation)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines whether the used item is bone meal.", "call_func_name": ["org.bukkit.Material.valueOf", "org.bukkit.inventory.ItemStack.<init>", "org.bukkit.inventory.ItemStack.isSimilar"], "call_func_parameter": [["java.lang.String"], ["org.bukkit.Material", "int", "short"], ["org.bukkit.inventory.ItemStack"]], "passed_comments": "/"}, {"index": "40", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/listener/statistics/FertilisingLegacyListener.java", "methodName": "com.hm.achievement.listener.statistics.FertilisingLegacyListener.canBeFertilised", "methodParameterType": "Block#", "methodParameterName": "block#", "methodBody": "@SuppressWarnings(\"deprecation\")\n\tprivate boolean canBeFertilised(Block block) {\n\t\tshort durability = block.getState().getData().toItemStack(0).getDurability();\n\t\tMaterial material = block.getType();\n\t\tif (\"DOUBLE_PLANT\".equals(material.name())) {\n\t\t\tif (durability == 10) {\n\t\t\t\t// Upper part of double plant. We must look at the lower part to get the double plant type.\n\t\t\t\tdurability = block.getRelative(BlockFace.DOWN).getState().getData().toItemStack(0).getDurability();\n\t\t\t}\n\t\t\t// Fertilisation does not work on double tallgrass and large fern.\n\t\t\treturn durability != 2 && durability != 3;\n\t\t}\n\t\treturn material == Material.GRASS || material.name().endsWith(\"SAPLING\")\n\t\t\t\t|| material == Material.POTATO && durability < 7\n\t\t\t\t|| material == Material.CARROT && durability < 7\n\t\t\t\t|| \"CROPS\".equals(material.name()) && durability < 7\n\t\t\t\t|| material == Material.PUMPKIN_STEM && durability < 7\n\t\t\t\t|| material == Material.MELON_STEM && durability < 7 || material == Material.BROWN_MUSHROOM\n\t\t\t\t|| material == Material.RED_MUSHROOM || material == Material.COCOA && durability < 9\n\t\t\t\t|| serverVersion >= 9 && \"BEETROOT_BLOCK\".equals(material.name()) && durability < 3;\n\t}", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#InfixExpression#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#InfixExpression#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#InfixExpression#SimpleName#NumberLiteral#InfixExpression#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(InfixExpression(InfixExpression(InfixExpression(InfixExpression(InfixExpression(InfixExpression(InfixExpression(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)InfixExpression(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines whether a material can be fertilised on the land.", "call_func_name": ["org.bukkit.block.Block.getState", "org.bukkit.block.BlockState.getData", "org.bukkit.material.MaterialData.toItemStack", "org.bukkit.inventory.ItemStack.getDurability", "org.bukkit.block.Block.getType", "org.bukkit.Material.name", "java.lang.String.equals", "org.bukkit.block.Block.getRelative", "java.lang.String.endsWith"], "call_func_parameter": [[""], [""], ["int"], [""], [""], [""], ["java.lang.Object"], ["org.bukkit.block.BlockFace"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "41", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/utils/SoundPlayer.java", "methodName": "com.hm.achievement.utils.SoundPlayer.play", "methodParameterType": "Player#String#String#String#String#", "methodParameterName": "player#providedSound#fallbackSound#pre13FallbackSound#pre9FallbackSound#", "methodBody": "public void play(Player player, String providedSound, String fallbackSound, String pre13FallbackSound,\n\t\t\tString pre9FallbackSound) {\n\t\tif (EnumUtils.isValidEnum(Sound.class, providedSound)) {\n\t\t\tplayer.playSound(player.getLocation(), Sound.valueOf(providedSound), 1, 0.7f);\n\t\t} else {\n\t\t\tplay(player, fallbackSound, pre13FallbackSound, pre9FallbackSound);\n\t\t\tlogger.warning(\"Sound \" + providedSound + \" is invalid, using default instead.\");\n\t\t}\n\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Plays a sound provided via configuration. If the sound is invalid, this method falls back to one of the other values provided, dependent on the Minecraft version.", "call_func_name": ["com.hm.apache.commons.lang3.EnumUtils.isValidEnum", "org.bukkit.entity.Player.getLocation", "org.bukkit.Sound.valueOf", "org.bukkit.entity.Player.playSound", "com.hm.achievement.utils.SoundPlayer.play", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.logging.Logger.warning"], "call_func_parameter": [["java.lang.Class", "java.lang.String"], [""], ["java.lang.String"], ["org.bukkit.Location", "org.bukkit.Sound", "float", "float"], ["org.bukkit.entity.Player", "java.lang.String", "java.lang.String", "java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": [{"com.hm.achievement.utils.SoundPlayer.play": "Plays a sound dependent on the Minecraft version."}]}, {"index": "42", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/utils/SoundPlayer.java", "methodName": "com.hm.achievement.utils.SoundPlayer.play", "methodParameterType": "Player#String#String#String#", "methodParameterName": "player#currentSound#pre13Sound#pre9Sound#", "methodBody": "public void play(Player player, String currentSound, String pre13Sound, String pre9Sound) {\n\t\tString soundValue;\n\t\tif (serverVersion < 9) {\n\t\t\tsoundValue = pre9Sound;\n\t\t} else if (serverVersion < 13) {\n\t\t\tsoundValue = pre13Sound;\n\t\t} else {\n\t\t\tsoundValue = currentSound;\n\t\t}\n\t\tplayer.playSound(player.getLocation(), Sound.valueOf(soundValue), 1, 0.7f);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Plays a sound dependent on the Minecraft version.", "call_func_name": ["org.bukkit.entity.Player.getLocation", "org.bukkit.Sound.valueOf", "org.bukkit.entity.Player.playSound"], "call_func_parameter": [[""], ["java.lang.String"], ["org.bukkit.Location", "org.bukkit.Sound", "float", "float"]], "passed_comments": "/"}, {"index": "43", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/utils/RewardParser.java", "methodName": "com.hm.achievement.utils.RewardParser.getRewardListing", "methodParameterType": "String#Player#", "methodParameterName": "path#player#", "methodBody": "public List<String> getRewardListing(String path, Player player) {\n\t\tList<String> rewardTypes = new ArrayList<>();\n\t\tSet<String> keyNames = mainConfig.getKeys(true);\n\n\t\tif (economy != null && keyNames.contains(path + \".Money\")) {\n\t\t\tint amount = getRewardAmount(path, \"Money\");\n\t\t\trewardTypes.add(StringUtils.replaceOnce(langListRewardMoney, \"AMOUNT\", amount + \" \" + getCurrencyName(amount)));\n\t\t}\n\n\t\tif (keyNames.contains(path + \".Item\")) {\n\t\t\tint amount = getItemAmount(path);\n\t\t\tString name = getItemName(path, player);\n\t\t\tif (name.isEmpty()) {\n\t\t\t\tname = getItemName(getItemReward(path, player));\n\t\t\t}\n\t\t\trewardTypes.add(StringUtils.replaceEach(langListRewardItem, new String[] { \"AMOUNT\", \"ITEM\" },\n\t\t\t\t\tnew String[] { Integer.toString(amount), name }));\n\t\t}\n\n\t\tif (keyNames.contains(path + \".Experience\")) {\n\t\t\tint amount = getRewardAmount(path, \"Experience\");\n\t\t\trewardTypes.add(StringUtils.replaceOnce(langListRewardExperience, \"AMOUNT\", Integer.toString(amount)));\n\t\t}\n\n\t\tif (keyNames.contains(path + \".IncreaseMaxHealth\")) {\n\t\t\tint amount = getRewardAmount(path, \"IncreaseMaxHealth\");\n\t\t\trewardTypes.add(StringUtils.replaceOnce(langListRewardIncreaseMaxHealth, \"AMOUNT\", Integer.toString(amount)));\n\t\t}\n\n\t\tif (keyNames.contains(path + \".IncreaseMaxOxygen\")) {\n\t\t\tint amount = getRewardAmount(path, \"IncreaseMaxOxygen\");\n\t\t\trewardTypes.add(StringUtils.replaceOnce(langListRewardIncreaseMaxOxygen, \"AMOUNT\", Integer.toString(amount)));\n\t\t}\n\n\t\tif (keyNames.contains(path + \".Command\")) {\n\t\t\tList<String> messages = getCustomCommandMessages(path);\n\t\t\tif (messages.isEmpty()) {\n\t\t\t\trewardTypes.add(langListRewardCommand);\n\t\t\t} else {\n\t\t\t\trewardTypes.addAll(messages);\n\t\t\t}\n\t\t}\n\t\treturn rewardTypes;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#StringLiteral#StringLiteral#ArrayInitializer#ArrayCreation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ArrayInitializer#ArrayCreation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)ArrayCreation(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ArrayInitializer)ArrayCreation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Constructs the listing of an achievement's rewards with strings coming from language file.", "call_func_name": ["java.util.ArrayList.<init>", "com.hm.achievement.file.CommentedYamlConfiguration.getKeys", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.Set.contains", "com.hm.achievement.utils.RewardParser.getRewardAmount", "java.lang.StringBuilder.append", "com.hm.achievement.utils.RewardParser.getCurrencyName", "com.hm.apache.commons.lang3.StringUtils.replaceOnce", "java.util.List.add", "com.hm.achievement.utils.RewardParser.getItemAmount", "com.hm.achievement.utils.RewardParser.getItemName", "java.lang.String.isEmpty", "com.hm.achievement.utils.RewardParser.getItemReward", "com.hm.achievement.utils.RewardParser.getItemName", "java.lang.Integer.toString", "com.hm.apache.commons.lang3.StringUtils.replaceEach", "com.hm.achievement.utils.RewardParser.getCustomCommandMessages", "java.util.List.isEmpty", "java.util.List.addAll"], "call_func_parameter": [[""], ["boolean"], [""], ["java.lang.String"], [""], ["java.lang.Object"], ["java.lang.String", "java.lang.String"], ["int"], ["int"], ["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.Object"], ["java.lang.String"], ["java.lang.String", "org.bukkit.entity.Player"], [""], ["java.lang.String", "org.bukkit.entity.Player"], ["org.bukkit.inventory.ItemStack"], ["int"], ["java.lang.String", "java.lang.String[]", "java.lang.String[]"], ["java.lang.String"], [""], ["java.util.Collection"]], "passed_comments": [{"com.hm.achievement.utils.RewardParser.getRewardAmount": "Extracts the money, experience, increased max health or increased max oxygen rewards amount from the configuration."}, {"com.hm.achievement.utils.RewardParser.getCurrencyName": "Returns name of currency depending on amount."}, {"com.hm.achievement.utils.RewardParser.getItemAmount": "Extracts the item reward amount from the configuration."}, {"com.hm.achievement.utils.RewardParser.getItemName": "Extracts the item reward custom name from the configuration. Not supported for old config syntax."}, {"com.hm.achievement.utils.RewardParser.getItemReward": "Returns an item reward for a given achievement (specified in configuration file)."}, {"com.hm.achievement.utils.RewardParser.getItemName": "Returns the name of an item reward, in a readable format."}, {"com.hm.achievement.utils.RewardParser.getCustomCommandMessages": "Extracts custom command message from config. Might be null."}]}, {"index": "44", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/utils/RewardParser.java", "methodName": "com.hm.achievement.utils.RewardParser.getCurrencyName", "methodParameterType": "int#", "methodParameterName": "amount#", "methodBody": "public String getCurrencyName(int amount) {\n\t\treturn amount > 1 ? economy.currencyNamePlural() : economy.currencyNameSingular();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns name of currency depending on amount.", "call_func_name": ["net.milkbowl.vault.economy.Economy.currencyNamePlural", "net.milkbowl.vault.economy.Economy.currencyNameSingular"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "45", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/utils/RewardParser.java", "methodName": "com.hm.achievement.utils.RewardParser.getItemName", "methodParameterType": "ItemStack#", "methodParameterName": "item#", "methodBody": "public String getItemName(ItemStack item) {\n\t\treturn WordUtils.capitalizeFully(item.getType().toString().replace('_', ' '));\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#CharacterLiteral#CharacterLiteral#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(CharacterLiteral)CharacterLiteral)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of an item reward, in a readable format.", "call_func_name": ["org.bukkit.inventory.ItemStack.getType", "org.bukkit.Material.toString", "java.lang.String.replace", "com.hm.apache.commons.text.WordUtils.capitalizeFully"], "call_func_parameter": [[""], [""], ["char", "char"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "46", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/utils/RewardParser.java", "methodName": "com.hm.achievement.utils.RewardParser.getRewardAmount", "methodParameterType": "String#String#", "methodParameterName": "path#type#", "methodBody": "public int getRewardAmount(String path, String type) {\n\t\t// Supports both old and new plugin syntax (Amount used to be a separate sub-category).\n\t\treturn Math.max(mainConfig.getInt(path + \".\" + type, 0), mainConfig.getInt(path + \".\" + type + \".Amount\", 0));\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#NumberLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#NumberLiteral#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extracts the money, experience, increased max health or increased max oxygen rewards amount from the configuration.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.file.CommentedYamlConfiguration.getInt", "java.lang.Math.max"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String", "int"], ["int", "int"]], "passed_comments": "/"}, {"index": "47", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/utils/RewardParser.java", "methodName": "com.hm.achievement.utils.RewardParser.getItemReward", "methodParameterType": "String#Player#", "methodParameterName": "path#player#", "methodBody": "public ItemStack getItemReward(String path, Player player) {\n\t\tint amount = getItemAmount(path);\n\t\tif (amount <= 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tString typePath = path + \".Item.Type\";\n\t\tif (mainConfig.getKeys(true).contains(typePath)) {\n\t\t\t// Old config syntax (type of item separated in a additional subcategory).\n\t\t\tOptional<Material> rewardMaterial = materialHelper.matchMaterial(mainConfig.getString(typePath),\n\t\t\t\t\t\"config.yml (\" + typePath + \")\");\n\t\t\tif (rewardMaterial.isPresent()) {\n\t\t\t\treturn new ItemStack(rewardMaterial.get(), amount);\n\t\t\t}\n\t\t} else {\n\t\t\t// New config syntax. Reward is of the form: \"Item: coal 5 Christmas Coal\"\n\t\t\t// The amount has already been parsed out and is provided by parameter amount.\n\t\t\tString itemPath = path + \".Item\";\n\t\t\tString materialNameAndQty = mainConfig.getString(itemPath, \"\");\n\t\t\tString materialName = StringUtils.substringBefore(materialNameAndQty, \" \");\n\n\t\t\tOptional<Material> rewardMaterial = materialHelper.matchMaterial(materialName, \"config.yml (\" + typePath + \")\");\n\t\t\tif (rewardMaterial.isPresent()) {\n\t\t\t\tItemStack item = new ItemStack(rewardMaterial.get(), amount);\n\n\t\t\t\tString name = getItemName(path, player);\n\t\t\t\tif (!name.isEmpty()) {\n\t\t\t\t\tItemMeta meta = item.getItemMeta();\n\t\t\t\t\tmeta.setDisplayName(name);\n\t\t\t\t\titem.setItemMeta(meta);\n\t\t\t\t}\n\t\t\t\treturn item;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#IfStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an item reward for a given achievement (specified in configuration file).", "call_func_name": ["com.hm.achievement.utils.RewardParser.getItemAmount", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.file.CommentedYamlConfiguration.getKeys", "java.util.Set.contains", "com.hm.achievement.file.CommentedYamlConfiguration.getString", "com.hm.achievement.utils.MaterialHelper.matchMaterial", "java.util.Optional.isPresent", "java.util.Optional.get", "org.bukkit.inventory.ItemStack.<init>", "com.hm.achievement.file.CommentedYamlConfiguration.getString", "com.hm.apache.commons.lang3.StringUtils.substringBefore", "com.hm.achievement.utils.RewardParser.getItemName", "java.lang.String.isEmpty", "org.bukkit.inventory.ItemStack.getItemMeta", "org.bukkit.inventory.meta.ItemMeta.setDisplayName", "org.bukkit.inventory.ItemStack.setItemMeta"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], [""], ["boolean"], ["java.lang.Object"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], [""], [""], ["org.bukkit.Material", "int"], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String", "org.bukkit.entity.Player"], [""], [""], ["java.lang.String"], ["org.bukkit.inventory.meta.ItemMeta"]], "passed_comments": [{"com.hm.achievement.utils.RewardParser.getItemAmount": "Extracts the item reward amount from the configuration."}, {"com.hm.achievement.utils.MaterialHelper.matchMaterial": "Tries to match a name to a Material instance."}, {"com.hm.achievement.utils.RewardParser.getItemName": "Extracts the item reward custom name from the configuration. Not supported for old config syntax."}]}, {"index": "48", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/utils/RewardParser.java", "methodName": "com.hm.achievement.utils.RewardParser.getCommandRewards", "methodParameterType": "String#Player#", "methodParameterName": "path#player#", "methodBody": "public String[] getCommandRewards(String path, Player player) {\n\t\tString searchFrom = path + \".Command\";\n\t\tif (mainConfig.isConfigurationSection(path + \".Command\")) {\n\t\t\tsearchFrom += \".Execute\";\n\t\t}\n\n\t\tString commandReward = mainConfig.getString(searchFrom, null);\n\t\tif (commandReward == null) {\n\t\t\treturn new String[0];\n\t\t}\n\t\t// Multiple reward commands can be set, separated by a semicolon and space. Extra parsing needed.\n\t\treturn MULTIPLE_REWARD_COMMANDS_SPLITTER.split(replacePlayerPlaceholders(commandReward, player));\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#SimpleName#StringLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extracts the list of commands to be executed as rewards.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.file.CommentedYamlConfiguration.isConfigurationSection", "com.hm.achievement.file.CommentedYamlConfiguration.getString", "com.hm.achievement.utils.RewardParser.replacePlayerPlaceholders", "java.util.regex.Pattern.split"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String", "org.bukkit.entity.Player"], ["java.lang.CharSequence"]], "passed_comments": [{"com.hm.achievement.utils.RewardParser.replacePlayerPlaceholders": "Replaces supported placeholders with player-specific information."}]}, {"index": "49", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/utils/RewardParser.java", "methodName": "com.hm.achievement.utils.RewardParser.getCustomCommandMessages", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "public List<String> getCustomCommandMessages(String path) {\n\t\tif (!mainConfig.contains(path + \".Command.Display\")) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\n\t\tif (mainConfig.isList(path + \".Command.Display\")) {\n\t\t\treturn mainConfig.getStringList(path + \".Command.Display\");\n\t\t}\n\n\t\treturn Collections.singletonList(mainConfig.getString(path + \".Command.Display\"));\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)PrefixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extracts custom command message from config. Might be null.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.file.CommentedYamlConfiguration.contains", "java.util.Collections.emptyList", "com.hm.achievement.file.CommentedYamlConfiguration.isList", "com.hm.achievement.file.CommentedYamlConfiguration.getStringList", "com.hm.achievement.file.CommentedYamlConfiguration.getString", "java.util.Collections.singletonList"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "50", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/utils/RewardParser.java", "methodName": "com.hm.achievement.utils.RewardParser.getItemAmount", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "private int getItemAmount(String path) {\n\t\tint itemAmount = 0;\n\t\tif (mainConfig.getKeys(true).contains(path + \".Item.Amount\")) {\n\t\t\t// Old config syntax.\n\t\t\titemAmount = mainConfig.getInt(path + \".Item.Amount\", 0);\n\t\t} else if (mainConfig.getKeys(true).contains(path + \".Item\")) {\n\t\t\t// New config syntax. Name of item and quantity are on the same line, separated by a space.\n\t\t\tString materialAndQty = StringUtils.normalizeSpace(mainConfig.getString(path + \".Item\", \"\"));\n\t\t\tString intString = StringUtils.substringBefore(StringUtils.substringAfter(materialAndQty, \" \"), \" \");\n\t\t\titemAmount = Integer.parseInt(intString);\n\t\t}\n\t\treturn itemAmount;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extracts the item reward amount from the configuration.", "call_func_name": ["com.hm.achievement.file.CommentedYamlConfiguration.getKeys", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.Set.contains", "com.hm.achievement.file.CommentedYamlConfiguration.getInt", "com.hm.achievement.file.CommentedYamlConfiguration.getString", "com.hm.apache.commons.lang3.StringUtils.normalizeSpace", "com.hm.apache.commons.lang3.StringUtils.substringAfter", "com.hm.apache.commons.lang3.StringUtils.substringBefore", "java.lang.Integer.parseInt"], "call_func_parameter": [["boolean"], [""], ["java.lang.String"], [""], ["java.lang.Object"], ["java.lang.String", "int"], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "51", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/utils/RewardParser.java", "methodName": "com.hm.achievement.utils.RewardParser.getItemName", "methodParameterType": "String#Player#", "methodParameterName": "path#player#", "methodBody": "private String getItemName(String path, Player player) {\n\t\tString configString = mainConfig.getString(path + \".Item\", \"\");\n\t\tString[] splittedString = StringUtils.split(configString);\n\t\treturn replacePlayerPlaceholders(StringUtils.join(splittedString, \" \", 2, splittedString.length).trim(), player);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#NumberLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extracts the item reward custom name from the configuration. Not supported for old config syntax.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.file.CommentedYamlConfiguration.getString", "com.hm.apache.commons.lang3.StringUtils.split", "com.hm.apache.commons.lang3.StringUtils.join", "java.lang.String.trim", "com.hm.achievement.utils.RewardParser.replacePlayerPlaceholders"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.Object[]", "java.lang.String", "int", "int"], [""], ["java.lang.String", "org.bukkit.entity.Player"]], "passed_comments": [{"com.hm.achievement.utils.RewardParser.replacePlayerPlaceholders": "Replaces supported placeholders with player-specific information."}]}, {"index": "52", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/utils/RewardParser.java", "methodName": "com.hm.achievement.utils.RewardParser.replacePlayerPlaceholders", "methodParameterType": "String#Player#", "methodParameterName": "str#player#", "methodBody": "private String replacePlayerPlaceholders(String str, Player player) {\n\t\treturn StringUtils.replaceEach(str,\n\t\t\t\tnew String[] { \"PLAYER_WORLD\", \"PLAYER_X\", \"PLAYER_Y\", \"PLAYER_Z\", \"PLAYER\" },\n\t\t\t\tnew String[] { player.getWorld().getName(), Integer.toString(player.getLocation().getBlockX()),\n\t\t\t\t\t\tInteger.toString(player.getLocation().getBlockY()),\n\t\t\t\t\t\tInteger.toString(player.getLocation().getBlockZ()), player.getName() });\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#ArrayInitializer#ArrayCreation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ArrayInitializer#ArrayCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)ArrayCreation(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayInitializer)ArrayCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Replaces supported placeholders with player-specific information.", "call_func_name": ["org.bukkit.entity.Player.getWorld", "org.bukkit.World.getName", "org.bukkit.entity.Player.getLocation", "org.bukkit.Location.getBlockX", "java.lang.Integer.toString", "org.bukkit.Location.getBlockY", "org.bukkit.Location.getBlockZ", "org.bukkit.entity.Player.getName", "com.hm.apache.commons.lang3.StringUtils.replaceEach"], "call_func_parameter": [[""], [""], [""], [""], ["int"], [""], [""], [""], ["java.lang.String", "java.lang.String[]", "java.lang.String[]"]], "passed_comments": "/"}, {"index": "53", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/utils/InventoryHelper.java", "methodName": "com.hm.achievement.utils.InventoryHelper.getAvailableSpace", "methodParameterType": "Player#ItemStack#", "methodParameterName": "player#newItemStack#", "methodBody": "public int getAvailableSpace(Player player, ItemStack newItemStack) {\n\t\tint availableSpace = 0;\n\t\tPlayerInventory inventory = player.getInventory();\n\t\t// Get all similar item stacks with a similar material in the player's inventory.\n\t\tHashMap<Integer, ? extends ItemStack> itemStacksWithSameMaterial = inventory.all(newItemStack.getType());\n\t\tfor (ItemStack existingItemStack : itemStacksWithSameMaterial.values()) {\n\t\t\t// If matching item stack, add remaining space.\n\t\t\tif (newItemStack.isSimilar(existingItemStack)) {\n\t\t\t\tavailableSpace += (newItemStack.getMaxStackSize() - existingItemStack.getAmount());\n\t\t\t}\n\t\t}\n\n\t\tItemStack[] inventoryContents = serverVersion >= 9 ? inventory.getStorageContents() : inventory.getContents();\n\t\t// Get all empty slots in the player's inventory.\n\t\tfor (ItemStack existingItemStack : inventoryContents) {\n\t\t\tif (existingItemStack == null) {\n\t\t\t\tavailableSpace += newItemStack.getMaxStackSize();\n\t\t\t}\n\t\t}\n\n\t\treturn availableSpace;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#Assignment#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)Assignment)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Calculates the space available to accommodate a new item stack. This method takes both empty slots and existing similar item stacks into account.", "call_func_name": ["org.bukkit.entity.Player.getInventory", "org.bukkit.inventory.ItemStack.getType", "org.bukkit.inventory.PlayerInventory.all", "java.util.HashMap.values", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.bukkit.inventory.ItemStack.isSimilar", "org.bukkit.inventory.ItemStack.getMaxStackSize", "org.bukkit.inventory.ItemStack.getAmount", "org.bukkit.inventory.PlayerInventory.getStorageContents", "org.bukkit.inventory.PlayerInventory.getContents"], "call_func_parameter": [[""], [""], ["org.bukkit.Material"], [""], [""], [""], [""], ["org.bukkit.inventory.ItemStack"], [""], [""], [""], [""]], "passed_comments": "/"}, {"index": "54", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/utils/StatisticIncreaseHandler.java", "methodName": "com.hm.achievement.utils.StatisticIncreaseHandler.checkThresholdsAndAchievements", "methodParameterType": "Player#String#long#", "methodParameterName": "player#categorySubcategory#currentValue#", "methodBody": "public void checkThresholdsAndAchievements(Player player, String categorySubcategory, long currentValue) {\n\t\t// Iterate through all the different thresholds.\n\t\tfor (long threshold : sortedThresholds.get(categorySubcategory)) {\n\t\t\t// Check whether player has met the threshold.\n\t\t\tif (currentValue >= threshold) {\n\t\t\t\tString achievementPath = categorySubcategory + \".\" + threshold;\n\t\t\t\tString achievementName = mainConfig.getString(achievementPath + \".Name\");\n\t\t\t\t// Check whether player has received the achievement.\n\t\t\t\tif (!cacheManager.hasPlayerAchievement(player.getUniqueId(), achievementName)) {\n\t\t\t\t\tString rewardPath = achievementPath + \".Reward\";\n\t\t\t\t\t// Fire achievement event.\n\t\t\t\t\tPlayerAdvancedAchievementEventBuilder playerAdvancedAchievementEventBuilder = new PlayerAdvancedAchievementEventBuilder()\n\t\t\t\t\t\t\t.player(player).name(achievementName)\n\t\t\t\t\t\t\t.displayName(mainConfig.getString(achievementPath + \".DisplayName\"))\n\t\t\t\t\t\t\t.message(mainConfig.getString(achievementPath + \".Message\"))\n\t\t\t\t\t\t\t.commandRewards(rewardParser.getCommandRewards(rewardPath, player))\n\t\t\t\t\t\t\t.commandMessage(rewardParser.getCustomCommandMessages(rewardPath))\n\t\t\t\t\t\t\t.itemReward(rewardParser.getItemReward(rewardPath, player))\n\t\t\t\t\t\t\t.moneyReward(rewardParser.getRewardAmount(rewardPath, \"Money\"))\n\t\t\t\t\t\t\t.experienceReward(rewardParser.getRewardAmount(rewardPath, \"Experience\"))\n\t\t\t\t\t\t\t.maxHealthReward(rewardParser.getRewardAmount(rewardPath, \"IncreaseMaxHealth\"))\n\t\t\t\t\t\t\t.maxOxygenReward(rewardParser.getRewardAmount(rewardPath, \"IncreaseMaxOxygen\"));\n\n\t\t\t\t\tBukkit.getPluginManager().callEvent(playerAdvancedAchievementEventBuilder.build());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Entries in List sorted in increasing order, all subsequent thresholds will fail the condition.\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ReturnStatement)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Compares the current value to the achievement thresholds. If a threshold is reached, awards the achievement if it wasn't previously received.", "call_func_name": ["java.util.Map.get", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.Long.longValue", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.file.CommentedYamlConfiguration.getString", "org.bukkit.entity.Player.getUniqueId", "com.hm.achievement.db.CacheManager.hasPlayerAchievement", "com.hm.achievement.utils.RewardParser.getCommandRewards", "com.hm.achievement.utils.RewardParser.getCustomCommandMessages", "com.hm.achievement.utils.RewardParser.getItemReward", "com.hm.achievement.utils.RewardParser.getRewardAmount", "org.bukkit.Bukkit.getPluginManager", "org.bukkit.plugin.PluginManager.callEvent"], "call_func_parameter": [["java.lang.Object"], [""], [""], [""], [""], [""], ["java.lang.String"], ["long"], [""], ["java.lang.String"], [""], ["java.util.UUID", "java.lang.String"], ["java.lang.String", "org.bukkit.entity.Player"], ["java.lang.String"], ["java.lang.String", "org.bukkit.entity.Player"], ["java.lang.String", "java.lang.String"], [""], ["org.bukkit.event.Event"]], "passed_comments": [{"com.hm.achievement.db.CacheManager.hasPlayerAchievement": "Returns whether player has received a specific achievement."}, {"com.hm.achievement.utils.RewardParser.getCommandRewards": "Extracts the list of commands to be executed as rewards."}, {"com.hm.achievement.utils.RewardParser.getCustomCommandMessages": "Extracts custom command message from config. Might be null."}, {"com.hm.achievement.utils.RewardParser.getItemReward": "Returns an item reward for a given achievement (specified in configuration file)."}, {"com.hm.achievement.utils.RewardParser.getRewardAmount": "Extracts the money, experience, increased max health or increased max oxygen rewards amount from the configuration."}]}, {"index": "55", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/utils/StatisticIncreaseHandler.java", "methodName": "com.hm.achievement.utils.StatisticIncreaseHandler.shouldIncreaseBeTakenIntoAccount", "methodParameterType": "Player#Category#", "methodParameterName": "player#category#", "methodBody": "protected boolean shouldIncreaseBeTakenIntoAccount(Player player, Category category) {\n\t\tGameMode gameMode = player.getGameMode();\n\t\treturn !player.hasMetadata(\"NPC\")\n\t\t\t\t&& player.hasPermission(category.toPermName())\n\t\t\t\t&& (!configRestrictCreative || gameMode != GameMode.CREATIVE)\n\t\t\t\t&& (!configRestrictSpectator || gameMode != GameMode.SPECTATOR)\n\t\t\t\t&& (!configRestrictAdventure || gameMode != GameMode.ADVENTURE)\n\t\t\t\t&& !configExcludedWorlds.contains(player.getWorld().getName());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#ParenthesizedExpression#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#ParenthesizedExpression#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(ParenthesizedExpression(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression)ParenthesizedExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines whether the statistic increase should be taken into account.", "call_func_name": ["org.bukkit.entity.Player.getGameMode", "org.bukkit.entity.Player.hasMetadata", "com.hm.achievement.category.Category.toPermName", "org.bukkit.entity.Player.hasPermission", "org.bukkit.entity.Player.getWorld", "org.bukkit.World.getName", "java.util.Set.contains"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], [""], [""], ["java.lang.Object"]], "passed_comments": [{"com.hm.achievement.category.Category.toPermName": "Converts to permission name: common prefix + name of the category in lower case."}]}, {"index": "56", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/utils/MaterialHelper.java", "methodName": "com.hm.achievement.utils.MaterialHelper.matchMaterial", "methodParameterType": "String#String#", "methodParameterName": "name#usageLocation#", "methodBody": "public Optional<Material> matchMaterial(String name, String usageLocation) {\n\t\treturn Optional.ofNullable(matchMaterial(name, null, usageLocation));\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tries to match a name to a Material instance.", "call_func_name": ["com.hm.achievement.utils.MaterialHelper.matchMaterial", "java.util.Optional.ofNullable"], "call_func_parameter": [["java.lang.String", "org.bukkit.Material", "java.lang.String"], ["java.lang.Object"]], "passed_comments": [{"com.hm.achievement.utils.MaterialHelper.matchMaterial": "Tries to match a name to a Material instance and returns a default value if not found."}]}, {"index": "57", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/utils/MaterialHelper.java", "methodName": "com.hm.achievement.utils.MaterialHelper.matchMaterial", "methodParameterType": "String#Material#String#", "methodParameterName": "name#defaultMaterial#usageLocation#", "methodBody": "public Material matchMaterial(String name, Material defaultMaterial, String usageLocation) {\n\t\tif (name == null || name.isEmpty()) {\n\t\t\tlogger.warning(usageLocation + \" is missing. Please check your configuration.\");\n\t\t\treturn defaultMaterial;\n\t\t}\n\t\tMaterial material = Material.matchMaterial(name);\n\t\tif (material == null && serverVersion >= 13) {\n\t\t\tmaterial = Material.matchMaterial(name, true);\n\t\t}\n\t\tif (material == null) {\n\t\t\tlogger.warning(\"Material \\\"\" + name + \"\\\" used in \" + usageLocation\n\t\t\t\t\t+ \" is invalid. Have you spelt the name correctly and is it available for your Minecraft version?\");\n\t\t\tmaterial = defaultMaterial;\n\t\t}\n\t\treturn material;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tries to match a name to a Material instance and returns a default value if not found.", "call_func_name": ["java.lang.String.isEmpty", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.logging.Logger.warning", "org.bukkit.Material.matchMaterial", "org.bukkit.Material.matchMaterial"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String", "boolean"]], "passed_comments": "/"}, {"index": "58", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/utils/MaterialHelper.java", "methodName": "com.hm.achievement.utils.MaterialHelper.isAnyPotionButWater", "methodParameterType": "ItemStack#", "methodParameterName": "itemStack#", "methodBody": "@SuppressWarnings(\"deprecation\")\n\tpublic boolean isAnyPotionButWater(ItemStack itemStack) {\n\t\tif (itemStack.getType() != Material.POTION) {\n\t\t\treturn false;\n\t\t}\n\t\tif (serverVersion >= 9) {\n\t\t\t// Method getBasePotionData does not exist for versions prior to Minecraft 1.9.\n\t\t\treturn ((PotionMeta) (itemStack.getItemMeta())).getBasePotionData().getType() != PotionType.WATER;\n\t\t}\n\t\treturn itemStack.getDurability() != 0;\n\t}", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ParenthesizedExpression#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(InfixExpression(MethodInvocation(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ParenthesizedExpression)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines whether an item is any Material.POTION apart from water.", "call_func_name": ["org.bukkit.inventory.ItemStack.getType", "org.bukkit.inventory.ItemStack.getItemMeta", "org.bukkit.inventory.meta.PotionMeta.getBasePotionData", "org.bukkit.potion.PotionData.getType", "org.bukkit.inventory.ItemStack.getDurability"], "call_func_parameter": [[""], [""], [""], [""], [""]], "passed_comments": "/"}, {"index": "59", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/utils/NumberHelper.java", "methodName": "com.hm.achievement.utils.NumberHelper.nextMultipleOf9", "methodParameterType": "int#", "methodParameterName": "value#", "methodBody": "public static int nextMultipleOf9(int value) {\n\t\tint multipleOfNine = 9;\n\t\twhile (multipleOfNine < value) {\n\t\t\tmultipleOfNine += 9;\n\t\t}\n\t\treturn multipleOfNine;\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)WhileStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This simple function gets the smallest multiple of 9 greater than its input value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "60", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/gui/GUIItems.java", "methodName": "com.hm.achievement.gui.GUIItems.createItemStack", "methodParameterType": "String#", "methodParameterName": "categoryName#", "methodBody": "@SuppressWarnings(\"deprecation\")\n\tprivate ItemStack createItemStack(String categoryName) {\n\t\tString path = categoryName + \".Item\";\n\t\tMaterial material = materialHelper.matchMaterial(guiConfig.getString(path), Material.BEDROCK,\n\t\t\t\t\"gui.yml (\" + path + \")\");\n\t\tshort metadata = (short) guiConfig.getInt(categoryName + \".Metadata\", 0);\n\t\treturn new ItemStack(material, 1, metadata);\n\t}", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#NumberLiteral#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NumberLiteral#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(NumberLiteral)NumberLiteral)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates an ItemStack based on information extracted from gui.yml.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.file.CommentedYamlConfiguration.getString", "com.hm.achievement.utils.MaterialHelper.matchMaterial", "com.hm.achievement.file.CommentedYamlConfiguration.getInt", "org.bukkit.inventory.ItemStack.<init>"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String", "org.bukkit.Material", "java.lang.String"], ["java.lang.String", "int"], ["org.bukkit.Material", "int", "short"]], "passed_comments": [{"com.hm.achievement.utils.MaterialHelper.matchMaterial": "Tries to match a name to a Material instance and returns a default value if not found."}]}, {"index": "61", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/gui/GUIItems.java", "methodName": "com.hm.achievement.gui.GUIItems.createButton", "methodParameterType": "String#GuiLang#GuiLang#", "methodParameterName": "category#msg#lore#", "methodBody": "private ItemStack createButton(String category, GuiLang msg, GuiLang lore) {\n\t\tItemStack button = createItemStack(category);\n\t\tItemMeta meta = button.getItemMeta();\n\t\tString displayName = ChatColor.translateAlternateColorCodes('&',\n\t\t\t\tStringEscapeUtils.unescapeJava(LangHelper.get(msg, langConfig)));\n\t\tmeta.setDisplayName(displayName);\n\t\tString loreString = ChatColor.translateAlternateColorCodes('&',\n\t\t\t\tStringEscapeUtils.unescapeJava(LangHelper.get(lore, langConfig)));\n\t\tif (!loreString.isEmpty()) {\n\t\t\tmeta.setLore(Collections.singletonList(loreString));\n\t\t}\n\t\tbutton.setItemMeta(meta);\n\t\treturn button;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#CharacterLiteral#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#CharacterLiteral#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates an ItemStack used as a button in the category GUI.", "call_func_name": ["com.hm.achievement.gui.GUIItems.createItemStack", "org.bukkit.inventory.ItemStack.getItemMeta", "com.hm.achievement.lang.LangHelper.get", "com.hm.apache.commons.text.StringEscapeUtils.unescapeJava", "org.bukkit.ChatColor.translateAlternateColorCodes", "org.bukkit.inventory.meta.ItemMeta.setDisplayName", "java.lang.String.isEmpty", "java.util.Collections.singletonList", "org.bukkit.inventory.meta.ItemMeta.setLore", "org.bukkit.inventory.ItemStack.setItemMeta"], "call_func_parameter": [["java.lang.String"], [""], ["com.hm.achievement.lang.Lang", "com.hm.achievement.file.CommentedYamlConfiguration"], ["java.lang.String"], ["char", "java.lang.String"], ["java.lang.String"], [""], ["java.lang.Object"], ["java.util.List"], ["org.bukkit.inventory.meta.ItemMeta"]], "passed_comments": [{"com.hm.achievement.gui.GUIItems.createItemStack": "Creates an ItemStack based on information extracted from gui.yml."}, {"com.hm.achievement.lang.LangHelper.get": "Get the value in language file (with key) or default if not found."}]}, {"index": "62", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/gui/GUIItems.java", "methodName": "com.hm.achievement.gui.GUIItems.buildItemLore", "methodParameterType": "ItemStack#String#int#", "methodParameterName": "item#displayName#totalAchievements#", "methodBody": "private void buildItemLore(ItemStack item, String displayName, int totalAchievements) {\n\t\tItemMeta itemMeta = item.getItemMeta();\n\t\t// Construct title of the category item.\n\t\tif (StringUtils.isBlank(displayName)) {\n\t\t\titemMeta.setDisplayName(\"\");\n\t\t} else {\n\t\t\tString formattedDisplayName = StringUtils.replaceEach(configListAchievementFormat,\n\t\t\t\t\tnew String[] { \"%ICON%\", \"%NAME%\" }, new String[] { configIcon, \"&l\" + displayName + \"&8\" });\n\t\t\titemMeta.setDisplayName(ChatColor.translateAlternateColorCodes('&', formattedDisplayName));\n\t\t}\n\n\t\t// Construct lore of the category item.\n\t\tString amountMessage;\n\t\tif (totalAchievements > 1) {\n\t\t\tamountMessage = StringUtils.replaceOnce(langListAchievementsInCategoryPlural, \"AMOUNT\",\n\t\t\t\t\tInteger.toString(totalAchievements));\n\t\t} else {\n\t\t\tamountMessage = StringUtils.replaceOnce(langListAchievementInCategorySingular, \"AMOUNT\",\n\t\t\t\t\tInteger.toString(totalAchievements));\n\t\t}\n\t\titemMeta.setLore(Arrays.asList(ChatColor.translateAlternateColorCodes('&', \"&8\" + amountMessage)));\n\t\titem.setItemMeta(itemMeta);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#StringLiteral#StringLiteral#ArrayInitializer#ArrayCreation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#ArrayInitializer#ArrayCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#CharacterLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#CharacterLiteral#StringLiteral#SimpleName#InfixExpression#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)ArrayCreation(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ArrayInitializer)ArrayCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the metadata of an ItemStack representing a category in the main GUI.", "call_func_name": ["org.bukkit.inventory.ItemStack.getItemMeta", "com.hm.apache.commons.lang3.StringUtils.isBlank", "org.bukkit.inventory.meta.ItemMeta.setDisplayName", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.apache.commons.lang3.StringUtils.replaceEach", "org.bukkit.ChatColor.translateAlternateColorCodes", "java.lang.Integer.toString", "com.hm.apache.commons.lang3.StringUtils.replaceOnce", "java.util.Arrays.asList", "org.bukkit.inventory.meta.ItemMeta.setLore", "org.bukkit.inventory.ItemStack.setItemMeta"], "call_func_parameter": [[""], ["java.lang.CharSequence"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String[]", "java.lang.String[]"], ["char", "java.lang.String"], ["int"], ["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.Object[]"], ["java.util.List"], ["org.bukkit.inventory.meta.ItemMeta"]], "passed_comments": "/"}, {"index": "63", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/gui/CategoryGUI.java", "methodName": "com.hm.achievement.gui.CategoryGUI.displayCategoryGUI", "methodParameterType": "ItemStack#Player#int#", "methodParameterName": "item#player#requestedPage#", "methodBody": "public void displayCategoryGUI(ItemStack item, Player player, int requestedPage) {\n\t\tfor (Entry<MultipleAchievements, ItemStack> entry : guiItems.getMultipleAchievementItems().entrySet()) {\n\t\t\tif (entry.getValue().isSimilar(item)) {\n\t\t\t\tString categoryName = entry.getKey().toString();\n\t\t\t\tList<String> achievementPaths = getSortedMultipleAchievementPaths(categoryName);\n\t\t\t\tMap<String, Long> subcategoriesToStatistics = getMultipleStatisticsMapping(entry.getKey(), player);\n\t\t\t\tdisplayPage(categoryName, player, subcategoriesToStatistics, requestedPage, item, achievementPaths);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tfor (Entry<NormalAchievements, ItemStack> entry : guiItems.getNormalAchievementItems().entrySet()) {\n\t\t\tif (entry.getValue().isSimilar(item)) {\n\t\t\t\tString categoryName = entry.getKey().toString();\n\t\t\t\tList<String> achievementThresholds = getSortedNormalAchievementThresholds(categoryName);\n\t\t\t\tlong statistic = getNormalStatistic(entry.getKey(), player);\n\t\t\t\tdisplayPage(categoryName, player, Collections.singletonMap(NO_SUBCATEGORY, statistic), requestedPage, item,\n\t\t\t\t\t\tachievementThresholds);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tList<String> achievementPaths = new ArrayList<>(mainConfig.getShallowKeys(CommandAchievements.COMMANDS.toString()));\n\t\tdisplayPage(CommandAchievements.COMMANDS.toString(), player, Collections.singletonMap(NO_SUBCATEGORY, NO_STAT),\n\t\t\t\trequestedPage, item, achievementPaths);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Displays a category GUI, containing all the achievements from a given category.", "call_func_name": ["com.hm.achievement.gui.GUIItems.getMultipleAchievementItems", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.bukkit.inventory.ItemStack.isSimilar", "com.hm.achievement.category.MultipleAchievements.toString", "com.hm.achievement.gui.CategoryGUI.getSortedMultipleAchievementPaths", "com.hm.achievement.gui.CategoryGUI.getMultipleStatisticsMapping", "com.hm.achievement.gui.CategoryGUI.displayPage", "com.hm.achievement.gui.GUIItems.getNormalAchievementItems", "com.hm.achievement.category.NormalAchievements.toString", "com.hm.achievement.gui.CategoryGUI.getSortedNormalAchievementThresholds", "com.hm.achievement.gui.CategoryGUI.getNormalStatistic", "java.lang.Long.valueOf", "java.util.Collections.singletonMap", "com.hm.achievement.category.CommandAchievements.toString", "com.hm.achievement.file.CommentedYamlConfiguration.getShallowKeys", "java.util.ArrayList.<init>"], "call_func_parameter": [[""], [""], [""], [""], [""], ["org.bukkit.inventory.ItemStack"], [""], ["java.lang.String"], ["com.hm.achievement.category.MultipleAchievements", "org.bukkit.entity.Player"], ["java.lang.String", "org.bukkit.entity.Player", "java.util.Map", "int", "org.bukkit.inventory.ItemStack", "java.util.List"], [""], [""], ["java.lang.String"], ["com.hm.achievement.category.NormalAchievements", "org.bukkit.entity.Player"], ["long"], ["java.lang.Object", "java.lang.Object"], [""], ["java.lang.String"], ["java.util.Collection"]], "passed_comments": [{"com.hm.achievement.gui.CategoryGUI.getSortedMultipleAchievementPaths": "Gets a sorted list of paths (subcategory + threshold) for a Multiple category."}, {"com.hm.achievement.gui.CategoryGUI.getMultipleStatisticsMapping": "Gets the player's statistics for each subcategory in the Multiple category."}, {"com.hm.achievement.gui.CategoryGUI.displayPage": "Displays a category GUI page, containing up to MAX_PER_PAGE achievements from a given category."}, {"com.hm.achievement.gui.CategoryGUI.getSortedNormalAchievementThresholds": "Gets a sorted list of thresholds for a Normal category."}, {"com.hm.achievement.gui.CategoryGUI.getNormalStatistic": "Gets the player's statistic for a Normal category."}]}, {"index": "64", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/gui/CategoryGUI.java", "methodName": "com.hm.achievement.gui.CategoryGUI.displayPage", "methodParameterType": "String#Player#Map<String,Long>#int#ItemStack#List<String>#", "methodParameterName": "categoryName#player#subcategoriesToStatistics#requestedIndex#clickedItem#achievementPaths#", "methodBody": "private void displayPage(String categoryName, Player player, Map<String, Long> subcategoriesToStatistics,\n\t\t\tint requestedIndex, ItemStack clickedItem, List<String> achievementPaths) {\n\t\tint pageIndex = getPageIndex(requestedIndex, achievementPaths.size());\n\t\tint pageStart = MAX_ACHIEVEMENTS_PER_PAGE * pageIndex;\n\t\tint pageEnd = Math.min(MAX_ACHIEVEMENTS_PER_PAGE * (pageIndex + 1), achievementPaths.size());\n\t\tint navigationItems = achievementPaths.size() > MAX_ACHIEVEMENTS_PER_PAGE ? 3 : 1;\n\n\t\t// Create a new chest-like inventory as small as possible whilst still containing the category item, all page\n\t\t// achievements and the navigation items.\n\t\tint guiSize = Math.min(NumberHelper.nextMultipleOf9(achievementPaths.size() + navigationItems + 1), MAX_PAGE_SIZE);\n\t\tAchievementInventoryHolder inventoryHolder = new AchievementInventoryHolder(pageIndex);\n\t\tInventory inventory = Bukkit.createInventory(inventoryHolder, guiSize, langListGUITitle);\n\t\tinventoryHolder.setInventory(inventory);\n\t\t// Persist clicked item (ie. category's item in the main GUI) as first item in the category GUI.\n\t\tinventory.setItem(0, clickedItem);\n\n\t\tString previousItemDate = null;\n\t\tString previousSubcategory = NO_SUBCATEGORY;\n\t\tif (pageStart > 0) {\n\t\t\tString previousAchievement = achievementPaths.get(pageStart - 1);\n\t\t\tString achName = mainConfig.getString(categoryName + '.' + previousAchievement + \".Name\", \"\");\n\t\t\tpreviousItemDate = databaseManager.getPlayerAchievementDate(player.getUniqueId(), achName);\n\t\t\tif (previousAchievement.contains(\".\")) {\n\t\t\t\tpreviousSubcategory = StringUtils.substringBefore(previousAchievement, \".\");\n\t\t\t}\n\t\t}\n\t\t// Populate the current GUI page with all of the achievements for the category.\n\t\tfor (int index = pageStart; index < pageEnd; ++index) {\n\t\t\t// Path can either be a threshold (eg '10', or a subcategory and threshold (eg 'skeleton.10').\n\t\t\tString path = achievementPaths.get(index);\n\t\t\tString subcategory = path.contains(\".\") ? StringUtils.substringBefore(path, \".\") : NO_SUBCATEGORY;\n\t\t\tlong statistic = subcategoriesToStatistics.get(subcategory);\n\t\t\tString achName = mainConfig.getString(categoryName + '.' + path + \".Name\", \"\");\n\t\t\tString receptionDate = databaseManager.getPlayerAchievementDate(player.getUniqueId(), achName);\n\n\t\t\tboolean ineligibleSeriesItem = true;\n\t\t\tif (statistic == NO_STAT || receptionDate != null || previousItemDate != null\n\t\t\t\t\t|| index == pageStart && pageStart == 0 || !previousSubcategory.equals(subcategory)) {\n\t\t\t\t// Commands achievement OR achievement has been completed OR previous achievement has been completed OR\n\t\t\t\t// first achievement in the category OR different subcategory.\n\t\t\t\tineligibleSeriesItem = false;\n\t\t\t}\n\n\t\t\tString nameToDisplay = getNameToDisplay(categoryName, path, achName);\n\t\t\tString descriptionToDisplay = getDescriptionToDisplay(categoryName, path, receptionDate != null);\n\t\t\tList<String> lore = buildLore(categoryName, descriptionToDisplay, path, receptionDate, statistic,\n\t\t\t\t\tineligibleSeriesItem, player);\n\t\t\tinsertAchievement(inventory, index - pageStart + 1, statistic, nameToDisplay, receptionDate,\n\t\t\t\t\tineligibleSeriesItem, lore);\n\n\t\t\tpreviousItemDate = receptionDate;\n\t\t\tpreviousSubcategory = subcategory;\n\t\t}\n\t\t// Add navigation items.\n\t\tif (navigationItems > 1) {\n\t\t\tinventory.setItem(pageEnd - pageStart + 1, guiItems.getPreviousButton());\n\t\t\tinventory.setItem(pageEnd - pageStart + 2, guiItems.getNextButton());\n\t\t\tinventory.setItem(pageEnd - pageStart + 3, guiItems.getBackButton());\n\t\t} else {\n\t\t\tinventory.setItem(pageEnd - pageStart + 1, guiItems.getBackButton());\n\t\t}\n\n\t\t// Display page.\n\t\tplayer.openInventory(inventory);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#NumberLiteral#NumberLiteral#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#CharacterLiteral#SimpleName#StringLiteral#InfixExpression#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#CharacterLiteral#SimpleName#StringLiteral#InfixExpression#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)ForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Displays a category GUI page, containing up to MAX_PER_PAGE achievements from a given category.", "call_func_name": ["java.util.List.size", "com.hm.achievement.gui.CategoryGUI.getPageIndex", "java.lang.Math.min", "com.hm.achievement.utils.NumberHelper.nextMultipleOf9", "com.hm.achievement.gui.AchievementInventoryHolder.<init>", "org.bukkit.Bukkit.createInventory", "com.hm.achievement.gui.AchievementInventoryHolder.setInventory", "org.bukkit.inventory.Inventory.setItem", "java.util.List.get", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.file.CommentedYamlConfiguration.getString", "org.bukkit.entity.Player.getUniqueId", "com.hm.achievement.db.AbstractDatabaseManager.getPlayerAchievementDate", "java.lang.String.contains", "com.hm.apache.commons.lang3.StringUtils.substringBefore", "java.util.Map.get", "java.lang.Long.longValue", "java.lang.String.equals", "com.hm.achievement.gui.CategoryGUI.getNameToDisplay", "com.hm.achievement.gui.CategoryGUI.getDescriptionToDisplay", "com.hm.achievement.gui.CategoryGUI.buildLore", "com.hm.achievement.gui.CategoryGUI.insertAchievement", "com.hm.achievement.gui.GUIItems.getPreviousButton", "com.hm.achievement.gui.GUIItems.getNextButton", "com.hm.achievement.gui.GUIItems.getBackButton", "org.bukkit.entity.Player.openInventory"], "call_func_parameter": [[""], ["int", "int"], ["int", "int"], ["int"], ["int"], ["org.bukkit.inventory.InventoryHolder", "int", "java.lang.String"], ["org.bukkit.inventory.Inventory"], ["int", "org.bukkit.inventory.ItemStack"], ["int"], [""], ["java.lang.String"], ["char"], [""], ["java.lang.String", "java.lang.String"], [""], ["java.util.UUID", "java.lang.String"], ["java.lang.CharSequence"], ["java.lang.String", "java.lang.String"], ["java.lang.Object"], [""], ["java.lang.Object"], ["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String", "boolean"], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "long", "boolean", "org.bukkit.entity.Player"], ["org.bukkit.inventory.Inventory", "int", "long", "java.lang.String", "java.lang.String", "boolean", "java.util.List"], [""], [""], [""], ["org.bukkit.inventory.Inventory"]], "passed_comments": [{"com.hm.achievement.gui.CategoryGUI.getPageIndex": "Computes the page index to display given a requested page and the total number of achievements in the category. The returned page index must be within a meaningful range, such that there are achievements to display on the page."}, {"com.hm.achievement.utils.NumberHelper.nextMultipleOf9": "This simple function gets the smallest multiple of 9 greater than its input value."}, {"com.hm.achievement.db.AbstractDatabaseManager.getPlayerAchievementDate": "Gets the reception date of a specific achievement."}, {"com.hm.achievement.gui.CategoryGUI.getNameToDisplay": "Extracts the achievement name that should be shown in the item lore."}, {"com.hm.achievement.gui.CategoryGUI.getDescriptionToDisplay": "Extracts the achievement message that should be shown in the item lore."}, {"com.hm.achievement.gui.CategoryGUI.buildLore": "Creates the lore for the current achievement, containing information about the progress, date of reception, description, rewards."}, {"com.hm.achievement.gui.CategoryGUI.insertAchievement": "Creates a GUI item for a given achievement."}]}, {"index": "65", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/gui/CategoryGUI.java", "methodName": "com.hm.achievement.gui.CategoryGUI.insertAchievement", "methodParameterType": "Inventory#int#long#String#String#boolean#List<String>#", "methodParameterName": "gui#position#statistic#name#date#ineligibleSeriesItem#lore#", "methodBody": "private void insertAchievement(Inventory gui, int position, long statistic, String name, String date,\n\t\t\tboolean ineligibleSeriesItem, List<String> lore) {\n\t\t// Display an item depending on whether the achievement was received or not, or whether progress was started.\n\t\t// Clone in order to work with an independent set of metadata.\n\t\tItemStack achItem;\n\t\tif (date != null) {\n\t\t\tachItem = guiItems.getAchievementReceived().clone();\n\t\t} else if (statistic > 0) {\n\t\t\tachItem = guiItems.getAchievementStarted().clone();\n\t\t} else {\n\t\t\tachItem = guiItems.getAchievementNotStarted().clone();\n\t\t}\n\n\t\t// Set name of the achievement. The style depends whether it was received or not and whether the user has set\n\t\t// obfuscateNotReceived and/or obfuscateProgressiveAchievements in the config.\n\t\tItemMeta itemMeta = achItem.getItemMeta();\n\t\tif (date != null) {\n\t\t\titemMeta.setDisplayName(translateColorCodes(langListAchievementReceived + name));\n\t\t} else if (configObfuscateNotReceived || (configObfuscateProgressiveAchievements && ineligibleSeriesItem)) {\n\t\t\titemMeta.setDisplayName(translateColorCodes(langListAchievementNotReceived\n\t\t\t\t\t+ \"&k\" + StringHelper.removeFormattingCodes(name)));\n\t\t} else {\n\t\t\titemMeta.setDisplayName(translateColorCodes(StringEscapeUtils.unescapeJava(langListAchievementNotReceived\n\t\t\t\t\t+ \"&o\" + StringHelper.removeFormattingCodes(name))));\n\t\t}\n\n\t\titemMeta.setLore(lore);\n\t\tachItem.setItemMeta(itemMeta);\n\t\tif (configNumberedItemsInList) {\n\t\t\tachItem.setAmount(position);\n\t\t}\n\t\tgui.setItem(position, achItem);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a GUI item for a given achievement.", "call_func_name": ["com.hm.achievement.gui.GUIItems.getAchievementReceived", "org.bukkit.inventory.ItemStack.clone", "com.hm.achievement.gui.GUIItems.getAchievementStarted", "com.hm.achievement.gui.GUIItems.getAchievementNotStarted", "org.bukkit.inventory.ItemStack.getItemMeta", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.gui.CategoryGUI.translateColorCodes", "org.bukkit.inventory.meta.ItemMeta.setDisplayName", "com.hm.achievement.utils.StringHelper.removeFormattingCodes", "com.hm.apache.commons.text.StringEscapeUtils.unescapeJava", "org.bukkit.inventory.meta.ItemMeta.setLore", "org.bukkit.inventory.ItemStack.setItemMeta", "org.bukkit.inventory.ItemStack.setAmount", "org.bukkit.inventory.Inventory.setItem"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.util.List"], ["org.bukkit.inventory.meta.ItemMeta"], ["int"], ["int", "org.bukkit.inventory.ItemStack"]], "passed_comments": "/"}, {"index": "66", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/gui/CategoryGUI.java", "methodName": "com.hm.achievement.gui.CategoryGUI.getSortedMultipleAchievementPaths", "methodParameterType": "String#", "methodParameterName": "categoryName#", "methodBody": "public List<String> getSortedMultipleAchievementPaths(String categoryName) {\n\t\tList<String> paths = new ArrayList<>();\n\t\t// Populate the achievements from all the sub-categories in the category.\n\t\tfor (String subcategory : mainConfig.getShallowKeys(categoryName)) {\n\t\t\tList<String> subcategoryAchievements = new ArrayList<>();\n\t\t\tfor (long threshold : sortedThresholds.get(categoryName + \".\" + subcategory)) {\n\t\t\t\tsubcategoryAchievements.add(subcategory + \".\" + threshold);\n\t\t\t}\n\t\t\tpaths.addAll(subcategoryAchievements);\n\t\t}\n\t\treturn paths;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets a sorted list of paths (subcategory + threshold) for a Multiple category.", "call_func_name": ["java.util.ArrayList.<init>", "com.hm.achievement.file.CommentedYamlConfiguration.getShallowKeys", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.Map.get", "java.util.List.iterator", "java.lang.Long.longValue", "java.lang.StringBuilder.append", "java.util.List.add", "java.util.List.addAll"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.Object"], [""], [""], ["long"], ["java.lang.Object"], ["java.util.Collection"]], "passed_comments": "/"}, {"index": "67", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/gui/CategoryGUI.java", "methodName": "com.hm.achievement.gui.CategoryGUI.getSortedNormalAchievementThresholds", "methodParameterType": "String#", "methodParameterName": "categoryName#", "methodBody": "public List<String> getSortedNormalAchievementThresholds(String categoryName) {\n\t\treturn sortedThresholds.get(categoryName).stream().map(String::valueOf).collect(Collectors.toList());\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets a sorted list of thresholds for a Normal category.", "call_func_name": ["java.util.Map.get", "java.util.List.stream", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect"], "call_func_parameter": [["java.lang.Object"], [""], [""], ["java.util.function.Function"], [""], ["java.util.stream.Collector"]], "passed_comments": "/"}, {"index": "68", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/gui/CategoryGUI.java", "methodName": "com.hm.achievement.gui.CategoryGUI.getMultipleStatisticsMapping", "methodParameterType": "MultipleAchievements#Player#", "methodParameterName": "category#player#", "methodBody": "public Map<String, Long> getMultipleStatisticsMapping(MultipleAchievements category, Player player) {\n\t\tMap<String, Long> subcategoriesToStatistics = new HashMap<>();\n\t\tfor (String subcategory : mainConfig.getShallowKeys(category.toString())) {\n\t\t\tlong statistic = cacheManager.getAndIncrementStatisticAmount(category, subcategory, player.getUniqueId(), 0);\n\t\t\tsubcategoriesToStatistics.put(subcategory, statistic);\n\t\t}\n\t\treturn subcategoriesToStatistics;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the player's statistics for each subcategory in the Multiple category.", "call_func_name": ["java.util.HashMap.<init>", "com.hm.achievement.category.MultipleAchievements.toString", "com.hm.achievement.file.CommentedYamlConfiguration.getShallowKeys", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.bukkit.entity.Player.getUniqueId", "com.hm.achievement.db.CacheManager.getAndIncrementStatisticAmount", "java.lang.Long.valueOf", "java.util.Map.put"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], [""], [""], [""], ["com.hm.achievement.category.MultipleAchievements", "java.lang.String", "java.util.UUID", "int"], ["long"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"com.hm.achievement.db.CacheManager.getAndIncrementStatisticAmount": "Increases the statistic for a MultipleAchievement by the given value and returns the updated statistic value. Calls the database if not found in the cache."}]}, {"index": "69", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/gui/CategoryGUI.java", "methodName": "com.hm.achievement.gui.CategoryGUI.getNormalStatistic", "methodParameterType": "NormalAchievements#Player#", "methodParameterName": "category#player#", "methodBody": "public long getNormalStatistic(NormalAchievements category, Player player) {\n\t\tif (category == NormalAchievements.CONNECTIONS) {\n\t\t\treturn databaseManager.getConnectionsAmount(player.getUniqueId());\n\t\t}\n\t\treturn cacheManager.getAndIncrementStatisticAmount(category, player.getUniqueId(), 0);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the player's statistic for a Normal category.", "call_func_name": ["org.bukkit.entity.Player.getUniqueId", "com.hm.achievement.db.AbstractDatabaseManager.getConnectionsAmount", "com.hm.achievement.db.CacheManager.getAndIncrementStatisticAmount"], "call_func_parameter": [[""], ["java.util.UUID"], ["com.hm.achievement.category.NormalAchievements", "java.util.UUID", "int"]], "passed_comments": [{"com.hm.achievement.db.AbstractDatabaseManager.getConnectionsAmount": "Returns a player's number of connections on separate days (used by GUI)."}, {"com.hm.achievement.db.CacheManager.getAndIncrementStatisticAmount": "Increases the statistic for a NormalAchievement by the given value and returns the updated statistic value. Calls the database if not found in the cache."}]}, {"index": "70", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/gui/CategoryGUI.java", "methodName": "com.hm.achievement.gui.CategoryGUI.getNameToDisplay", "methodParameterType": "String#String#String#", "methodParameterName": "category#path#achName#", "methodBody": "private String getNameToDisplay(String category, String path, String achName) {\n\t\tString displayName = mainConfig.getString(category + '.' + path + \".DisplayName\", \"\");\n\t\tif (StringUtils.isNotBlank(displayName)) {\n\t\t\t// Display name is defined; use it.\n\t\t\treturn displayName;\n\t\t}\n\t\treturn achName;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#CharacterLiteral#SimpleName#StringLiteral#InfixExpression#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extracts the achievement name that should be shown in the item lore.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.file.CommentedYamlConfiguration.getString", "com.hm.apache.commons.lang3.StringUtils.isNotBlank"], "call_func_parameter": [[""], ["java.lang.String"], ["char"], [""], ["java.lang.String", "java.lang.String"], ["java.lang.CharSequence"]], "passed_comments": "/"}, {"index": "71", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/gui/CategoryGUI.java", "methodName": "com.hm.achievement.gui.CategoryGUI.getDescriptionToDisplay", "methodParameterType": "String#String#boolean#", "methodParameterName": "category#path#completed#", "methodBody": "private String getDescriptionToDisplay(String category, String path, boolean completed) {\n\t\tString goal = mainConfig.getString(category + '.' + path + \".Goal\", \"\");\n\t\tif (StringUtils.isNotBlank(goal) && !completed) {\n\t\t\t// Show the goal below the achievement name.\n\t\t\treturn goal;\n\t\t}\n\t\t// Show the achievement message below the achievement name.\n\t\treturn mainConfig.getString(category + '.' + path + \".Message\", \"\");\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#CharacterLiteral#SimpleName#StringLiteral#InfixExpression#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#PrefixExpression#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#CharacterLiteral#SimpleName#StringLiteral#InfixExpression#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extracts the achievement message that should be shown in the item lore.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.file.CommentedYamlConfiguration.getString", "com.hm.apache.commons.lang3.StringUtils.isNotBlank"], "call_func_parameter": [[""], ["java.lang.String"], ["char"], [""], ["java.lang.String", "java.lang.String"], ["java.lang.CharSequence"]], "passed_comments": "/"}, {"index": "72", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/gui/CategoryGUI.java", "methodName": "com.hm.achievement.gui.CategoryGUI.getPageIndex", "methodParameterType": "int#int#", "methodParameterName": "requestedPage#totalAchievements#", "methodBody": "private int getPageIndex(int requestedPage, int totalAchievements) {\n\t\tif (requestedPage <= 0) {\n\t\t\treturn 0;\n\t\t} else if (totalAchievements <= MAX_ACHIEVEMENTS_PER_PAGE * requestedPage) {\n\t\t\treturn requestedPage - 1;\n\t\t}\n\t\treturn requestedPage;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#NumberLiteral#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#InfixExpression#InfixExpression#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#Block#IfStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)IfStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Computes the page index to display given a requested page and the total number of achievements in the category. The returned page index must be within a meaningful range, such that there are achievements to display on the page.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "73", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/gui/CategoryGUI.java", "methodName": "com.hm.achievement.gui.CategoryGUI.buildLore", "methodParameterType": "String#String#String#String#long#boolean#Player#", "methodParameterName": "categoryName#description#path#date#statistic#ineligibleSeriesItem#player#", "methodBody": "private List<String> buildLore(String categoryName, String description, String path, String date, long statistic,\n\t\t\tboolean ineligibleSeriesItem, Player player) {\n\t\tList<String> lore = new ArrayList<>();\n\t\tlore.add(\"\");\n\n\t\tif (date != null) {\n\t\t\tlore.add(langListDescription);\n\t\t\tlore.add(translateColorCodes(\"&r\" + description));\n\t\t\tlore.add(\"\");\n\t\t\tlore.add(langListReception);\n\t\t\tlore.add(translateColorCodes(\"&r\" + date));\n\t\t\tlore.add(\"\");\n\t\t} else {\n\t\t\tlore.add(langListGoal);\n\t\t\tString strippedAchMessage = StringHelper.removeFormattingCodes(description);\n\t\t\tif (configObfuscateNotReceived || (configObfuscateProgressiveAchievements && ineligibleSeriesItem)) {\n\t\t\t\tlore.add(translateColorCodes(configListColorNotReceived + \"&k\" + randomiseParts(strippedAchMessage)));\n\t\t\t} else {\n\t\t\t\tlore.add(translateColorCodes(configListColorNotReceived + \"&o\" + strippedAchMessage));\n\t\t\t}\n\t\t\tlore.add(\"\");\n\t\t\t// Display progress if not Commands category.\n\t\t\tif (!configObfuscateNotReceived && statistic != NO_STAT) {\n\t\t\t\tString threshold = StringUtils.defaultIfEmpty(StringUtils.substringAfter(path, \".\"), path);\n\t\t\t\tboolean timeStat = NormalAchievements.PLAYEDTIME.toString().equals(categoryName);\n\t\t\t\tlore.add(langListProgress);\n\t\t\t\tlore.add(translateColorCodes(constructProgressBar(strippedAchMessage, threshold, statistic, timeStat)));\n\t\t\t\tlore.add(\"\");\n\t\t\t}\n\t\t}\n\n\t\tList<String> rewards = rewardParser.getRewardListing(categoryName + '.' + path + \".Reward\", player);\n\t\t// Add the rewards information.\n\t\tif (!rewards.isEmpty() && !configHideRewardDisplayInList) {\n\t\t\tlore.add(langListReward);\n\t\t\tString dot;\n\t\t\tif (date != null) {\n\t\t\t\tdot = StringEscapeUtils.unescapeJava(\"&r\\u25CF \");\n\t\t\t} else {\n\t\t\t\tdot = StringEscapeUtils.unescapeJava(configListColorNotReceived + \"\\u25CF &o\");\n\t\t\t}\n\t\t\tfor (String reward : rewards) {\n\t\t\t\tlore.add(translateColorCodes(dot + reward));\n\t\t\t}\n\t\t}\n\t\treturn lore;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#CharacterLiteral#SimpleName#StringLiteral#InfixExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates the lore for the current achievement, containing information about the progress, date of reception, description, rewards.", "call_func_name": ["java.util.ArrayList.<init>", "java.util.List.add", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.gui.CategoryGUI.translateColorCodes", "com.hm.achievement.utils.StringHelper.removeFormattingCodes", "java.lang.StringBuilder.append", "com.hm.achievement.gui.CategoryGUI.randomiseParts", "com.hm.apache.commons.lang3.StringUtils.substringAfter", "com.hm.apache.commons.lang3.StringUtils.defaultIfEmpty", "com.hm.achievement.category.NormalAchievements.toString", "java.lang.String.equals", "com.hm.achievement.gui.CategoryGUI.constructProgressBar", "java.lang.StringBuilder.append", "com.hm.achievement.utils.RewardParser.getRewardListing", "java.util.List.isEmpty", "com.hm.apache.commons.text.StringEscapeUtils.unescapeJava", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next"], "call_func_parameter": [[""], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.CharSequence", "java.lang.CharSequence"], [""], ["java.lang.Object"], ["java.lang.String", "java.lang.String", "long", "boolean"], ["char"], ["java.lang.String", "org.bukkit.entity.Player"], [""], ["java.lang.String"], [""], [""], [""]], "passed_comments": [{"com.hm.achievement.gui.CategoryGUI.randomiseParts": "Randomises the contents of a string; preserves spaces."}, {"com.hm.achievement.gui.CategoryGUI.constructProgressBar": "Constructs the progress bar to be displayed in an achievement's item lore."}, {"com.hm.achievement.utils.RewardParser.getRewardListing": "Constructs the listing of an achievement's rewards with strings coming from language file."}]}, {"index": "74", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/gui/CategoryGUI.java", "methodName": "com.hm.achievement.gui.CategoryGUI.constructProgressBar", "methodParameterType": "String#String#long#boolean#", "methodParameterName": "achMessage#level#statistic#time#", "methodBody": "private String constructProgressBar(String achMessage, String level, long statistic, boolean time) {\n\t\tStringBuilder barDisplay = new StringBuilder(configListColorNotReceived.toString()).append(\"[\");\n\t\t// Length of the progress bar; we make it the same size as Goal/Message.\n\t\tint textSize;\n\t\t// MinecraftFont essentially supports latin alphabet characters. If invalid characters are found just use\n\t\t// number of chars.\n\t\tif (FONT.isValid(achMessage)) {\n\t\t\ttextSize = FONT.getWidth(StringHelper.removeFormattingCodes(achMessage));\n\t\t} else {\n\t\t\ttextSize = achMessage.length() * 3;\n\t\t}\n\n\t\tlong levelInt = Long.parseLong(level);\n\t\tString middleText;\n\t\tdouble statisticDouble;\n\t\tif (time) {\n\t\t\t// Convert from millis to hours.\n\t\t\tstatisticDouble = statistic / 3600000.0;\n\t\t\t// Display one floating digit in the progress bar.\n\t\t\tmiddleText = \" \" + String.format(\"%.1f\", statisticDouble) + \"/\" + levelInt + \" \";\n\t\t} else {\n\t\t\tmiddleText = \" \" + statistic + \"/\" + levelInt + \" \";\n\t\t\t// Cast to double.\n\t\t\tstatisticDouble = statistic;\n\t\t}\n\t\tint middleTextSize = FONT.getWidth(middleText);\n\t\tmiddleText = configListColorNotReceived + \"&o\" + middleText;\n\n\t\tboolean hasDisplayedMiddleText = false;\n\t\tint i = 1;\n\t\twhile (i < textSize / 2) {\n\t\t\tif (configEnrichedProgressBars && !hasDisplayedMiddleText && i >= (textSize - middleTextSize) / 4) {\n\t\t\t\t// Middle reached: append enriched statistic information.\n\t\t\t\tbarDisplay.append(middleText);\n\t\t\t\t// Do not display middleText again.\n\t\t\t\thasDisplayedMiddleText = true;\n\t\t\t\t// Iterate a number of times equal to the number of iterations so far to have the same number of\n\t\t\t\t// vertical bars left and right from the middle text.\n\t\t\t\ti = textSize / 2 + 1 - i;\n\t\t\t} else {\n\t\t\t\tif (i < (((double) textSize / 2 - 1) * statisticDouble) / levelInt) {\n\t\t\t\t\t// Standard color: progress by user.\n\t\t\t\t\tbarDisplay.append(configColor);\n\t\t\t\t} else {\n\t\t\t\t\t// Not received color: amount not yet reached by user.\n\t\t\t\t\tbarDisplay.append(configListColorNotReceived);\n\t\t\t\t}\n\t\t\t\tbarDisplay.append(\"|\");\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn barDisplay.append(configListColorNotReceived).append(\"]\").toString();\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#StringLiteral#SimpleName#StringLiteral#InfixExpression#Assignment#ExpressionStatement#Block#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#NumberLiteral#InfixExpression#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#SimpleName#PrimitiveType#SimpleName#CastExpression#NumberLiteral#InfixExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#IfStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression(InfixExpression(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block(Block(IfStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)IfStatement)Block)WhileStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Constructs the progress bar to be displayed in an achievement's item lore.", "call_func_name": ["org.bukkit.ChatColor.toString", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.bukkit.map.MinecraftFont.isValid", "com.hm.achievement.utils.StringHelper.removeFormattingCodes", "org.bukkit.map.MinecraftFont.getWidth", "java.lang.String.length", "java.lang.Long.parseLong", "java.lang.StringBuilder.<init>", "java.lang.Double.valueOf", "java.lang.String.format", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.StringBuilder.append"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["double"], ["java.lang.String", "java.lang.Object[]"], ["long"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "75", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/gui/CategoryGUI.java", "methodName": "com.hm.achievement.gui.CategoryGUI.randomiseParts", "methodParameterType": "String#", "methodParameterName": "text#", "methodBody": "private String randomiseParts(String text) {\n\t\tif (text.isEmpty()) {\n\t\t\treturn \"\";\n\t\t}\n\t\tStringBuilder randomisedText = new StringBuilder();\n\t\tfor (String part : StringUtils.split(text)) {\n\t\t\trandomisedText.append(RandomStringUtils.randomAlphabetic(part.length())).append(' ');\n\t\t}\n\t\treturn randomisedText.substring(0, randomisedText.length() - 1);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#StringLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Randomises the contents of a string; preserves spaces.", "call_func_name": ["java.lang.String.isEmpty", "java.lang.StringBuilder.<init>", "com.hm.apache.commons.lang3.StringUtils.split", "java.lang.String.length", "com.hm.apache.commons.lang3.RandomStringUtils.randomAlphabetic", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.length", "java.lang.StringBuilder.substring"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["int"], ["java.lang.String"], ["char"], [""], ["int", "int"]], "passed_comments": "/"}, {"index": "76", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/gui/MainGUI.java", "methodName": "com.hm.achievement.gui.MainGUI.displayMainGUI", "methodParameterType": "Player#", "methodParameterName": "player#", "methodBody": "public void displayMainGUI(Player player) {\n\t\tint totalEnabledCategories = MultipleAchievements.values().length + NormalAchievements.values().length + 1\n\t\t\t\t- disabledCategories.size();\n\t\tAchievementInventoryHolder inventoryHolder = new AchievementInventoryHolder();\n\t\tint guiSize = NumberHelper.nextMultipleOf9(totalEnabledCategories);\n\t\tInventory mainGUI = Bukkit.createInventory(inventoryHolder, guiSize, langListGUITitle);\n\t\tinventoryHolder.setInventory(mainGUI);\n\n\t\tint displayedSoFar = 0;\n\t\t// Display Multiple categories in the GUI.\n\t\tfor (Entry<MultipleAchievements, ItemStack> multipleEntry : guiItems.getMultipleAchievementItems().entrySet()) {\n\t\t\tItemStack item = multipleEntry.getValue();\n\t\t\tMultipleAchievements category = multipleEntry.getKey();\n\t\t\tif (shouldDisplayCategory(item, player, category)) {\n\t\t\t\tdisplayMultipleCategory(item, mainGUI, player, category.toString(), displayedSoFar);\n\t\t\t\t++displayedSoFar;\n\t\t\t}\n\t\t}\n\t\t// Display Normal categories in the GUI.\n\t\tfor (Entry<NormalAchievements, ItemStack> normalEntry : guiItems.getNormalAchievementItems().entrySet()) {\n\t\t\tItemStack item = normalEntry.getValue();\n\t\t\tNormalAchievements category = normalEntry.getKey();\n\t\t\tif (shouldDisplayCategory(item, player, category)) {\n\t\t\t\tdisplayNormalCategory(item, mainGUI, player, category.toString(), displayedSoFar);\n\t\t\t\t++displayedSoFar;\n\t\t\t}\n\t\t}\n\t\t// Display the Commands category.\n\t\tif (shouldDisplayCategory(guiItems.getCommandsAchievementsItem(), player, CommandAchievements.COMMANDS)) {\n\t\t\tdisplayNormalCategory(guiItems.getCommandsAchievementsItem(), mainGUI, player,\n\t\t\t\t\tCommandAchievements.COMMANDS.toString(), displayedSoFar);\n\t\t}\n\n\t\t// Display the main GUI to the player.\n\t\tplayer.openInventory(mainGUI);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PrefixExpression#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PrefixExpression#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(InfixExpression(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Displays the main GUI to a player.", "call_func_name": ["com.hm.achievement.category.MultipleAchievements.values", "com.hm.achievement.category.NormalAchievements.values", "java.util.Set.size", "com.hm.achievement.gui.AchievementInventoryHolder.<init>", "com.hm.achievement.utils.NumberHelper.nextMultipleOf9", "org.bukkit.Bukkit.createInventory", "com.hm.achievement.gui.AchievementInventoryHolder.setInventory", "com.hm.achievement.gui.GUIItems.getMultipleAchievementItems", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.hm.achievement.gui.MainGUI.shouldDisplayCategory", "com.hm.achievement.category.MultipleAchievements.toString", "com.hm.achievement.gui.MainGUI.displayMultipleCategory", "com.hm.achievement.gui.GUIItems.getNormalAchievementItems", "com.hm.achievement.category.NormalAchievements.toString", "com.hm.achievement.gui.MainGUI.displayNormalCategory", "com.hm.achievement.gui.GUIItems.getCommandsAchievementsItem", "com.hm.achievement.category.CommandAchievements.toString", "org.bukkit.entity.Player.openInventory"], "call_func_parameter": [[""], [""], [""], [""], ["int"], ["org.bukkit.inventory.InventoryHolder", "int", "java.lang.String"], ["org.bukkit.inventory.Inventory"], [""], [""], [""], [""], [""], ["org.bukkit.inventory.ItemStack", "org.bukkit.entity.Player", "com.hm.achievement.category.Category"], [""], ["org.bukkit.inventory.ItemStack", "org.bukkit.inventory.Inventory", "org.bukkit.entity.Player", "java.lang.String", "int"], [""], [""], ["org.bukkit.inventory.ItemStack", "org.bukkit.inventory.Inventory", "org.bukkit.entity.Player", "java.lang.String", "int"], [""], [""], ["org.bukkit.inventory.Inventory"]], "passed_comments": [{"com.hm.achievement.utils.NumberHelper.nextMultipleOf9": "This simple function gets the smallest multiple of 9 greater than its input value."}, {"com.hm.achievement.gui.MainGUI.shouldDisplayCategory": "Determines whether the category should be displayed in the GUI."}, {"com.hm.achievement.gui.MainGUI.displayMultipleCategory": "Displays an item corresponding to a Multiple category, or a barrier if the category should be hidden."}, {"com.hm.achievement.gui.MainGUI.displayNormalCategory": "Displays an item corresponding to a Normal category, or a barrier if the category should be hidden."}]}, {"index": "77", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/gui/MainGUI.java", "methodName": "com.hm.achievement.gui.MainGUI.shouldDisplayCategory", "methodParameterType": "ItemStack#Player#Category#", "methodParameterName": "item#player#category#", "methodBody": "private boolean shouldDisplayCategory(ItemStack item, Player player, Category category) {\n\t\t// Hide category if an empty name is defined for it, if it's disabled or if the player is missing permissions.\n\t\treturn item.getItemMeta().getDisplayName().length() > 0 && !disabledCategories.contains(category)\n\t\t\t\t&& (!configHideNoPermissionCategories || player.hasPermission(category.toPermName()));\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(ParenthesizedExpression(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines whether the category should be displayed in the GUI.", "call_func_name": ["org.bukkit.inventory.ItemStack.getItemMeta", "org.bukkit.inventory.meta.ItemMeta.getDisplayName", "java.lang.String.length", "java.util.Set.contains", "com.hm.achievement.category.Category.toPermName", "org.bukkit.entity.Player.hasPermission"], "call_func_parameter": [[""], [""], [""], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": [{"com.hm.achievement.category.Category.toPermName": "Converts to permission name: common prefix + name of the category in lower case."}]}, {"index": "78", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/gui/MainGUI.java", "methodName": "com.hm.achievement.gui.MainGUI.displayMultipleCategory", "methodParameterType": "ItemStack#Inventory#Player#String#int#", "methodParameterName": "item#gui#player#category#position#", "methodBody": "private void displayMultipleCategory(ItemStack item, Inventory gui, Player player, String category, int position) {\n\t\tfor (String subcategory : mainConfig.getShallowKeys(category)) {\n\t\t\tif (!configHideNotReceivedCategories || hasReceivedInCategory(player, category + \".\" + subcategory)) {\n\t\t\t\tgui.setItem(position, item);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tgui.setItem(position, lockedItem);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Displays an item corresponding to a Multiple category, or a barrier if the category should be hidden.", "call_func_name": ["com.hm.achievement.file.CommentedYamlConfiguration.getShallowKeys", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.gui.MainGUI.hasReceivedInCategory", "org.bukkit.inventory.Inventory.setItem"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], [""], ["java.lang.String"], [""], ["org.bukkit.entity.Player", "java.lang.String"], ["int", "org.bukkit.inventory.ItemStack"]], "passed_comments": [{"com.hm.achievement.gui.MainGUI.hasReceivedInCategory": "Determines whether the player has received at least one achievement in the category or subcategory."}]}, {"index": "79", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/gui/MainGUI.java", "methodName": "com.hm.achievement.gui.MainGUI.displayNormalCategory", "methodParameterType": "ItemStack#Inventory#Player#String#int#", "methodParameterName": "item#gui#player#category#position#", "methodBody": "private void displayNormalCategory(ItemStack item, Inventory gui, Player player, String category, int position) {\n\t\tif (configHideNotReceivedCategories && !hasReceivedInCategory(player, category)) {\n\t\t\tgui.setItem(position, lockedItem);\n\t\t} else {\n\t\t\tgui.setItem(position, item);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Displays an item corresponding to a Normal category, or a barrier if the category should be hidden.", "call_func_name": ["com.hm.achievement.gui.MainGUI.hasReceivedInCategory", "org.bukkit.inventory.Inventory.setItem"], "call_func_parameter": [["org.bukkit.entity.Player", "java.lang.String"], ["int", "org.bukkit.inventory.ItemStack"]], "passed_comments": [{"com.hm.achievement.gui.MainGUI.hasReceivedInCategory": "Determines whether the player has received at least one achievement in the category or subcategory."}]}, {"index": "80", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/gui/MainGUI.java", "methodName": "com.hm.achievement.gui.MainGUI.hasReceivedInCategory", "methodParameterType": "Player#String#", "methodParameterName": "player#configPath#", "methodBody": "private boolean hasReceivedInCategory(Player player, String configPath) {\n\t\tfor (String threshold : mainConfig.getShallowKeys(configPath)) {\n\t\t\tif (cacheManager.hasPlayerAchievement(player.getUniqueId(),\n\t\t\t\t\tmainConfig.getString(configPath + '.' + threshold + \".Name\", \"\"))) {\n\t\t\t\t// At least one achievement was received in the current category: it is unlocked.\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#CharacterLiteral#SimpleName#StringLiteral#InfixExpression#StringLiteral#MethodInvocation#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines whether the player has received at least one achievement in the category or subcategory.", "call_func_name": ["com.hm.achievement.file.CommentedYamlConfiguration.getShallowKeys", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.bukkit.entity.Player.getUniqueId", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.file.CommentedYamlConfiguration.getString", "com.hm.achievement.db.CacheManager.hasPlayerAchievement"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], [""], [""], ["java.lang.String"], ["char"], [""], ["java.lang.String", "java.lang.String"], ["java.util.UUID", "java.lang.String"]], "passed_comments": [{"com.hm.achievement.db.CacheManager.hasPlayerAchievement": "Returns whether player has received a specific achievement."}]}, {"index": "81", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/config/FileUpdater.java", "methodName": "com.hm.achievement.config.FileUpdater.updateOldConfiguration", "methodParameterType": "CommentedYamlConfiguration#", "methodParameterName": "config#", "methodBody": "public void updateOldConfiguration(CommentedYamlConfiguration config) {\n\t\tupdatePerformed = false;\n\n\t\t// Make sure DisabledCategories exists so elements can then be added to it:\n\t\tif (!config.getKeys(false).contains(\"DisabledCategories\")) {\n\t\t\tList<String> emptyList = new ArrayList<>();\n\t\t\tconfig.set(\"DisabledCategories\", emptyList,\n\t\t\t\t\t\"Don't show these categories in the achievement GUI or in the stats output (delete the [] before using).\",\n\t\t\t\t\t\"Also prevent obtaining achievements for these categories and prevent stats from increasing.\",\n\t\t\t\t\t\"If changed, do a full server reload, and not just /aach reload.\");\n\t\t\tupdatePerformed = true;\n\t\t}\n\t\t// Iterate through all categories to add missing ones.\n\t\tfor (NormalAchievements category : NormalAchievements.values()) {\n\t\t\taddNewCategory(config, category.toString(), category.toConfigComment());\n\t\t}\n\t\tfor (MultipleAchievements category : MultipleAchievements.values()) {\n\t\t\taddNewCategory(config, category.toString(), category.toConfigComment());\n\t\t}\n\t\taddNewCategory(config, CommandAchievements.COMMANDS.toString(), CommandAchievements.COMMANDS.toConfigComment());\n\n\t\t// Added in version 3.0:\n\t\tupdateSetting(config, \"TablePrefix\", \"\",\n\t\t\t\t\"Prefix added to the tables in the database. If you switch from the default tables names (no prefix),\",\n\t\t\t\t\"the plugin will attempt an automatic renaming. Otherwise you have to rename your tables manually.\",\n\t\t\t\t\"Do a full server reload or restart to make this effective.\");\n\t\tupdateSetting(config, \"BookChronologicalOrder\", true,\n\t\t\t\t\"Sort pages of the book in chronological order (false for reverse chronological order).\");\n\t\tupdateSetting(config, \"DisableSilkTouchBreaks\", false,\n\t\t\t\t\"Do not take into accound items broken with Silk Touch for the Breaks achievements.\");\n\t\tupdateSetting(config, \"ObfuscateProgressiveAchievements\", false,\n\t\t\t\t\"For categories with a series of related achievements where the only thing changing is the number of times\",\n\t\t\t\t\"the event has occurred, show achievements that have been obtained and show the next obtainable achievement,\",\n\t\t\t\t\"but obfuscate the additional achievements.\",\n\t\t\t\t\"in order of increasing difficulty. For example, under Places, stone, the first achievement could have a\",\n\t\t\t\t\"target of 100 stone,# the second 500 stone, and the third 1000 stone.  When ObfuscateProgressiveAchievements\",\n\t\t\t\t\"is true, initially only the 100 stone achievement will be readable in the GUI.  Once 100 stone have been placed,\",\n\t\t\t\t\"the 500 stone achievement will become legible.\");\n\n\t\t// Added in version 3.0.2:\n\t\tupdateSetting(config, \"DisableSilkTouchOreBreaks\", false,\n\t\t\t\t\"Do not take into account ores broken with Silk Touch for the Breaks achievements.\",\n\t\t\t\t\"DisableSilkTouchBreaks takes precedence over this.\");\n\t\tupdateSetting(config, \"LanguageFileName\", \"lang.yml\",\n\t\t\t\t\" Name of the language file you want to use in your AdvancedAchievements directory.\");\n\n\t\t// Added in version 4.0:\n\t\tupdateSetting(config, \"EnrichedListProgressBars\", true,\n\t\t\t\t\"Display precise statistic information in the /aach list progress bars.\");\n\t\tMap<String, Integer> cooldownCategories = new HashMap<>();\n\t\tcooldownCategories.put(\"LavaBuckets\", 10);\n\t\tcooldownCategories.put(\"WaterBuckets\", 10);\n\t\tcooldownCategories.put(\"Milk\", 10);\n\t\tcooldownCategories.put(\"Beds\", 30);\n\t\tcooldownCategories.put(\"Brewing\", 5);\n\t\tcooldownCategories.put(\"MusicDiscs\", 30);\n\t\tupdateSetting(config, \"StatisticCooldown\", cooldownCategories,\n\t\t\t\t\"Time in seconds between each statistic count. Only the listed categories are currently supported.\");\n\t\tupdateSetting(config, \"CooldownActionBar\", true,\n\t\t\t\t\"Display action bar message when player does an action while in the cooldown period.\");\n\n\t\t// Added in version 4.1:\n\t\tupdateSetting(config, \"NumberedItemsInList\", true,\n\t\t\t\t\"Annotate each achievement displayed in a /aach list category with a number. Due to a Minecraft limitation,\",\n\t\t\t\t\"if you have more than 64 achievements for a category, the counting will start back at 1 after number 64.\");\n\t\tupdateSetting(config, \"DateLocale\", \"en\",\n\t\t\t\t\"Locale used to format dates in /aach book and /aach list. You must select an ISO 639 language code.\",\n\t\t\t\t\"The list of possible language codes can be found here at www.loc.gov/standards/iso639-2/php/code_list.php\");\n\t\tupdateSetting(config, \"DateDisplayTime\", false,\n\t\t\t\t\"Display reception time of achievements in /aach book and /aach list in addition to the date. For achievements\",\n\t\t\t\t\"received in plugin versions prior to 3.0, the precise time information is not available and will be displayed as midnight.\");\n\n\t\t// Added in version 4.2:\n\t\tupdateSetting(config, \"RestrictSpectator\", true,\n\t\t\t\t\"Stop all stats from increasing when player in spectator mode, including PlayedTime.\",\n\t\t\t\t\"Connection achievements will only be handled once a player switches to a non-spectator mode.\",\n\t\t\t\t\"No effect if using Minecraft 1.7.9 or 1.7.10.\");\n\n\t\t// Added in version 5.0:\n\t\tupdateSetting(config, \"SimplifiedReception\", false,\n\t\t\t\t\"Set to true to activate simpler effects and a calm sound when a player receives an achievement.\",\n\t\t\t\t\"Ignored if Firework parameter is set to true.\");\n\n\t\t// Added in version 5.1:\n\t\tupdateSetting(config, \"NotifyOtherPlayers\", false, \"Notify other connected players when an achievement is received.\",\n\t\t\t\t\"This defines the default behaviour, a player can override what he sees by using /aach toggle.\");\n\t\tupdateSetting(config, \"ActionBarNotify\", true,\n\t\t\t\t\"When NotifyOtherPlayers is enabled, notifications are done using action bars when ActionBarNotify is true.\",\n\t\t\t\t\"When ActionBarNotify is false, chat messages are used.\");\n\n\t\t// Added in version 5.1.1:\n\t\tupdateSetting(config, \"RestrictAdventure\", false,\n\t\t\t\t\"Stop all stats from increasing when player in adventure mode, including PlayedTime.\",\n\t\t\t\t\"Connection achievements will only be handled once a player switches to a non-adventure mode.\");\n\n\t\t// Added in version 5.2:\n\t\tupdateSetting(config, \"RegisterAdvancementDescriptions\", true,\n\t\t\t\t\"Register advancements with a description corresponding to the Goal parameter of each achievement.\",\n\t\t\t\t\"If changed, run /aach generate to regenerate advancements with the new parameter value taken into account.\",\n\t\t\t\t\"No effect if using Minecraft versions prior to 1.12.\");\n\t\tupdateSetting(config, \"HideNoPermissionCategories\", false,\n\t\t\t\t\"Hide categories for which the player does not have the corresponding count permissions.\");\n\n\t\t// Added in version 5.2.2:\n\t\tupdateSetting(config, \"HideAdvancements\", false,\n\t\t\t\t\"If true, hide advancements from the advancement GUI. Advancement notifications will still appear when receiving achievements.\",\n\t\t\t\t\"No effect if using Minecraft versions prior to 1.12.\");\n\t\tupdateSetting(config, \"IgnoreAFKPlayedTime\", false,\n\t\t\t\t\"If true, PlayedTime will no longer increase when the player is AFK. Requires Essentials to work.\");\n\n\t\t// Added in version 5.3:\n\t\tupdateSetting(config, \"ChatHeader\", \"&7[%ICON%&7]\",\n\t\t\t\t\"Set the format of the header used for most chat messages (default: \\\"&7[%ICON%&7]\\\").\");\n\n\t\t// Added in version 5.3.3:\n\t\tupdateSetting(config, \"AdditionalConnectionOptions\", \"\",\n\t\t\t\t\"Specify additional options when opening a connection to a MySQL/PostgreSQL database. Start each option with &,\",\n\t\t\t\t\"for instance \\\"&useUnicode=yes&characterEncoding=UTF-8\\\".\");\n\t\tupdateSetting(config, \"HoverableReceiverChatText\", false,\n\t\t\t\t\"When a player receives an achievement, the DisplayName, Message and rewards of the achievement are displayed in\",\n\t\t\t\t\"the chat. If HoverableReceiverChatText is true, a single hoverable text will be displayed to the receiver.\",\n\t\t\t\t\"Otherwise texts will be displayed one after the other.\");\n\n\t\t// Added in version 5.5:\n\t\tupdateSetting(config, \"ListColorNotReceived\", 8,\n\t\t\t\t\"Color used for Goals and progress bars in /aach list when an achievement is not yet received.\");\n\n\t\t// Added in version 5.6:\n\t\tif (!config.isConfigurationSection(\"AllAchievementsReceivedRewards\")) {\n\t\t\tupdateSetting(config, \"AllAchievementsReceivedRewards.Money\", 30,\n\t\t\t\t\t\"Awarded when a player has received all the achievements. Use the same reward pattern as with achievements.\",\n\t\t\t\t\t\"See https://github.com/PyvesB/AdvancedAchievements/wiki/Rewards\");\n\t\t}\n\n\t\t// Added in 5.9.0:\n\t\tupdateSetting(config, \"RootAdvancementTitle\", \"Advanced Achievements\", \"Title shown on the root advancement.\");\n\t\tupdateSetting(config, \"AdvancementsBackground\", \"minecraft:textures/item/book.png\",\n\t\t\t\t\"Background shown on the Advanced Achievements advancement tab.\",\n\t\t\t\t\"Must be a resource location to any image in a resource pack.\");\n\n\t\t// Added in 5.10.0:\n\t\tString bookDefault = serverVersion < 9 ? \"level_up\" : \"entity_player_levelup\";\n\t\tupdateSetting(config, \"SoundBook\", bookDefault,\n\t\t\t\t\"For /aach book. Possible values: github.com/PyvesB/AdvancedAchievements/wiki/Sound-names\");\n\t\tString statsRankingDefault = serverVersion < 9 ? \"firework_blast\"\n\t\t\t\t: serverVersion < 13 ? \"entity_firework_large_blast\" : \"entity_firework_rocket_blast\";\n\t\tupdateSetting(config, \"SoundStats\", statsRankingDefault,\n\t\t\t\t\"For /aach stats with all achievements. Possible values: github.com/PyvesB/AdvancedAchievements/wiki/Sound-names\");\n\t\tupdateSetting(config, \"SoundRanking\", statsRankingDefault,\n\t\t\t\t\"For /aach top, week, month when ranked in the top list. Possible values: github.com/PyvesB/AdvancedAchievements/wiki/Sound-names\");\n\n\t\tif (updatePerformed) {\n\t\t\t// Changes in the configuration: save and do a fresh load.\n\t\t\ttry {\n\t\t\t\tconfig.saveConfiguration();\n\t\t\t\tconfig.loadConfiguration();\n\t\t\t} catch (IOException | InvalidConfigurationException e) {\n\t\t\t\tlogger.log(Level.SEVERE, \"Error while saving changes to the configuration file:\", e);\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#BooleanLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#BooleanLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#BooleanLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#BooleanLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#BooleanLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#BooleanLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#BooleanLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#BooleanLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#BooleanLiteral#StringLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#BooleanLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#BooleanLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#BooleanLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#BooleanLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#BooleanLiteral#StringLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#BooleanLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#BooleanLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#BooleanLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#BooleanLiteral#StringLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#NumberLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#NumberLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#InfixExpression#StringLiteral#StringLiteral#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#InfixExpression#StringLiteral#SimpleName#NumberLiteral#InfixExpression#StringLiteral#StringLiteral#ConditionalExpression#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(StringLiteral)StringLiteral(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ConditionalExpression)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Updates configuration file from older plugin versions by adding missing parameters. Upgrades from versions prior to 2.5.2 are not supported.", "call_func_name": ["com.hm.achievement.file.CommentedYamlConfiguration.getKeys", "java.util.Set.contains", "java.util.ArrayList.<init>", "com.hm.achievement.file.CommentedYamlConfiguration.set", "com.hm.achievement.category.NormalAchievements.values", "com.hm.achievement.category.NormalAchievements.toString", "com.hm.achievement.category.NormalAchievements.toConfigComment", "com.hm.achievement.config.FileUpdater.addNewCategory", "com.hm.achievement.category.MultipleAchievements.values", "com.hm.achievement.category.MultipleAchievements.toString", "com.hm.achievement.category.MultipleAchievements.toConfigComment", "com.hm.achievement.category.CommandAchievements.toString", "com.hm.achievement.category.CommandAchievements.toConfigComment", "com.hm.achievement.config.FileUpdater.updateSetting", "java.lang.Boolean.valueOf", "java.util.HashMap.<init>", "java.lang.Integer.valueOf", "java.util.Map.put", "com.hm.achievement.file.CommentedYamlConfiguration.isConfigurationSection", "com.hm.achievement.file.CommentedYamlConfiguration.saveConfiguration", "com.hm.achievement.file.CommentedYamlConfiguration.loadConfiguration", "java.util.logging.Logger.log"], "call_func_parameter": [["boolean"], ["java.lang.Object"], [""], ["java.lang.String", "java.lang.Object", "java.lang.String[]"], [""], [""], [""], ["com.hm.achievement.file.CommentedYamlConfiguration", "java.lang.String", "java.lang.String[]"], [""], [""], [""], [""], [""], ["com.hm.achievement.file.CommentedYamlConfiguration", "java.lang.String", "java.lang.Object", "java.lang.String[]"], ["boolean"], [""], ["int"], ["java.lang.Object", "java.lang.Object"], ["java.lang.String"], [""], [""], ["java.util.logging.Level", "java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"com.hm.achievement.category.CommandAchievements.toConfigComment": "{@inheritDoc}"}]}, {"index": "82", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/config/FileUpdater.java", "methodName": "com.hm.achievement.config.FileUpdater.updateOldLanguage", "methodParameterType": "CommentedYamlConfiguration#", "methodParameterName": "lang#", "methodBody": "public void updateOldLanguage(CommentedYamlConfiguration lang) {\n\t\tupdatePerformed = false;\n\n\t\t// Iterate through all categories to add missing ones.\n\t\tfor (NormalAchievements category : NormalAchievements.values()) {\n\t\t\tif (!lang.getKeys(false).contains(category.toLangKey())) {\n\t\t\t\tlang.set(category.toLangKey(), category.toLangDefault());\n\t\t\t\tupdatePerformed = true;\n\t\t\t}\n\t\t}\n\t\tfor (MultipleAchievements category : MultipleAchievements.values()) {\n\t\t\tif (!lang.getKeys(false).contains(category.toLangKey())) {\n\t\t\t\tlang.set(category.toLangKey(), category.toLangDefault());\n\t\t\t\tupdatePerformed = true;\n\t\t\t}\n\t\t}\n\n\t\t// Iterate through all Lang implementation keys & default values\n\t\tArrays.stream(new Lang[][] { CmdLang.values(), HelpLang.values(), HelpLang.Hover.values(), InfoLang.values(),\n\t\t\t\tGuiLang.values(), ListenerLang.values(), RewardLang.values(), NormalAchievements.values(),\n\t\t\t\tMultipleAchievements.values() }).flatMap(Arrays::stream).forEach(language -> updateLang(lang, language));\n\n\t\t// Not found in Enums (Possibly unused)\n\t\tupdateSetting(lang, \"list-custom\", \"Custom Categories\");\n\n\t\tif (updatePerformed) {\n\t\t\t// Changes in the language file: save and do a fresh load.\n\t\t\ttry {\n\t\t\t\tlang.saveConfiguration();\n\t\t\t\tlang.loadConfiguration();\n\t\t\t} catch (IOException | InvalidConfigurationException e) {\n\t\t\t\tlogger.log(Level.SEVERE, \"Error while saving changes to the language file:\", e);\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ArrayInitializer#ArrayCreation#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension(Dimension)Dimension)ArrayType(ArrayInitializer(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayInitializer)ArrayCreation)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Updates language file from older plugin versions by adding missing parameters. Upgrades from versions prior to 2.5.2 are not supported.", "call_func_name": ["com.hm.achievement.category.NormalAchievements.values", "com.hm.achievement.file.CommentedYamlConfiguration.getKeys", "com.hm.achievement.category.NormalAchievements.toLangKey", "java.util.Set.contains", "com.hm.achievement.category.NormalAchievements.toLangDefault", "com.hm.achievement.file.CommentedYamlConfiguration.set", "com.hm.achievement.category.MultipleAchievements.values", "com.hm.achievement.category.MultipleAchievements.toLangKey", "com.hm.achievement.category.MultipleAchievements.toLangDefault", "com.hm.achievement.lang.command.CmdLang.values", "com.hm.achievement.lang.command.HelpLang.values", "com.hm.achievement.lang.command.InfoLang.values", "com.hm.achievement.lang.GuiLang.values", "com.hm.achievement.lang.ListenerLang.values", "com.hm.achievement.lang.RewardLang.values", "java.util.Arrays.stream", "java.util.function.Function.apply", "java.util.stream.Stream.flatMap", "java.util.function.Consumer.accept", "java.util.stream.Stream.forEach", "com.hm.achievement.config.FileUpdater.updateSetting", "com.hm.achievement.file.CommentedYamlConfiguration.saveConfiguration", "com.hm.achievement.file.CommentedYamlConfiguration.loadConfiguration", "java.util.logging.Logger.log"], "call_func_parameter": [[""], ["boolean"], [""], ["java.lang.Object"], [""], ["java.lang.String", "java.lang.Object"], [""], [""], [""], [""], [""], [""], [""], [""], [""], ["java.lang.Object[]"], [""], ["java.util.function.Function"], ["com.hm.achievement.config.FileUpdater", "com.hm.achievement.file.CommentedYamlConfiguration"], ["java.util.function.Consumer"], ["com.hm.achievement.file.CommentedYamlConfiguration", "java.lang.String", "java.lang.Object", "java.lang.String[]"], [""], [""], ["java.util.logging.Level", "java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "83", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/config/FileUpdater.java", "methodName": "com.hm.achievement.config.FileUpdater.updateOldGUI", "methodParameterType": "CommentedYamlConfiguration#", "methodParameterName": "gui#", "methodBody": "public void updateOldGUI(CommentedYamlConfiguration gui) {\n\t\tupdatePerformed = false;\n\n\t\t// Added in version 5.2.5:\n\t\tupdateSetting(gui, \"Breeding.Item\", \"wheat\");\n\n\t\t// Added in version 5.3:\n\t\tupdateSetting(gui, \"AchievementNotStarted.Item\", \"stained_clay\");\n\t\tupdateSetting(gui, \"AchievementStarted.Item\", \"stained_clay\");\n\t\tupdateSetting(gui, \"AchievementReceived.Item\", \"stained_clay\");\n\t\tupdateSetting(gui, \"BackButton.Item\", \"book\");\n\t\tupdateSetting(gui, \"PreviousButton.Item\", \"wood_button\");\n\t\tupdateSetting(gui, \"NextButton.Item\", \"stone_button\");\n\n\t\t// Added in version 5.5:\n\t\tupdateSetting(gui, \"Custom.Item\", \"feather\");\n\n\t\t// Added in version 5.12.0:\n\t\tupdateSetting(gui, \"TargetsShot.Item\", serverVersion >= 13 ? \"firework_star\" : \"firework_charge\");\n\n\t\t// Added in version 5.13.0:\n\t\tupdateSetting(gui, \"RaidsWon.Item\", \"gray_banner\");\n\t\tupdateSetting(gui, \"Riptides.Item\", \"trident\");\n\n\t\tif (serverVersion < 13) {\n\t\t\tupdateSetting(gui, \"Breeding.Metadata\", 0);\n\t\t\tupdateSetting(gui, \"AchievementNotStarted.Metadata\", 14);\n\t\t\tupdateSetting(gui, \"AchievementStarted.Metadata\", 4);\n\t\t\tupdateSetting(gui, \"AchievementReceived.Metadata\", 5);\n\t\t\tupdateSetting(gui, \"BackButton.Metadata\", 0);\n\t\t\tupdateSetting(gui, \"PreviousButton.Metadata\", 0);\n\t\t\tupdateSetting(gui, \"NextButton.Metadata\", 0);\n\t\t\tupdateSetting(gui, \"Custom.Metadata\", 0);\n\t\t\tupdateSetting(gui, \"TargetsShot.Metadata\", 0);\n\t\t}\n\n\t\tif (updatePerformed) {\n\t\t\t// Changes in the gui file: save and do a fresh load.\n\t\t\ttry {\n\t\t\t\tgui.saveConfiguration();\n\t\t\t\tgui.loadConfiguration();\n\t\t\t} catch (IOException | InvalidConfigurationException e) {\n\t\t\t\tlogger.log(Level.SEVERE, \"Error while saving changes to the gui file:\", e);\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#NumberLiteral#InfixExpression#StringLiteral#StringLiteral#ConditionalExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ConditionalExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Updates GUI file from older plugin versions by adding missing parameters. New configuration file introduced in version 5.0 of the plugin.", "call_func_name": ["com.hm.achievement.config.FileUpdater.updateSetting", "java.lang.Integer.valueOf", "com.hm.achievement.file.CommentedYamlConfiguration.saveConfiguration", "com.hm.achievement.file.CommentedYamlConfiguration.loadConfiguration", "java.util.logging.Logger.log"], "call_func_parameter": [["com.hm.achievement.file.CommentedYamlConfiguration", "java.lang.String", "java.lang.Object", "java.lang.String[]"], ["int"], [""], [""], ["java.util.logging.Level", "java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "84", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/config/FileUpdater.java", "methodName": "com.hm.achievement.config.FileUpdater.updateSetting", "methodParameterType": "CommentedYamlConfiguration#String#Object#String#", "methodParameterName": "file#name#value#comments#", "methodBody": "private void updateSetting(CommentedYamlConfiguration file, String name, Object value, String... comments) {\n\t\tif (!file.getKeys(true).contains(name)) {\n\t\t\tfile.set(name, value, comments);\n\t\t\tupdatePerformed = true;\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Updates the configuration file to include a new setting with its default value and its comments (each comment String corresponding to a separate line).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "85", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/config/FileUpdater.java", "methodName": "com.hm.achievement.config.FileUpdater.addNewCategory", "methodParameterType": "CommentedYamlConfiguration#String#String#", "methodParameterName": "config#categoryName#categoryComments#", "methodBody": "private void addNewCategory(CommentedYamlConfiguration config, String categoryName, String... categoryComments) {\n\t\tif (!config.getKeys(false).contains(categoryName)) {\n\t\t\tMap<Object, Object> emptyMap = new HashMap<>();\n\t\t\tconfig.set(categoryName, emptyMap, categoryComments);\n\t\t\t// As no achievements are set, we initially disable this new category.\n\t\t\tList<String> disabledCategories = config.getList(\"DisabledCategories\");\n\t\t\tif (!disabledCategories.contains(categoryName)) {\n\t\t\t\tdisabledCategories.add(categoryName);\n\t\t\t\tconfig.set(\"DisabledCategories\", disabledCategories);\n\t\t\t}\n\t\t\tupdatePerformed = true;\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Adds a new category to the configuration file, and includes it in the DisabledCategories list.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "86", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/config/ConfigurationParser.java", "methodName": "com.hm.achievement.config.ConfigurationParser.loadAndParseConfiguration", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void loadAndParseConfiguration() throws PluginLoadError {\n\t\tlogger.info(\"Loading and backing up configuration files...\");\n\t\tloadAndBackupConfiguration(mainConfig);\n\t\tloadAndBackupConfiguration(langConfig);\n\t\tloadAndBackupConfiguration(guiConfig);\n\t\tupdateOldConfigurations();\n\t\tparseHeader();\n\t\tparseDisabledCategories();\n\t\tparseEnabledCategoriesWithSubcategories();\n\t\tparseAchievements();\n\t\tlogLoadingMessages();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Loads the files and populates common data structures used in other parts of the plugin. Performs basic validation on the achievements.", "call_func_name": ["java.util.logging.Logger.info", "com.hm.achievement.config.ConfigurationParser.loadAndBackupConfiguration", "com.hm.achievement.config.ConfigurationParser.updateOldConfigurations", "com.hm.achievement.config.ConfigurationParser.parseHeader", "com.hm.achievement.config.ConfigurationParser.parseDisabledCategories", "com.hm.achievement.config.ConfigurationParser.parseEnabledCategoriesWithSubcategories", "com.hm.achievement.config.ConfigurationParser.parseAchievements", "com.hm.achievement.config.ConfigurationParser.logLoadingMessages"], "call_func_parameter": [["java.lang.String"], ["com.hm.achievement.file.CommentedYamlConfiguration"], [""], [""], [""], [""], [""], [""]], "passed_comments": [{"com.hm.achievement.config.ConfigurationParser.loadAndBackupConfiguration": "Loads and backs up a configuration file."}, {"com.hm.achievement.config.ConfigurationParser.updateOldConfigurations": "Calls the FileUpdater instance on the various configuration files."}, {"com.hm.achievement.config.ConfigurationParser.parseHeader": "Parses the plugin's header, used throughout the project."}, {"com.hm.achievement.config.ConfigurationParser.parseDisabledCategories": "Extracts disabled categories from the configuration file."}, {"com.hm.achievement.config.ConfigurationParser.parseEnabledCategoriesWithSubcategories": "Extracts all enabled categories from the configuration and adds subcategories if relevant. Ignores the Commands category."}, {"com.hm.achievement.config.ConfigurationParser.parseAchievements": "Goes through all the achievements for non-disabled categories. Populates relevant data structures and performs basic validation."}, {"com.hm.achievement.config.ConfigurationParser.parseAchievements": "Parses all achievements for a given category or category + subcategory. Populates the sortedThresholds map."}]}, {"index": "87", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/config/ConfigurationParser.java", "methodName": "com.hm.achievement.config.ConfigurationParser.loadAndBackupConfiguration", "methodParameterType": "CommentedYamlConfiguration#", "methodParameterName": "configuration#", "methodBody": "private void loadAndBackupConfiguration(CommentedYamlConfiguration configuration) throws PluginLoadError {\n\t\ttry {\n\t\t\tconfiguration.loadConfiguration();\n\t\t} catch (IOException | InvalidConfigurationException e) {\n\t\t\tthrow new PluginLoadError(\"Failed to load \" + configuration.getName()\n\t\t\t\t\t+ \". Verify its syntax on yaml-online-parser.appspot.com and use the following logs.\", e);\n\t\t}\n\n\t\ttry {\n\t\t\tconfiguration.backupConfiguration();\n\t\t} catch (IOException e) {\n\t\t\tlogger.log(Level.SEVERE, \"Error while backing up \" + configuration.getName() + \":\", e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Loads and backs up a configuration file.", "call_func_name": ["com.hm.achievement.file.CommentedYamlConfiguration.loadConfiguration", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.hm.achievement.file.CommentedYamlConfiguration.getName", "java.lang.StringBuilder.toString", "com.hm.achievement.exception.PluginLoadError.<init>", "com.hm.achievement.file.CommentedYamlConfiguration.backupConfiguration", "java.util.logging.Logger.log"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.Exception"], [""], ["java.util.logging.Level", "java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "88", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/config/ConfigurationParser.java", "methodName": "com.hm.achievement.config.ConfigurationParser.updateOldConfigurations", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void updateOldConfigurations() {\n\t\tfileUpdater.updateOldConfiguration(mainConfig);\n\t\tfileUpdater.updateOldLanguage(langConfig);\n\t\tfileUpdater.updateOldGUI(guiConfig);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Calls the FileUpdater instance on the various configuration files.", "call_func_name": ["com.hm.achievement.config.FileUpdater.updateOldConfiguration", "com.hm.achievement.config.FileUpdater.updateOldLanguage", "com.hm.achievement.config.FileUpdater.updateOldGUI"], "call_func_parameter": [["com.hm.achievement.file.CommentedYamlConfiguration"], ["com.hm.achievement.file.CommentedYamlConfiguration"], ["com.hm.achievement.file.CommentedYamlConfiguration"]], "passed_comments": [{"com.hm.achievement.config.FileUpdater.updateOldConfiguration": "Updates configuration file from older plugin versions by adding missing parameters. Upgrades from versions prior to 2.5.2 are not supported."}, {"com.hm.achievement.config.FileUpdater.updateOldLanguage": "Updates language file from older plugin versions by adding missing parameters. Upgrades from versions prior to 2.5.2 are not supported."}, {"com.hm.achievement.config.FileUpdater.updateOldGUI": "Updates GUI file from older plugin versions by adding missing parameters. New configuration file introduced in version 5.0 of the plugin."}]}, {"index": "89", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/config/ConfigurationParser.java", "methodName": "com.hm.achievement.config.ConfigurationParser.parseHeader", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void parseHeader() {\n\t\tpluginHeader.setLength(0);\n\t\tString icon = StringEscapeUtils.unescapeJava(mainConfig.getString(\"Icon\", \"\\u2618\"));\n\t\tif (StringUtils.isNotBlank(icon)) {\n\t\t\tString coloredIcon = ChatColor.getByChar(mainConfig.getString(\"Color\", \"5\")) + icon;\n\t\t\tpluginHeader\n\t\t\t\t\t.append(ChatColor.translateAlternateColorCodes('&',\n\t\t\t\t\t\t\tStringUtils.replace(mainConfig.getString(\"ChatHeader\", \"&7[%ICON%&7]\"), \"%ICON%\", coloredIcon)))\n\t\t\t\t\t.append(\" \");\n\t\t}\n\t\tpluginHeader.trimToSize();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#CharacterLiteral#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Parses the plugin's header, used throughout the project.", "call_func_name": ["java.lang.StringBuilder.setLength", "com.hm.achievement.file.CommentedYamlConfiguration.getString", "com.hm.apache.commons.text.StringEscapeUtils.unescapeJava", "com.hm.apache.commons.lang3.StringUtils.isNotBlank", "java.lang.StringBuilder.<init>", "org.bukkit.ChatColor.getByChar", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.apache.commons.lang3.StringUtils.replace", "org.bukkit.ChatColor.translateAlternateColorCodes", "java.lang.StringBuilder.trimToSize"], "call_func_parameter": [["int"], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.CharSequence"], [""], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String", "java.lang.String"], ["char", "java.lang.String"], [""]], "passed_comments": "/"}, {"index": "90", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/config/ConfigurationParser.java", "methodName": "com.hm.achievement.config.ConfigurationParser.parseDisabledCategories", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void parseDisabledCategories() throws PluginLoadError {\n\t\textractDisabledCategoriesFromConfig();\n\t\t// Need PetMaster with a minimum version of 1.4 for PetMasterGive and PetMasterReceive categories.\n\t\tif ((!disabledCategories.contains(NormalAchievements.PETMASTERGIVE)\n\t\t\t\t|| !disabledCategories.contains(NormalAchievements.PETMASTERRECEIVE))\n\t\t\t\t&& (!Bukkit.getPluginManager().isPluginEnabled(\"PetMaster\") || getPetMasterMinorVersion() < 4)) {\n\t\t\tdisabledCategories.add(NormalAchievements.PETMASTERGIVE);\n\t\t\tdisabledCategories.add(NormalAchievements.PETMASTERRECEIVE);\n\t\t\tlogger.warning(\"Overriding configuration: disabling PetMasterGive and PetMasterReceive categories.\");\n\t\t\tlogger.warning(\n\t\t\t\t\t\"Ensure you have placed Pet Master with a minimum version of 1.4 in your plugins folder or add PetMasterGive and PetMasterReceive to the DisabledCategories list in config.yml.\");\n\t\t}\n\t\t// Elytras introduced in Minecraft 1.9.\n\t\tif (!disabledCategories.contains(NormalAchievements.DISTANCEGLIDING) && serverVersion < 9) {\n\t\t\tdisabledCategories.add(NormalAchievements.DISTANCEGLIDING);\n\t\t\tlogger.warning(\"Overriding configuration: disabling DistanceGliding category.\");\n\t\t\tlogger.warning(\n\t\t\t\t\t\"Elytra are not available in your Minecraft version, please add DistanceGliding to the DisabledCategories list in config.yml.\");\n\t\t}\n\t\t// Llamas introduced in Minecraft 1.11.\n\t\tif (!disabledCategories.contains(NormalAchievements.DISTANCELLAMA) && serverVersion < 11) {\n\t\t\tdisabledCategories.add(NormalAchievements.DISTANCELLAMA);\n\t\t\tlogger.warning(\"Overriding configuration: disabling DistanceLlama category.\");\n\t\t\tlogger.warning(\n\t\t\t\t\t\"Llamas not available in your Minecraft version, please add DistanceLlama to the DisabledCategories list in config.yml.\");\n\t\t}\n\t\t// Breeding event introduced in Bukkit 1.10.2.\n\t\tif (!disabledCategories.contains(MultipleAchievements.BREEDING) && serverVersion < 10) {\n\t\t\tdisabledCategories.add(MultipleAchievements.BREEDING);\n\t\t\tlogger.warning(\"Overriding configuration: disabling Breeding category.\");\n\t\t\tlogger.warning(\n\t\t\t\t\t\"The breeding event is not available in your server version, please add Breeding to the DisabledCategories list in config.yml.\");\n\t\t}\n\t\t// Proper ProjectileHitEvent introduced in Bukkit 1.11.\n\t\tif (!disabledCategories.contains(MultipleAchievements.TARGETSSHOT) && serverVersion < 11) {\n\t\t\tdisabledCategories.add(MultipleAchievements.TARGETSSHOT);\n\t\t\tlogger.warning(\"Overriding configuration: disabling TargetsShot category.\");\n\t\t\tlogger.warning(\n\t\t\t\t\t\"The projectile hit event is not fully available in your server version, please add TargetsShot to the DisabledCategories list in config.yml.\");\n\t\t}\n\t\t// Raids introduced in 1.14.\n\t\tif (!disabledCategories.contains(NormalAchievements.RAIDSWON) && serverVersion < 14) {\n\t\t\tdisabledCategories.add(NormalAchievements.RAIDSWON);\n\t\t\tlogger.warning(\"Overriding configuration: disabling RaidsWon category.\");\n\t\t\tlogger.warning(\n\t\t\t\t\t\"Raids are not available in your server version, please add RaidsWon to the DisabledCategories list in config.yml.\");\n\t\t}\n\t\t// Riptides introduced in 1.13.\n\t\tif (!disabledCategories.contains(NormalAchievements.RIPTIDES) && serverVersion < 13) {\n\t\t\tdisabledCategories.add(NormalAchievements.RIPTIDES);\n\t\t\tlogger.warning(\"Overriding configuration: disabling Riptides category.\");\n\t\t\tlogger.warning(\n\t\t\t\t\t\"Riptides are not available in your server version, please add Riptides to the DisabledCategories list in config.yml.\");\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Extracts disabled categories from the configuration file.", "call_func_name": ["com.hm.achievement.config.ConfigurationParser.extractDisabledCategoriesFromConfig", "java.util.Set.contains", "org.bukkit.Bukkit.getPluginManager", "org.bukkit.plugin.PluginManager.isPluginEnabled", "com.hm.achievement.config.ConfigurationParser.getPetMasterMinorVersion", "java.util.Set.add", "java.util.logging.Logger.warning"], "call_func_parameter": [[""], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.Object"], ["java.lang.String"]], "passed_comments": [{"com.hm.achievement.config.ConfigurationParser.extractDisabledCategoriesFromConfig": "Performs validation for the DisabledCategories list and maps the values to Category instances."}, {"com.hm.achievement.config.ConfigurationParser.getPetMasterMinorVersion": "Retrieves Pet Master's minor version number (e.g. \"1.4\" -> 4)."}]}, {"index": "91", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/config/ConfigurationParser.java", "methodName": "com.hm.achievement.config.ConfigurationParser.getPetMasterMinorVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private int getPetMasterMinorVersion() {\n\t\tPlugin petMaster = Bukkit.getPluginManager().getPlugin(\"PetMaster\");\n\t\tString minorVersionString = StringUtils.split(petMaster.getDescription().getVersion(), '.')[1];\n\t\treturn Integer.parseInt(minorVersionString);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#CharacterLiteral#MethodInvocation#NumberLiteral#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(CharacterLiteral)CharacterLiteral)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves Pet Master's minor version number (e.g. \"1.4\" -> 4).", "call_func_name": ["org.bukkit.Bukkit.getPluginManager", "org.bukkit.plugin.PluginManager.getPlugin", "org.bukkit.plugin.Plugin.getDescription", "org.bukkit.plugin.PluginDescriptionFile.getVersion", "com.hm.apache.commons.lang3.StringUtils.split", "java.lang.Integer.parseInt"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["java.lang.String", "char"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "92", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/config/ConfigurationParser.java", "methodName": "com.hm.achievement.config.ConfigurationParser.extractDisabledCategoriesFromConfig", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void extractDisabledCategoriesFromConfig() throws PluginLoadError {\n\t\tdisabledCategories.clear();\n\t\tfor (String disabledCategory : mainConfig.getList(\"DisabledCategories\")) {\n\t\t\tCategory category = CommandAchievements.COMMANDS.toString().equals(disabledCategory)\n\t\t\t\t\t? CommandAchievements.COMMANDS\n\t\t\t\t\t: null;\n\t\t\tif (category == null) {\n\t\t\t\tcategory = NormalAchievements.getByName(disabledCategory);\n\t\t\t}\n\t\t\tif (category == null) {\n\t\t\t\tcategory = MultipleAchievements.getByName(disabledCategory);\n\t\t\t}\n\t\t\tif (category == null) {\n\t\t\t\tList<String> allCategories = new ArrayList<>();\n\t\t\t\tArrays.stream(NormalAchievements.values()).forEach(n -> allCategories.add(n.toString()));\n\t\t\t\tArrays.stream(MultipleAchievements.values()).forEach(m -> allCategories.add(m.toString()));\n\t\t\t\tallCategories.add(CommandAchievements.COMMANDS.toString());\n\t\t\t\tthrow new PluginLoadError(\"Category \" + disabledCategory + \" specified in DisabledCategories is misspelt. \"\n\t\t\t\t\t\t+ \"Did you mean \" + StringHelper.getClosestMatch(disabledCategory, allCategories) + \"?\");\n\t\t\t}\n\t\t\tdisabledCategories.add(category);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#NullLiteral#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Performs validation for the DisabledCategories list and maps the values to Category instances.", "call_func_name": ["java.util.Set.clear", "com.hm.achievement.file.CommentedYamlConfiguration.getList", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.hm.achievement.category.CommandAchievements.toString", "java.lang.String.equals", "com.hm.achievement.category.NormalAchievements.getByName", "com.hm.achievement.category.MultipleAchievements.getByName", "java.util.ArrayList.<init>", "com.hm.achievement.category.NormalAchievements.values", "java.util.Arrays.stream", "java.util.function.Consumer.accept", "java.util.stream.Stream.forEach", "com.hm.achievement.category.MultipleAchievements.values", "java.util.List.add", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.hm.achievement.utils.StringHelper.getClosestMatch", "java.lang.StringBuilder.toString", "com.hm.achievement.exception.PluginLoadError.<init>", "java.util.Set.add"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], [""], [""], ["java.lang.Object"], ["java.lang.String"], ["java.lang.String"], [""], [""], ["java.lang.Object[]"], ["java.util.List"], ["java.util.function.Consumer"], [""], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.String", "java.util.Collection"], [""], ["java.lang.String"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "93", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/config/ConfigurationParser.java", "methodName": "com.hm.achievement.config.ConfigurationParser.parseEnabledCategoriesWithSubcategories", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void parseEnabledCategoriesWithSubcategories() {\n\t\tenabledCategoriesWithSubcategories.clear();\n\t\tfor (MultipleAchievements category : MultipleAchievements.values()) {\n\t\t\tif (!disabledCategories.contains(category)) {\n\t\t\t\tfor (String subcategory : mainConfig.getShallowKeys(category.toString())) {\n\t\t\t\t\tenabledCategoriesWithSubcategories.add(category + \".\" + StringUtils.deleteWhitespace(subcategory));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (NormalAchievements category : NormalAchievements.values()) {\n\t\t\tif (!disabledCategories.contains(category)) {\n\t\t\t\tenabledCategoriesWithSubcategories.add(category.toString());\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Extracts all enabled categories from the configuration and adds subcategories if relevant. Ignores the Commands category.", "call_func_name": ["java.util.Set.clear", "com.hm.achievement.category.MultipleAchievements.values", "java.util.Set.contains", "com.hm.achievement.category.MultipleAchievements.toString", "com.hm.achievement.file.CommentedYamlConfiguration.getShallowKeys", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "com.hm.apache.commons.lang3.StringUtils.deleteWhitespace", "java.lang.StringBuilder.toString", "java.util.Set.add", "com.hm.achievement.category.NormalAchievements.values", "com.hm.achievement.category.NormalAchievements.toString"], "call_func_parameter": [[""], [""], ["java.lang.Object"], [""], ["java.lang.String"], [""], [""], [""], [""], ["java.lang.Object"], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.Object"], [""], [""]], "passed_comments": "/"}, {"index": "94", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/config/ConfigurationParser.java", "methodName": "com.hm.achievement.config.ConfigurationParser.parseAchievements", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void parseAchievements() throws PluginLoadError {\n\t\tnamesToDisplayNames.clear();\n\t\tdisplayNamesToNames.clear();\n\t\tsortedThresholds.clear();\n\n\t\t// Enumerate Commands achievements.\n\t\tif (!disabledCategories.contains(CommandAchievements.COMMANDS)) {\n\t\t\tSet<String> commands = mainConfig.getShallowKeys(CommandAchievements.COMMANDS.toString());\n\t\t\tif (commands.isEmpty()) {\n\t\t\t\tdisabledCategories.add(CommandAchievements.COMMANDS);\n\t\t\t} else {\n\t\t\t\tfor (String ach : commands) {\n\t\t\t\t\tparseAchievement(CommandAchievements.COMMANDS + \".\" + ach);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Enumerate the normal achievements.\n\t\tfor (NormalAchievements category : NormalAchievements.values()) {\n\t\t\tif (!disabledCategories.contains(category)) {\n\t\t\t\tif (mainConfig.getShallowKeys(category.toString()).isEmpty()) {\n\t\t\t\t\tdisabledCategories.add(category);\n\t\t\t\t} else {\n\t\t\t\t\tparseAchievements(category.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Enumerate the achievements with multiple categories.\n\t\tfor (MultipleAchievements category : MultipleAchievements.values()) {\n\t\t\tif (!disabledCategories.contains(category)) {\n\t\t\t\tSet<String> keys = mainConfig.getShallowKeys(category.toString());\n\t\t\t\tif (keys.isEmpty()) {\n\t\t\t\t\tdisabledCategories.add(category);\n\t\t\t\t} else {\n\t\t\t\t\tfor (String section : keys) {\n\t\t\t\t\t\tparseAchievements(category + \".\" + section);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Goes through all the achievements for non-disabled categories. Populates relevant data structures and performs basic validation.", "call_func_name": ["java.util.Map.clear", "java.util.Set.contains", "com.hm.achievement.category.CommandAchievements.toString", "com.hm.achievement.file.CommentedYamlConfiguration.getShallowKeys", "java.util.Set.isEmpty", "java.util.Set.add", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.config.ConfigurationParser.parseAchievement", "com.hm.achievement.category.NormalAchievements.values", "com.hm.achievement.category.NormalAchievements.toString", "com.hm.achievement.config.ConfigurationParser.parseAchievements", "com.hm.achievement.category.MultipleAchievements.values", "com.hm.achievement.category.MultipleAchievements.toString"], "call_func_parameter": [[""], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.Object"], [""], [""], [""], [""], ["java.lang.Object"], ["java.lang.String"], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], [""]], "passed_comments": [{"com.hm.achievement.config.ConfigurationParser.parseAchievement": "Performs validation for a single achievement and populates an entry in the namesToDisplayNames map."}, {"com.hm.achievement.config.ConfigurationParser.parseAchievements": "Parses all achievements for a given category or category + subcategory. Populates the sortedThresholds map."}]}, {"index": "95", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/config/ConfigurationParser.java", "methodName": "com.hm.achievement.config.ConfigurationParser.parseAchievements", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "private void parseAchievements(String path) throws PluginLoadError {\n\t\tSet<String> keys = mainConfig.getShallowKeys(path);\n\t\tList<Long> thresholds = new ArrayList<>();\n\t\tfor (String threshold : keys) {\n\t\t\tparseAchievement(path + \".\" + threshold);\n\t\t\tthresholds.add(Long.valueOf(threshold));\n\t\t}\n\t\tthresholds.sort(null);\n\t\tsortedThresholds.put(path, thresholds);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Parses all achievements for a given category or category + subcategory. Populates the sortedThresholds map.", "call_func_name": ["com.hm.achievement.file.CommentedYamlConfiguration.getShallowKeys", "java.util.ArrayList.<init>", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.config.ConfigurationParser.parseAchievement", "java.lang.Long.valueOf", "java.util.List.add", "java.util.List.sort", "java.util.Map.put"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object"], ["java.util.Comparator"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"com.hm.achievement.config.ConfigurationParser.parseAchievement": "Performs validation for a single achievement and populates an entry in the namesToDisplayNames map."}]}, {"index": "96", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/config/ConfigurationParser.java", "methodName": "com.hm.achievement.config.ConfigurationParser.parseAchievement", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "private void parseAchievement(String path) throws PluginLoadError {\n\t\tString achName = mainConfig.getString(path + \".Name\");\n\t\tif (achName == null) {\n\t\t\tthrow new PluginLoadError(\"Achievement with path (\" + path + \") is missing its Name parameter in config.yml.\");\n\t\t} else if (namesToDisplayNames.containsKey(achName)) {\n\t\t\tthrow new PluginLoadError(\n\t\t\t\t\t\"Duplicate achievement Name (\" + achName + \"). \" + \"Please ensure each Name is unique in config.yml.\");\n\t\t} else if (mainConfig.getString(path + \".Message\") == null) {\n\t\t\tthrow new PluginLoadError(\n\t\t\t\t\t\"Achievement with path (\" + path + \") is missing its Message parameter in config.yml.\");\n\t\t} else {\n\t\t\tnamesToDisplayNames.put(achName, mainConfig.getString(path + \".DisplayName\", \"\"));\n\t\t\tString formattedDisplayName = StringHelper\n\t\t\t\t\t.removeFormattingCodes(mainConfig.getString(path + \".DisplayName\", achName)).toLowerCase();\n\t\t\tdisplayNamesToNames.put(formattedDisplayName, achName);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Performs validation for a single achievement and populates an entry in the namesToDisplayNames map.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.file.CommentedYamlConfiguration.getString", "com.hm.achievement.exception.PluginLoadError.<init>", "java.util.Map.containsKey", "com.hm.achievement.file.CommentedYamlConfiguration.getString", "java.util.Map.put", "com.hm.achievement.utils.StringHelper.removeFormattingCodes", "java.lang.String.toLowerCase"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String", "java.lang.String"], ["java.lang.Object", "java.lang.Object"], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "97", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/lifecycle/PluginLoader.java", "methodName": "com.hm.achievement.lifecycle.PluginLoader.loadAdvancedAchievements", "methodParameterType": "boolean#", "methodParameterName": "firstLoad#", "methodBody": "public void loadAdvancedAchievements(boolean firstLoad) throws PluginLoadError {\n\t\tconfigurationParser.loadAndParseConfiguration();\n\t\tregisterListeners();\n\t\tif (firstLoad) {\n\t\t\tdatabaseManager.initialise();\n\t\t\tinitialiseCommands();\n\t\t}\n\t\tlaunchScheduledTasks();\n\t\tlaunchUpdateChecker();\n\t\tregisterPermissions();\n\t\treloadCommand.notifyObservers();\n\t\tif (firstLoad) {\n\t\t\tlinkPlaceholders();\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Loads the plugin.", "call_func_name": ["com.hm.achievement.config.ConfigurationParser.loadAndParseConfiguration", "com.hm.achievement.lifecycle.PluginLoader.registerListeners", "com.hm.achievement.db.AbstractDatabaseManager.initialise", "com.hm.achievement.lifecycle.PluginLoader.initialiseCommands", "com.hm.achievement.lifecycle.PluginLoader.launchScheduledTasks", "com.hm.achievement.lifecycle.PluginLoader.launchUpdateChecker", "com.hm.achievement.lifecycle.PluginLoader.registerPermissions", "com.hm.achievement.command.executable.ReloadCommand.notifyObservers", "com.hm.achievement.lifecycle.PluginLoader.linkPlaceholders"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], [""], [""], [""]], "passed_comments": [{"com.hm.achievement.config.ConfigurationParser.loadAndParseConfiguration": "Loads the files and populates common data structures used in other parts of the plugin. Performs basic validation on the achievements."}, {"com.hm.achievement.lifecycle.PluginLoader.registerListeners": "Registers the different event listeners so they can monitor server events. If relevant categories are disabled, listeners aren't registered."}, {"com.hm.achievement.db.AbstractDatabaseManager.initialise": "Initialises the database system by extracting settings, performing setup tasks and updating schemas if necessary."}, {"com.hm.achievement.lifecycle.PluginLoader.initialiseCommands": "Links the plugin's custom command tab completer and command executor."}, {"com.hm.achievement.lifecycle.PluginLoader.launchScheduledTasks": "Launches asynchronous scheduled tasks."}, {"com.hm.achievement.lifecycle.PluginLoader.launchUpdateChecker": "Launches an update check task. If updateChecker already registered (i.e. reload), does not check for update again. If CheckForUpdate switched to false unregisters listener."}, {"com.hm.achievement.lifecycle.PluginLoader.registerPermissions": "Registers permissions that depend on the user's configuration file (for MultipleAchievements; for instance for stone breaks, achievement.count.breaks.stone will be registered)."}, {"com.hm.achievement.command.executable.ReloadCommand.notifyObservers": "Notifies all Reloadables."}, {"com.hm.achievement.lifecycle.PluginLoader.linkPlaceholders": "Links third-party placeholder plugins (PlaceholderAPI and BungeeTabListPlus currently supported)."}]}, {"index": "98", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/lifecycle/PluginLoader.java", "methodName": "com.hm.achievement.lifecycle.PluginLoader.disableAdvancedAchievements", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void disableAdvancedAchievements() {\n\t\t// Cancel scheduled tasks.\n\t\tif (asyncCachedRequestsSenderTask != null) {\n\t\t\tasyncCachedRequestsSenderTask.cancel();\n\t\t}\n\t\tif (playedTimeTask != null) {\n\t\t\tplayedTimeTask.cancel();\n\t\t}\n\t\tif (distanceTask != null) {\n\t\t\tdistanceTask.cancel();\n\t\t}\n\n\t\t// Send remaining statistics to the database and close DatabaseManager.\n\t\tasyncCachedRequestsSender.sendBatchedRequests();\n\t\tdatabaseManager.shutdown();\n\n\t\tlogger.info(\"Remaining requests sent to the database, plugin successfully disabled.\");\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Disables the plugin.", "call_func_name": ["org.bukkit.scheduler.BukkitTask.cancel", "com.hm.achievement.db.AsyncCachedRequestsSender.sendBatchedRequests", "com.hm.achievement.db.AbstractDatabaseManager.shutdown", "java.util.logging.Logger.info"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"]], "passed_comments": [{"com.hm.achievement.db.AsyncCachedRequestsSender.sendBatchedRequests": "Writes cached statistics to the database, with batched writes for efficiency purposes. If a failure occurs, the same queries will be attempted again."}, {"com.hm.achievement.db.AbstractDatabaseManager.shutdown": "Shuts the thread pool down and closes connection to database."}]}, {"index": "99", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/lifecycle/PluginLoader.java", "methodName": "com.hm.achievement.lifecycle.PluginLoader.registerListeners", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void registerListeners() {\n\t\tlogger.info(\"Registering event listeners...\");\n\t\tPluginManager pluginManager = advancedAchievements.getServer().getPluginManager();\n\t\treloadables.forEach(r -> {\n\t\t\tif (r instanceof AbstractListener) {\n\t\t\t\tAbstractListener listener = (AbstractListener) r;\n\t\t\t\tHandlerList.unregisterAll(listener);\n\t\t\t\tif (!disabledCategories.contains(listener.getCategory())) {\n\t\t\t\t\tpluginManager.registerEvents(listener, advancedAchievements);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tHandlerList.unregisterAll(fireworkListener);\n\t\tpluginManager.registerEvents(fireworkListener, advancedAchievements);\n\t\tHandlerList.unregisterAll(joinListener);\n\t\tpluginManager.registerEvents(joinListener, advancedAchievements);\n\t\tHandlerList.unregisterAll(listGUIListener);\n\t\tpluginManager.registerEvents(listGUIListener, advancedAchievements);\n\t\tHandlerList.unregisterAll(playerAdvancedAchievementListener);\n\t\tpluginManager.registerEvents(playerAdvancedAchievementListener, advancedAchievements);\n\t\tHandlerList.unregisterAll(quitListener);\n\t\tpluginManager.registerEvents(quitListener, advancedAchievements);\n\t\tHandlerList.unregisterAll(teleportListener);\n\t\tpluginManager.registerEvents(teleportListener, advancedAchievements);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Registers the different event listeners so they can monitor server events. If relevant categories are disabled, listeners aren't registered.", "call_func_name": ["java.util.logging.Logger.info", "com.hm.achievement.AdvancedAchievements.getServer", "org.bukkit.Server.getPluginManager", "java.util.function.Consumer.accept", "java.util.Set.forEach", "org.bukkit.event.HandlerList.unregisterAll", "org.bukkit.plugin.PluginManager.registerEvents"], "call_func_parameter": [["java.lang.String"], [""], [""], ["com.hm.achievement.lifecycle.PluginLoader", "org.bukkit.plugin.PluginManager"], ["java.util.function.Consumer"], ["org.bukkit.event.Listener"], ["org.bukkit.event.Listener", "org.bukkit.plugin.Plugin"]], "passed_comments": "/"}, {"index": "100", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/lifecycle/PluginLoader.java", "methodName": "com.hm.achievement.lifecycle.PluginLoader.initialiseCommands", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void initialiseCommands() {\n\t\tlogger.info(\"Setting up command executor and custom tab completers...\");\n\n\t\tPluginCommand pluginCommand = Bukkit.getPluginCommand(\"aach\");\n\t\tpluginCommand.setTabCompleter(commandTabCompleter);\n\t\tpluginCommand.setExecutor(pluginCommandExecutor);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Links the plugin's custom command tab completer and command executor.", "call_func_name": ["java.util.logging.Logger.info", "org.bukkit.Bukkit.getPluginCommand", "org.bukkit.command.PluginCommand.setTabCompleter", "org.bukkit.command.PluginCommand.setExecutor"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["org.bukkit.command.TabCompleter"], ["org.bukkit.command.CommandExecutor"]], "passed_comments": "/"}, {"index": "101", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/lifecycle/PluginLoader.java", "methodName": "com.hm.achievement.lifecycle.PluginLoader.launchScheduledTasks", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void launchScheduledTasks() {\n\t\tlogger.info(\"Launching scheduled tasks...\");\n\n\t\t// Schedule a repeating task to group database queries when statistics are modified.\n\t\tif (asyncCachedRequestsSenderTask == null) {\n\t\t\tint configPooledRequestsTaskInterval = mainConfig.getInt(\"PooledRequestsTaskInterval\", 10);\n\t\t\tasyncCachedRequestsSenderTask = Bukkit.getScheduler().runTaskTimerAsynchronously(advancedAchievements,\n\t\t\t\t\tasyncCachedRequestsSender, configPooledRequestsTaskInterval * 40L,\n\t\t\t\t\tconfigPooledRequestsTaskInterval * 20L);\n\t\t}\n\n\t\t// Schedule a repeating task to monitor played time for each player (not directly related to an event).\n\t\tif (playedTimeTask != null) {\n\t\t\tplayedTimeTask.cancel();\n\t\t}\n\t\tif (!disabledCategories.contains(NormalAchievements.PLAYEDTIME)) {\n\t\t\tint configPlaytimeTaskInterval = mainConfig.getInt(\"PlaytimeTaskInterval\", 60);\n\t\t\tplayedTimeTask = Bukkit.getScheduler().runTaskTimer(advancedAchievements, playTimeRunnable,\n\t\t\t\t\tconfigPlaytimeTaskInterval * 10L, configPlaytimeTaskInterval * 20L);\n\t\t}\n\n\t\t// Schedule a repeating task to monitor distances travelled by each player (not directly related to an event).\n\t\tif (distanceTask != null) {\n\t\t\tdistanceTask.cancel();\n\t\t}\n\t\tif (!disabledCategories.contains(NormalAchievements.DISTANCEFOOT)\n\t\t\t\t|| !disabledCategories.contains(NormalAchievements.DISTANCEPIG)\n\t\t\t\t|| !disabledCategories.contains(NormalAchievements.DISTANCEHORSE)\n\t\t\t\t|| !disabledCategories.contains(NormalAchievements.DISTANCEMINECART)\n\t\t\t\t|| !disabledCategories.contains(NormalAchievements.DISTANCEBOAT)\n\t\t\t\t|| !disabledCategories.contains(NormalAchievements.DISTANCEGLIDING)\n\t\t\t\t|| !disabledCategories.contains(NormalAchievements.DISTANCELLAMA)) {\n\t\t\tint configDistanceTaskInterval = mainConfig.getInt(\"DistanceTaskInterval\", 5);\n\t\t\tdistanceTask = Bukkit.getScheduler().runTaskTimer(advancedAchievements, distanceRunnable,\n\t\t\t\t\tconfigDistanceTaskInterval * 40L, configDistanceTaskInterval * 20L);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Launches asynchronous scheduled tasks.", "call_func_name": ["java.util.logging.Logger.info", "com.hm.achievement.file.CommentedYamlConfiguration.getInt", "org.bukkit.Bukkit.getScheduler", "org.bukkit.scheduler.BukkitScheduler.runTaskTimerAsynchronously", "org.bukkit.scheduler.BukkitTask.cancel", "java.util.Set.contains", "org.bukkit.scheduler.BukkitScheduler.runTaskTimer"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "int"], [""], ["org.bukkit.plugin.Plugin", "java.lang.Runnable", "long", "long"], [""], ["java.lang.Object"], ["org.bukkit.plugin.Plugin", "java.lang.Runnable", "long", "long"]], "passed_comments": "/"}, {"index": "102", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/lifecycle/PluginLoader.java", "methodName": "com.hm.achievement.lifecycle.PluginLoader.launchUpdateChecker", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void launchUpdateChecker() {\n\t\tif (!mainConfig.getBoolean(\"CheckForUpdate\", true)) {\n\t\t\tPlayerJoinEvent.getHandlerList().unregister(updateChecker.get());\n\t\t} else {\n\t\t\tfor (RegisteredListener registeredListener : PlayerJoinEvent.getHandlerList().getRegisteredListeners()) {\n\t\t\t\tif (registeredListener.getListener() == updateChecker) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tadvancedAchievements.getServer().getPluginManager().registerEvents(updateChecker.get(), advancedAchievements);\n\t\t\tupdateChecker.get().launchUpdateCheckerTask();\n\t\t}\n\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#BooleanLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Launches an update check task. If updateChecker already registered (i.e. reload), does not check for update again. If CheckForUpdate switched to false unregisters listener.", "call_func_name": ["com.hm.achievement.file.CommentedYamlConfiguration.getBoolean", "org.bukkit.event.player.PlayerJoinEvent.getHandlerList", "com.hm.dagger.Lazy.get", "org.bukkit.event.HandlerList.unregister", "org.bukkit.event.HandlerList.getRegisteredListeners", "org.bukkit.plugin.RegisteredListener.getListener", "com.hm.achievement.AdvancedAchievements.getServer", "org.bukkit.Server.getPluginManager", "org.bukkit.plugin.PluginManager.registerEvents", "com.hm.achievement.update.UpdateChecker.launchUpdateCheckerTask"], "call_func_parameter": [["java.lang.String", "boolean"], [""], [""], ["org.bukkit.event.Listener"], [""], [""], [""], [""], ["org.bukkit.event.Listener", "org.bukkit.plugin.Plugin"], [""]], "passed_comments": "/"}, {"index": "103", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/lifecycle/PluginLoader.java", "methodName": "com.hm.achievement.lifecycle.PluginLoader.registerPermissions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void registerPermissions() {\n\t\tlogger.info(\"Registering permissions...\");\n\n\t\tPluginManager pluginManager = Bukkit.getPluginManager();\n\t\tfor (MultipleAchievements category : MultipleAchievements.values()) {\n\t\t\tfor (String section : mainConfig.getShallowKeys(category.toString())) {\n\t\t\t\t// Permission ignores metadata (eg. sand:1) for Breaks, Places and Crafts categories and don't take\n\t\t\t\t// spaces into account.\n\t\t\t\tsection = StringUtils.deleteWhitespace(StringUtils.substringBefore(section, \":\"));\n\n\t\t\t\t// Bukkit only allows permissions to be set once, check to ensure they were not previously set when\n\t\t\t\t// performing /aach reload.\n\t\t\t\tfor (String groupElement : StringUtils.split(section, '|')) {\n\t\t\t\t\tString permissionNode = category.toPermName() + \".\" + groupElement;\n\t\t\t\t\tif (pluginManager.getPermission(permissionNode) == null) {\n\t\t\t\t\t\tpluginManager.addPermission(new Permission(permissionNode, PermissionDefault.TRUE));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#EnhancedForStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)EnhancedForStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Registers permissions that depend on the user's configuration file (for MultipleAchievements; for instance for stone breaks, achievement.count.breaks.stone will be registered).", "call_func_name": ["java.util.logging.Logger.info", "org.bukkit.Bukkit.getPluginManager", "com.hm.achievement.category.MultipleAchievements.values", "com.hm.achievement.category.MultipleAchievements.toString", "com.hm.achievement.file.CommentedYamlConfiguration.getShallowKeys", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.hm.apache.commons.lang3.StringUtils.substringBefore", "com.hm.apache.commons.lang3.StringUtils.deleteWhitespace", "com.hm.apache.commons.lang3.StringUtils.split", "java.lang.StringBuilder.<init>", "com.hm.achievement.category.MultipleAchievements.toPermName", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.bukkit.plugin.PluginManager.getPermission", "org.bukkit.permissions.Permission.<init>", "org.bukkit.plugin.PluginManager.addPermission"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.String", "char"], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String", "org.bukkit.permissions.PermissionDefault"], ["org.bukkit.permissions.Permission"]], "passed_comments": "/"}, {"index": "104", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/lifecycle/PluginLoader.java", "methodName": "com.hm.achievement.lifecycle.PluginLoader.linkPlaceholders", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void linkPlaceholders() {\n\t\tif (Bukkit.getPluginManager().isPluginEnabled(\"BungeeTabListPlus\")) {\n\t\t\tBungeeTabListPlusBukkitAPI.registerVariable(advancedAchievements,\n\t\t\t\t\tachievementCountBungeeTabListPlusVariable.get());\n\t\t}\n\n\t\tif (Bukkit.getPluginManager().isPluginEnabled(\"PlaceholderAPI\")) {\n\t\t\tachievementPlaceholderHook.get().register();\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Links third-party placeholder plugins (PlaceholderAPI and BungeeTabListPlus currently supported).", "call_func_name": ["org.bukkit.Bukkit.getPluginManager", "org.bukkit.plugin.PluginManager.isPluginEnabled", "com.hm.dagger.Lazy.get", "codecrafter47.bungeetablistplus.api.bukkit.BungeeTabListPlusBukkitAPI.registerVariable", "com.hm.achievement.placeholder.AchievementPlaceholderHook.register"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["org.bukkit.plugin.Plugin", "codecrafter47.bungeetablistplus.api.bukkit.Variable"], [""]], "passed_comments": "/"}, {"index": "105", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/lifecycle/Cleanable.java", "methodName": "com.hm.achievement.lifecycle.Cleanable.cleanPlayerData", "methodParameterType": "UUID#", "methodParameterName": "uuid#", "methodBody": "void cleanPlayerData(UUID uuid);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Cleans data for a specific player that has disconnected recently.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "106", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/lifecycle/Reloadable.java", "methodName": "com.hm.achievement.lifecycle.Reloadable.extractConfigurationParameters", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void extractConfigurationParameters() throws PluginLoadError;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Extracts and parses configuration parameters.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "107", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/runnable/AchieveDistanceRunnable.java", "methodName": "com.hm.achievement.runnable.AchieveDistanceRunnable.validateMovementAndUpdateDistance", "methodParameterType": "Player#", "methodParameterName": "player#", "methodBody": "private void validateMovementAndUpdateDistance(Player player) {\n\t\t// Update new location.\n\t\tLocation previousLocation = playerLocations.put(player.getUniqueId(), player.getLocation());\n\n\t\t// If player location not found or if player has changed world, ignore previous location.\n\t\t// Evaluating distance would give an exception.\n\t\tif (previousLocation == null || !previousLocation.getWorld().getUID().equals(player.getWorld().getUID())) {\n\t\t\treturn;\n\t\t}\n\n\t\tint difference = getDistanceDifference(player, previousLocation);\n\t\t// Player has not moved.\n\t\tif (difference == 0L) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (player.getVehicle() instanceof Horse) {\n\t\t\tupdateDistance(difference, player, NormalAchievements.DISTANCEHORSE);\n\t\t} else if (player.getVehicle() instanceof Pig) {\n\t\t\tupdateDistance(difference, player, NormalAchievements.DISTANCEPIG);\n\t\t} else if (player.getVehicle() instanceof Minecart) {\n\t\t\tupdateDistance(difference, player, NormalAchievements.DISTANCEMINECART);\n\t\t} else if (player.getVehicle() instanceof Boat) {\n\t\t\tupdateDistance(difference, player, NormalAchievements.DISTANCEBOAT);\n\t\t} else if (serverVersion >= 11 && player.getVehicle() instanceof Llama) {\n\t\t\tupdateDistance(difference, player, NormalAchievements.DISTANCELLAMA);\n\t\t} else if (serverVersion >= 9 && player.isGliding()) {\n\t\t\tupdateDistance(difference, player, NormalAchievements.DISTANCEGLIDING);\n\t\t} else if (!player.isFlying()) {\n\t\t\tupdateDistance(difference, player, NormalAchievements.DISTANCEFOOT);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#InfixExpression#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#InstanceofExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Update distances and store them into server's memory until player disconnects.", "call_func_name": ["org.bukkit.entity.Player.getUniqueId", "org.bukkit.entity.Player.getLocation", "java.util.Map.put", "org.bukkit.Location.getWorld", "org.bukkit.World.getUID", "org.bukkit.entity.Player.getWorld", "java.util.UUID.equals", "com.hm.achievement.runnable.AchieveDistanceRunnable.getDistanceDifference", "org.bukkit.entity.Player.getVehicle", "com.hm.achievement.runnable.AchieveDistanceRunnable.updateDistance", "org.bukkit.entity.Player.isGliding", "org.bukkit.entity.Player.isFlying"], "call_func_parameter": [[""], [""], ["java.lang.Object", "java.lang.Object"], [""], [""], [""], ["java.lang.Object"], ["org.bukkit.entity.Player", "org.bukkit.Location"], [""], ["int", "org.bukkit.entity.Player", "com.hm.achievement.category.NormalAchievements"], [""], [""]], "passed_comments": [{"com.hm.achievement.runnable.AchieveDistanceRunnable.getDistanceDifference": "Calculates the difference between the player's last location and his current one. May ignore the vertical axis or not depending on configuration.."}, {"com.hm.achievement.runnable.AchieveDistanceRunnable.updateDistance": "Updates distance if all conditions are met and awards achievements if necessary."}]}, {"index": "108", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/runnable/AchieveDistanceRunnable.java", "methodName": "com.hm.achievement.runnable.AchieveDistanceRunnable.getDistanceDifference", "methodParameterType": "Player#Location#", "methodParameterName": "player#previousLocation#", "methodBody": "private int getDistanceDifference(Player player, Location previousLocation) {\n\t\tif (configIgnoreVerticalDistance) {\n\t\t\tdouble xSquared = NumberConversions.square(previousLocation.getX() - player.getLocation().getX());\n\t\t\tdouble zSquared = NumberConversions.square(previousLocation.getZ() - player.getLocation().getZ());\n\t\t\treturn (int) Math.sqrt(xSquared + zSquared);\n\t\t} else {\n\t\t\treturn (int) previousLocation.distance(player.getLocation());\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#CastExpression#ReturnStatement#Block#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#CastExpression#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)CastExpression)ReturnStatement)Block(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)CastExpression)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Calculates the difference between the player's last location and his current one. May ignore the vertical axis or not depending on configuration..", "call_func_name": ["org.bukkit.Location.getX", "org.bukkit.entity.Player.getLocation", "org.bukkit.util.NumberConversions.square", "org.bukkit.Location.getZ", "java.lang.Math.sqrt", "org.bukkit.Location.distance"], "call_func_parameter": [[""], [""], ["double"], [""], ["double"], ["org.bukkit.Location"]], "passed_comments": "/"}, {"index": "109", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/runnable/AchieveDistanceRunnable.java", "methodName": "com.hm.achievement.runnable.AchieveDistanceRunnable.updateDistance", "methodParameterType": "int#Player#NormalAchievements#", "methodParameterName": "difference#player#category#", "methodBody": "private void updateDistance(int difference, Player player, NormalAchievements category) {\n\t\tif (!shouldIncreaseBeTakenIntoAccount(player, category) || disabledCategories.contains(category)) {\n\t\t\treturn;\n\t\t}\n\n\t\tlong distance = cacheManager.getAndIncrementStatisticAmount(category, player.getUniqueId(), difference);\n\t\tcheckThresholdsAndAchievements(player, category.toString(), distance);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Updates distance if all conditions are met and awards achievements if necessary.", "call_func_name": ["com.hm.achievement.runnable.AchieveDistanceRunnable.shouldIncreaseBeTakenIntoAccount", "java.util.Set.contains", "org.bukkit.entity.Player.getUniqueId", "com.hm.achievement.db.CacheManager.getAndIncrementStatisticAmount", "com.hm.achievement.category.NormalAchievements.toString", "com.hm.achievement.runnable.AchieveDistanceRunnable.checkThresholdsAndAchievements"], "call_func_parameter": [["org.bukkit.entity.Player", "com.hm.achievement.category.Category"], ["java.lang.Object"], [""], ["com.hm.achievement.category.NormalAchievements", "java.util.UUID", "int"], [""], ["org.bukkit.entity.Player", "java.lang.String", "long"]], "passed_comments": [{"com.hm.achievement.db.CacheManager.getAndIncrementStatisticAmount": "Increases the statistic for a NormalAchievement by the given value and returns the updated statistic value. Calls the database if not found in the cache."}]}, {"index": "110", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/runnable/AchievePlayTimeRunnable.java", "methodName": "com.hm.achievement.runnable.AchievePlayTimeRunnable.updateTime", "methodParameterType": "Player#long#", "methodParameterName": "player#currentTime#", "methodBody": "private void updateTime(Player player, long currentTime) {\n\t\tif (!shouldIncreaseBeTakenIntoAccount(player, NormalAchievements.PLAYEDTIME)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (configIgnoreAFKPlayedTime) {\n\t\t\t// If player is AFK, don't update played time.\n\t\t\tif (essentials.getUser(player).isAfk()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tint millisSinceLastRun = (int) (currentTime - previousRunMillis);\n\t\tlong totalMillis = cacheManager.getAndIncrementStatisticAmount(NormalAchievements.PLAYEDTIME, player.getUniqueId(),\n\t\t\t\tmillisSinceLastRun);\n\t\t// Thresholds in the configuration are in hours.\n\t\tcheckThresholdsAndAchievements(player, NormalAchievements.PLAYEDTIME.toString(), totalMillis / MILLIS_PER_HOUR);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement)ReturnStatement)Block)IfStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Updates play time if all conditions are met and awards achievements if necessary.", "call_func_name": ["com.hm.achievement.runnable.AchievePlayTimeRunnable.shouldIncreaseBeTakenIntoAccount", "com.earth2me.essentials.Essentials.getUser", "com.earth2me.essentials.User.isAfk", "org.bukkit.entity.Player.getUniqueId", "com.hm.achievement.db.CacheManager.getAndIncrementStatisticAmount", "com.hm.achievement.category.NormalAchievements.toString", "com.hm.achievement.runnable.AchievePlayTimeRunnable.checkThresholdsAndAchievements"], "call_func_parameter": [["org.bukkit.entity.Player", "com.hm.achievement.category.Category"], ["org.bukkit.entity.Player"], [""], [""], ["com.hm.achievement.category.NormalAchievements", "java.util.UUID", "int"], [""], ["org.bukkit.entity.Player", "java.lang.String", "long"]], "passed_comments": [{"com.hm.achievement.db.CacheManager.getAndIncrementStatisticAmount": "Increases the statistic for a NormalAchievement by the given value and returns the updated statistic value. Calls the database if not found in the cache."}]}, {"index": "111", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/advancement/AdvancementManager.java", "methodName": "com.hm.achievement.advancement.AdvancementManager.registerAdvancements", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void registerAdvancements() {\n\t\tcleanupOldAchievementAdvancements();\n\t\tregisterParentAdvancement();\n\t\tregisterOtherAdvancements();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Registers all achievements as advancements.", "call_func_name": ["com.hm.achievement.advancement.AdvancementManager.cleanupOldAchievementAdvancements", "com.hm.achievement.advancement.AdvancementManager.registerParentAdvancement", "com.hm.achievement.advancement.AdvancementManager.registerOtherAdvancements"], "call_func_parameter": [[""], [""], [""]], "passed_comments": [{"com.hm.achievement.advancement.AdvancementManager.cleanupOldAchievementAdvancements": "Removes all advancements previously generated by the plugin."}, {"com.hm.achievement.advancement.AdvancementManager.registerParentAdvancement": "Registers an \"Advanced Achievements\" advancement, which will be used as the parent of all advancements generated by Advanced Achievements."}, {"com.hm.achievement.advancement.AdvancementManager.registerOtherAdvancements": "Registers all non parent advancements."}]}, {"index": "112", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/advancement/AdvancementManager.java", "methodName": "com.hm.achievement.advancement.AdvancementManager.parseBackgroundTexture", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private String parseBackgroundTexture() {\n\t\tString configTexture = mainConfig.getString(\"AdvancementsBackground\", \"minecraft:textures/item/book.png\");\n\t\tif (serverVersion == 12) {\n\t\t\treturn StringUtils.replace(configTexture, \"/item/\", \"/items/\");\n\t\t}\n\t\treturn StringUtils.replaceEach(configTexture, new String[] { \"/items/\", \"book_enchanted.png\" },\n\t\t\t\tnew String[] { \"/item/\", \"enchanted_book.png\" });\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#StringLiteral#StringLiteral#ArrayInitializer#ArrayCreation#SimpleName#SimpleType#Dimension#ArrayType#StringLiteral#StringLiteral#ArrayInitializer#ArrayCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)ArrayCreation(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)ArrayCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Parses the background texture to insure maximum compatibility across Minecraft versions.", "call_func_name": ["com.hm.achievement.file.CommentedYamlConfiguration.getString", "com.hm.apache.commons.lang3.StringUtils.replace", "com.hm.apache.commons.lang3.StringUtils.replaceEach"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String[]", "java.lang.String[]"]], "passed_comments": "/"}, {"index": "113", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/advancement/AdvancementManager.java", "methodName": "com.hm.achievement.advancement.AdvancementManager.cleanupOldAchievementAdvancements", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void cleanupOldAchievementAdvancements() {\n\t\tint achievementsCleaned = 0;\n\t\tIterator<Advancement> advancements = Bukkit.advancementIterator();\n\t\twhile (advancements.hasNext()) {\n\t\t\tNamespacedKey namespacedKey = advancements.next().getKey();\n\t\t\tif (\"advancedachievements\".equals(namespacedKey.getNamespace())) {\n\t\t\t\t++achievementsCleaned;\n\t\t\t\tunsafeValues.removeAdvancement(namespacedKey);\n\t\t\t}\n\t\t}\n\t\tBukkit.reloadData();\n\t\tlogger.info(\"Cleaned \" + achievementsCleaned + \" old advancements.\");\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#PrefixExpression#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#WhileStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)WhileStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Removes all advancements previously generated by the plugin.", "call_func_name": ["org.bukkit.Bukkit.advancementIterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.bukkit.advancement.Advancement.getKey", "org.bukkit.NamespacedKey.getNamespace", "java.lang.String.equals", "org.bukkit.UnsafeValues.removeAdvancement", "org.bukkit.Bukkit.reloadData", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.logging.Logger.info"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.lang.Object"], ["org.bukkit.NamespacedKey"], [""], [""], ["java.lang.String"], ["int"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "114", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/advancement/AdvancementManager.java", "methodName": "com.hm.achievement.advancement.AdvancementManager.registerParentAdvancement", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void registerParentAdvancement() {\n\t\tNamespacedKey namespacedKey = new NamespacedKey(advancedAchievements, ADVANCED_ACHIEVEMENTS_PARENT);\n\t\tif (Bukkit.getAdvancement(namespacedKey) == null) {\n\t\t\tif (configHideAdvancements) {\n\t\t\t\tunsafeValues.loadAdvancement(namespacedKey, AdvancementJsonHelper.toHiddenJson(configBackgroundTexture));\n\t\t\t} else {\n\t\t\t\tAchievementAdvancementBuilder builder = new AchievementAdvancementBuilder()\n\t\t\t\t\t\t.iconItem(MINECRAFT_BOOK_KEY)\n\t\t\t\t\t\t.title(configRootAdvancementTitle)\n\t\t\t\t\t\t.description(\"\")\n\t\t\t\t\t\t.background(configBackgroundTexture)\n\t\t\t\t\t\t.type(AdvancementType.GOAL);\n\n\t\t\t\tAchievementAdvancement aa = (serverVersion == 12 ? builder.iconData(Integer.toString(0)) : builder).build();\n\t\t\t\tunsafeValues.loadAdvancement(namespacedKey, AdvancementJsonHelper.toJson(aa));\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#SimpleName#ConditionalExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName)ConditionalExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Registers an \"Advanced Achievements\" advancement, which will be used as the parent of all advancements generated by Advanced Achievements.", "call_func_name": ["org.bukkit.NamespacedKey.<init>", "org.bukkit.Bukkit.getAdvancement", "com.hm.achievement.advancement.AdvancementJsonHelper.toHiddenJson", "org.bukkit.UnsafeValues.loadAdvancement", "java.lang.Integer.toString", "com.hm.achievement.advancement.AdvancementJsonHelper.toJson"], "call_func_parameter": [["org.bukkit.plugin.Plugin", "java.lang.String"], ["org.bukkit.NamespacedKey"], ["java.lang.String"], ["org.bukkit.NamespacedKey", "java.lang.String"], ["int"], ["com.hm.achievement.advancement.AchievementAdvancement"]], "passed_comments": "/"}, {"index": "115", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/advancement/AdvancementManager.java", "methodName": "com.hm.achievement.advancement.AdvancementManager.registerOtherAdvancements", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void registerOtherAdvancements() {\n\t\tgeneratedAdvancements = 1; // Already generated 1 for parent.\n\t\tif (!disabledCategories.contains(CommandAchievements.COMMANDS)) {\n\t\t\tString parentKey = ADVANCED_ACHIEVEMENTS_PARENT;\n\t\t\tfor (String ach : mainConfig.getShallowKeys(CommandAchievements.COMMANDS.toString())) {\n\t\t\t\tparentKey = registerAdvancement(CommandAchievements.COMMANDS, CommandAchievements.COMMANDS + \".\" + ach,\n\t\t\t\t\t\tparentKey, true);\n\t\t\t}\n\t\t}\n\n\t\tfor (NormalAchievements category : NormalAchievements.values()) {\n\t\t\tregisterCategoryAdvancements(category, \"\");\n\t\t}\n\n\t\tfor (MultipleAchievements category : MultipleAchievements.values()) {\n\t\t\tfor (String section : mainConfig.getShallowKeys(category.toString())) {\n\t\t\t\tregisterCategoryAdvancements(category, \".\" + section);\n\t\t\t}\n\t\t}\n\t\tBukkit.reloadData();\n\t\tlogger.info(\"Generated \" + generatedAdvancements + \" new advancements.\");\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#InfixExpression#SimpleName#BooleanLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Registers all non parent advancements.", "call_func_name": ["java.util.Set.contains", "com.hm.achievement.category.CommandAchievements.toString", "com.hm.achievement.file.CommentedYamlConfiguration.getShallowKeys", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.advancement.AdvancementManager.registerAdvancement", "com.hm.achievement.category.NormalAchievements.values", "com.hm.achievement.advancement.AdvancementManager.registerCategoryAdvancements", "com.hm.achievement.category.MultipleAchievements.values", "com.hm.achievement.category.MultipleAchievements.toString", "org.bukkit.Bukkit.reloadData", "java.lang.StringBuilder.append", "java.util.logging.Logger.info"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.String"], [""], [""], [""], [""], ["java.lang.Object"], ["java.lang.String"], [""], ["com.hm.achievement.category.Category", "java.lang.String", "java.lang.String", "boolean"], [""], ["com.hm.achievement.category.Category", "java.lang.String"], [""], [""], [""], ["int"], ["java.lang.String"]], "passed_comments": [{"com.hm.achievement.advancement.AdvancementManager.registerAdvancement": "Registers an individual advancement."}, {"com.hm.achievement.advancement.AdvancementManager.registerCategoryAdvancements": "Registers all advancements for a given category or subcategory."}]}, {"index": "116", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/advancement/AdvancementManager.java", "methodName": "com.hm.achievement.advancement.AdvancementManager.registerCategoryAdvancements", "methodParameterType": "Category#String#", "methodParameterName": "category#subcategory#", "methodBody": "private void registerCategoryAdvancements(Category category, String subcategory) {\n\t\tif (disabledCategories.contains(category)) {\n\t\t\t// Ignore this type.\n\t\t\treturn;\n\t\t}\n\n\t\tList<Long> orderedThresholds = subcategory.isEmpty() ? sortedThresholds.get(category.toString())\n\t\t\t\t: sortedThresholds.get(category + subcategory);\n\t\tString parentKey = ADVANCED_ACHIEVEMENTS_PARENT;\n\t\t// Advancements are registered as a branch with increasing threshold values.\n\t\tfor (int i = 0; i < orderedThresholds.size(); ++i) {\n\t\t\tboolean last = (i == orderedThresholds.size() - 1);\n\t\t\tparentKey = registerAdvancement(category, category + subcategory + \".\" + orderedThresholds.get(i), parentKey,\n\t\t\t\t\tlast);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PrefixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#ParenthesizedExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)ParenthesizedExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Registers all advancements for a given category or subcategory.", "call_func_name": ["java.util.Set.contains", "java.lang.String.isEmpty", "java.lang.Object.toString", "java.util.Map.get", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.List.size", "java.util.List.get", "com.hm.achievement.advancement.AdvancementManager.registerAdvancement"], "call_func_parameter": [["java.lang.Object"], [""], [""], ["java.lang.Object"], [""], ["java.lang.Object"], ["java.lang.String"], [""], [""], ["int"], ["com.hm.achievement.category.Category", "java.lang.String", "java.lang.String", "boolean"]], "passed_comments": [{"com.hm.achievement.advancement.AdvancementManager.registerAdvancement": "Registers an individual advancement."}]}, {"index": "117", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/advancement/AdvancementManager.java", "methodName": "com.hm.achievement.advancement.AdvancementManager.registerAdvancement", "methodParameterType": "Category#String#String#boolean#", "methodParameterName": "category#configAchievement#parentKey#lastAchievement#", "methodBody": "private String registerAdvancement(Category category, String configAchievement, String parentKey,\n\t\t\tboolean lastAchievement) {\n\t\tString achName = mainConfig.getString(configAchievement + \".Name\", \"\");\n\t\tString achDisplayName = mainConfig.getString(configAchievement + \".DisplayName\", \"\");\n\t\tif (StringUtils.isEmpty(achDisplayName)) {\n\t\t\tachDisplayName = achName;\n\t\t}\n\t\t// Strip colours as the advancements interface does not support them.\n\t\tachDisplayName = StringHelper.removeFormattingCodes(achDisplayName);\n\n\t\tString achKey = getKey(achName);\n\t\tNamespacedKey namespacedKey = new NamespacedKey(advancedAchievements, achKey);\n\t\tint metadata = guiConfig.getInt(category + \".Metadata\", 0);\n\t\tString description = \"\";\n\t\tif (configRegisterAdvancementDescriptions) {\n\t\t\t// Give priority to the goal to stick with Vanilla naming of advancements.\n\t\t\tdescription = mainConfig.getString(configAchievement + \".Goal\", \"\");\n\t\t\tif (!StringUtils.isNotBlank(description)) {\n\t\t\t\tdescription = mainConfig.getString(configAchievement + \".Message\", \"\");\n\t\t\t}\n\t\t\tdescription = StringHelper.removeFormattingCodes(description);\n\t\t}\n\n\t\tString path = category + \".Item\";\n\t\tMaterial material = materialHelper.matchMaterial(guiConfig.getString(path), Material.BOOK, \"gui.yml (\" + path + \")\");\n\t\tString icon = serverVersion == 12 ? getInternalName(new ItemStack(material, 1, (short) metadata))\n\t\t\t\t: material.name().toLowerCase();\n\t\tAchievementAdvancementBuilder builder = new AchievementAdvancementBuilder()\n\t\t\t\t.iconItem(icon)\n\t\t\t\t.title(achDisplayName)\n\t\t\t\t.description(description)\n\t\t\t\t.parent(\"advancedachievements:\" + parentKey)\n\t\t\t\t.type(lastAchievement ? AdvancementType.CHALLENGE : AdvancementType.TASK);\n\n\t\tAchievementAdvancement aa = (serverVersion == 12 ? builder.iconData(Integer.toString(metadata)) : builder).build();\n\t\tunsafeValues.loadAdvancement(namespacedKey, AdvancementJsonHelper.toJson(aa));\n\t\t++generatedAdvancements;\n\t\treturn achKey;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#NumberLiteral#PrimitiveType#SimpleName#CastExpression#ClassInstanceCreation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#ConditionalExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#ConditionalExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#PrefixExpression#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(NumberLiteral)NumberLiteral(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression)ClassInstanceCreation)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation(SimpleName)SimpleName(ConditionalExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConditionalExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)ConditionalExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Registers an individual advancement.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.file.CommentedYamlConfiguration.getString", "com.hm.apache.commons.lang3.StringUtils.isEmpty", "com.hm.achievement.utils.StringHelper.removeFormattingCodes", "com.hm.achievement.advancement.AdvancementManager.getKey", "org.bukkit.NamespacedKey.<init>", "java.lang.StringBuilder.append", "com.hm.achievement.file.CommentedYamlConfiguration.getInt", "com.hm.apache.commons.lang3.StringUtils.isNotBlank", "com.hm.achievement.file.CommentedYamlConfiguration.getString", "com.hm.achievement.utils.MaterialHelper.matchMaterial", "org.bukkit.inventory.ItemStack.<init>", "com.hm.achievement.advancement.AdvancementManager.getInternalName", "org.bukkit.Material.name", "java.lang.String.toLowerCase", "java.lang.Integer.toString", "com.hm.achievement.advancement.AdvancementJsonHelper.toJson", "org.bukkit.UnsafeValues.loadAdvancement"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String"], ["java.lang.CharSequence"], ["java.lang.String"], ["java.lang.String"], ["org.bukkit.plugin.Plugin", "java.lang.String"], ["java.lang.Object"], ["java.lang.String", "int"], ["java.lang.CharSequence"], ["java.lang.String"], ["java.lang.String", "org.bukkit.Material", "java.lang.String"], ["org.bukkit.Material", "int", "short"], ["org.bukkit.inventory.ItemStack"], [""], [""], ["int"], ["com.hm.achievement.advancement.AchievementAdvancement"], ["org.bukkit.NamespacedKey", "java.lang.String"]], "passed_comments": [{"com.hm.achievement.utils.MaterialHelper.matchMaterial": "Tries to match a name to a Material instance and returns a default value if not found."}, {"com.hm.achievement.advancement.AdvancementManager.getInternalName": "Gets the internal item used by Vanilla Minecraft. These are the only names supported by advancements. Material and internal names can differ quite significantly (for instance: book_and_quill vs. writable_book)."}]}, {"index": "118", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/advancement/AdvancementManager.java", "methodName": "com.hm.achievement.advancement.AdvancementManager.getInternalName", "methodParameterType": "ItemStack#", "methodParameterName": "item#", "methodBody": "private String getInternalName(ItemStack item) {\n\t\ttry {\n\t\t\tObject nmsItemStack = PackageType.CRAFTBUKKIT.getClass(PACKAGE_INVENTORY + \".\" + CLASS_CRAFT_ITEM_STACK)\n\t\t\t\t\t.getMethod(METHOD_AS_NMS_COPY, ItemStack.class).invoke(null, item);\n\t\t\tObject nmsItem = PackageType.MINECRAFT_SERVER.getClass(CLASS_ITEM_STACK).getMethod(METHOD_GET_ITEM)\n\t\t\t\t\t.invoke(nmsItemStack);\n\t\t\tObject registry = PackageType.MINECRAFT_SERVER.getClass(CLASS_ITEM).getField(FIELD_REGISTRY).get(null);\n\t\t\tObject minecraftKey = PackageType.MINECRAFT_SERVER.getClass(CLASS_REGISTRY_MATERIALS)\n\t\t\t\t\t.getMethod(METHOD_B, Object.class).invoke(registry, nmsItem);\n\t\t\treturn \"minecraft:\" + PackageType.MINECRAFT_SERVER.getClass(CLASS_MINECRAFT_KEY).getMethod(METHOD_GET_KEY)\n\t\t\t\t\t.invoke(minecraftKey);\n\t\t} catch (Exception e) {\n\t\t\tlogger.warning(\"Failed to get internal \" + item.getType().name().toLowerCase() + \" name for advancement icon.\"\n\t\t\t\t\t+ \"Using book instead.\");\n\t\t\treturn MINECRAFT_BOOK_KEY;\n\t\t}\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#NullLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Gets the internal item used by Vanilla Minecraft. These are the only names supported by advancements. Material and internal names can differ quite significantly (for instance: book_and_quill vs. writable_book).", "call_func_name": ["java.lang.Class.getMethod", "java.lang.reflect.Method.invoke", "java.lang.Class.getField", "java.lang.reflect.Field.get", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.bukkit.inventory.ItemStack.getType", "org.bukkit.Material.name", "java.lang.String.toLowerCase", "java.util.logging.Logger.warning"], "call_func_parameter": [["java.lang.String", "java.lang.Class[]"], ["java.lang.Object", "java.lang.Object[]"], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.Object"], [""], [""], [""], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "119", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/command/executable/ReloadCommand.java", "methodName": "com.hm.achievement.command.executable.ReloadCommand.notifyObservers", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void notifyObservers() throws PluginLoadError {\n\t\tfor (Reloadable reloadable : reloadables.get()) {\n\t\t\treloadable.extractConfigurationParameters();\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Notifies all Reloadables.", "call_func_name": ["com.hm.dagger.Lazy.get", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.hm.achievement.lifecycle.Reloadable.extractConfigurationParameters"], "call_func_parameter": [[""], [""], [""], [""], [""]], "passed_comments": [{"com.hm.achievement.lifecycle.Reloadable.extractConfigurationParameters": "Extracts and parses configuration parameters."}]}, {"index": "120", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/command/executable/AbstractCommand.java", "methodName": "com.hm.achievement.command.executable.AbstractCommand.execute", "methodParameterType": "CommandSender#String[]#", "methodParameterName": "sender#args#", "methodBody": "public void execute(CommandSender sender, String[] args) {\n\t\tString permission = getClass().getAnnotation(CommandSpec.class).permission();\n\t\tif (!permission.isEmpty() && !sender.hasPermission(\"achievement.\" + permission)) {\n\t\t\tsender.sendMessage(langNoPermissions);\n\t\t\treturn;\n\t\t}\n\n\t\tonExecute(sender, args);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Executes the command issued by the sender if he has the relevant permissions. If permission null, skip check.", "call_func_name": ["java.lang.Object.getClass", "java.lang.Class.getAnnotation", "com.hm.achievement.command.executable.CommandSpec.permission", "java.lang.String.isEmpty", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.bukkit.command.CommandSender.hasPermission", "org.bukkit.command.CommandSender.sendMessage", "com.hm.achievement.command.executable.AbstractCommand.onExecute"], "call_func_parameter": [[""], ["java.lang.Class"], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["org.bukkit.command.CommandSender", "java.lang.String[]"]], "passed_comments": [{"com.hm.achievement.command.executable.AbstractCommand.onExecute": "Executes behaviour specific to the implementing command."}]}, {"index": "121", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/command/executable/AbstractCommand.java", "methodName": "com.hm.achievement.command.executable.AbstractCommand.onExecute", "methodParameterType": "CommandSender#String[]#", "methodParameterName": "sender#args#", "methodBody": "abstract void onExecute(CommandSender sender, String[] args);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Executes behaviour specific to the implementing command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "122", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/command/executable/BookCommand.java", "methodName": "com.hm.achievement.command.executable.BookCommand.fillBook", "methodParameterType": "List<AwardedDBAchievement>#Player#", "methodParameterName": "achievements#player#", "methodBody": "private void fillBook(List<AwardedDBAchievement> achievements, Player player) {\n\t\tItemStack book = new ItemStack(Material.WRITTEN_BOOK);\n\t\tList<String> bookPages = new ArrayList<>(achievements.size());\n\t\tBookMeta bookMeta = (BookMeta) book.getItemMeta();\n\n\t\tfor (AwardedDBAchievement achievement : achievements) {\n\t\t\tString currentAchievement = \"&0\" + achievement.getName() + configBookSeparator + achievement.getMessage()\n\t\t\t\t\t+ configBookSeparator + achievement.getFormattedDate();\n\t\t\tcurrentAchievement = translateColorCodes(currentAchievement);\n\t\t\tbookPages.add(currentAchievement);\n\t\t}\n\n\t\t// Set the pages and other elements of the book (author, title and date of reception).\n\t\tsetBookPages(bookPages, bookMeta);\n\t\tbookMeta.setAuthor(player.getName());\n\t\tbookMeta.setTitle(langBookName);\n\t\tbookMeta.setLore(\n\t\t\t\tArrays.asList(StringUtils.replaceOnce(langBookDate, \"DATE\", dateFormat.format(System.currentTimeMillis()))));\n\t\tbook.setItemMeta(bookMeta);\n\n\t\t// Check whether player has room in his inventory, else drop book on the ground.\n\t\tif (player.getInventory().firstEmpty() != -1) {\n\t\t\tplayer.getInventory().addItem(book);\n\t\t} else {\n\t\t\tplayer.getWorld().dropItem(player.getLocation(), book);\n\t\t}\n\t\tplayer.sendMessage(langBookReceived);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs the pages of a book.", "call_func_name": ["org.bukkit.inventory.ItemStack.<init>", "java.util.List.size", "java.util.ArrayList.<init>", "org.bukkit.inventory.ItemStack.getItemMeta", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.hm.achievement.db.data.AwardedDBAchievement.getName", "com.hm.achievement.db.data.AwardedDBAchievement.getMessage", "com.hm.achievement.db.data.AwardedDBAchievement.getFormattedDate", "java.lang.StringBuilder.toString", "com.hm.achievement.command.executable.BookCommand.translateColorCodes", "java.util.List.add", "com.hm.achievement.command.executable.BookCommand.setBookPages", "org.bukkit.entity.Player.getName", "org.bukkit.inventory.meta.BookMeta.setAuthor", "org.bukkit.inventory.meta.BookMeta.setTitle", "java.lang.System.currentTimeMillis", "java.lang.Long.valueOf", "java.text.DateFormat.format", "com.hm.apache.commons.lang3.StringUtils.replaceOnce", "java.util.Arrays.asList", "org.bukkit.inventory.meta.BookMeta.setLore", "org.bukkit.inventory.ItemStack.setItemMeta", "org.bukkit.entity.Player.getInventory", "org.bukkit.inventory.PlayerInventory.firstEmpty", "org.bukkit.inventory.PlayerInventory.addItem", "org.bukkit.entity.Player.getWorld", "org.bukkit.entity.Player.getLocation", "org.bukkit.World.dropItem", "org.bukkit.entity.Player.sendMessage"], "call_func_parameter": [["org.bukkit.Material"], [""], ["int"], [""], [""], [""], [""], [""], ["java.lang.String"], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.Object"], ["java.util.List", "org.bukkit.inventory.meta.BookMeta"], [""], ["java.lang.String"], ["java.lang.String"], [""], ["long"], ["java.lang.Object"], ["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.Object[]"], ["java.util.List"], ["org.bukkit.inventory.meta.ItemMeta"], [""], [""], ["org.bukkit.inventory.ItemStack[]"], [""], [""], ["org.bukkit.Location", "org.bukkit.inventory.ItemStack"], ["java.lang.String"]], "passed_comments": [{"com.hm.achievement.command.executable.BookCommand.setBookPages": "Adds pages to the BookMeta. A Spigot commit in the late days of Minecraft 1.11.2 started enforcing extremely low limits (why? If it's not broken, don't fix it.), with books limited in page size and total number of pages, as well as title length. This function bypasses such limits and restores the original CraftBukkit behaviour. See https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/4acd0f49e07e0912096e79494472535baf0db2ab for more information."}]}, {"index": "123", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/command/executable/BookCommand.java", "methodName": "com.hm.achievement.command.executable.BookCommand.isInCooldownPeriod", "methodParameterType": "Player#", "methodParameterName": "player#", "methodBody": "private boolean isInCooldownPeriod(Player player) {\n\t\t// Player bypasses cooldown if he has full plugin permissions.\n\t\tif (player.hasPermission(\"achievement.*\") || configTimeBook == 0) {\n\t\t\treturn false;\n\t\t}\n\t\tlong currentTime = System.currentTimeMillis();\n\t\tLong lastListTime = playersBookTime.get(player.getUniqueId());\n\t\tif (lastListTime == null || currentTime - lastListTime > configTimeBook) {\n\t\t\tplayersBookTime.put(player.getUniqueId(), currentTime);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#NumberLiteral#InfixExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#InfixExpression#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if player hasn't done a command too recently (with \"too recently\" being defined in configuration file).", "call_func_name": ["org.bukkit.entity.Player.hasPermission", "java.lang.System.currentTimeMillis", "org.bukkit.entity.Player.getUniqueId", "java.util.HashMap.get", "java.lang.Long.longValue", "java.lang.Long.valueOf", "java.util.HashMap.put"], "call_func_parameter": [["java.lang.String"], [""], [""], ["java.lang.Object"], [""], ["long"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "124", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/command/executable/BookCommand.java", "methodName": "com.hm.achievement.command.executable.BookCommand.setBookPages", "methodParameterType": "List<String>#BookMeta#", "methodParameterName": "bookPages#bookMeta#", "methodBody": "@SuppressWarnings(\"unchecked\")\n\tprivate void setBookPages(List<String> bookPages, BookMeta bookMeta) {\n\t\tif (serverVersion >= 11) {\n\t\t\ttry {\n\t\t\t\t// Code we're trying to execute: this.pages.add(CraftChatMessage.fromString(page, true)[0]); in\n\t\t\t\t// CraftMetaBook.java.\n\t\t\t\tClass<?> craftMetaBookClass = PackageType.CRAFTBUKKIT\n\t\t\t\t\t\t.getClass(PACKAGE_INVENTORY + \".\" + CLASS_CRAFT_META_BOOK);\n\t\t\t\tList<Object> pages = (List<Object>) craftMetaBookClass.getField(FIELD_PAGES)\n\t\t\t\t\t\t.get(craftMetaBookClass.cast(bookMeta));\n\t\t\t\tMethod fromStringMethod = PackageType.CRAFTBUKKIT.getClass(PACKAGE_UTIL + \".\" + CLASS_CRAFT_CHAT_MESSAGE)\n\t\t\t\t\t\t.getMethod(METHOD_FROM_STRING, String.class, boolean.class);\n\t\t\t\tfor (String bookPage : bookPages) {\n\t\t\t\t\tpages.add(((Object[]) fromStringMethod.invoke(null, bookPage, true))[0]);\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.warning(\"Error while creating book pages. Your achievements book may be trimmed down to 50 pages.\");\n\t\t\t\tbookMeta.setPages(bookPages);\n\t\t\t}\n\t\t} else {\n\t\t\tbookMeta.setPages(bookPages);\n\t\t}\n\t}", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#PrimitiveType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#NullLiteral#SimpleName#BooleanLiteral#MethodInvocation#CastExpression#ParenthesizedExpression#NumberLiteral#ArrayAccess#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(ParenthesizedExpression(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)CastExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Adds pages to the BookMeta. A Spigot commit in the late days of Minecraft 1.11.2 started enforcing extremely low limits (why? If it's not broken, don't fix it.), with books limited in page size and total number of pages, as well as title length. This function bypasses such limits and restores the original CraftBukkit behaviour. See https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/commits/4acd0f49e07e0912096e79494472535baf0db2ab for more information.", "call_func_name": ["java.lang.Class.getField", "java.lang.Class.cast", "java.lang.reflect.Field.get", "java.lang.Class.getMethod", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.Boolean.valueOf", "java.lang.reflect.Method.invoke", "java.util.List.add", "java.util.logging.Logger.warning", "org.bukkit.inventory.meta.BookMeta.setPages"], "call_func_parameter": [["java.lang.String"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.String", "java.lang.Class[]"], [""], [""], [""], ["boolean"], ["java.lang.Object", "java.lang.Object[]"], ["java.lang.Object"], ["java.lang.String"], ["java.util.List"]], "passed_comments": "/"}, {"index": "125", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/command/executable/AbstractParsableCommand.java", "methodName": "com.hm.achievement.command.executable.AbstractParsableCommand.onExecuteForPlayer", "methodParameterType": "CommandSender#String[]#Player#", "methodParameterName": "sender#args#player#", "methodBody": "abstract void onExecuteForPlayer(CommandSender sender, String[] args, Player player);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Executes actions specific to the class extending this abstract class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "126", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/command/executable/AbstractParsableCommand.java", "methodName": "com.hm.achievement.command.executable.AbstractParsableCommand.parseAchievementName", "methodParameterType": "String[]#", "methodParameterName": "args#", "methodBody": "String parseAchievementName(String[] args) {\n\t\tStringBuilder achievementName = new StringBuilder();\n\t\t// Rebuild name of achievement by concatenating elements in the string array. The name of the player is last.\n\t\tfor (int i = 1; i < args.length - 1; i++) {\n\t\t\tachievementName.append(args[i]);\n\t\t\tif (i != args.length - 2) {\n\t\t\t\tachievementName.append(' ');\n\t\t\t}\n\t\t}\n\t\treturn achievementName.toString();\n\t}", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extracts the name of the achievement from the command line arguments.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], ["char"], [""]], "passed_comments": "/"}, {"index": "127", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/command/executable/HelpCommand.java", "methodName": "com.hm.achievement.command.executable.HelpCommand.sendJsonClickableHoverableMessage", "methodParameterType": "CommandSender#String#String#String#", "methodParameterName": "sender#message#command#hover#", "methodBody": "private void sendJsonClickableHoverableMessage(CommandSender sender, String message, String command, String hover) {\n\t\t// Send clickable and hoverable message if sender is a player and if supported by the Minecraft version.\n\t\tif (sender instanceof Player && serverVersion > 7) {\n\t\t\ttry {\n\t\t\t\tFancyMessageSender.sendHoverableCommandMessage((Player) sender, message, command, hover,\n\t\t\t\t\t\tconfigColor.name().toLowerCase());\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.warning(\n\t\t\t\t\t\t\"Failed to display clickable and hoverable message in /aach help command. Displaying standard message instead.\");\n\t\t\t\tsender.sendMessage(message);\n\t\t\t}\n\t\t} else {\n\t\t\tsender.sendMessage(message);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Sends a packet message to the server in order to display a clickable and hoverable message. A suggested command is displayed in the chat when clicked on, and an additional help message appears when a command is hovered.", "call_func_name": ["org.bukkit.ChatColor.name", "java.lang.String.toLowerCase", "com.hm.achievement.particle.FancyMessageSender.sendHoverableCommandMessage", "java.util.logging.Logger.warning", "org.bukkit.command.CommandSender.sendMessage"], "call_func_parameter": [[""], [""], ["org.bukkit.entity.Player", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "128", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/command/executable/AbstractRankingCommand.java", "methodName": "com.hm.achievement.command.executable.AbstractRankingCommand.getRankingSymbol", "methodParameterType": "int#", "methodParameterName": "rank#", "methodBody": "private String getRankingSymbol(int rank) {\n\t\tint decimalRankSymbol;\n\t\tif (rank <= 10) {\n\t\t\tdecimalRankSymbol = DECIMAL_CIRCLED_ONE + rank - 1;\n\t\t} else if (rank <= 20) {\n\t\t\tdecimalRankSymbol = DECIMAL_CIRCLED_ELEVEN + rank - 11;\n\t\t} else if (rank <= 35) {\n\t\t\tdecimalRankSymbol = DECIMAL_CIRCLED_TWENTY_ONE + rank - 21;\n\t\t} else {\n\t\t\tdecimalRankSymbol = DECIMAL_CIRCLED_THIRTY_SIX + rank - 36;\n\t\t}\n\t\treturn StringEscapeUtils.unescapeJava(\"\\\\u\" + Integer.toHexString(decimalRankSymbol));\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#InfixExpression#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#Block#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#InfixExpression#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#Block#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#InfixExpression#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#InfixExpression#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement)IfStatement)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an UTF-8 circled number based on the player's rank.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Integer.toHexString", "java.lang.StringBuilder.toString", "com.hm.apache.commons.text.StringEscapeUtils.unescapeJava"], "call_func_parameter": [[""], ["java.lang.String"], ["int"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "129", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/command/executable/AbstractRankingCommand.java", "methodName": "com.hm.achievement.command.executable.AbstractRankingCommand.getRankingStartTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "abstract long getRankingStartTime();", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns start time for a specific ranking period.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "130", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/command/executable/AbstractRankingCommand.java", "methodName": "com.hm.achievement.command.executable.AbstractRankingCommand.launchEffects", "methodParameterType": "Player#", "methodParameterName": "player#", "methodBody": "private void launchEffects(Player player) {\n\t\tif (configAdditionalEffects) {\n\t\t\tif (serverVersion >= 13) {\n\t\t\t\tplayer.spawnParticle(Particle.PORTAL, player.getLocation(), 100, 0, 1, 0, 0.5f);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tParticleEffect.PORTAL.display(0, 1, 0, 0.5f, 1000, player.getLocation(), 1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tlogger.warning(\"Failed to display additional particle effects for rankings.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (configSound) {\n\t\t\tsoundPlayer.play(player, configSoundRanking, \"ENTITY_FIREWORK_ROCKET_BLAST\", \"ENTITY_FIREWORK_LARGE_BLAST\",\n\t\t\t\t\t\"FIREWORK_BLAST\");\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#NumberLiteral#NumberLiteral#NumberLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#NumberLiteral#NumberLiteral#NumberLiteral#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Launches sound and particle effects if player is in a top list.", "call_func_name": ["org.bukkit.entity.Player.getLocation", "org.bukkit.entity.Player.spawnParticle", "com.hm.achievement.particle.ParticleEffect.display", "java.util.logging.Logger.warning", "com.hm.achievement.utils.SoundPlayer.play"], "call_func_parameter": [[""], ["org.bukkit.Particle", "org.bukkit.Location", "int", "double", "double", "double", "double"], ["float", "float", "float", "float", "int", "org.bukkit.Location", "double"], ["java.lang.String"], ["org.bukkit.entity.Player", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"]], "passed_comments": [{"com.hm.achievement.utils.SoundPlayer.play": "Plays a sound provided via configuration. If the sound is invalid, this method falls back to one of the other values provided, dependent on the Minecraft version."}]}, {"index": "131", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/command/executable/ToggleCommand.java", "methodName": "com.hm.achievement.command.executable.ToggleCommand.isPlayerToggled", "methodParameterType": "Player#", "methodParameterName": "player#", "methodBody": "public boolean isPlayerToggled(Player player) {\n\t\treturn toggledPlayers.contains(player.getUniqueId());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Indicates whether player has used the /aach toggle command since the last server restart/plugin reload.", "call_func_name": ["org.bukkit.entity.Player.getUniqueId", "java.util.Set.contains"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "132", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/command/executor/PluginCommandExecutor.java", "methodName": "com.hm.achievement.command.executor.PluginCommandExecutor.shouldExecute", "methodParameterType": "AbstractCommand#String[]#", "methodParameterName": "command#args#", "methodBody": "private boolean shouldExecute(AbstractCommand command, String[] args) {\n\t\tCommandSpec annotation = command.getClass().getAnnotation(CommandSpec.class);\n\t\treturn args.length >= annotation.minArgs() && args.length <= annotation.maxArgs()\n\t\t\t\t&& (args.length == 0 || annotation.name().equalsIgnoreCase(args[0]));\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#InfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)InfixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines whether an Advanced Achievements command should be executed based on the provided command line arguments.", "call_func_name": ["java.lang.Object.getClass", "java.lang.Class.getAnnotation", "com.hm.achievement.command.executable.CommandSpec.minArgs", "com.hm.achievement.command.executable.CommandSpec.maxArgs", "com.hm.achievement.command.executable.CommandSpec.name", "java.lang.String.equalsIgnoreCase"], "call_func_parameter": [[""], ["java.lang.Class"], [""], [""], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "133", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/command/completer/CommandTabCompleter.java", "methodName": "com.hm.achievement.command.completer.CommandTabCompleter.getPartialList", "methodParameterType": "Collection<String>#String#", "methodParameterName": "options#prefix#", "methodBody": "private List<String> getPartialList(Collection<String> options, String prefix) {\n\t\t// Find matching options\n\t\t// Replace spaces with an Open Box character to prevent completing wrong word. Prevented Behaviour:\n\t\t// T -> Tamer -> Teleport Man -> Teleport The Avener -> Teleport The The Smelter\n\t\t// Sort matching elements by alphabetical order.\n\t\tList<String> allOptions = options.stream()\n\t\t\t\t.filter(s1 -> s1.toLowerCase().startsWith(prefix.toLowerCase()))\n\t\t\t\t.map(s -> s.replace(' ', '\\u2423'))\n\t\t\t\t.sorted()\n\t\t\t\t.collect(Collectors.toList());\n\n\t\tif (serverVersion < 13 && allOptions.size() > MAX_LIST_LENGTH) {\n\t\t\tallOptions = allOptions.subList(0, MAX_LIST_LENGTH - 1);\n\t\t\t// Suspension points to show that list was truncated.\n\t\t\tallOptions.add(\"\\u2022\\u2022\\u2022\");\n\t\t}\n\t\treturn allOptions;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#CharacterLiteral#CharacterLiteral#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(CharacterLiteral)CharacterLiteral)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a partial list based on the input set. Members of the returned list must start with what the player has types so far. The list also has a limited length prior to Minecraft 1.13 to avoid filling the player's screen.", "call_func_name": ["java.util.Collection.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Stream.sorted", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect", "java.util.List.size", "java.util.List.subList", "java.util.List.add"], "call_func_parameter": [[""], ["java.lang.String"], ["java.util.function.Predicate"], [""], ["java.util.function.Function"], [""], [""], ["java.util.stream.Collector"], [""], ["int", "int"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "134", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AbstractDatabaseManager.java", "methodName": "com.hm.achievement.db.AbstractDatabaseManager.initialise", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void initialise() throws PluginLoadError {\n\t\tlogger.info(\"Initialising database...\");\n\n\t\tprefix = mainConfig.getString(\"TablePrefix\", \"\");\n\n\t\ttry {\n\t\t\tperformPreliminaryTasks();\n\t\t} catch (ClassNotFoundException e) {\n\t\t\tlogger.severe(\"The JBDC driver for the chosen database type was not found.\");\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\tlogger.log(Level.SEVERE, \"Error while encoding the database URL:\", e);\n\t\t}\n\n\t\t// Try to establish connection with database; stays opened until explicitly closed by the plugin.\n\t\tConnection conn = getSQLConnection();\n\n\t\tif (conn == null) {\n\t\t\tthrow new PluginLoadError(\"Failed to establish database connection. Please verify your settings in config.yml.\");\n\t\t}\n\n\t\tdatabaseUpdater.renameExistingTables(this);\n\t\tdatabaseUpdater.initialiseTables(this);\n\t\tdatabaseUpdater.updateOldDBToMaterial(this);\n\t\tdatabaseUpdater.updateOldDBToDates(this);\n\t\tdatabaseUpdater.updateOldDBToTimestamps(this);\n\t\tArrays.stream(MultipleAchievements.values()).forEach(m -> databaseUpdater.updateOldDBColumnSize(this, m));\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Initialises the database system by extracting settings, performing setup tasks and updating schemas if necessary.", "call_func_name": ["java.util.logging.Logger.info", "com.hm.achievement.file.CommentedYamlConfiguration.getString", "com.hm.achievement.db.AbstractDatabaseManager.performPreliminaryTasks", "java.util.logging.Logger.severe", "java.util.logging.Logger.log", "com.hm.achievement.db.AbstractDatabaseManager.getSQLConnection", "com.hm.achievement.exception.PluginLoadError.<init>", "com.hm.achievement.db.DatabaseUpdater.renameExistingTables", "com.hm.achievement.db.DatabaseUpdater.initialiseTables", "com.hm.achievement.db.DatabaseUpdater.updateOldDBToMaterial", "com.hm.achievement.db.DatabaseUpdater.updateOldDBToDates", "com.hm.achievement.db.DatabaseUpdater.updateOldDBToTimestamps", "com.hm.achievement.category.MultipleAchievements.values", "java.util.Arrays.stream", "java.util.function.Consumer.accept", "java.util.stream.Stream.forEach"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String"], ["java.util.logging.Level", "java.lang.String", "java.lang.Throwable"], [""], ["java.lang.String"], ["com.hm.achievement.db.AbstractDatabaseManager"], ["com.hm.achievement.db.AbstractDatabaseManager"], ["com.hm.achievement.db.AbstractDatabaseManager"], ["com.hm.achievement.db.AbstractDatabaseManager"], ["com.hm.achievement.db.AbstractDatabaseManager"], [""], ["java.lang.Object[]"], ["com.hm.achievement.db.AbstractDatabaseManager"], ["java.util.function.Consumer"]], "passed_comments": [{"com.hm.achievement.db.AbstractDatabaseManager.performPreliminaryTasks": "Performs any needed tasks before opening a connection to the database."}, {"com.hm.achievement.db.AbstractDatabaseManager.getSQLConnection": "Retrieves SQL connection to MySQL, PostgreSQL, H2 or SQLite database."}, {"com.hm.achievement.db.DatabaseUpdater.renameExistingTables": "Renames the database tables with the prefix given in the configuration file. This method is only used and only works if the tables had the default name. It does not support multiple successive table renamings."}, {"com.hm.achievement.db.DatabaseUpdater.initialiseTables": "Initialises database tables by creating non existing ones. We batch the requests to send a unique batch to the database."}, {"com.hm.achievement.db.DatabaseUpdater.updateOldDBToMaterial": "Update the database tables for Breaks, Crafts and Places achievements (from int to varchar for identification column). The tables are now using material names and no longer item IDs, which are deprecated; this also allows to store extra data information, extending the number of items available for the user."}, {"com.hm.achievement.db.DatabaseUpdater.updateOldDBToDates": "Updates the database achievements table. The table is now using a date type for the date column. We also increase the number of chars allowed for the achievement names and descriptions."}, {"com.hm.achievement.db.DatabaseUpdater.updateOldDBToTimestamps": "Updates the database achievements table. The table is now using a timestamp type for the date column."}]}, {"index": "135", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AbstractDatabaseManager.java", "methodName": "com.hm.achievement.db.AbstractDatabaseManager.performPreliminaryTasks", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "abstract void performPreliminaryTasks() throws ClassNotFoundException, PluginLoadError, UnsupportedEncodingException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Performs any needed tasks before opening a connection to the database.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "136", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AbstractDatabaseManager.java", "methodName": "com.hm.achievement.db.AbstractDatabaseManager.shutdown", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void shutdown() {\n\t\tpool.shutdown();\n\t\ttry {\n\t\t\t// Wait a few seconds for remaining tasks to execute.\n\t\t\tif (!pool.awaitTermination(5, TimeUnit.SECONDS)) {\n\t\t\t\tlogger.warning(\"Some write operations could not be sent to the database during plugin shutdown.\");\n\t\t\t}\n\t\t} catch (InterruptedException e) {\n\t\t\tlogger.log(Level.SEVERE, \"Error while waiting for database write operations to complete:\", e);\n\t\t\tThread.currentThread().interrupt();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tConnection connection = sqlConnection.get();\n\t\t\t\tif (connection != null) {\n\t\t\t\t\tconnection.close();\n\t\t\t\t}\n\t\t\t} catch (SQLException e) {\n\t\t\t\tlogger.log(Level.SEVERE, \"Error while closing connection to the database:\", e);\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Shuts the thread pool down and closes connection to database.", "call_func_name": ["java.util.concurrent.ExecutorService.shutdown", "java.util.concurrent.ExecutorService.awaitTermination", "java.util.logging.Logger.warning", "java.util.concurrent.atomic.AtomicReference.get", "java.sql.Connection.close", "java.util.logging.Logger.log", "java.lang.Thread.currentThread", "java.lang.Thread.interrupt"], "call_func_parameter": [[""], ["long", "java.util.concurrent.TimeUnit"], ["java.lang.String"], [""], [""], ["java.util.logging.Level", "java.lang.String", "java.lang.Throwable"], [""], [""]], "passed_comments": "/"}, {"index": "137", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AbstractDatabaseManager.java", "methodName": "com.hm.achievement.db.AbstractDatabaseManager.getSQLConnection", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Connection getSQLConnection() {\n\t\tConnection oldConnection = sqlConnection.get();\n\t\ttry {\n\t\t\t// Check if Connection was not previously closed.\n\t\t\tif (oldConnection == null || oldConnection.isClosed()) {\n\t\t\t\tConnection newConnection = createSQLConnection();\n\t\t\t\tif (!sqlConnection.compareAndSet(oldConnection, newConnection)) {\n\t\t\t\t\tnewConnection.close();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\tlogger.log(Level.SEVERE, \"Error while attempting to retrieve a connection to the database:\", e);\n\t\t}\n\t\treturn sqlConnection.get();\n\t}", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves SQL connection to MySQL, PostgreSQL, H2 or SQLite database.", "call_func_name": ["java.util.concurrent.atomic.AtomicReference.get", "java.sql.Connection.isClosed", "com.hm.achievement.db.AbstractDatabaseManager.createSQLConnection", "java.util.concurrent.atomic.AtomicReference.compareAndSet", "java.sql.Connection.close", "java.util.logging.Logger.log"], "call_func_parameter": [[""], [""], [""], ["java.lang.Object", "java.lang.Object"], [""], ["java.util.logging.Level", "java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"com.hm.achievement.db.AbstractDatabaseManager.createSQLConnection": "Creates a new Connection object to the database."}]}, {"index": "138", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AbstractDatabaseManager.java", "methodName": "com.hm.achievement.db.AbstractDatabaseManager.createSQLConnection", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "abstract Connection createSQLConnection() throws SQLException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Creates a new Connection object to the database.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "139", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AbstractDatabaseManager.java", "methodName": "com.hm.achievement.db.AbstractDatabaseManager.getPlayerAchievementNamesList", "methodParameterType": "UUID#", "methodParameterName": "uuid#", "methodBody": "public List<String> getPlayerAchievementNamesList(UUID uuid) {\n\t\tString sql = \"SELECT achievement FROM \" + prefix + \"achievements WHERE playername = ?\";\n\t\treturn ((SQLReadOperation<List<String>>) () -> {\n\t\t\tList<String> achievementNamesList = new ArrayList<>();\n\t\t\tConnection conn = getSQLConnection();\n\t\t\ttry (PreparedStatement ps = conn.prepareStatement(sql)) {\n\t\t\t\tps.setObject(1, uuid, Types.CHAR);\n\t\t\t\tps.setFetchSize(1000);\n\t\t\t\tResultSet rs = ps.executeQuery();\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\t// Check for names with single quotes but also two single quotes, due to a bug in versions 3.0 to\n\t\t\t\t\t// 3.0.2 where names containing single quotes were inserted with two single quotes in the database.\n\t\t\t\t\tachievementNamesList.add(StringUtils.replace(rs.getString(1), \"''\", \"'\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn achievementNamesList;\n\t\t}).executeOperation(\"retrieving the names of received achievements\");\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#WhileStatement#Block#TryStatement#SimpleName#ReturnStatement#Block#LambdaExpression#CastExpression#ParenthesizedExpression#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(LambdaExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)WhileStatement)Block)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the list of names of all the achievements of a player.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.db.SQLReadOperation.performRead", "com.hm.achievement.db.SQLReadOperation.executeOperation"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["com.hm.achievement.db.AbstractDatabaseManager", "java.lang.String", "java.util.UUID"], ["java.lang.String"]], "passed_comments": [{"com.hm.achievement.db.SQLReadOperation.executeOperation": "Calls  {@code performRead} repeatedly until the read succeeds or {@code MAX_ATTEMPTS} is reached, in which case aruntime exception is thrown."}]}, {"index": "140", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AbstractDatabaseManager.java", "methodName": "com.hm.achievement.db.AbstractDatabaseManager.getPlayerAchievementDate", "methodParameterType": "UUID#String#", "methodParameterName": "uuid#achName#", "methodBody": "public String getPlayerAchievementDate(UUID uuid, String achName) {\n\t\t// Check for names with single quotes but also two single quotes, due to a bug in versions 3.0 to 3.0.2\n\t\t// where names containing single quotes were inserted with two single quotes in the database.\n\t\tString sql = achName.contains(\"'\")\n\t\t\t\t? \"SELECT date FROM \" + prefix + \"achievements WHERE playername = ? AND (achievement = ? OR achievement = ?)\"\n\t\t\t\t: \"SELECT date FROM \" + prefix + \"achievements WHERE playername = ? AND achievement = ?\";\n\t\treturn ((SQLReadOperation<String>) () -> {\n\t\t\tConnection conn = getSQLConnection();\n\t\t\ttry (PreparedStatement ps = conn.prepareStatement(sql)) {\n\t\t\t\tps.setObject(1, uuid, Types.CHAR);\n\t\t\t\tps.setString(2, achName);\n\t\t\t\tif (achName.contains(\"'\")) {\n\t\t\t\t\tps.setString(3, StringUtils.replace(achName, \"'\", \"''\"));\n\t\t\t\t}\n\t\t\t\tResultSet rs = ps.executeQuery();\n\t\t\t\tif (rs.next()) {\n\t\t\t\t\treturn dateFormat.format(new Date(rs.getTimestamp(1).getTime()));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}).executeOperation(\"retrieving an achievement's reception date\");\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#StringLiteral#SimpleName#StringLiteral#InfixExpression#StringLiteral#SimpleName#StringLiteral#InfixExpression#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#TryStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#CastExpression#ParenthesizedExpression#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(LambdaExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)IfStatement)Block)TryStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the reception date of a specific achievement.", "call_func_name": ["java.lang.String.contains", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.db.SQLReadOperation.performRead", "com.hm.achievement.db.SQLReadOperation.executeOperation"], "call_func_parameter": [["java.lang.CharSequence"], [""], ["java.lang.String"], [""], ["com.hm.achievement.db.AbstractDatabaseManager", "java.lang.String", "java.util.UUID", "java.lang.String"], ["java.lang.String"]], "passed_comments": [{"com.hm.achievement.db.SQLReadOperation.executeOperation": "Calls  {@code performRead} repeatedly until the read succeeds or {@code MAX_ATTEMPTS} is reached, in which case aruntime exception is thrown."}]}, {"index": "141", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AbstractDatabaseManager.java", "methodName": "com.hm.achievement.db.AbstractDatabaseManager.getPlayersAchievementsAmount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<UUID, Integer> getPlayersAchievementsAmount() {\n\t\tString sql = \"SELECT playername, COUNT(*) FROM \" + prefix + \"achievements GROUP BY playername\";\n\t\treturn ((SQLReadOperation<Map<UUID, Integer>>) () -> {\n\t\t\tMap<UUID, Integer> achievementAmounts = new HashMap<>();\n\t\t\tConnection conn = getSQLConnection();\n\t\t\ttry (PreparedStatement ps = conn.prepareStatement(sql)) {\n\t\t\t\tps.setFetchSize(1000);\n\t\t\t\ttry (ResultSet rs = ps.executeQuery()) {\n\t\t\t\t\twhile (rs.next()) {\n\t\t\t\t\t\tString uuid = rs.getString(1);\n\t\t\t\t\t\tif (StringUtils.isNotEmpty(uuid)) {\n\t\t\t\t\t\t\tachievementAmounts.put(UUID.fromString(uuid), rs.getInt(2));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn achievementAmounts;\n\t\t}).executeOperation(\"counting all players' achievements\");\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#WhileStatement#Block#TryStatement#Block#TryStatement#SimpleName#ReturnStatement#Block#LambdaExpression#CastExpression#ParenthesizedExpression#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(LambdaExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)WhileStatement)Block)TryStatement)Block)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the total number of achievements received by every player; this method is provided as a convenience for other plugins.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.db.SQLReadOperation.performRead", "com.hm.achievement.db.SQLReadOperation.executeOperation"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["com.hm.achievement.db.AbstractDatabaseManager", "java.lang.String"], ["java.lang.String"]], "passed_comments": [{"com.hm.achievement.db.SQLReadOperation.executeOperation": "Calls  {@code performRead} repeatedly until the read succeeds or {@code MAX_ATTEMPTS} is reached, in which case aruntime exception is thrown."}]}, {"index": "142", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AbstractDatabaseManager.java", "methodName": "com.hm.achievement.db.AbstractDatabaseManager.getPlayerAchievementsAmount", "methodParameterType": "UUID#", "methodParameterName": "uuid#", "methodBody": "public int getPlayerAchievementsAmount(UUID uuid) {\n\t\tString sql = \"SELECT COUNT(*) FROM \" + prefix + \"achievements WHERE playername = ?\";\n\t\treturn ((SQLReadOperation<Integer>) () -> {\n\t\t\tConnection conn = getSQLConnection();\n\t\t\ttry (PreparedStatement ps = conn.prepareStatement(sql)) {\n\t\t\t\tps.setObject(1, uuid, Types.CHAR);\n\t\t\t\tResultSet rs = ps.executeQuery();\n\t\t\t\trs.next();\n\t\t\t\treturn rs.getInt(1);\n\t\t\t}\n\t\t}).executeOperation(\"counting a player's achievements\");\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#TryStatement#Block#LambdaExpression#CastExpression#ParenthesizedExpression#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(LambdaExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)TryStatement)Block)LambdaExpression)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the total number of achievements received by a player, using an UUID.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.db.SQLReadOperation.performRead", "com.hm.achievement.db.SQLReadOperation.executeOperation", "java.lang.Integer.intValue"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["com.hm.achievement.db.AbstractDatabaseManager", "java.lang.String", "java.util.UUID"], ["java.lang.String"], [""]], "passed_comments": [{"com.hm.achievement.db.SQLReadOperation.executeOperation": "Calls  {@code performRead} repeatedly until the read succeeds or {@code MAX_ATTEMPTS} is reached, in which case aruntime exception is thrown."}]}, {"index": "143", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AbstractDatabaseManager.java", "methodName": "com.hm.achievement.db.AbstractDatabaseManager.getTopList", "methodParameterType": "long#", "methodParameterName": "start#", "methodBody": "public Map<String, Integer> getTopList(long start) {\n\t\t// Either consider all the achievements or only those received after the start date.\n\t\tString sql = start == 0L\n\t\t\t\t? \"SELECT playername, COUNT(*) FROM \" + prefix + \"achievements GROUP BY playername ORDER BY COUNT(*) DESC\"\n\t\t\t\t: \"SELECT playername, COUNT(*) FROM \" + prefix\n\t\t\t\t\t\t+ \"achievements WHERE date > ? GROUP BY playername ORDER BY COUNT(*) DESC\";\n\t\treturn ((SQLReadOperation<Map<String, Integer>>) () -> {\n\t\t\tMap<String, Integer> topList = new LinkedHashMap<>();\n\t\t\tConnection conn = getSQLConnection();\n\t\t\ttry (PreparedStatement ps = conn.prepareStatement(sql)) {\n\t\t\t\tif (start > 0L) {\n\t\t\t\t\tps.setTimestamp(1, new Timestamp(start));\n\t\t\t\t}\n\t\t\t\tps.setFetchSize(1000);\n\t\t\t\tResultSet rs = ps.executeQuery();\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\ttopList.put(rs.getString(1), rs.getInt(2));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn topList;\n\t\t}).executeOperation(\"computing the list of top players\");\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#InfixExpression#StringLiteral#SimpleName#StringLiteral#InfixExpression#StringLiteral#SimpleName#StringLiteral#InfixExpression#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#WhileStatement#Block#TryStatement#SimpleName#ReturnStatement#Block#LambdaExpression#CastExpression#ParenthesizedExpression#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(LambdaExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)WhileStatement)Block)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Constructs a mapping of players with the most achievements over a given period.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.db.SQLReadOperation.performRead", "com.hm.achievement.db.SQLReadOperation.executeOperation"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["com.hm.achievement.db.AbstractDatabaseManager", "java.lang.String", "long"], ["java.lang.String"]], "passed_comments": [{"com.hm.achievement.db.SQLReadOperation.executeOperation": "Calls  {@code performRead} repeatedly until the read succeeds or {@code MAX_ATTEMPTS} is reached, in which case aruntime exception is thrown."}]}, {"index": "144", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AbstractDatabaseManager.java", "methodName": "com.hm.achievement.db.AbstractDatabaseManager.registerAchievement", "methodParameterType": "UUID#String#String#", "methodParameterName": "uuid#achName#achMessage#", "methodBody": "public void registerAchievement(UUID uuid, String achName, String achMessage) {\n\t\tregisterAchievement(uuid, achName, achMessage, System.currentTimeMillis());\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Registers a new achievement for a player with the reception time set to now.", "call_func_name": ["java.lang.System.currentTimeMillis", "com.hm.achievement.db.AbstractDatabaseManager.registerAchievement"], "call_func_parameter": [[""], ["java.util.UUID", "java.lang.String", "java.lang.String", "long"]], "passed_comments": [{"com.hm.achievement.db.AbstractDatabaseManager.registerAchievement": "Registers a new achievement for a player."}]}, {"index": "145", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AbstractDatabaseManager.java", "methodName": "com.hm.achievement.db.AbstractDatabaseManager.registerAchievement", "methodParameterType": "UUID#String#String#long#", "methodParameterName": "uuid#achName#achMessage#epochMs#", "methodBody": "void registerAchievement(UUID uuid, String achName, String achMessage, long epochMs) {\n\t\tString sql = \"REPLACE INTO \" + prefix + \"achievements VALUES (?,?,?,?)\";\n\t\t((SQLWriteOperation) () -> {\n\t\t\tConnection conn = getSQLConnection();\n\t\t\ttry (PreparedStatement ps = conn.prepareStatement(sql)) {\n\t\t\t\tps.setObject(1, uuid, Types.CHAR);\n\t\t\t\tps.setString(2, achName);\n\t\t\t\tps.setString(3, achMessage == null ? \"\" : achMessage);\n\t\t\t\tps.setTimestamp(4, new Timestamp(epochMs));\n\t\t\t\tps.execute();\n\t\t\t}\n\t\t}).executeOperation(pool, logger, \"registering an achievement\");\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#NullLiteral#InfixExpression#StringLiteral#SimpleName#ConditionalExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#LambdaExpression#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(LambdaExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)ConditionalExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)LambdaExpression)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Registers a new achievement for a player.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.db.SQLWriteOperation.performWrite", "com.hm.achievement.db.SQLWriteOperation.executeOperation"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["com.hm.achievement.db.AbstractDatabaseManager", "java.lang.String", "java.util.UUID", "java.lang.String", "java.lang.String", "long"], ["java.util.concurrent.Executor", "java.util.logging.Logger", "java.lang.String"]], "passed_comments": [{"com.hm.achievement.db.SQLWriteOperation.executeOperation": "Performs the write operation with an Executor."}]}, {"index": "146", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AbstractDatabaseManager.java", "methodName": "com.hm.achievement.db.AbstractDatabaseManager.hasPlayerAchievement", "methodParameterType": "UUID#String#", "methodParameterName": "uuid#achName#", "methodBody": "public boolean hasPlayerAchievement(UUID uuid, String achName) {\n\t\t// Check for names with single quotes but also two single quotes, due to a bug in versions 3.0 to 3.0.2\n\t\t// where names containing single quotes were inserted with two single quotes in the database.\n\t\tString sql = achName.contains(\"'\")\n\t\t\t\t? \"SELECT achievement FROM \" + prefix\n\t\t\t\t\t\t+ \"achievements WHERE playername = ? AND (achievement = ? OR achievement = ?)\"\n\t\t\t\t: \"SELECT achievement FROM \" + prefix + \"achievements WHERE playername = ? AND achievement = ?\";\n\t\treturn ((SQLReadOperation<Boolean>) () -> {\n\t\t\tConnection conn = getSQLConnection();\n\t\t\ttry (PreparedStatement ps = conn.prepareStatement(sql)) {\n\t\t\t\tps.setObject(1, uuid, Types.CHAR);\n\t\t\t\tps.setString(2, achName);\n\t\t\t\tif (achName.contains(\"'\")) {\n\t\t\t\t\tps.setString(3, StringUtils.replace(achName, \"'\", \"''\"));\n\t\t\t\t}\n\t\t\t\treturn ps.executeQuery().next();\n\t\t\t}\n\t\t}).executeOperation(\"checking for an achievement\");\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#StringLiteral#SimpleName#StringLiteral#InfixExpression#StringLiteral#SimpleName#StringLiteral#InfixExpression#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#TryStatement#Block#LambdaExpression#CastExpression#ParenthesizedExpression#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(LambdaExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)TryStatement)Block)LambdaExpression)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks whether player has received a specific achievement.", "call_func_name": ["java.lang.String.contains", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.db.SQLReadOperation.performRead", "com.hm.achievement.db.SQLReadOperation.executeOperation", "java.lang.Boolean.booleanValue"], "call_func_parameter": [["java.lang.CharSequence"], [""], ["java.lang.String"], [""], ["com.hm.achievement.db.AbstractDatabaseManager", "java.lang.String", "java.util.UUID", "java.lang.String"], ["java.lang.String"], [""]], "passed_comments": [{"com.hm.achievement.db.SQLReadOperation.executeOperation": "Calls  {@code performRead} repeatedly until the read succeeds or {@code MAX_ATTEMPTS} is reached, in which case aruntime exception is thrown."}]}, {"index": "147", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AbstractDatabaseManager.java", "methodName": "com.hm.achievement.db.AbstractDatabaseManager.getNormalAchievementAmount", "methodParameterType": "UUID#NormalAchievements#", "methodParameterName": "uuid#category#", "methodBody": "public long getNormalAchievementAmount(UUID uuid, NormalAchievements category) {\n\t\tString dbName = category.toDBName();\n\t\tString sql = \"SELECT \" + dbName + \" FROM \" + prefix + dbName + \" WHERE playername = ?\";\n\t\treturn ((SQLReadOperation<Long>) () -> {\n\t\t\tConnection conn = getSQLConnection();\n\t\t\ttry (PreparedStatement ps = conn.prepareStatement(sql)) {\n\t\t\t\tps.setObject(1, uuid, Types.CHAR);\n\t\t\t\tResultSet rs = ps.executeQuery();\n\t\t\t\tif (rs.next()) {\n\t\t\t\t\treturn rs.getLong(dbName);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 0L;\n\t\t}).executeOperation(\"retrieving \" + category + \" statistics\");\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#TryStatement#NumberLiteral#ReturnStatement#Block#LambdaExpression#CastExpression#ParenthesizedExpression#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(LambdaExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)TryStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)LambdaExpression)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets a player's NormalAchievement statistic.", "call_func_name": ["com.hm.achievement.category.NormalAchievements.toDBName", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.db.SQLReadOperation.performRead", "java.lang.StringBuilder.append", "com.hm.achievement.db.SQLReadOperation.executeOperation", "java.lang.Long.longValue"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["com.hm.achievement.db.AbstractDatabaseManager", "java.lang.String", "java.util.UUID", "java.lang.String"], ["java.lang.Object"], ["java.lang.String"], [""]], "passed_comments": [{"com.hm.achievement.db.SQLReadOperation.executeOperation": "Calls  {@code performRead} repeatedly until the read succeeds or {@code MAX_ATTEMPTS} is reached, in which case aruntime exception is thrown."}]}, {"index": "148", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AbstractDatabaseManager.java", "methodName": "com.hm.achievement.db.AbstractDatabaseManager.getMultipleAchievementAmount", "methodParameterType": "UUID#MultipleAchievements#String#", "methodParameterName": "uuid#category#subcategory#", "methodBody": "public long getMultipleAchievementAmount(UUID uuid, MultipleAchievements category, String subcategory) {\n\t\tString dbName = category.toDBName();\n\t\tString sql = \"SELECT \" + dbName + \" FROM \" + prefix + dbName + \" WHERE playername = ? AND \"\n\t\t\t\t+ category.toSubcategoryDBName() + \" = ?\";\n\t\treturn ((SQLReadOperation<Long>) () -> {\n\t\t\tConnection conn = getSQLConnection();\n\t\t\ttry (PreparedStatement ps = conn.prepareStatement(sql)) {\n\t\t\t\tps.setObject(1, uuid, Types.CHAR);\n\t\t\t\tps.setString(2, subcategory);\n\t\t\t\tResultSet rs = ps.executeQuery();\n\t\t\t\tif (rs.next()) {\n\t\t\t\t\treturn rs.getLong(dbName);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 0L;\n\t\t}).executeOperation(\"retrieving \" + category + \".\" + subcategory + \" statistics\");\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#TryStatement#NumberLiteral#ReturnStatement#Block#LambdaExpression#CastExpression#ParenthesizedExpression#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(LambdaExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)TryStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)LambdaExpression)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets a player's MultipleAchievement statistic.", "call_func_name": ["com.hm.achievement.category.MultipleAchievements.toDBName", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.hm.achievement.category.MultipleAchievements.toSubcategoryDBName", "java.lang.StringBuilder.toString", "com.hm.achievement.db.SQLReadOperation.performRead", "java.lang.StringBuilder.append", "com.hm.achievement.db.SQLReadOperation.executeOperation", "java.lang.Long.longValue"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], [""], ["com.hm.achievement.db.AbstractDatabaseManager", "java.lang.String", "java.util.UUID", "java.lang.String", "java.lang.String"], ["java.lang.Object"], ["java.lang.String"], [""]], "passed_comments": [{"com.hm.achievement.db.SQLReadOperation.executeOperation": "Calls  {@code performRead} repeatedly until the read succeeds or {@code MAX_ATTEMPTS} is reached, in which case aruntime exception is thrown."}]}, {"index": "149", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AbstractDatabaseManager.java", "methodName": "com.hm.achievement.db.AbstractDatabaseManager.getConnectionsAmount", "methodParameterType": "UUID#", "methodParameterName": "uuid#", "methodBody": "public int getConnectionsAmount(UUID uuid) {\n\t\tString dbName = NormalAchievements.CONNECTIONS.toDBName();\n\t\tString sql = \"SELECT \" + dbName + \" FROM \" + prefix + dbName + \" WHERE playername = ?\";\n\t\treturn ((SQLReadOperation<Integer>) () -> {\n\t\t\tConnection conn = getSQLConnection();\n\t\t\ttry (PreparedStatement ps = conn.prepareStatement(sql)) {\n\t\t\t\tps.setObject(1, uuid, Types.CHAR);\n\t\t\t\tResultSet rs = ps.executeQuery();\n\t\t\t\tif (rs.next()) {\n\t\t\t\t\treturn rs.getInt(dbName);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 0;\n\t\t}).executeOperation(\"retrieving connection statistics\");\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#TryStatement#NumberLiteral#ReturnStatement#Block#LambdaExpression#CastExpression#ParenthesizedExpression#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(LambdaExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)TryStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)LambdaExpression)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a player's number of connections on separate days (used by GUI).", "call_func_name": ["com.hm.achievement.category.NormalAchievements.toDBName", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.db.SQLReadOperation.performRead", "com.hm.achievement.db.SQLReadOperation.executeOperation", "java.lang.Integer.intValue"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["com.hm.achievement.db.AbstractDatabaseManager", "java.lang.String", "java.util.UUID", "java.lang.String"], ["java.lang.String"], [""]], "passed_comments": [{"com.hm.achievement.db.SQLReadOperation.executeOperation": "Calls  {@code performRead} repeatedly until the read succeeds or {@code MAX_ATTEMPTS} is reached, in which case aruntime exception is thrown."}]}, {"index": "150", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AbstractDatabaseManager.java", "methodName": "com.hm.achievement.db.AbstractDatabaseManager.getPlayerConnectionDate", "methodParameterType": "UUID#", "methodParameterName": "uuid#", "methodBody": "public String getPlayerConnectionDate(UUID uuid) {\n\t\tString dbName = NormalAchievements.CONNECTIONS.toDBName();\n\t\tString sql = \"SELECT date FROM \" + prefix + dbName + \" WHERE playername = ?\";\n\t\treturn ((SQLReadOperation<String>) () -> {\n\t\t\tConnection conn = getSQLConnection();\n\t\t\ttry (PreparedStatement ps = conn.prepareStatement(sql)) {\n\t\t\t\tps.setObject(1, uuid, Types.CHAR);\n\t\t\t\tResultSet rs = ps.executeQuery();\n\t\t\t\tif (rs.next()) {\n\t\t\t\t\treturn rs.getString(\"date\");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}).executeOperation(\"retrieving a player's last connection date\");\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#Block#TryStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#CastExpression#ParenthesizedExpression#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(LambdaExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)IfStatement)Block)TryStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets a player's last connection date.", "call_func_name": ["com.hm.achievement.category.NormalAchievements.toDBName", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.db.SQLReadOperation.performRead", "com.hm.achievement.db.SQLReadOperation.executeOperation"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["com.hm.achievement.db.AbstractDatabaseManager", "java.lang.String", "java.util.UUID"], ["java.lang.String"]], "passed_comments": [{"com.hm.achievement.db.SQLReadOperation.executeOperation": "Calls  {@code performRead} repeatedly until the read succeeds or {@code MAX_ATTEMPTS} is reached, in which case aruntime exception is thrown."}]}, {"index": "151", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AbstractDatabaseManager.java", "methodName": "com.hm.achievement.db.AbstractDatabaseManager.updateAndGetConnection", "methodParameterType": "UUID#String#", "methodParameterName": "uuid#date#", "methodBody": "public int updateAndGetConnection(UUID uuid, String date) {\n\t\tString dbName = NormalAchievements.CONNECTIONS.toDBName();\n\t\tString sqlRead = \"SELECT \" + dbName + \" FROM \" + prefix + dbName + \" WHERE playername = ?\";\n\t\treturn ((SQLReadOperation<Integer>) () -> {\n\t\t\tConnection conn = getSQLConnection();\n\t\t\ttry (PreparedStatement ps = conn.prepareStatement(sqlRead)) {\n\t\t\t\tps.setObject(1, uuid, Types.CHAR);\n\t\t\t\tResultSet rs = ps.executeQuery();\n\t\t\t\tint connections = rs.next() ? rs.getInt(dbName) + 1 : 1;\n\t\t\t\tString sqlWrite = \"REPLACE INTO \" + prefix + dbName + \" VALUES (?,?,?)\";\n\t\t\t\t((SQLWriteOperation) () -> {\n\t\t\t\t\tConnection writeConn = getSQLConnection();\n\t\t\t\t\ttry (PreparedStatement writePrep = writeConn.prepareStatement(sqlWrite)) {\n\t\t\t\t\t\twritePrep.setObject(1, uuid, Types.CHAR);\n\t\t\t\t\t\twritePrep.setInt(2, connections);\n\t\t\t\t\t\twritePrep.setString(3, date);\n\t\t\t\t\t\twritePrep.execute();\n\t\t\t\t\t}\n\t\t\t\t}).executeOperation(pool, logger, \"updating connection date and count\");\n\t\t\t\treturn connections;\n\t\t\t}\n\t\t}).executeOperation(\"handling connection event\");\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#NumberLiteral#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#LambdaExpression#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#TryStatement#Block#LambdaExpression#CastExpression#ParenthesizedExpression#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(LambdaExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(LambdaExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)LambdaExpression)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)TryStatement)Block)LambdaExpression)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Updates a player's number of connections and last connection date and returns number of connections (used by Connections listener).", "call_func_name": ["com.hm.achievement.category.NormalAchievements.toDBName", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.db.SQLReadOperation.performRead", "com.hm.achievement.db.SQLReadOperation.executeOperation", "java.lang.Integer.intValue"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["com.hm.achievement.db.AbstractDatabaseManager", "java.lang.String", "java.util.UUID", "java.lang.String", "java.lang.String"], ["java.lang.String"], [""]], "passed_comments": [{"com.hm.achievement.db.SQLReadOperation.executeOperation": "Calls  {@code performRead} repeatedly until the read succeeds or {@code MAX_ATTEMPTS} is reached, in which case aruntime exception is thrown."}]}, {"index": "152", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AbstractDatabaseManager.java", "methodName": "com.hm.achievement.db.AbstractDatabaseManager.deletePlayerAchievement", "methodParameterType": "UUID#String#", "methodParameterName": "uuid#achName#", "methodBody": "public void deletePlayerAchievement(UUID uuid, String achName) {\n\t\t// Check for names with single quotes but also two single quotes, due to a bug in versions 3.0 to 3.0.2\n\t\t// where names containing single quotes were inserted with two single quotes in the database.\n\t\tString sql = achName.contains(\"'\")\n\t\t\t\t? \"DELETE FROM \" + prefix + \"achievements WHERE playername = ? AND (achievement = ? OR achievement = ?)\"\n\t\t\t\t: \"DELETE FROM \" + prefix + \"achievements WHERE playername = ? AND achievement = ?\";\n\t\t((SQLWriteOperation) () -> {\n\t\t\tConnection conn = getSQLConnection();\n\t\t\ttry (PreparedStatement ps = conn.prepareStatement(sql)) {\n\t\t\t\tps.setObject(1, uuid, Types.CHAR);\n\t\t\t\tps.setString(2, achName);\n\t\t\t\tif (achName.contains(\"'\")) {\n\t\t\t\t\tps.setString(3, StringUtils.replace(achName, \"'\", \"''\"));\n\t\t\t\t}\n\t\t\t\tps.execute();\n\t\t\t}\n\t\t}).executeOperation(pool, logger, \"deleting an achievement\");\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#StringLiteral#SimpleName#StringLiteral#InfixExpression#StringLiteral#SimpleName#StringLiteral#InfixExpression#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#LambdaExpression#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(LambdaExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)LambdaExpression)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Deletes an achievement from a player.", "call_func_name": ["java.lang.String.contains", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.db.SQLWriteOperation.performWrite", "com.hm.achievement.db.SQLWriteOperation.executeOperation"], "call_func_parameter": [["java.lang.CharSequence"], [""], ["java.lang.String"], [""], ["com.hm.achievement.db.AbstractDatabaseManager", "java.lang.String", "java.util.UUID", "java.lang.String"], ["java.util.concurrent.Executor", "java.util.logging.Logger", "java.lang.String"]], "passed_comments": [{"com.hm.achievement.db.SQLWriteOperation.executeOperation": "Performs the write operation with an Executor."}]}, {"index": "153", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AbstractDatabaseManager.java", "methodName": "com.hm.achievement.db.AbstractDatabaseManager.clearConnection", "methodParameterType": "UUID#", "methodParameterName": "uuid#", "methodBody": "public void clearConnection(UUID uuid) {\n\t\tString sql = \"DELETE FROM \" + prefix + \"connections WHERE playername = '\" + uuid + \"'\";\n\t\t((SQLWriteOperation) () -> {\n\t\t\tConnection conn = getSQLConnection();\n\t\t\ttry (PreparedStatement ps = conn.prepareStatement(sql)) {\n\t\t\t\tps.execute();\n\t\t\t}\n\t\t}).executeOperation(pool, logger, \"clearing connection statistics\");\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#LambdaExpression#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(LambdaExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)LambdaExpression)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Clears Connection statistics for a given player.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.db.SQLWriteOperation.performWrite", "com.hm.achievement.db.SQLWriteOperation.executeOperation"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], ["com.hm.achievement.db.AbstractDatabaseManager", "java.lang.String"], ["java.util.concurrent.Executor", "java.util.logging.Logger", "java.lang.String"]], "passed_comments": [{"com.hm.achievement.db.SQLWriteOperation.executeOperation": "Performs the write operation with an Executor."}]}, {"index": "154", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AbstractDatabaseManager.java", "methodName": "com.hm.achievement.db.AbstractDatabaseManager.getPlayerAchievementsList", "methodParameterType": "UUID#", "methodParameterName": "uuid#", "methodBody": "public List<AwardedDBAchievement> getPlayerAchievementsList(UUID uuid) {\n\t\t// Either oldest date to newest one or newest date to oldest one.\n\t\tString sql = \"SELECT * FROM \" + prefix + \"achievements WHERE playername = ? ORDER BY date \"\n\t\t\t\t+ (configBookChronologicalOrder ? \"ASC\" : \"DESC\");\n\t\treturn ((SQLReadOperation<List<AwardedDBAchievement>>) () -> {\n\t\t\tList<AwardedDBAchievement> achievements = new ArrayList<>();\n\t\t\tConnection conn = getSQLConnection();\n\t\t\ttry (PreparedStatement ps = conn.prepareStatement(sql)) {\n\t\t\t\tps.setFetchSize(1000);\n\t\t\t\tps.setObject(1, uuid, Types.CHAR);\n\t\t\t\ttry (ResultSet rs = ps.executeQuery()) {\n\t\t\t\t\twhile (rs.next()) {\n\t\t\t\t\t\t// Remove eventual double quotes due to a bug in versions 3.0 to 3.0.2 where names containing\n\t\t\t\t\t\t// single quotes were inserted with two single quotes in the database.\n\t\t\t\t\t\tString achName = StringUtils.replace(rs.getString(2), \"''\", \"'\");\n\t\t\t\t\t\tString displayName = namesToDisplayNames.get(achName);\n\t\t\t\t\t\tif (StringUtils.isNotBlank(displayName)) {\n\t\t\t\t\t\t\tachName = displayName;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tString achMsg = rs.getString(3);\n\t\t\t\t\t\tTimestamp dateAwarded = rs.getTimestamp(4);\n\n\t\t\t\t\t\tachievements.add(new AwardedDBAchievement(uuid, achName, achMsg, dateAwarded.getTime(),\n\t\t\t\t\t\t\t\tdateFormat.format(dateAwarded)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn achievements;\n\t\t}).executeOperation(\"retrieving the full data of received achievements\");\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#StringLiteral#ConditionalExpression#ParenthesizedExpression#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#StringLiteral#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#WhileStatement#Block#TryStatement#Block#TryStatement#SimpleName#ReturnStatement#Block#LambdaExpression#CastExpression#ParenthesizedExpression#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(ParenthesizedExpression(ConditionalExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ConditionalExpression)ParenthesizedExpression)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(LambdaExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)WhileStatement)Block)TryStatement)Block)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a list of AwardedDBAchievements get by a player.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.db.SQLReadOperation.performRead", "com.hm.achievement.db.SQLReadOperation.executeOperation"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["com.hm.achievement.db.AbstractDatabaseManager", "java.lang.String", "java.util.UUID"], ["java.lang.String"]], "passed_comments": [{"com.hm.achievement.db.SQLReadOperation.executeOperation": "Calls  {@code performRead} repeatedly until the read succeeds or {@code MAX_ATTEMPTS} is reached, in which case aruntime exception is thrown."}]}, {"index": "155", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AbstractDatabaseManager.java", "methodName": "com.hm.achievement.db.AbstractDatabaseManager.getAchievementsRecipientList", "methodParameterType": "String#", "methodParameterName": "achievementName#", "methodBody": "public List<AwardedDBAchievement> getAchievementsRecipientList(String achievementName) {\n\t\tString sql = \"SELECT playername, date FROM \" + prefix + \"achievements WHERE achievement = ?\" +\n\t\t\t\t\" ORDER BY date DESC LIMIT 1000\";\n\t\treturn ((SQLReadOperation<List<AwardedDBAchievement>>) () -> {\n\t\t\tList<AwardedDBAchievement> achievements = new ArrayList<>();\n\t\t\tConnection conn = getSQLConnection();\n\t\t\ttry (PreparedStatement ps = conn.prepareStatement(sql)) {\n\t\t\t\tps.setFetchSize(1000);\n\t\t\t\tps.setString(1, achievementName);\n\t\t\t\ttry (ResultSet rs = ps.executeQuery()) {\n\t\t\t\t\twhile (rs.next()) {\n\t\t\t\t\t\tUUID uuid;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tString uuidString = rs.getString(\"playername\");\n\t\t\t\t\t\t\tuuid = UUID.fromString(uuidString);\n\t\t\t\t\t\t} catch (IllegalArgumentException improperUUIDFormatException) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDate dateAwarded = new Date(rs.getTimestamp(\"date\").getTime());\n\n\t\t\t\t\t\tachievements.add(new AwardedDBAchievement(uuid, namesToDisplayNames.get(achievementName), \"\",\n\t\t\t\t\t\t\t\tdateAwarded.getTime(), dateFormat.format(dateAwarded)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn achievements;\n\t\t}).executeOperation(\"retrieving the recipients of an achievement\");\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#StringLiteral#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ContinueStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#WhileStatement#Block#TryStatement#Block#TryStatement#SimpleName#ReturnStatement#Block#LambdaExpression#CastExpression#ParenthesizedExpression#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(LambdaExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ContinueStatement)ContinueStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)WhileStatement)Block)TryStatement)Block)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve matching list of achievements for a name of an achievement. <p> Limited to 1000 most recent entries to save memory.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.db.SQLReadOperation.performRead", "com.hm.achievement.db.SQLReadOperation.executeOperation"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["com.hm.achievement.db.AbstractDatabaseManager", "java.lang.String", "java.lang.String"], ["java.lang.String"]], "passed_comments": [{"com.hm.achievement.db.SQLReadOperation.executeOperation": "Calls  {@code performRead} repeatedly until the read succeeds or {@code MAX_ATTEMPTS} is reached, in which case aruntime exception is thrown."}]}, {"index": "156", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/CacheManager.java", "methodName": "com.hm.achievement.db.CacheManager.getHashMap", "methodParameterType": "NormalAchievements#", "methodParameterName": "category#", "methodBody": "public Map<String, CachedStatistic> getHashMap(NormalAchievements category) {\n\t\treturn normalAchievementsToPlayerStatistics.get(category);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves a HashMap for a NormalAchievement based on the category.", "call_func_name": ["java.util.Map.get"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "157", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/CacheManager.java", "methodName": "com.hm.achievement.db.CacheManager.getHashMap", "methodParameterType": "MultipleAchievements#", "methodParameterName": "category#", "methodBody": "public Map<String, CachedStatistic> getHashMap(MultipleAchievements category) {\n\t\treturn multipleAchievementsToPlayerStatistics.get(category);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves a HashMap for a MultipleAchievement based on the category.", "call_func_name": ["java.util.Map.get"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "158", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/CacheManager.java", "methodName": "com.hm.achievement.db.CacheManager.getAndIncrementStatisticAmount", "methodParameterType": "NormalAchievements#UUID#int#", "methodParameterName": "category#player#value#", "methodBody": "public long getAndIncrementStatisticAmount(NormalAchievements category, UUID player, int value) {\n\t\tCachedStatistic statistic = getHashMap(category).get(player.toString());\n\t\tif (statistic == null) {\n\t\t\tstatistic = new CachedStatistic(databaseManager.getNormalAchievementAmount(player, category), true);\n\t\t\tgetHashMap(category).put(player.toString(), statistic);\n\t\t}\n\t\tif (value > 0) {\n\t\t\tlong newValue = statistic.getValue() + value;\n\t\t\tstatistic.setValue(newValue);\n\t\t\treturn newValue;\n\t\t}\n\t\treturn statistic.getValue();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Increases the statistic for a NormalAchievement by the given value and returns the updated statistic value. Calls the database if not found in the cache.", "call_func_name": ["com.hm.achievement.db.CacheManager.getHashMap", "java.util.UUID.toString", "java.util.Map.get", "com.hm.achievement.db.AbstractDatabaseManager.getNormalAchievementAmount", "com.hm.achievement.db.CachedStatistic.<init>", "java.util.Map.put", "com.hm.achievement.db.CachedStatistic.getValue", "com.hm.achievement.db.CachedStatistic.setValue"], "call_func_parameter": [["com.hm.achievement.category.NormalAchievements"], [""], ["java.lang.Object"], ["java.util.UUID", "com.hm.achievement.category.NormalAchievements"], ["long", "boolean"], ["java.lang.Object", "java.lang.Object"], [""], ["long"]], "passed_comments": [{"com.hm.achievement.db.CacheManager.getHashMap": "Retrieves a HashMap for a NormalAchievement based on the category."}, {"com.hm.achievement.db.AbstractDatabaseManager.getNormalAchievementAmount": "Gets a player's NormalAchievement statistic."}]}, {"index": "159", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/CacheManager.java", "methodName": "com.hm.achievement.db.CacheManager.getAndIncrementStatisticAmount", "methodParameterType": "MultipleAchievements#String#UUID#int#", "methodParameterName": "category#subcategory#player#value#", "methodBody": "public long getAndIncrementStatisticAmount(MultipleAchievements category, String subcategory, UUID player, int value) {\n\t\tCachedStatistic statistic = getHashMap(category).get(getMultipleCategoryCacheKey(player, subcategory));\n\t\tif (statistic == null) {\n\t\t\tString subcategoryDBName = StringUtils.deleteWhitespace(subcategory);\n\t\t\tstatistic = new CachedStatistic(databaseManager.getMultipleAchievementAmount(player, category,\n\t\t\t\t\tsubcategoryDBName), true);\n\t\t\tgetHashMap(category).put(getMultipleCategoryCacheKey(player, subcategory), statistic);\n\t\t}\n\t\tif (value > 0) {\n\t\t\tlong newValue = statistic.getValue() + value;\n\t\t\tstatistic.setValue(newValue);\n\t\t\treturn newValue;\n\t\t}\n\t\treturn statistic.getValue();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Increases the statistic for a MultipleAchievement by the given value and returns the updated statistic value. Calls the database if not found in the cache.", "call_func_name": ["com.hm.achievement.db.CacheManager.getHashMap", "com.hm.achievement.db.CacheManager.getMultipleCategoryCacheKey", "java.util.Map.get", "com.hm.apache.commons.lang3.StringUtils.deleteWhitespace", "com.hm.achievement.db.AbstractDatabaseManager.getMultipleAchievementAmount", "com.hm.achievement.db.CachedStatistic.<init>", "java.util.Map.put", "com.hm.achievement.db.CachedStatistic.getValue", "com.hm.achievement.db.CachedStatistic.setValue"], "call_func_parameter": [["com.hm.achievement.category.MultipleAchievements"], ["java.util.UUID", "java.lang.String"], ["java.lang.Object"], ["java.lang.String"], ["java.util.UUID", "com.hm.achievement.category.MultipleAchievements", "java.lang.String"], ["long", "boolean"], ["java.lang.Object", "java.lang.Object"], [""], ["long"]], "passed_comments": [{"com.hm.achievement.db.CacheManager.getHashMap": "Retrieves a HashMap for a MultipleAchievement based on the category."}, {"com.hm.achievement.db.CacheManager.getMultipleCategoryCacheKey": "Returns a key for the multipleAchievementsToPlayerStatistics structure. Concatenation of player UUID and subcategory name, with removed whitespaces."}, {"com.hm.achievement.db.AbstractDatabaseManager.getMultipleAchievementAmount": "Gets a player's MultipleAchievement statistic."}]}, {"index": "160", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/CacheManager.java", "methodName": "com.hm.achievement.db.CacheManager.hasPlayerAchievement", "methodParameterType": "UUID#String#", "methodParameterName": "player#name#", "methodBody": "public boolean hasPlayerAchievement(UUID player, String name) {\n\t\tSet<String> playerReceived = receivedAchievementsCache.computeIfAbsent(player, s -> new HashSet<>());\n\t\tif (playerReceived.contains(name)) {\n\t\t\treturn true;\n\t\t}\n\t\tSet<String> playerNotReceived = notReceivedAchievementsCache.computeIfAbsent(player, s -> new HashSet<>());\n\t\tif (playerNotReceived.contains(name)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tboolean received = databaseManager.hasPlayerAchievement(player, name);\n\t\tif (received) {\n\t\t\tplayerReceived.add(name);\n\t\t} else {\n\t\t\tplayerNotReceived.add(name);\n\t\t}\n\t\treturn received;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether player has received a specific achievement.", "call_func_name": ["java.util.function.Function.apply", "java.util.Map.computeIfAbsent", "java.util.Set.contains", "com.hm.achievement.db.AbstractDatabaseManager.hasPlayerAchievement", "java.util.Set.add"], "call_func_parameter": [[""], ["java.lang.Object", "java.util.function.Function"], ["java.lang.Object"], ["java.util.UUID", "java.lang.String"], ["java.lang.Object"]], "passed_comments": [{"com.hm.achievement.db.AbstractDatabaseManager.hasPlayerAchievement": "Checks whether player has received a specific achievement."}]}, {"index": "161", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/CacheManager.java", "methodName": "com.hm.achievement.db.CacheManager.getPlayerTotalAchievements", "methodParameterType": "UUID#", "methodParameterName": "player#", "methodBody": "public synchronized int getPlayerTotalAchievements(UUID player) {\n\t\tInteger totalAchievements = totalPlayerAchievementsCache.get(player);\n\t\tif (totalAchievements == null) {\n\t\t\ttotalAchievements = databaseManager.getPlayerAchievementsAmount(player);\n\t\t\ttotalPlayerAchievementsCache.put(player, totalAchievements);\n\t\t}\n\t\treturn totalAchievements;\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the total number of achievements received by a player. Can be called asynchronously by BungeeTabListPlus, method must therefore be synchronized to avoid race conditions if a player calls /aach stats at the same time.", "call_func_name": ["java.util.Map.get", "com.hm.achievement.db.AbstractDatabaseManager.getPlayerAchievementsAmount", "java.lang.Integer.valueOf", "java.util.Map.put", "java.lang.Integer.intValue"], "call_func_parameter": [["java.lang.Object"], ["java.util.UUID"], ["int"], ["java.lang.Object", "java.lang.Object"], [""]], "passed_comments": [{"com.hm.achievement.db.AbstractDatabaseManager.getPlayerAchievementsAmount": "Gets the total number of achievements received by a player, using an UUID."}]}, {"index": "162", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/CacheManager.java", "methodName": "com.hm.achievement.db.CacheManager.getMultipleCategoryCacheKey", "methodParameterType": "UUID#String#", "methodParameterName": "player#subcategory#", "methodBody": "public String getMultipleCategoryCacheKey(UUID player, String subcategory) {\n\t\treturn player.toString() + StringUtils.deleteWhitespace(subcategory);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a key for the multipleAchievementsToPlayerStatistics structure. Concatenation of player UUID and subcategory name, with removed whitespaces.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.util.UUID.toString", "java.lang.StringBuilder.append", "com.hm.apache.commons.lang3.StringUtils.deleteWhitespace", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "163", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/CacheManager.java", "methodName": "com.hm.achievement.db.CacheManager.registerNewlyReceivedAchievement", "methodParameterType": "UUID#String#", "methodParameterName": "player#achievementName#", "methodBody": "public void registerNewlyReceivedAchievement(UUID player, String achievementName) {\n\t\treceivedAchievementsCache.get(player).add(achievementName);\n\t\tnotReceivedAchievementsCache.get(player).remove(achievementName);\n\t\ttotalPlayerAchievementsCache.put(player, getPlayerTotalAchievements(player) + 1);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds an achievement to the achievement received cache and removes it from the not received cache. A call to {@link #hasPlayerAchievement(UUID,String)} is expected to have been made made beforehand for the same player.", "call_func_name": ["java.util.Map.get", "java.util.Set.add", "java.util.Set.remove", "com.hm.achievement.db.CacheManager.getPlayerTotalAchievements", "java.lang.Integer.valueOf", "java.util.Map.put"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.util.UUID"], ["int"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"com.hm.achievement.db.CacheManager.getPlayerTotalAchievements": "Returns the total number of achievements received by a player. Can be called asynchronously by BungeeTabListPlus, method must therefore be synchronized to avoid race conditions if a player calls /aach stats at the same time."}]}, {"index": "164", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/CacheManager.java", "methodName": "com.hm.achievement.db.CacheManager.removePreviouslyReceivedAchievement", "methodParameterType": "UUID#String#", "methodParameterName": "player#achievementName#", "methodBody": "public void removePreviouslyReceivedAchievement(UUID player, String achievementName) {\n\t\treceivedAchievementsCache.get(player).remove(achievementName);\n\t\tnotReceivedAchievementsCache.get(player).add(achievementName);\n\t\ttotalPlayerAchievementsCache.put(player, getPlayerTotalAchievements(player) - 1);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Removes an achievement from the achievement received cache and adds it to the not received cache. A call to {@link #hasPlayerAchievement(UUID,String)} is expected to have been made made beforehand for the same player.", "call_func_name": ["java.util.Map.get", "java.util.Set.remove", "java.util.Set.add", "com.hm.achievement.db.CacheManager.getPlayerTotalAchievements", "java.lang.Integer.valueOf", "java.util.Map.put"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.util.UUID"], ["int"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"com.hm.achievement.db.CacheManager.getPlayerTotalAchievements": "Returns the total number of achievements received by a player. Can be called asynchronously by BungeeTabListPlus, method must therefore be synchronized to avoid race conditions if a player calls /aach stats at the same time."}]}, {"index": "165", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/SQLWriteOperation.java", "methodName": "com.hm.achievement.db.SQLWriteOperation.performWrite", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void performWrite() throws SQLException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Performs a single write operation to the database.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "166", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/SQLWriteOperation.java", "methodName": "com.hm.achievement.db.SQLWriteOperation.executeOperation", "methodParameterType": "Executor#Logger#String#", "methodParameterName": "executor#logger#operationMessage#", "methodBody": "default void executeOperation(Executor executor, Logger logger, String operationMessage) {\n\t\texecutor.execute(() -> attemptWrites(logger, operationMessage));\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Performs the write operation with an Executor.", "call_func_name": ["java.lang.Runnable.run", "java.util.concurrent.Executor.execute"], "call_func_parameter": [["com.hm.achievement.db.SQLWriteOperation", "java.util.logging.Logger", "java.lang.String"], ["java.lang.Runnable"]], "passed_comments": "/"}, {"index": "167", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/SQLWriteOperation.java", "methodName": "com.hm.achievement.db.SQLWriteOperation.attemptWrites", "methodParameterType": "Logger#String#", "methodParameterName": "logger#operationMessage#", "methodBody": "default void attemptWrites(Logger logger, String operationMessage) {\n\t\tfor (int attempt = 1; attempt <= MAX_ATTEMPTS; ++attempt) {\n\t\t\ttry {\n\t\t\t\tperformWrite();\n\t\t\t\t// Operation succeeded: return immediately.\n\t\t\t\treturn;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tif (attempt == MAX_ATTEMPTS) {\n\t\t\t\t\t// Final attempt: log error.\n\t\t\t\t\tlogger.log(Level.SEVERE, \"Database write error while \" + operationMessage + \":\", e);\n\t\t\t\t} else {\n\t\t\t\t\t// Sleep before next attempt.\n\t\t\t\t\tsleepOneSecond(logger);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PrefixExpression#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#StringLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#CatchClause#TryStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)CatchClause)TryStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Calls  {@code performWrite} repeatedly until the write succeeds or {@code MAX_ATTEMPTS} is reached.", "call_func_name": ["com.hm.achievement.db.SQLWriteOperation.performWrite", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.logging.Logger.log", "com.hm.achievement.db.SQLWriteOperation.sleepOneSecond"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["java.util.logging.Level", "java.lang.String", "java.lang.Throwable"], ["java.util.logging.Logger"]], "passed_comments": [{"com.hm.achievement.db.SQLWriteOperation.performWrite": "Performs a single write operation to the database."}, {"com.hm.achievement.db.SQLWriteOperation.sleepOneSecond": "Sleeps during one second."}]}, {"index": "168", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/SQLWriteOperation.java", "methodName": "com.hm.achievement.db.SQLWriteOperation.sleepOneSecond", "methodParameterType": "Logger#", "methodParameterName": "logger#", "methodBody": "default void sleepOneSecond(Logger logger) {\n\t\ttry {\n\t\t\tThread.sleep(1000);\n\t\t} catch (InterruptedException e) {\n\t\t\tlogger.log(Level.SEVERE, \"Thead interrupted while sleeping:\", e);\n\t\t\tThread.currentThread().interrupt();\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Sleeps during one second.", "call_func_name": ["java.lang.Thread.sleep", "java.util.logging.Logger.log", "java.lang.Thread.currentThread", "java.lang.Thread.interrupt"], "call_func_parameter": [["long"], ["java.util.logging.Level", "java.lang.String", "java.lang.Throwable"], [""], [""]], "passed_comments": "/"}, {"index": "169", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/DatabaseUpdater.java", "methodName": "com.hm.achievement.db.DatabaseUpdater.updateOldMaterialsToNewOnes", "methodParameterType": "AbstractDatabaseManager#", "methodParameterName": "databaseManager#", "methodBody": "public void updateOldMaterialsToNewOnes(AbstractDatabaseManager databaseManager) {\n\t\tlogger.info(\"Starting database upgrade to new Minecraft 1.13 material names, please wait...\");\n\t\tupdateOldMaterialsToNewOnes(databaseManager, MultipleAchievements.BREAKS);\n\t\tupdateOldMaterialsToNewOnes(databaseManager, MultipleAchievements.CRAFTS);\n\t\tupdateOldMaterialsToNewOnes(databaseManager, MultipleAchievements.PLACES);\n\t\tlogger.info(\"Finished database upgrade.\");\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Update the database table to use 1.13 materials rather than the old 1.12 ones.", "call_func_name": ["java.util.logging.Logger.info", "com.hm.achievement.db.DatabaseUpdater.updateOldMaterialsToNewOnes"], "call_func_parameter": [["java.lang.String"], ["com.hm.achievement.db.AbstractDatabaseManager", "com.hm.achievement.category.MultipleAchievements"]], "passed_comments": [{"com.hm.achievement.db.DatabaseUpdater.updateOldMaterialsToNewOnes": "Update the database table to use 1.13 materials rather than the old 1.12 ones for a given Multiple category. This methods performs a best effort upgrade based on the functionality provided in the Bukkit."}]}, {"index": "170", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/DatabaseUpdater.java", "methodName": "com.hm.achievement.db.DatabaseUpdater.renameExistingTables", "methodParameterType": "AbstractDatabaseManager#", "methodParameterName": "databaseManager#", "methodBody": "void renameExistingTables(AbstractDatabaseManager databaseManager) throws PluginLoadError {\n\t\t// If a prefix is set in the config, check whether the tables with the default names exist. If so do renaming.\n\t\tif (StringUtils.isNotBlank(databaseManager.getPrefix())) {\n\t\t\tConnection conn = databaseManager.getSQLConnection();\n\t\t\ttry (Statement st = conn.createStatement()) {\n\t\t\t\tResultSet rs = conn.getMetaData().getTables(null, null, \"achievements\", null);\n\t\t\t\t// If the achievements table still has its default name (ie. no prefix), but a prefix is set in the\n\t\t\t\t// configuration, do a renaming of all tables.\n\t\t\t\tif (rs.next()) {\n\t\t\t\t\tlogger.info(\"Adding \" + databaseManager.getPrefix() + \" prefix to database table names, please wait...\");\n\t\t\t\t\tst.addBatch(\"ALTER TABLE achievements RENAME TO \" + databaseManager.getPrefix() + \"achievements\");\n\t\t\t\t\tfor (NormalAchievements category : NormalAchievements.values()) {\n\t\t\t\t\t\tst.addBatch(\"ALTER TABLE \" + category.toDBName() + \" RENAME TO \" + databaseManager.getPrefix()\n\t\t\t\t\t\t\t\t+ category.toDBName());\n\t\t\t\t\t}\n\t\t\t\t\tfor (MultipleAchievements category : MultipleAchievements.values()) {\n\t\t\t\t\t\tst.addBatch(\"ALTER TABLE \" + category.toDBName() + \" RENAME TO \" + databaseManager.getPrefix()\n\t\t\t\t\t\t\t\t+ category.toDBName());\n\t\t\t\t\t}\n\t\t\t\t\tst.executeBatch();\n\t\t\t\t}\n\t\t\t} catch (SQLException e) {\n\t\t\t\tthrow new PluginLoadError(\"Error while setting prefix of database tables.\", e);\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#NullLiteral#StringLiteral#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(StringLiteral)StringLiteral(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Renames the database tables with the prefix given in the configuration file. This method is only used and only works if the tables had the default name. It does not support multiple successive table renamings.", "call_func_name": ["com.hm.achievement.db.AbstractDatabaseManager.getPrefix", "com.hm.apache.commons.lang3.StringUtils.isNotBlank", "com.hm.achievement.db.AbstractDatabaseManager.getSQLConnection", "java.sql.Connection.createStatement", "java.sql.Connection.getMetaData", "java.sql.DatabaseMetaData.getTables", "java.sql.ResultSet.next", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.logging.Logger.info", "java.sql.Statement.addBatch", "com.hm.achievement.category.NormalAchievements.values", "com.hm.achievement.category.NormalAchievements.toDBName", "com.hm.achievement.category.MultipleAchievements.values", "com.hm.achievement.category.MultipleAchievements.toDBName", "java.sql.Statement.executeBatch", "java.sql.Statement.close", "java.lang.Throwable.addSuppressed", "com.hm.achievement.exception.PluginLoadError.<init>"], "call_func_parameter": [[""], ["java.lang.CharSequence"], [""], [""], [""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String[]"], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], [""], [""], [""], [""], [""], [""], ["java.lang.Throwable"], ["java.lang.String", "java.lang.Exception"]], "passed_comments": [{"com.hm.achievement.db.AbstractDatabaseManager.getSQLConnection": "Retrieves SQL connection to MySQL, PostgreSQL, H2 or SQLite database."}]}, {"index": "171", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/DatabaseUpdater.java", "methodName": "com.hm.achievement.db.DatabaseUpdater.initialiseTables", "methodParameterType": "AbstractDatabaseManager#", "methodParameterName": "databaseManager#", "methodBody": "void initialiseTables(AbstractDatabaseManager databaseManager) throws PluginLoadError {\n\t\tConnection conn = databaseManager.getSQLConnection();\n\t\ttry (Statement st = conn.createStatement()) {\n\t\t\tst.addBatch(\"CREATE TABLE IF NOT EXISTS \" + databaseManager.getPrefix()\n\t\t\t\t\t+ \"achievements (playername char(36),achievement varchar(64),description varchar(128),date TIMESTAMP,PRIMARY KEY (playername, achievement))\");\n\n\t\t\tfor (MultipleAchievements category : MultipleAchievements.values()) {\n\t\t\t\tst.addBatch(\"CREATE TABLE IF NOT EXISTS \" + databaseManager.getPrefix() + category.toDBName()\n\t\t\t\t\t\t+ \" (playername char(36),\" + category.toSubcategoryDBName() + \" varchar(191),\" + category.toDBName()\n\t\t\t\t\t\t+ \" INT,PRIMARY KEY(playername, \" + category.toSubcategoryDBName() + \"))\");\n\t\t\t}\n\n\t\t\tfor (NormalAchievements category : NormalAchievements.values()) {\n\t\t\t\tif (category == NormalAchievements.CONNECTIONS) {\n\t\t\t\t\tst.addBatch(\"CREATE TABLE IF NOT EXISTS \" + databaseManager.getPrefix() + category.toDBName()\n\t\t\t\t\t\t\t+ \" (playername char(36),\" + category.toDBName()\n\t\t\t\t\t\t\t+ \" INT,date varchar(10),PRIMARY KEY (playername))\");\n\t\t\t\t} else {\n\t\t\t\t\tst.addBatch(\"CREATE TABLE IF NOT EXISTS \" + databaseManager.getPrefix() + category.toDBName()\n\t\t\t\t\t\t\t+ \" (playername char(36),\" + category.toDBName() + \" BIGINT,PRIMARY KEY (playername))\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tst.executeBatch();\n\t\t} catch (SQLException e) {\n\t\t\tthrow new PluginLoadError(\"Error while initialising database tables.\", e);\n\t\t}\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Initialises database tables by creating non existing ones. We batch the requests to send a unique batch to the database.", "call_func_name": ["com.hm.achievement.db.AbstractDatabaseManager.getSQLConnection", "java.sql.Connection.createStatement", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.hm.achievement.db.AbstractDatabaseManager.getPrefix", "java.lang.StringBuilder.toString", "java.sql.Statement.addBatch", "com.hm.achievement.category.MultipleAchievements.values", "com.hm.achievement.category.MultipleAchievements.toDBName", "com.hm.achievement.category.MultipleAchievements.toSubcategoryDBName", "com.hm.achievement.category.NormalAchievements.values", "com.hm.achievement.category.NormalAchievements.toDBName", "java.sql.Statement.executeBatch", "java.sql.Statement.close", "java.lang.Throwable.addSuppressed", "com.hm.achievement.exception.PluginLoadError.<init>"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], [""], [""], [""], [""], [""], [""], ["java.lang.Throwable"], ["java.lang.String", "java.lang.Exception"]], "passed_comments": [{"com.hm.achievement.db.AbstractDatabaseManager.getSQLConnection": "Retrieves SQL connection to MySQL, PostgreSQL, H2 or SQLite database."}]}, {"index": "172", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/DatabaseUpdater.java", "methodName": "com.hm.achievement.db.DatabaseUpdater.updateOldDBToMaterial", "methodParameterType": "AbstractDatabaseManager#", "methodParameterName": "databaseManager#", "methodBody": "void updateOldDBToMaterial(AbstractDatabaseManager databaseManager) throws PluginLoadError {\n\t\tConnection conn = databaseManager.getSQLConnection();\n\t\tString type = \"\";\n\t\ttry (Statement st = conn.createStatement()) {\n\t\t\tResultSet rs = st.executeQuery(\"SELECT blockid FROM \" + databaseManager.getPrefix()\n\t\t\t\t\t+ MultipleAchievements.BREAKS.toDBName() + \" LIMIT 1\");\n\t\t\ttype = rs.getMetaData().getColumnTypeName(1);\n\t\t} catch (SQLException e) {\n\t\t\tlogger.log(Level.SEVERE, \"Database error while checking if Material upgrade is needed:\", e);\n\t\t}\n\n\t\t// Old column type for versions prior to 2.4.1 was integer for SQLite and smallint unsigned for MySQL.\n\t\tif (\"integer\".equalsIgnoreCase(type) || \"smallint unsigned\".equalsIgnoreCase(type)) {\n\t\t\tlogger.info(\"Updating database tables with Material names, please wait...\");\n\t\t\tif (serverVersion < 13) {\n\t\t\t\tupdateOldDBToMaterial(databaseManager, MultipleAchievements.BREAKS);\n\t\t\t\tupdateOldDBToMaterial(databaseManager, MultipleAchievements.CRAFTS);\n\t\t\t\tupdateOldDBToMaterial(databaseManager, MultipleAchievements.PLACES);\n\t\t\t} else {\n\t\t\t\tthrow new PluginLoadError(\"The database must be updated using tools no longer available in Bukkit. \"\n\t\t\t\t\t\t+ \"Start this plugin build once with a Minecraft version prior to 1.13. \"\n\t\t\t\t\t\t+ \"You can then happily use Advanced Achievements with Minecraft 1.13+!\");\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#StringLiteral#StringLiteral#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Update the database tables for Breaks, Crafts and Places achievements (from int to varchar for identification column). The tables are now using material names and no longer item IDs, which are deprecated; this also allows to store extra data information, extending the number of items available for the user.", "call_func_name": ["com.hm.achievement.db.AbstractDatabaseManager.getSQLConnection", "java.sql.Connection.createStatement", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.hm.achievement.db.AbstractDatabaseManager.getPrefix", "com.hm.achievement.category.MultipleAchievements.toDBName", "java.lang.StringBuilder.toString", "java.sql.Statement.executeQuery", "java.sql.ResultSet.getMetaData", "java.sql.ResultSetMetaData.getColumnTypeName", "java.sql.Statement.close", "java.lang.Throwable.addSuppressed", "java.util.logging.Logger.log", "java.lang.String.equalsIgnoreCase", "java.util.logging.Logger.info", "com.hm.achievement.db.DatabaseUpdater.updateOldDBToMaterial", "com.hm.achievement.exception.PluginLoadError.<init>"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.String"], [""], ["int"], [""], ["java.lang.Throwable"], ["java.util.logging.Level", "java.lang.String", "java.lang.Throwable"], ["java.lang.String"], ["java.lang.String"], ["com.hm.achievement.db.AbstractDatabaseManager", "com.hm.achievement.category.MultipleAchievements"], ["java.lang.String"]], "passed_comments": [{"com.hm.achievement.db.AbstractDatabaseManager.getSQLConnection": "Retrieves SQL connection to MySQL, PostgreSQL, H2 or SQLite database."}, {"com.hm.achievement.db.DatabaseUpdater.updateOldDBToMaterial": "Update the database tables for a MultipleAchievements category."}]}, {"index": "173", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/DatabaseUpdater.java", "methodName": "com.hm.achievement.db.DatabaseUpdater.updateOldDBToMaterial", "methodParameterType": "AbstractDatabaseManager#MultipleAchievements#", "methodParameterName": "databaseManager#category#", "methodBody": "private void updateOldDBToMaterial(AbstractDatabaseManager databaseManager, MultipleAchievements category) {\n\t\tString tableName = databaseManager.getPrefix() + category.toDBName();\n\t\tConnection conn = databaseManager.getSQLConnection();\n\t\ttry (Statement st = conn.createStatement()) {\n\t\t\t// Create new temporary table.\n\t\t\tst.execute(\"CREATE TABLE tempTable (playername char(36),\" + category.toSubcategoryDBName() + \" varchar(191),\"\n\t\t\t\t\t+ tableName + \" INT UNSIGNED,PRIMARY KEY(playername, \" + category.toSubcategoryDBName() + \"))\");\n\t\t\ttry (PreparedStatement prep = conn.prepareStatement(\"INSERT INTO tempTable VALUES (?,?,?);\")) {\n\t\t\t\tResultSet rs = st.executeQuery(\"SELECT * FROM \" + tableName + \"\");\n\t\t\t\tList<String> uuids = new ArrayList<>();\n\t\t\t\tList<Integer> ids = new ArrayList<>();\n\t\t\t\tList<Integer> amounts = new ArrayList<>();\n\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\tuuids.add(rs.getString(1));\n\t\t\t\t\tids.add(rs.getInt(2));\n\t\t\t\t\tamounts.add(rs.getInt(3));\n\t\t\t\t}\n\n\t\t\t\t// Preallocate space in array containing the values in the new format.\n\t\t\t\tList<String> materials = new ArrayList<>(ids.size());\n\n\t\t\t\tfor (int id : ids) {\n\t\t\t\t\t// Convert from ID to Material name. getMaterial(int id) is only available on Minecraft versions\n\t\t\t\t\t// prior to 1.13.\n\t\t\t\t\tMaterial material = (Material) Material.class.getMethod(\"getMaterial\", int.class).invoke(null, id);\n\t\t\t\t\tmaterials.add(material.name().toLowerCase());\n\t\t\t\t}\n\t\t\t\t// Prevent from doing any commits before entire transaction is ready.\n\t\t\t\tconn.setAutoCommit(false);\n\n\t\t\t\t// Populate new table with contents of the old one and material strings. Batch the insert requests.\n\t\t\t\tfor (int i = 0; i < uuids.size(); ++i) {\n\t\t\t\t\tprep.setString(1, uuids.get(i));\n\t\t\t\t\tprep.setString(2, materials.get(i));\n\t\t\t\t\tprep.setInt(3, amounts.get(i));\n\t\t\t\t\tprep.addBatch();\n\t\t\t\t}\n\t\t\t\tprep.executeBatch();\n\t\t\t} finally {\n\t\t\t\t// Delete old table.\n\t\t\t\tst.execute(\"DROP TABLE \" + tableName);\n\t\t\t\t// Rename new table to old one.\n\t\t\t\tst.execute(\"ALTER TABLE tempTable RENAME TO \" + tableName);\n\t\t\t}\n\t\t\t// Commit entire transaction.\n\t\t\tconn.commit();\n\t\t\tconn.setAutoCommit(true);\n\t\t} catch (Exception e) {\n\t\t\tlogger.log(Level.SEVERE, \"Database error while updating old table to remove Minecraft IDs:\", e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#SimpleName#StringLiteral#PrimitiveType#TypeLiteral#MethodInvocation#SimpleName#NullLiteral#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PrefixExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#TryStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)WhileStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Update the database tables for a MultipleAchievements category.", "call_func_name": ["java.lang.StringBuilder.<init>", "com.hm.achievement.db.AbstractDatabaseManager.getPrefix", "java.lang.StringBuilder.append", "com.hm.achievement.category.MultipleAchievements.toDBName", "java.lang.StringBuilder.toString", "com.hm.achievement.db.AbstractDatabaseManager.getSQLConnection", "java.sql.Connection.createStatement", "com.hm.achievement.category.MultipleAchievements.toSubcategoryDBName", "java.sql.Statement.execute", "java.sql.Connection.prepareStatement", "java.sql.Statement.executeQuery", "java.util.ArrayList.<init>", "java.sql.ResultSet.next", "java.sql.ResultSet.getString", "java.util.List.add", "java.sql.ResultSet.getInt", "java.lang.Integer.valueOf", "java.util.List.size", "java.util.ArrayList.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.Integer.intValue", "java.lang.Class.getMethod", "java.lang.reflect.Method.invoke", "org.bukkit.Material.name", "java.lang.String.toLowerCase", "java.sql.Connection.setAutoCommit", "java.util.List.get", "java.sql.PreparedStatement.setString", "java.sql.PreparedStatement.setInt", "java.sql.PreparedStatement.addBatch", "java.sql.PreparedStatement.executeBatch", "java.sql.PreparedStatement.close", "java.lang.Throwable.addSuppressed", "java.sql.Connection.commit", "java.sql.Statement.close", "java.util.logging.Logger.log"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""], [""], ["int"], ["java.lang.Object"], ["int"], ["int"], [""], ["int"], [""], [""], [""], [""], ["java.lang.String", "java.lang.Class[]"], ["java.lang.Object", "java.lang.Object[]"], [""], [""], ["boolean"], ["int"], ["int", "java.lang.String"], ["int", "int"], [""], [""], [""], ["java.lang.Throwable"], [""], [""], ["java.util.logging.Level", "java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"com.hm.achievement.db.AbstractDatabaseManager.getSQLConnection": "Retrieves SQL connection to MySQL, PostgreSQL, H2 or SQLite database."}]}, {"index": "174", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/DatabaseUpdater.java", "methodName": "com.hm.achievement.db.DatabaseUpdater.updateOldDBToDates", "methodParameterType": "AbstractDatabaseManager#", "methodParameterName": "databaseManager#", "methodBody": "void updateOldDBToDates(AbstractDatabaseManager databaseManager) {\n\t\tConnection conn = databaseManager.getSQLConnection();\n\t\ttry (Statement st = conn.createStatement()) {\n\t\t\tResultSet rs = st.executeQuery(\"SELECT date FROM \" + databaseManager.getPrefix() + \"achievements LIMIT 1\");\n\t\t\tString type = rs.getMetaData().getColumnTypeName(1);\n\t\t\t// Old column type for versions prior to 3.0 was text for SQLite, char for MySQL and varchar for PostgreSQL\n\t\t\t// (even though PostgreSQL was not supported on versions prior to 3.0, we still support the upgrade for it\n\t\t\t// in case a user imports another database into PostgreSQL without doing the table upgrade beforehand).\n\t\t\tif (\"text\".equalsIgnoreCase(type) || \"char\".equalsIgnoreCase(type) || \"varchar\".equalsIgnoreCase(type)) {\n\t\t\t\tlogger.info(\"Updating database table with date datatype for achievements, please wait...\");\n\t\t\t\t// Create new temporary table.\n\t\t\t\tst.execute(\"CREATE TABLE tempTable (playername char(36),achievement varchar(64),description varchar(128),\"\n\t\t\t\t\t\t+ \"date TIMESTAMP,PRIMARY KEY (playername, achievement))\");\n\t\t\t\ttry (PreparedStatement prep = conn.prepareStatement(\"INSERT INTO tempTable VALUES (?,?,?,?);\")) {\n\t\t\t\t\t// Old date format, which was stored as a string.\n\t\t\t\t\tSimpleDateFormat oldFormat = new SimpleDateFormat(\"dd/MM/yyyy\");\n\t\t\t\t\t// Load entire achievements table into memory.\n\t\t\t\t\trs = st.executeQuery(\"SELECT * FROM \" + databaseManager.getPrefix() + \"achievements\");\n\t\t\t\t\tList<String> uuids = new ArrayList<>();\n\t\t\t\t\tList<String> achs = new ArrayList<>();\n\t\t\t\t\tList<String> descs = new ArrayList<>();\n\t\t\t\t\tList<String> oldDates = new ArrayList<>();\n\n\t\t\t\t\t// Parse entire table into arrays.\n\t\t\t\t\twhile (rs.next()) {\n\t\t\t\t\t\tuuids.add(rs.getString(1));\n\t\t\t\t\t\tachs.add(rs.getString(2));\n\t\t\t\t\t\tdescs.add(rs.getString(3));\n\t\t\t\t\t\toldDates.add(rs.getString(4));\n\t\t\t\t\t}\n\n\t\t\t\t\t// Preallocate space in array containing the values in the new format.\n\t\t\t\t\tList<Date> newDates = new ArrayList<>(oldDates.size());\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfor (String date : oldDates) {\n\t\t\t\t\t\t\t// Convert to SQL date format. Early versions of the plugin added colors to the date. We\n\t\t\t\t\t\t\t// have to get rid of them else parsing will fail.\n\t\t\t\t\t\t\tif (date.matches(\"^[0-9]+$\")) {\n\t\t\t\t\t\t\t\tnewDates.add(new Date(Long.parseLong(date)));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnewDates.add(new Date(oldFormat.parse(StringHelper.removeFormattingCodes(date)).getTime()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (ParseException e) {\n\t\t\t\t\t\tlogger.log(Level.SEVERE, \"Database error while parsing dates:\", e);\n\t\t\t\t\t}\n\t\t\t\t\t// Prevent from doing any commits before entire transaction is ready.\n\t\t\t\t\tconn.setAutoCommit(false);\n\n\t\t\t\t\t// Populate new table with contents of the old one and date values.\n\t\t\t\t\tfor (int i = 0; i < uuids.size(); ++i) {\n\t\t\t\t\t\tprep.setString(1, uuids.get(i));\n\t\t\t\t\t\tprep.setString(2, achs.get(i));\n\t\t\t\t\t\tprep.setString(3, descs.get(i));\n\t\t\t\t\t\tprep.setDate(4, newDates.get(i));\n\t\t\t\t\t\tprep.addBatch();\n\t\t\t\t\t}\n\t\t\t\t\tprep.executeBatch();\n\t\t\t\t} finally {\n\t\t\t\t\t// Delete old table.\n\t\t\t\t\tst.execute(\"DROP TABLE \" + databaseManager.getPrefix() + \"achievements\");\n\t\t\t\t\t// Rename new table to old one.\n\t\t\t\t\tst.execute(\"ALTER TABLE tempTable RENAME TO \" + databaseManager.getPrefix() + \"achievements\");\n\t\t\t\t}\n\t\t\t\t// Commit entire transaction.\n\t\t\t\tconn.commit();\n\t\t\t\tconn.setAutoCommit(true);\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\tlogger.log(Level.SEVERE, \"Database error while updating old achievements table:\", e);\n\t\t}\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PrefixExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#TryStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)WhileStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Updates the database achievements table. The table is now using a date type for the date column. We also increase the number of chars allowed for the achievement names and descriptions.", "call_func_name": ["com.hm.achievement.db.AbstractDatabaseManager.getSQLConnection", "java.sql.Connection.createStatement", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.hm.achievement.db.AbstractDatabaseManager.getPrefix", "java.lang.StringBuilder.toString", "java.sql.Statement.executeQuery", "java.sql.ResultSet.getMetaData", "java.sql.ResultSetMetaData.getColumnTypeName", "java.lang.String.equalsIgnoreCase", "java.util.logging.Logger.info", "java.sql.Statement.execute", "java.sql.Connection.prepareStatement", "java.text.SimpleDateFormat.<init>", "java.util.ArrayList.<init>", "java.sql.ResultSet.next", "java.sql.ResultSet.getString", "java.util.List.add", "java.util.List.size", "java.util.ArrayList.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.String.matches", "java.lang.Long.parseLong", "java.sql.Date.<init>", "com.hm.achievement.utils.StringHelper.removeFormattingCodes", "java.text.SimpleDateFormat.parse", "java.util.Date.getTime", "java.util.logging.Logger.log", "java.sql.Connection.setAutoCommit", "java.util.List.get", "java.sql.PreparedStatement.setString", "java.sql.PreparedStatement.setDate", "java.sql.PreparedStatement.addBatch", "java.sql.PreparedStatement.executeBatch", "java.sql.PreparedStatement.close", "java.lang.Throwable.addSuppressed", "java.sql.Connection.commit", "java.sql.Statement.close"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], ["int"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""], [""], ["int"], ["java.lang.Object"], [""], ["int"], [""], [""], [""], ["java.lang.String"], ["java.lang.String"], ["long"], ["java.lang.String"], ["java.lang.String"], [""], ["java.util.logging.Level", "java.lang.String", "java.lang.Throwable"], ["boolean"], ["int"], ["int", "java.lang.String"], ["int", "java.sql.Date"], [""], [""], [""], ["java.lang.Throwable"], [""], [""]], "passed_comments": [{"com.hm.achievement.db.AbstractDatabaseManager.getSQLConnection": "Retrieves SQL connection to MySQL, PostgreSQL, H2 or SQLite database."}]}, {"index": "175", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/DatabaseUpdater.java", "methodName": "com.hm.achievement.db.DatabaseUpdater.updateOldDBToTimestamps", "methodParameterType": "AbstractDatabaseManager#", "methodParameterName": "databaseManager#", "methodBody": "void updateOldDBToTimestamps(AbstractDatabaseManager databaseManager) {\n\t\t// SQLite unaffected by this change, H2 support added with timestamp from the start.\n\t\tif (databaseManager instanceof AbstractRemoteDatabaseManager) {\n\t\t\tConnection conn = databaseManager.getSQLConnection();\n\t\t\ttry (Statement st = conn.createStatement()) {\n\t\t\t\tResultSet rs = st.executeQuery(\"SELECT date FROM \" + databaseManager.getPrefix() + \"achievements LIMIT 1\");\n\t\t\t\tString type = rs.getMetaData().getColumnTypeName(1);\n\t\t\t\t// Old column type for versions prior to 5.11.0 was date.\n\t\t\t\tif (\"date\".equalsIgnoreCase(type)) {\n\t\t\t\t\tlogger.info(\"Updating database table with timestamp datatype for achievements, please wait...\");\n\t\t\t\t\tString query = databaseManager instanceof MySQLDatabaseManager\n\t\t\t\t\t\t\t? \"ALTER TABLE \" + databaseManager.getPrefix() + \"achievements MODIFY date TIMESTAMP\"\n\t\t\t\t\t\t\t: \"ALTER TABLE \" + databaseManager.getPrefix() + \"achievements ALTER COLUMN date TYPE TIMESTAMP\";\n\t\t\t\t\tst.execute(query);\n\t\t\t\t}\n\t\t\t} catch (SQLException e) {\n\t\t\t\tlogger.log(Level.SEVERE, \"Database error while updating old achievements table:\", e);\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#InstanceofExpression#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Updates the database achievements table. The table is now using a timestamp type for the date column.", "call_func_name": ["com.hm.achievement.db.AbstractDatabaseManager.getSQLConnection", "java.sql.Connection.createStatement", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.hm.achievement.db.AbstractDatabaseManager.getPrefix", "java.lang.StringBuilder.toString", "java.sql.Statement.executeQuery", "java.sql.ResultSet.getMetaData", "java.sql.ResultSetMetaData.getColumnTypeName", "java.lang.String.equalsIgnoreCase", "java.util.logging.Logger.info", "java.sql.Statement.execute", "java.sql.Statement.close", "java.lang.Throwable.addSuppressed", "java.util.logging.Logger.log"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], ["int"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.Throwable"], ["java.util.logging.Level", "java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"com.hm.achievement.db.AbstractDatabaseManager.getSQLConnection": "Retrieves SQL connection to MySQL, PostgreSQL, H2 or SQLite database."}]}, {"index": "176", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/DatabaseUpdater.java", "methodName": "com.hm.achievement.db.DatabaseUpdater.updateOldDBColumnSize", "methodParameterType": "AbstractDatabaseManager#MultipleAchievements#", "methodParameterName": "databaseManager#category#", "methodBody": "void updateOldDBColumnSize(AbstractDatabaseManager databaseManager, MultipleAchievements category) {\n\t\t// SQLite ignores size for varchar datatype. H2 support was added after this was an issue.\n\t\tif (!(databaseManager instanceof AbstractFileDatabaseManager)) {\n\t\t\tConnection conn = databaseManager.getSQLConnection();\n\t\t\ttry (Statement st = conn.createStatement()) {\n\t\t\t\tResultSet rs = st.executeQuery(\"SELECT \" + category.toSubcategoryDBName() + \" FROM \"\n\t\t\t\t\t\t+ databaseManager.getPrefix() + category.toDBName() + \" LIMIT 1\");\n\t\t\t\tif (rs.getMetaData().getPrecision(1) < 191) {\n\t\t\t\t\tlogger.info(\"Updating \" + category.toDBName() + \" database table with extended column, please wait...\");\n\t\t\t\t\t// Increase size of table.\n\t\t\t\t\tString alterOperation = databaseManager instanceof PostgreSQLDatabaseManager\n\t\t\t\t\t\t\t? \"ALTER COLUMN \" + category.toSubcategoryDBName() + \" TYPE varchar(191)\"\n\t\t\t\t\t\t\t: \"MODIFY \" + category.toSubcategoryDBName() + \" varchar(191)\";\n\t\t\t\t\tst.execute(\"ALTER TABLE \" + databaseManager.getPrefix() + category.toDBName() + \" \" + alterOperation);\n\t\t\t\t}\n\t\t\t} catch (SQLException e) {\n\t\t\t\tlogger.log(Level.SEVERE, \"Database error while updating old \" + category.toDBName() + \" table:\", e);\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#InstanceofExpression#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Increases the size of the sub-category column of MultipleAchievements database tables to accommodate new parameters such as specificplayer-56c79b19-4500-466c-94ea-514a755fdd09 or grouped sub-categories.", "call_func_name": ["com.hm.achievement.db.AbstractDatabaseManager.getSQLConnection", "java.sql.Connection.createStatement", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.hm.achievement.category.MultipleAchievements.toSubcategoryDBName", "com.hm.achievement.db.AbstractDatabaseManager.getPrefix", "com.hm.achievement.category.MultipleAchievements.toDBName", "java.lang.StringBuilder.toString", "java.sql.Statement.executeQuery", "java.sql.ResultSet.getMetaData", "java.sql.ResultSetMetaData.getPrecision", "java.util.logging.Logger.info", "java.sql.Statement.execute", "java.sql.Statement.close", "java.lang.Throwable.addSuppressed", "java.util.logging.Logger.log"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], [""], [""], [""], [""], ["java.lang.String"], [""], ["int"], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.Throwable"], ["java.util.logging.Level", "java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"com.hm.achievement.db.AbstractDatabaseManager.getSQLConnection": "Retrieves SQL connection to MySQL, PostgreSQL, H2 or SQLite database."}]}, {"index": "177", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/DatabaseUpdater.java", "methodName": "com.hm.achievement.db.DatabaseUpdater.updateOldMaterialsToNewOnes", "methodParameterType": "AbstractDatabaseManager#MultipleAchievements#", "methodParameterName": "databaseManager#category#", "methodBody": "private void updateOldMaterialsToNewOnes(AbstractDatabaseManager databaseManager, MultipleAchievements category) {\n\t\tString tableName = databaseManager.getPrefix() + category.toDBName();\n\t\tConnection conn = databaseManager.getSQLConnection();\n\t\ttry (Statement st = conn.createStatement()) {\n\t\t\t// Create new temporary table.\n\t\t\tst.execute(\"CREATE TABLE tempTable (playername char(36),\" + category.toSubcategoryDBName() + \" varchar(191),\"\n\t\t\t\t\t+ tableName + \" INT UNSIGNED,PRIMARY KEY(playername, \" + category.toSubcategoryDBName() + \"))\");\n\t\t\ttry (PreparedStatement prep = conn.prepareStatement(\"INSERT INTO tempTable VALUES (?,?,?);\")) {\n\t\t\t\tResultSet rs = st.executeQuery(\"SELECT * FROM \" + tableName + \"\");\n\t\t\t\tList<String> uuids = new ArrayList<>();\n\t\t\t\tList<String> materialKeys = new ArrayList<>();\n\t\t\t\tList<Integer> amounts = new ArrayList<>();\n\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\tuuids.add(rs.getString(1));\n\t\t\t\t\tmaterialKeys.add(convertToNewMaterialKey(rs.getString(2)));\n\t\t\t\t\tamounts.add(rs.getInt(3));\n\t\t\t\t}\n\t\t\t\t// Prevent from doing any commits before entire transaction is ready.\n\t\t\t\tconn.setAutoCommit(false);\n\n\t\t\t\t// Populate new table with contents of the old one and material strings. Batch the insert requests.\n\t\t\t\tfor (int i = 0; i < uuids.size(); ++i) {\n\t\t\t\t\tprep.setString(1, uuids.get(i));\n\t\t\t\t\tprep.setString(2, materialKeys.get(i));\n\t\t\t\t\tprep.setInt(3, amounts.get(i));\n\t\t\t\t\tprep.addBatch();\n\t\t\t\t}\n\t\t\t\tprep.executeBatch();\n\t\t\t} finally {\n\t\t\t\t// Delete old table.\n\t\t\t\tst.execute(\"DROP TABLE \" + tableName);\n\t\t\t\t// Rename new table to old one.\n\t\t\t\tst.execute(\"ALTER TABLE tempTable RENAME TO \" + tableName);\n\t\t\t}\n\t\t\t// Commit entire transaction.\n\t\t\tconn.commit();\n\t\t\tconn.setAutoCommit(true);\n\t\t} catch (Exception e) {\n\t\t\tlogger.log(Level.SEVERE, \"Database error while updating old material names to new Minecraft 1.13 ones:\", e);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PrefixExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#TryStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)WhileStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Update the database table to use 1.13 materials rather than the old 1.12 ones for a given Multiple category. This methods performs a best effort upgrade based on the functionality provided in the Bukkit.", "call_func_name": ["java.lang.StringBuilder.<init>", "com.hm.achievement.db.AbstractDatabaseManager.getPrefix", "java.lang.StringBuilder.append", "com.hm.achievement.category.MultipleAchievements.toDBName", "java.lang.StringBuilder.toString", "com.hm.achievement.db.AbstractDatabaseManager.getSQLConnection", "java.sql.Connection.createStatement", "com.hm.achievement.category.MultipleAchievements.toSubcategoryDBName", "java.sql.Statement.execute", "java.sql.Connection.prepareStatement", "java.sql.Statement.executeQuery", "java.util.ArrayList.<init>", "java.sql.ResultSet.next", "java.sql.ResultSet.getString", "java.util.List.add", "com.hm.achievement.db.DatabaseUpdater.convertToNewMaterialKey", "java.sql.ResultSet.getInt", "java.lang.Integer.valueOf", "java.sql.Connection.setAutoCommit", "java.util.List.size", "java.util.List.get", "java.sql.PreparedStatement.setString", "java.lang.Integer.intValue", "java.sql.PreparedStatement.setInt", "java.sql.PreparedStatement.addBatch", "java.sql.PreparedStatement.executeBatch", "java.sql.PreparedStatement.close", "java.lang.Throwable.addSuppressed", "java.sql.Connection.commit", "java.sql.Statement.close", "java.util.logging.Logger.log"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""], [""], ["int"], ["java.lang.Object"], ["java.lang.String"], ["int"], ["int"], ["boolean"], [""], ["int"], ["int", "java.lang.String"], [""], ["int", "int"], [""], [""], [""], ["java.lang.Throwable"], [""], [""], ["java.util.logging.Level", "java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"com.hm.achievement.db.AbstractDatabaseManager.getSQLConnection": "Retrieves SQL connection to MySQL, PostgreSQL, H2 or SQLite database."}, {"com.hm.achievement.db.DatabaseUpdater.convertToNewMaterialKey": "Converts a material key containing pre-1.13 materials (e.g. \"workbench|explosive_minecart\") to an equivalent key with 1.13 materials (e.g. \"crafting_table|tnt_minecart\")."}]}, {"index": "178", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/DatabaseUpdater.java", "methodName": "com.hm.achievement.db.DatabaseUpdater.convertToNewMaterialKey", "methodParameterType": "String#", "methodParameterName": "oldMaterialKey#", "methodBody": "private String convertToNewMaterialKey(String oldMaterialKey) {\n\t\tList<String> newMaterials = new ArrayList<>();\n\t\tfor (String oldMaterial : StringUtils.split(oldMaterialKey, '|')) {\n\t\t\tOptional<Material> material = materialHelper.matchMaterial(StringUtils.substringBefore(oldMaterialKey, \":\"),\n\t\t\t\t\t\"the database (\" + oldMaterialKey + \")\");\n\t\t\tif (material.isPresent()) {\n\t\t\t\tString metadata = StringUtils.substringAfter(oldMaterialKey, \":\");\n\t\t\t\tnewMaterials.add(material.get().name().toLowerCase() + (metadata.isEmpty() ? \"\" : \":\" + metadata));\n\t\t\t} else {\n\t\t\t\tnewMaterials.add(oldMaterial);\n\t\t\t}\n\t\t}\n\t\treturn StringUtils.join(newMaterials, \"|\");\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#StringLiteral#StringLiteral#SimpleName#InfixExpression#ConditionalExpression#ParenthesizedExpression#InfixExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(ParenthesizedExpression(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ConditionalExpression)ParenthesizedExpression)InfixExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts a material key containing pre-1.13 materials (e.g. \"workbench|explosive_minecart\") to an equivalent key with 1.13 materials (e.g. \"crafting_table|tnt_minecart\").", "call_func_name": ["java.util.ArrayList.<init>", "com.hm.apache.commons.lang3.StringUtils.split", "com.hm.apache.commons.lang3.StringUtils.substringBefore", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.utils.MaterialHelper.matchMaterial", "java.util.Optional.isPresent", "com.hm.apache.commons.lang3.StringUtils.substringAfter", "java.util.Optional.get", "org.bukkit.Material.name", "java.lang.String.toLowerCase", "java.lang.String.isEmpty", "java.util.List.add", "com.hm.apache.commons.lang3.StringUtils.join"], "call_func_parameter": [[""], ["java.lang.String", "char"], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.String"], [""], [""], [""], [""], ["java.lang.Object"], ["java.lang.Iterable", "java.lang.String"]], "passed_comments": [{"com.hm.achievement.utils.MaterialHelper.matchMaterial": "Tries to match a name to a Material instance."}]}, {"index": "179", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AsyncCachedRequestsSender.java", "methodName": "com.hm.achievement.db.AsyncCachedRequestsSender.run", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic void run() {\n\t\tsendBatchedRequests();\n\t\tcleanUpCaches();\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Writes cached statistics to the database and cleans up the no longer relevant cached statistics.", "call_func_name": ["com.hm.achievement.db.AsyncCachedRequestsSender.sendBatchedRequests", "com.hm.achievement.db.AsyncCachedRequestsSender.cleanUpCaches"], "call_func_parameter": [[""], [""]], "passed_comments": [{"com.hm.achievement.db.AsyncCachedRequestsSender.sendBatchedRequests": "Writes cached statistics to the database, with batched writes for efficiency purposes. If a failure occurs, the same queries will be attempted again."}, {"com.hm.achievement.db.AsyncCachedRequestsSender.cleanUpCaches": "Removes the cached statistics that have been written to the database and for which the player is no longer connected."}]}, {"index": "180", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AsyncCachedRequestsSender.java", "methodName": "com.hm.achievement.db.AsyncCachedRequestsSender.sendBatchedRequests", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void sendBatchedRequests() {\n\t\tList<String> batchedRequests = new ArrayList<>();\n\t\tfor (MultipleAchievements category : MultipleAchievements.values()) {\n\t\t\taddRequestsForMultipleCategory(batchedRequests, category);\n\t\t}\n\t\tfor (NormalAchievements category : NormalAchievements.values()) {\n\t\t\taddRequestsForNormalCategory(batchedRequests, category);\n\t\t}\n\n\t\tif (batchedRequests.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\n\t\t((SQLWriteOperation) () -> {\n\t\t\tConnection conn = databaseManager.getSQLConnection();\n\t\t\ttry (Statement st = conn.createStatement()) {\n\t\t\t\tfor (String request : batchedRequests) {\n\t\t\t\t\tst.addBatch(request);\n\t\t\t\t}\n\t\t\t\tst.executeBatch();\n\t\t\t} catch (BatchUpdateException e) { // Attempt to solve issue #309.\n\t\t\t\tconn.close();\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}).attemptWrites(logger, \"batching statistic updates\");\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ThrowStatement#Block#CatchClause#TryStatement#Block#LambdaExpression#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(LambdaExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause)TryStatement)Block)LambdaExpression)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Writes cached statistics to the database, with batched writes for efficiency purposes. If a failure occurs, the same queries will be attempted again.", "call_func_name": ["java.util.ArrayList.<init>", "com.hm.achievement.category.MultipleAchievements.values", "com.hm.achievement.db.AsyncCachedRequestsSender.addRequestsForMultipleCategory", "com.hm.achievement.category.NormalAchievements.values", "com.hm.achievement.db.AsyncCachedRequestsSender.addRequestsForNormalCategory", "java.util.List.isEmpty", "com.hm.achievement.db.SQLWriteOperation.performWrite", "com.hm.achievement.db.SQLWriteOperation.attemptWrites"], "call_func_parameter": [[""], [""], ["java.util.List", "com.hm.achievement.category.MultipleAchievements"], [""], ["java.util.List", "com.hm.achievement.category.NormalAchievements"], [""], ["com.hm.achievement.db.AsyncCachedRequestsSender", "java.util.List"], ["java.util.logging.Logger", "java.lang.String"]], "passed_comments": [{"com.hm.achievement.db.AsyncCachedRequestsSender.addRequestsForMultipleCategory": "Adds the database queries to perform for a given Multiple category. PostgreSQL has no REPLACE operator. We have to use the INSERT ... ON CONFLICT construct, which is available for PostgreSQL 9.5+."}, {"com.hm.achievement.db.AsyncCachedRequestsSender.addRequestsForNormalCategory": "Adds the database queries to perform for a given Normal category. PostgreSQL has no REPLACE operator. We have to use the INSERT ... ON CONFLICT construct, which is available for PostgreSQL 9.5+."}, {"com.hm.achievement.db.SQLWriteOperation.attemptWrites": "Calls  {@code performWrite} repeatedly until the write succeeds or {@code MAX_ATTEMPTS} is reached."}]}, {"index": "181", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AsyncCachedRequestsSender.java", "methodName": "com.hm.achievement.db.AsyncCachedRequestsSender.addRequestsForMultipleCategory", "methodParameterType": "List<String>#MultipleAchievements#", "methodParameterName": "batchedRequests#category#", "methodBody": "private void addRequestsForMultipleCategory(List<String> batchedRequests, MultipleAchievements category) {\n\t\tMap<String, CachedStatistic> categoryMap = cacheManager.getHashMap(category);\n\t\tfor (Entry<String, CachedStatistic> entry : categoryMap.entrySet()) {\n\t\t\tif (!entry.getValue().isDatabaseConsistent()) {\n\t\t\t\t// Set flag before writing to database so that concurrent updates are not wrongly marked as consistent.\n\t\t\t\tentry.getValue().prepareDatabaseWrite();\n\t\t\t\tif (databaseManager instanceof PostgreSQLDatabaseManager) {\n\t\t\t\t\tbatchedRequests.add(\"INSERT INTO \" + databaseManager.getPrefix() + category.toDBName() + \" VALUES ('\"\n\t\t\t\t\t\t\t+ entry.getKey().substring(0, 36) + \"', '\" + entry.getKey().substring(36) + \"', \"\n\t\t\t\t\t\t\t+ entry.getValue().getValue() + \") ON CONFLICT (playername, \" + category.toSubcategoryDBName()\n\t\t\t\t\t\t\t+ \") DO UPDATE SET (\" + category.toDBName() + \")=(\" + entry.getValue().getValue() + \")\");\n\t\t\t\t} else {\n\t\t\t\t\tbatchedRequests.add(\"REPLACE INTO \" + databaseManager.getPrefix() + category.toDBName() + \" VALUES ('\"\n\t\t\t\t\t\t\t+ entry.getKey().substring(0, 36) + \"', '\" + entry.getKey().substring(36) + \"', \"\n\t\t\t\t\t\t\t+ entry.getValue().getValue() + \")\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Adds the database queries to perform for a given Multiple category. PostgreSQL has no REPLACE operator. We have to use the INSERT ... ON CONFLICT construct, which is available for PostgreSQL 9.5+.", "call_func_name": ["com.hm.achievement.db.CacheManager.getHashMap", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.hm.achievement.db.CachedStatistic.isDatabaseConsistent", "com.hm.achievement.db.CachedStatistic.prepareDatabaseWrite", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.hm.achievement.db.AbstractDatabaseManager.getPrefix", "com.hm.achievement.category.MultipleAchievements.toDBName", "java.lang.String.substring", "java.lang.String.substring", "com.hm.achievement.db.CachedStatistic.getValue", "java.lang.StringBuilder.append", "com.hm.achievement.category.MultipleAchievements.toSubcategoryDBName", "java.lang.StringBuilder.toString", "java.util.List.add"], "call_func_parameter": [["com.hm.achievement.category.MultipleAchievements"], [""], [""], [""], [""], [""], [""], [""], ["java.lang.String"], [""], [""], ["int", "int"], ["int"], [""], ["long"], [""], [""], ["java.lang.Object"]], "passed_comments": [{"com.hm.achievement.db.CacheManager.getHashMap": "Retrieves a HashMap for a MultipleAchievement based on the category."}]}, {"index": "182", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AsyncCachedRequestsSender.java", "methodName": "com.hm.achievement.db.AsyncCachedRequestsSender.addRequestsForNormalCategory", "methodParameterType": "List<String>#NormalAchievements#", "methodParameterName": "batchedRequests#category#", "methodBody": "private void addRequestsForNormalCategory(List<String> batchedRequests, NormalAchievements category) {\n\t\tMap<String, CachedStatistic> categoryMap = cacheManager.getHashMap(category);\n\t\tfor (Entry<String, CachedStatistic> entry : categoryMap.entrySet()) {\n\t\t\tif (!entry.getValue().isDatabaseConsistent()) {\n\t\t\t\t// Set flag before writing to database so that concurrent updates are not wrongly marked as consistent.\n\t\t\t\tentry.getValue().prepareDatabaseWrite();\n\t\t\t\tif (databaseManager instanceof PostgreSQLDatabaseManager) {\n\t\t\t\t\tbatchedRequests.add(\"INSERT INTO \" + databaseManager.getPrefix() + category.toDBName() + \" VALUES ('\"\n\t\t\t\t\t\t\t+ entry.getKey() + \"', \" + entry.getValue().getValue()\n\t\t\t\t\t\t\t+ \") ON CONFLICT (playername) DO UPDATE SET (\" + category.toDBName() + \")=(\"\n\t\t\t\t\t\t\t+ entry.getValue().getValue() + \")\");\n\t\t\t\t} else {\n\t\t\t\t\tbatchedRequests.add(\"REPLACE INTO \" + databaseManager.getPrefix() + category.toDBName() + \" VALUES ('\"\n\t\t\t\t\t\t\t+ entry.getKey() + \"', \" + entry.getValue().getValue() + \")\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Adds the database queries to perform for a given Normal category. PostgreSQL has no REPLACE operator. We have to use the INSERT ... ON CONFLICT construct, which is available for PostgreSQL 9.5+.", "call_func_name": ["com.hm.achievement.db.CacheManager.getHashMap", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.hm.achievement.db.CachedStatistic.isDatabaseConsistent", "com.hm.achievement.db.CachedStatistic.prepareDatabaseWrite", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.hm.achievement.db.AbstractDatabaseManager.getPrefix", "com.hm.achievement.category.NormalAchievements.toDBName", "com.hm.achievement.db.CachedStatistic.getValue", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.List.add"], "call_func_parameter": [["com.hm.achievement.category.NormalAchievements"], [""], [""], [""], [""], [""], [""], [""], ["java.lang.String"], [""], [""], [""], ["long"], [""], ["java.lang.Object"]], "passed_comments": [{"com.hm.achievement.db.CacheManager.getHashMap": "Retrieves a HashMap for a NormalAchievement based on the category."}]}, {"index": "183", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AsyncCachedRequestsSender.java", "methodName": "com.hm.achievement.db.AsyncCachedRequestsSender.cleanUpCaches", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void cleanUpCaches() {\n\t\tfor (MultipleAchievements category : MultipleAchievements.values()) {\n\t\t\tMap<String, CachedStatistic> categoryMap = cacheManager.getHashMap(category);\n\t\t\tcleanUpCache(categoryMap);\n\t\t}\n\t\tfor (NormalAchievements category : NormalAchievements.values()) {\n\t\t\tMap<String, CachedStatistic> categoryMap = cacheManager.getHashMap(category);\n\t\t\tcleanUpCache(categoryMap);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Removes the cached statistics that have been written to the database and for which the player is no longer connected.", "call_func_name": ["com.hm.achievement.category.MultipleAchievements.values", "com.hm.achievement.db.CacheManager.getHashMap", "com.hm.achievement.db.AsyncCachedRequestsSender.cleanUpCache", "com.hm.achievement.category.NormalAchievements.values", "com.hm.achievement.db.CacheManager.getHashMap"], "call_func_parameter": [[""], ["com.hm.achievement.category.MultipleAchievements"], ["java.util.Map"], [""], ["com.hm.achievement.category.NormalAchievements"]], "passed_comments": [{"com.hm.achievement.db.CacheManager.getHashMap": "Retrieves a HashMap for a MultipleAchievement based on the category."}, {"com.hm.achievement.db.AsyncCachedRequestsSender.cleanUpCache": "Performs the aformentioned removals for a given category."}, {"com.hm.achievement.db.CacheManager.getHashMap": "Retrieves a HashMap for a NormalAchievement based on the category."}]}, {"index": "184", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/AsyncCachedRequestsSender.java", "methodName": "com.hm.achievement.db.AsyncCachedRequestsSender.cleanUpCache", "methodParameterType": "Map<String,CachedStatistic>#", "methodParameterName": "categoryMap#", "methodBody": "private void cleanUpCache(Map<String, CachedStatistic> categoryMap) {\n\t\tfor (Entry<String, CachedStatistic> entry : categoryMap.entrySet()) {\n\t\t\tif (entry.getValue().didPlayerDisconnect() && entry.getValue().isDatabaseConsistent()) {\n\t\t\t\t// Player was disconnected at some point in the recent past. Hand over the cleaning to the main server\n\t\t\t\t// thread.\n\t\t\t\tBukkit.getScheduler().callSyncMethod(advancedAchievements, () -> {\n\t\t\t\t\t// Check again whether statistic has been written to the database. This is necessary to cover\n\t\t\t\t\t// cases where the player may have reconnected in the meantime.\n\t\t\t\t\tif (entry.getValue().isDatabaseConsistent()) {\n\t\t\t\t\t\tcategoryMap.remove(entry.getKey());\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Get player UUID, which always corresponds to the 36 first characters of the key\n\t\t\t\t\t\t// regardless of the category type.\n\t\t\t\t\t\tUUID player = UUID.fromString(entry.getKey().substring(0, 36));\n\t\t\t\t\t\tif (Bukkit.getPlayer(player) != null) {\n\t\t\t\t\t\t\tentry.getValue().resetDisconnection();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Performs the aformentioned removals for a given category.", "call_func_name": ["java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.hm.achievement.db.CachedStatistic.didPlayerDisconnect", "com.hm.achievement.db.CachedStatistic.isDatabaseConsistent", "org.bukkit.Bukkit.getScheduler", "org.bukkit.scheduler.BukkitScheduler.callSyncMethod"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], [""], ["org.bukkit.plugin.Plugin", "java.util.concurrent.Callable"]], "passed_comments": "/"}, {"index": "185", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/SQLReadOperation.java", "methodName": "com.hm.achievement.db.SQLReadOperation.performRead", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "T performRead() throws SQLException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Performs a single read operation on the database.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "186", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-plugin/src/main/java/com/hm/achievement/db/SQLReadOperation.java", "methodName": "com.hm.achievement.db.SQLReadOperation.executeOperation", "methodParameterType": "String#", "methodParameterName": "operationMessage#", "methodBody": "default T executeOperation(String operationMessage) {\n\t\tSQLException cause = null;\n\t\tfor (int attempt = 1; attempt <= MAX_ATTEMPTS; ++attempt) {\n\t\t\ttry {\n\t\t\t\treturn performRead();\n\t\t\t} catch (SQLException e) {\n\t\t\t\tcause = e;\n\t\t\t}\n\t\t}\n\t\tthrow new DatabaseReadError(\"Database read error while \" + operationMessage + \".\", cause);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PrefixExpression#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#CatchClause#TryStatement#Block#ForStatement#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)CatchClause)TryStatement)Block)ForStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Calls  {@code performRead} repeatedly until the read succeeds or {@code MAX_ATTEMPTS} is reached, in which case aruntime exception is thrown.", "call_func_name": ["com.hm.achievement.db.SQLReadOperation.performRead", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.hm.achievement.exception.DatabaseReadError.<init>"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["java.lang.String", "java.sql.SQLException"]], "passed_comments": [{"com.hm.achievement.db.SQLReadOperation.performRead": "Performs a single read operation on the database."}]}, {"index": "187", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/lang/Lang.java", "methodName": "com.hm.achievement.lang.Lang.toLangKey", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String toLangKey();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Converts to the key in the language file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "188", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/lang/Lang.java", "methodName": "com.hm.achievement.lang.Lang.toLangDefault", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String toLangDefault();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Converts to the default message that is returned, if key is not found in the configuration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "189", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/api/AdvancedAchievementsAPI.java", "methodName": "com.hm.achievement.api.AdvancedAchievementsAPI.getAdvancedAchievementsVersionCode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n\tint getAdvancedAchievementsVersionCode();", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Formats Advanced Achievements's version as an integer. The version is computed as follows: 100", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "190", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/api/AdvancedAchievementsAPI.java", "methodName": "com.hm.achievement.api.AdvancedAchievementsAPI.getAdvancedAchievementsVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Version getAdvancedAchievementsVersion();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns Advanced Achievement's version as an object. Version 5.10.1 corresponds to major version 5, minor version 10 and patch version 1.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "191", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/api/AdvancedAchievementsAPI.java", "methodName": "com.hm.achievement.api.AdvancedAchievementsAPI.hasPlayerReceivedAchievement", "methodParameterType": "UUID#String#", "methodParameterName": "player#achievementName#", "methodBody": "boolean hasPlayerReceivedAchievement(UUID player, String achievementName);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Checks whether player has received achievement  {@code achievementName}. Implementation benefits from Advanced Achievements caching when player is online and if method called from server thread.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "192", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/api/AdvancedAchievementsAPI.java", "methodName": "com.hm.achievement.api.AdvancedAchievementsAPI.getPlayerAchievementsList", "methodParameterType": "UUID#", "methodParameterName": "player#", "methodBody": "List<Achievement> getPlayerAchievementsList(UUID player);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Retrieves all achievements received by the player.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "193", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/api/AdvancedAchievementsAPI.java", "methodName": "com.hm.achievement.api.AdvancedAchievementsAPI.getPlayerTotalAchievements", "methodParameterType": "UUID#", "methodParameterName": "player#", "methodBody": "int getPlayerTotalAchievements(UUID player);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Retrieves the total number of achievements received by the player. Implementation benefits from Advanced Achievements caching when player is online.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "194", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/api/AdvancedAchievementsAPI.java", "methodName": "com.hm.achievement.api.AdvancedAchievementsAPI.getPlayerRank", "methodParameterType": "UUID#long#", "methodParameterName": "player#rankingPeriodStart#", "methodBody": "Rank getPlayerRank(UUID player, long rankingPeriodStart);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Retrieves the  {@code Rank} object of a player over a given period.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "195", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/api/AdvancedAchievementsAPI.java", "methodName": "com.hm.achievement.api.AdvancedAchievementsAPI.getTopPlayers", "methodParameterType": "int#long#", "methodParameterName": "numOfPlayers#rankingPeriodStart#", "methodBody": "List<UUID> getTopPlayers(int numOfPlayers, long rankingPeriodStart);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Retrieves the players who have received the most achievements during a given period.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "196", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/api/AdvancedAchievementsAPI.java", "methodName": "com.hm.achievement.api.AdvancedAchievementsAPI.getStatisticForNormalCategory", "methodParameterType": "UUID#NormalAchievements#", "methodParameterName": "player#category#", "methodBody": "long getStatisticForNormalCategory(UUID player, NormalAchievements category);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Retrieves a statistic for a normal category. Implementation benefits from Advanced Achievements caching when player is online and if method called from server thread.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "197", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/api/AdvancedAchievementsAPI.java", "methodName": "com.hm.achievement.api.AdvancedAchievementsAPI.getStatisticForMultipleCategory", "methodParameterType": "UUID#MultipleAchievements#String#", "methodParameterName": "player#category#subcategory#", "methodBody": "long getStatisticForMultipleCategory(UUID player, MultipleAchievements category, String subcategory);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Retrieves a statistic for a multiple category. Implementation benefits from Advanced Achievements caching when player is online and if method called from server thread.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "198", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/api/AdvancedAchievementsAPI.java", "methodName": "com.hm.achievement.api.AdvancedAchievementsAPI.getDisplayNameForName", "methodParameterType": "String#", "methodParameterName": "achievementName#", "methodBody": "String getDisplayNameForName(String achievementName);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the DisplayName parameter for a given achievement Name parameter. If no DisplayName was found for the achievement  {@code achievementName}, an empty String is returned. If the achievement  {@code achievementName} wasnot found in Advanced Achievements's configuration, null is returned.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "199", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/api/AdvancedAchievementsAPI.java", "methodName": "com.hm.achievement.api.AdvancedAchievementsAPI.getPlayersTotalAchievements", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Map<UUID, Integer> getPlayersTotalAchievements();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Retrieves the total numbers of achievements received by every player who has at least one achievement.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "200", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/api/AdvancedAchievementsAPIFetcher.java", "methodName": "com.hm.achievement.api.AdvancedAchievementsAPIFetcher.fetchInstance", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static Optional<AdvancedAchievementsAPI> fetchInstance() {\n\t\tPlugin plugin = Bukkit.getPluginManager().getPlugin(\"AdvancedAchievements\");\n\t\tif (plugin != null) {\n\t\t\ttry {\n\t\t\t\tClass<?> mainClass = Class.forName(MAIN_CLASS);\n\t\t\t\tObject advancedAchievements = mainClass.cast(plugin);\n\t\t\t\tObject apiInstance = mainClass.getMethod(API_GETTER).invoke(advancedAchievements);\n\t\t\t\treturn Optional.ofNullable((AdvancedAchievementsAPI) apiInstance);\n\t\t\t} catch (Exception e) {\n\t\t\t\tPluginLogger logger = new PluginLogger(plugin);\n\t\t\t\tlogger.warning(\"Error whilst trying to fetch an Advanced Achievements API instance: \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t\treturn Optional.empty();\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves an AdvancedAchievementsAPI instance that can be used to integrate with Advanced Achievements.", "call_func_name": ["org.bukkit.Bukkit.getPluginManager", "org.bukkit.plugin.PluginManager.getPlugin", "java.lang.Class.forName", "java.lang.Class.cast", "java.lang.Class.getMethod", "java.lang.reflect.Method.invoke", "java.util.Optional.ofNullable", "org.bukkit.plugin.PluginLogger.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Exception.getMessage", "java.lang.StringBuilder.toString", "org.bukkit.plugin.PluginLogger.warning", "java.util.Optional.empty"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String", "java.lang.Class[]"], ["java.lang.Object", "java.lang.Object[]"], ["java.lang.Object"], ["org.bukkit.plugin.Plugin"], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "201", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/utils/PlayerAdvancedAchievementEvent.java", "methodName": "com.hm.achievement.utils.PlayerAdvancedAchievementEvent.getCommandMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n\tpublic String getCommandMessage() {\n\t\treturn StringUtils.join(commandMessages, ' ');\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated use {@link #getCommandMessages()} instead", "call_func_name": ["com.hm.apache.commons.lang3.StringUtils.join"], "call_func_parameter": [["java.lang.Iterable", "char"]], "passed_comments": "/"}, {"index": "202", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/category/CommandAchievements.java", "methodName": "com.hm.achievement.category.CommandAchievements.toDBName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic String toDBName() {\n\t\treturn \"\";\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "203", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/category/CommandAchievements.java", "methodName": "com.hm.achievement.category.CommandAchievements.toPermName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic String toPermName() {\n\t\treturn \"\";\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "204", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/category/CommandAchievements.java", "methodName": "com.hm.achievement.category.CommandAchievements.toLangKey", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic String toLangKey() {\n\t\treturn \"list-commands\";\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "205", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/category/CommandAchievements.java", "methodName": "com.hm.achievement.category.CommandAchievements.toLangDefault", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic String toLangDefault() {\n\t\treturn \"Other Achievements\";\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "206", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/category/CommandAchievements.java", "methodName": "com.hm.achievement.category.CommandAchievements.toConfigComment", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic String toConfigComment() {\n\t\treturn \"/aach give yourAch1 PLAYER can be used to give the yourAch1 achievement to PLAYER.\";\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "207", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/category/Category.java", "methodName": "com.hm.achievement.category.Category.toDBName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String toDBName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Converts to database name: name of the enum in lower case.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "208", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/category/Category.java", "methodName": "com.hm.achievement.category.Category.toPermName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String toPermName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Converts to permission name: common prefix + name of the category in lower case.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "209", "file": "/root/repos/repos41/AdvancedAchievements/advanced-achievements-api/src/main/java/com/hm/achievement/category/Category.java", "methodName": "com.hm.achievement.category.Category.toConfigComment", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String toConfigComment();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Converts to the comment that is inserted about the category name in the configuration file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}]