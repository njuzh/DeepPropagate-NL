[{"index": "0", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/images/NamedImageTransformer.java", "methodName": "com.adobe.acs.commons.images.NamedImageTransformer.transform", "methodParameterType": "Layer#", "methodParameterName": "layer#", "methodBody": "Layer transform(Layer layer);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Transforms the param layer using all the parameterized image transformers defined in this instances OSGi configuration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/images/NamedImageTransformer.java", "methodName": "com.adobe.acs.commons.images.NamedImageTransformer.getTransformName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getTransformName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the name of this transform as defined in this instance's OSGi configuration. The transform name is also used to construct URLs for the <code>NamedTransformImageServlet</code>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/images/NamedImageTransformer.java", "methodName": "com.adobe.acs.commons.images.NamedImageTransformer.getImageTransforms", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Map<String, ValueMap> getImageTransforms();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the ImageTransforms types and their params for this Named Image Transform", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/images/ImageTransformer.java", "methodName": "com.adobe.acs.commons.images.ImageTransformer.transform", "methodParameterType": "Layer#ValueMap#", "methodParameterName": "layer#properties#", "methodBody": "Layer transform(Layer layer, ValueMap properties);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Transform the provided layer using the transformation parameters provided in properties.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "4", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/images/impl/ProgressiveJpeg.java", "methodName": "com.adobe.acs.commons.images.impl.ProgressiveJpeg.write", "methodParameterType": "Layer#double#OutputStream#", "methodParameterName": "layer#quality#out#", "methodBody": "public static void write(Layer layer, double quality, OutputStream out) throws IOException {\n        ImageWriter writer = null;\n        ImageOutputStream imageOut = null;\n        try {\n            ImageWriteParam iwp = new JPEGImageWriteParam(null);\n            iwp.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);\n            iwp.setProgressiveMode(ImageWriteParam.MODE_DEFAULT);\n            iwp.setCompressionQuality((float) quality);\n\n            writer = ImageIO.getImageWritersBySuffix(\"jpeg\").next();\n\n            imageOut = ImageIO.createImageOutputStream(out);\n            writer.setOutput(imageOut);\n\n            BufferedImage image = getRgbImage(layer);\n            writer.write(null, new IIOImage(image, null, null), iwp);\n        } finally {\n            if (writer != null) {\n                writer.dispose();\n            }\n            if (imageOut != null) {\n                try {\n                    imageOut.close();\n                } catch (IOException e) {\n                    // ignore\n                }\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NullLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#PrimitiveType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleType#SimpleName#NullLiteral#NullLiteral#ClassInstanceCreation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#IfStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block)IfStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "For JPEG images, this method behaves similar to  {@link Layer#write(String,double,OutputStream)}. The major difference is that it uses progressive encoding.", "call_func_name": ["javax.imageio.plugins.jpeg.JPEGImageWriteParam.<init>", "javax.imageio.ImageWriteParam.setCompressionMode", "javax.imageio.ImageWriteParam.setProgressiveMode", "javax.imageio.ImageWriteParam.setCompressionQuality", "javax.imageio.ImageIO.getImageWritersBySuffix", "java.util.Iterator.next", "javax.imageio.ImageIO.createImageOutputStream", "javax.imageio.ImageWriter.setOutput", "com.adobe.acs.commons.images.impl.ProgressiveJpeg.getRgbImage", "javax.imageio.IIOImage.<init>", "javax.imageio.ImageWriter.write", "javax.imageio.ImageWriter.dispose", "javax.imageio.stream.ImageOutputStream.close"], "call_func_parameter": [["java.util.Locale"], ["int"], ["int"], ["float"], ["java.lang.String"], [""], ["java.lang.Object"], ["java.lang.Object"], ["com.day.image.Layer"], ["java.awt.image.RenderedImage", "java.util.List", "javax.imageio.metadata.IIOMetadata"], ["javax.imageio.metadata.IIOMetadata", "javax.imageio.IIOImage", "javax.imageio.ImageWriteParam"], [""], [""]], "passed_comments": [{"com.adobe.acs.commons.images.impl.ProgressiveJpeg.getRgbImage": "Ensures that the image has the right color mode. Without, the image might be colored wrongly."}]}, {"index": "5", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/images/impl/ProgressiveJpeg.java", "methodName": "com.adobe.acs.commons.images.impl.ProgressiveJpeg.getRgbImage", "methodParameterType": "Layer#", "methodParameterName": "layer#", "methodBody": "private static BufferedImage getRgbImage(Layer layer) {\n        final BufferedImage image = layer.getImage();\n        final BufferedImage rgbImage;\n        if (image.getType() != BufferedImage.TYPE_INT_RGB) {\n            rgbImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);\n            new ColorConvertOp(null).filter(image, rgbImage);\n        } else {\n            rgbImage = image;\n        }\n        return rgbImage;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleType#NullLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Ensures that the image has the right color mode. Without, the image might be colored wrongly.", "call_func_name": ["com.day.image.Layer.getImage", "java.awt.image.BufferedImage.getType", "java.awt.image.BufferedImage.getWidth", "java.awt.image.BufferedImage.getHeight", "java.awt.image.BufferedImage.<init>", "java.awt.image.ColorConvertOp.<init>", "java.awt.image.ColorConvertOp.filter"], "call_func_parameter": [[""], [""], [""], [""], ["int", "int", "int"], ["java.awt.RenderingHints"], ["java.awt.image.BufferedImage", "java.awt.image.BufferedImage"]], "passed_comments": "/"}, {"index": "6", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/images/impl/NamedTransformImageServlet.java", "methodName": "com.adobe.acs.commons.images.impl.NamedTransformImageServlet.accepts", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "@Override\n    public final boolean accepts(final SlingHttpServletRequest request) {\n        if (request == null) {\n            return false;\n        }\n\n        final String suffix = request.getRequestPathInfo().getSuffix();\n        if (StringUtils.isBlank(suffix)) {\n            return false;\n        }\n\n        final String transformName = PathInfoUtil.getFirstSuffixSegment(request);\n        if (!this.namedImageTransformers.keySet().contains(transformName)) {\n            return false;\n        }\n\n        final String lastSuffix = PathInfoUtil.getLastSuffixSegment(request);\n        final Matcher matcher = lastSuffixPattern.matcher(lastSuffix);\n        if (!matcher.matches()) {\n            return false;\n        }\n\n        return true;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Only accept requests that. - Are not null - Have a suffix - Whose first suffix segment is a registered transform name - Whose last suffix matches the image file name pattern", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getRequestPathInfo", "org.apache.sling.api.request.RequestPathInfo.getSuffix", "org.apache.commons.lang.StringUtils.isBlank", "com.adobe.acs.commons.util.PathInfoUtil.getFirstSuffixSegment", "java.util.Map.keySet", "java.util.Set.contains", "com.adobe.acs.commons.util.PathInfoUtil.getLastSuffixSegment", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["org.apache.sling.api.SlingHttpServletRequest"], [""], ["java.lang.Object"], ["org.apache.sling.api.SlingHttpServletRequest"], ["java.lang.CharSequence"], [""]], "passed_comments": [{"com.adobe.acs.commons.util.PathInfoUtil.getFirstSuffixSegment": "Get the first suffix segment."}, {"com.adobe.acs.commons.util.PathInfoUtil.getLastSuffixSegment": "Gets the last suffix segment."}]}, {"index": "7", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/images/impl/NamedTransformImageServlet.java", "methodName": "com.adobe.acs.commons.images.impl.NamedTransformImageServlet.transform", "methodParameterType": "Layer#ValueMap#", "methodParameterName": "layer#imageTransformersWithParams#", "methodBody": "protected final Layer transform(Layer layer, final ValueMap imageTransformersWithParams) {\n        for (final String type : imageTransformersWithParams.keySet()) {\n            if (StringUtils.equals(TYPE_QUALITY, type)) {\n                // Do not process the \"quality\" transform in the usual manner\n                continue;\n            }\n\n            final ImageTransformer imageTransformer = this.imageTransformers.get(type);\n            if (imageTransformer == null) {\n                log.warn(\"Skipping transform. Missing ImageTransformer for type: {}\", type);\n                continue;\n            }\n\n            final ValueMap transformParams = imageTransformersWithParams.get(type, EMPTY_PARAMS);\n\n            if (transformParams != null) {\n                layer = imageTransformer.transform(layer, transformParams);\n            }\n        }\n\n        return layer;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ContinueStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ContinueStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Execute the ImageTransformers as specified by the Request's suffix segments against the Image layer.", "call_func_name": ["org.apache.sling.api.resource.ValueMap.keySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.commons.lang.StringUtils.equals", "java.util.Map.get", "org.slf4j.Logger.warn", "org.apache.sling.api.resource.ValueMap.get", "com.adobe.acs.commons.images.ImageTransformer.transform"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String", "java.lang.String"], ["java.lang.Object"], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.Object"], ["com.day.image.Layer", "org.apache.sling.api.resource.ValueMap"]], "passed_comments": [{"com.adobe.acs.commons.images.ImageTransformer.transform": "Transform the provided layer using the transformation parameters provided in properties."}]}, {"index": "8", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/images/impl/NamedTransformImageServlet.java", "methodName": "com.adobe.acs.commons.images.impl.NamedTransformImageServlet.getNamedImageTransformers", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "protected final List<NamedImageTransformer> getNamedImageTransformers(final SlingHttpServletRequest request) {\n        final List<NamedImageTransformer> transformers = new ArrayList<NamedImageTransformer>();\n\n        String[] suffixes = PathInfoUtil.getSuffixSegments(request);\n        if (suffixes.length < 2) {\n            log.warn(\"Named Transform Image Servlet requires at least one named transform\");\n            return transformers;\n        }\n\n        int endIndex = suffixes.length - 1;\n        // Its OK to check; the above check ensures there are 2+ segments\n        if (StringUtils.isNumeric(PathInfoUtil.getSuffixSegment(request, suffixes.length - 2))) {\n            endIndex--;\n        }\n\n        suffixes = (String[]) ArrayUtils.subarray(suffixes, 0, endIndex);\n\n        for (final String transformerName : suffixes) {\n            final NamedImageTransformer transformer = this.namedImageTransformers.get(transformerName);\n            if (transformer != null) {\n                transformers.add(transformer);\n            }\n        }\n\n        return transformers;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#MethodInvocation#MethodInvocation#SimpleName#PostfixExpression#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)MethodInvocation(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the NamedImageTransformers based on the Suffix segments in order.", "call_func_name": ["java.util.ArrayList.<init>", "com.adobe.acs.commons.util.PathInfoUtil.getSuffixSegments", "org.slf4j.Logger.warn", "com.adobe.acs.commons.util.PathInfoUtil.getSuffixSegment", "org.apache.commons.lang.StringUtils.isNumeric", "org.apache.commons.lang.ArrayUtils.subarray", "java.util.Map.get", "java.util.List.add"], "call_func_parameter": [[""], ["org.apache.sling.api.SlingHttpServletRequest"], ["java.lang.String"], ["org.apache.sling.api.SlingHttpServletRequest", "int"], ["java.lang.String"], ["java.lang.Object[]", "int", "int"], ["java.lang.Object"], ["java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.util.PathInfoUtil.getSuffixSegments": "Gets the suffixes as an array; each segment is the text between the /'s. /segment-0/segment-1/segment-2"}, {"com.adobe.acs.commons.util.PathInfoUtil.getSuffixSegment": "<p> Gets the suffix segment at the supplied index. </p><p> Given: /content/page.html/suffixA/suffixB <br/> getSuffixSegment(request, 0) // --> \"suffixA\" <br/> getSuffixSegment(request, 1) // --> \"suffixB\" </p>"}]}, {"index": "9", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/images/impl/NamedTransformImageServlet.java", "methodName": "com.adobe.acs.commons.images.impl.NamedTransformImageServlet.getImageTransformersWithParams", "methodParameterType": "List<NamedImageTransformer>#", "methodParameterName": "selectedNamedImageTransformers#", "methodBody": "protected final ValueMap getImageTransformersWithParams(\n            final List<NamedImageTransformer> selectedNamedImageTransformers) {\n        final ValueMap params = new ValueMapDecorator(new LinkedHashMap<String, Object>());\n\n        for (final NamedImageTransformer namedImageTransformer : selectedNamedImageTransformers) {\n            params.putAll(namedImageTransformer.getImageTransforms());\n        }\n\n        return params;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Collect and combine the image transformers and their params.", "call_func_name": ["java.util.LinkedHashMap.<init>", "org.apache.sling.api.wrappers.ValueMapDecorator.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.adobe.acs.commons.images.NamedImageTransformer.getImageTransforms", "org.apache.sling.api.resource.ValueMap.putAll"], "call_func_parameter": [[""], ["java.util.Map"], [""], [""], [""], [""], ["java.util.Map"]], "passed_comments": [{"com.adobe.acs.commons.images.NamedImageTransformer.getImageTransforms": "@return the ImageTransforms types and their params for this Named Image Transform"}]}, {"index": "10", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/images/impl/NamedTransformImageServlet.java", "methodName": "com.adobe.acs.commons.images.impl.NamedTransformImageServlet.resolveImage", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "protected final Image resolveImage(final SlingHttpServletRequest request) {\n        final Resource resource = request.getResource();\n        if (DamUtil.isAsset(resource)) {\n            // For assets, pick the configured rendition if it exists\n            // If rendition does not exist, use original\n            return resolveImageAsAsset(resource);\n        }\n\n        if (DamUtil.isRendition(resource)\n                || resource.isResourceType(JcrConstants.NT_FILE)\n                || resource.isResourceType(JcrConstants.NT_RESOURCE)) {\n            // For renditions; use the requested rendition\n            final Image image = new Image(resource);\n            image.set(Image.PN_REFERENCE, resource.getPath());\n            return image;\n        }\n\n        final ResourceResolver resourceResolver = request.getResourceResolver();\n        final PageManager pageManager = resourceResolver.adaptTo(PageManager.class);\n        final Page page = pageManager.getContainingPage(resource);\n        if (page != null) {\n            return resolveImageAsPage(page, resource);\n        }\n\n        if (resource.isResourceType(RT_LOCAL_SOCIAL_IMAGE)\n                && resource.getValueMap().get(\"mimetype\", StringUtils.EMPTY).startsWith(\"image/\")) {\n            // Is a UGC image\n            return new SocialImageImpl(resource, NAME_IMAGE);\n        }\n\n        if (resource.isResourceType(RT_REMOTE_SOCIAL_IMAGE)) {\n            // Is a UGC image\n            return new SocialRemoteImageImpl(resource, NAME_IMAGE);\n        }\n\n        return new Image(resource);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Intelligently determines how to find the Image based on the associated SlingRequest.", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getResource", "com.day.cq.dam.commons.util.DamUtil.isAsset", "com.adobe.acs.commons.images.impl.NamedTransformImageServlet.resolveImageAsAsset", "com.day.cq.dam.commons.util.DamUtil.isRendition", "org.apache.sling.api.resource.Resource.isResourceType", "com.day.cq.wcm.foundation.Image.<init>", "org.apache.sling.api.resource.Resource.getPath", "com.day.cq.wcm.foundation.Image.set", "org.apache.sling.api.SlingHttpServletRequest.getResourceResolver", "org.apache.sling.api.resource.ResourceResolver.adaptTo", "com.day.cq.wcm.api.PageManager.getContainingPage", "com.adobe.acs.commons.images.impl.NamedTransformImageServlet.resolveImageAsPage", "org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.get", "java.lang.String.startsWith", "com.adobe.acs.commons.images.impl.SocialImageImpl.<init>", "com.adobe.acs.commons.images.impl.SocialRemoteImageImpl.<init>"], "call_func_parameter": [[""], ["org.apache.sling.api.resource.Resource"], ["org.apache.sling.api.resource.Resource"], ["org.apache.sling.api.resource.Resource"], ["java.lang.String"], ["org.apache.sling.api.resource.Resource"], [""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.Class"], ["org.apache.sling.api.resource.Resource"], ["com.day.cq.wcm.api.Page", "org.apache.sling.api.resource.Resource"], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String"], ["org.apache.sling.api.resource.Resource", "java.lang.String"], ["org.apache.sling.api.resource.Resource", "java.lang.String"]], "passed_comments": "/"}, {"index": "11", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/images/impl/NamedTransformImageServlet.java", "methodName": "com.adobe.acs.commons.images.impl.NamedTransformImageServlet.getMimeType", "methodParameterType": "SlingHttpServletRequest#Image#", "methodParameterName": "request#image#", "methodBody": "private String getMimeType(final SlingHttpServletRequest request, final Image image) {\n        final String lastSuffix = PathInfoUtil.getLastSuffixSegment(request);\n\n        final String mimeType = mimeTypeService.getMimeType(lastSuffix);\n\n        if (!StringUtils.endsWithIgnoreCase(lastSuffix, \".orig\")\n            && !StringUtils.endsWithIgnoreCase(lastSuffix, \".original\")\n            && (ImageIO.getImageWritersByMIMEType(mimeType).hasNext())) {\n            return mimeType;\n        } else {\n            try {\n                return image.getMimeType();\n            } catch (final RepositoryException e) {\n                return MIME_TYPE_PNG;\n            }\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ParenthesizedExpression#InfixExpression#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ReturnStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(ParenthesizedExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ParenthesizedExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Gets the mimeType of the image. - The last segments suffix is looked at first and used - if the last suffix segment's \"extension\" is .orig or .original then use the underlying resources mimeType - else look up the mimeType to use based on this \"extension\" - default to the resource's mimeType if the requested mimeType by extension is not supported.", "call_func_name": ["com.adobe.acs.commons.util.PathInfoUtil.getLastSuffixSegment", "org.apache.sling.commons.mime.MimeTypeService.getMimeType", "org.apache.commons.lang.StringUtils.endsWithIgnoreCase", "javax.imageio.ImageIO.getImageWritersByMIMEType", "java.util.Iterator.hasNext", "com.day.cq.wcm.foundation.Image.getMimeType"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String"], [""], [""]], "passed_comments": [{"com.adobe.acs.commons.util.PathInfoUtil.getLastSuffixSegment": "Gets the last suffix segment."}]}, {"index": "12", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/images/impl/NamedTransformImageServlet.java", "methodName": "com.adobe.acs.commons.images.impl.NamedTransformImageServlet.getLayer", "methodParameterType": "Image#", "methodParameterName": "image#", "methodBody": "private Layer getLayer(final Image image) throws IOException {\n        Layer layer = null;\n\n        try {\n            layer = image.getLayer(false, false, false);\n        } catch (RepositoryException ex) {\n            log.error(\"Could not create layer\");\n        }\n\n        if (layer == null) {\n            log.error(\"Could not create layer - layer is null;\");\n        } else {\n            image.crop(layer);\n            image.rotate(layer);\n        }\n\n        return layer;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#BooleanLiteral#BooleanLiteral#BooleanLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the Image layer.", "call_func_name": ["com.day.cq.wcm.foundation.Image.getLayer", "org.slf4j.Logger.error", "com.day.cq.wcm.foundation.Image.crop", "com.day.cq.wcm.foundation.Image.rotate"], "call_func_parameter": [["boolean", "boolean", "boolean"], ["java.lang.String"], ["com.day.image.Layer"], ["com.day.image.Layer"]], "passed_comments": "/"}, {"index": "13", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/images/impl/NamedTransformImageServlet.java", "methodName": "com.adobe.acs.commons.images.impl.NamedTransformImageServlet.getQuality", "methodParameterType": "String#ValueMap#", "methodParameterName": "mimeType#transforms#", "methodBody": "protected final double getQuality(final String mimeType, final ValueMap transforms) {\n        final String key = \"quality\";\n        final int defaultQuality = 82;\n        final int maxQuality = 100;\n        final int minQuality = 0;\n        final int maxQualityGif = 255;\n        final double oneHundred = 100D;\n\n        log.debug(\"Transforming with [ quality ]\");\n\n        double quality = transforms.get(key, defaultQuality);\n\n        if (quality > maxQuality || quality < minQuality) {\n            quality = defaultQuality;\n        }\n\n        quality = quality / oneHundred;\n\n        if (StringUtils.equals(\"image/gif\", mimeType)) {\n            quality = quality * maxQualityGif;\n        }\n\n        return quality;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Computes the quality based on the \"synthetic\" Image Quality transform params Image Quality does not \"transform\" in the usual manner (it is not a simple layer manipulation) thus this ad-hoc method is required to handle quality manipulation transformations. If \"quality\" key is no available in \"transforms\" the default of 82 is used (magic AEM Product quality setting)", "call_func_name": ["org.slf4j.Logger.debug", "java.lang.Integer.valueOf", "org.apache.sling.api.resource.ValueMap.get", "java.lang.Integer.intValue", "org.apache.commons.lang.StringUtils.equals"], "call_func_parameter": [["java.lang.String"], ["int"], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "14", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/images/impl/NamedTransformImageServlet.java", "methodName": "com.adobe.acs.commons.images.impl.NamedTransformImageServlet.isProgressiveJpeg", "methodParameterType": "String#ValueMap#", "methodParameterName": "mimeType#transforms#", "methodBody": "protected boolean isProgressiveJpeg(final String mimeType, final ValueMap transforms) {\n        boolean enabled = transforms.get(\"enabled\", false);\n        if (enabled) {\n            if (\"image/jpeg\".equals(mimeType) || \"image/jpg\".equals(mimeType)) {\n                return true;\n            } else {\n                log.debug(\"Progressive encoding is only supported for JPEGs. Mime type: {}\", mimeType);\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@param mimeType mime type string", "call_func_name": ["java.lang.Boolean.valueOf", "org.apache.sling.api.resource.ValueMap.get", "java.lang.Boolean.booleanValue", "java.lang.String.equals", "org.slf4j.Logger.debug"], "call_func_parameter": [["boolean"], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.Object"], ["java.lang.String", "java.lang.Object"]], "passed_comments": "/"}, {"index": "15", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/images/impl/NamedImageTransformerImpl.java", "methodName": "com.adobe.acs.commons.images.impl.NamedImageTransformerImpl.transform", "methodParameterType": "Layer#", "methodParameterName": "layer#", "methodBody": "public final Layer transform(Layer layer) {\n\n        for (final Map.Entry<String, ValueMap> entry : this.transforms.entrySet()) {\n            final ImageTransformer imageTransformer = this.imageTransformers.get(entry.getKey());\n            if (imageTransformer == null) {\n                log.warn(\"Skipping transform. Missing ImageTransformer for type: {}\", entry.getKey());\n                continue;\n            }\n\n            final ValueMap transformParams = entry.getValue();\n            layer = imageTransformer.transform(layer, transformParams);\n        }\n\n        return layer;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ContinueStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@inheritDoc", "call_func_name": ["java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.Map.get", "org.slf4j.Logger.warn", "com.adobe.acs.commons.images.ImageTransformer.transform"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.Object"], ["java.lang.String", "java.lang.Object"], ["com.day.image.Layer", "org.apache.sling.api.resource.ValueMap"]], "passed_comments": [{"com.adobe.acs.commons.images.ImageTransformer.transform": "Transform the provided layer using the transformation parameters provided in properties."}]}, {"index": "16", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/images/impl/NamedImageTransformerImpl.java", "methodName": "com.adobe.acs.commons.images.impl.NamedImageTransformerImpl.getTransformName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getTransformName() {\n        return this.transformName;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@inheritDoc", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "17", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/cloudconfig/CloudConfigurationList.java", "methodName": "com.adobe.acs.commons.cloudconfig.CloudConfigurationList.getCloudConfigurations", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@NotNull\n  default List<CloudConfiguration> getCloudConfigurations() {\n      throw new UnsupportedOperationException();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the list of CloudConfigurations for the specified request.", "call_func_name": ["java.lang.UnsupportedOperationException.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "18", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/cloudconfig/CloudConfiguration.java", "methodName": "com.adobe.acs.commons.cloudconfig.CloudConfiguration.getConfigPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@NotNull\n  default String getConfigPath() {\n    throw new UnsupportedOperationException();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Get the path of the configuration containing the cloud configuration instance", "call_func_name": ["java.lang.UnsupportedOperationException.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "19", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/cloudconfig/CloudConfiguration.java", "methodName": "com.adobe.acs.commons.cloudconfig.CloudConfiguration.getItemPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@NotNull\n  default String getItemPath() {\n    throw new UnsupportedOperationException();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Get the path of the cloud configuration instance", "call_func_name": ["java.lang.UnsupportedOperationException.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "20", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/cloudconfig/CloudConfiguration.java", "methodName": "com.adobe.acs.commons.cloudconfig.CloudConfiguration.getTitle", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@NotNull\n  default String getTitle() {\n    throw new UnsupportedOperationException();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Get the title of the cloud configuration instance", "call_func_name": ["java.lang.UnsupportedOperationException.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "21", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/rewriter/ContentHandlerBasedTransformer.java", "methodName": "com.adobe.acs.commons.rewriter.ContentHandlerBasedTransformer.characters", "methodParameterType": "char[]#int#int#", "methodParameterName": "ch#start#length#", "methodBody": "public void characters(final char[] ch, final int start, final int length) throws SAXException {\n        contentHandler.characters(ch, start, length);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.xml.sax.ContentHandler.characters"], "call_func_parameter": [["char[]", "int", "int"]], "passed_comments": "/"}, {"index": "22", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/rewriter/ContentHandlerBasedTransformer.java", "methodName": "com.adobe.acs.commons.rewriter.ContentHandlerBasedTransformer.dispose", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void dispose() {\n        // Nothing to dispose here\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "23", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/rewriter/ContentHandlerBasedTransformer.java", "methodName": "com.adobe.acs.commons.rewriter.ContentHandlerBasedTransformer.endDocument", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void endDocument() throws SAXException {\n        contentHandler.endDocument();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.xml.sax.ContentHandler.endDocument"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "24", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/rewriter/ContentHandlerBasedTransformer.java", "methodName": "com.adobe.acs.commons.rewriter.ContentHandlerBasedTransformer.endElement", "methodParameterType": "String#String#String#", "methodParameterName": "uri#localName#qName#", "methodBody": "public void endElement(final String uri, final String localName, final String qName) throws SAXException {\n        contentHandler.endElement(uri, localName, qName);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.xml.sax.ContentHandler.endElement"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "25", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/rewriter/ContentHandlerBasedTransformer.java", "methodName": "com.adobe.acs.commons.rewriter.ContentHandlerBasedTransformer.endPrefixMapping", "methodParameterType": "String#", "methodParameterName": "prefix#", "methodBody": "public void endPrefixMapping(final String prefix) throws SAXException {\n        contentHandler.endPrefixMapping(prefix);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.xml.sax.ContentHandler.endPrefixMapping"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "26", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/rewriter/ContentHandlerBasedTransformer.java", "methodName": "com.adobe.acs.commons.rewriter.ContentHandlerBasedTransformer.ignorableWhitespace", "methodParameterType": "char[]#int#int#", "methodParameterName": "ch#start#length#", "methodBody": "public void ignorableWhitespace(final char[] ch, final int start, final int length) throws SAXException {\n        contentHandler.ignorableWhitespace(ch, start, length);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.xml.sax.ContentHandler.ignorableWhitespace"], "call_func_parameter": [["char[]", "int", "int"]], "passed_comments": "/"}, {"index": "27", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/rewriter/ContentHandlerBasedTransformer.java", "methodName": "com.adobe.acs.commons.rewriter.ContentHandlerBasedTransformer.init", "methodParameterType": "ProcessingContext#ProcessingComponentConfiguration#", "methodParameterName": "context#config#", "methodBody": "@Override\n    public void init(final ProcessingContext context, final ProcessingComponentConfiguration config)\n            throws IOException {\n        // Nothing to init here\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "28", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/rewriter/ContentHandlerBasedTransformer.java", "methodName": "com.adobe.acs.commons.rewriter.ContentHandlerBasedTransformer.processingInstruction", "methodParameterType": "String#String#", "methodParameterName": "target#data#", "methodBody": "public void processingInstruction(final String target, final String data) throws SAXException {\n        contentHandler.processingInstruction(target, data);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.xml.sax.ContentHandler.processingInstruction"], "call_func_parameter": [["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "29", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/rewriter/ContentHandlerBasedTransformer.java", "methodName": "com.adobe.acs.commons.rewriter.ContentHandlerBasedTransformer.setContentHandler", "methodParameterType": "ContentHandler#", "methodParameterName": "contentHandler#", "methodBody": "@Override\n    public final void setContentHandler(final ContentHandler contentHandler) {\n        this.contentHandler = contentHandler;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "30", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/rewriter/ContentHandlerBasedTransformer.java", "methodName": "com.adobe.acs.commons.rewriter.ContentHandlerBasedTransformer.setDocumentLocator", "methodParameterType": "Locator#", "methodParameterName": "locator#", "methodBody": "public void setDocumentLocator(final Locator locator) {\n        contentHandler.setDocumentLocator(locator);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.xml.sax.ContentHandler.setDocumentLocator"], "call_func_parameter": [["org.xml.sax.Locator"]], "passed_comments": "/"}, {"index": "31", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/rewriter/ContentHandlerBasedTransformer.java", "methodName": "com.adobe.acs.commons.rewriter.ContentHandlerBasedTransformer.skippedEntity", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void skippedEntity(final String name) throws SAXException {\n        contentHandler.skippedEntity(name);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.xml.sax.ContentHandler.skippedEntity"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "32", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/rewriter/ContentHandlerBasedTransformer.java", "methodName": "com.adobe.acs.commons.rewriter.ContentHandlerBasedTransformer.startDocument", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void startDocument() throws SAXException {\n        contentHandler.startDocument();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.xml.sax.ContentHandler.startDocument"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "33", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/rewriter/ContentHandlerBasedTransformer.java", "methodName": "com.adobe.acs.commons.rewriter.ContentHandlerBasedTransformer.startElement", "methodParameterType": "String#String#String#Attributes#", "methodParameterName": "uri#localName#qName#atts#", "methodBody": "public void startElement(final String uri, final String localName, final String qName, final Attributes atts)\n            throws SAXException {\n        contentHandler.startElement(uri, localName, qName, atts);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.xml.sax.ContentHandler.startElement"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String", "org.xml.sax.Attributes"]], "passed_comments": "/"}, {"index": "34", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/rewriter/ContentHandlerBasedTransformer.java", "methodName": "com.adobe.acs.commons.rewriter.ContentHandlerBasedTransformer.startPrefixMapping", "methodParameterType": "String#String#", "methodParameterName": "prefix#uri#", "methodBody": "public void startPrefixMapping(final String prefix, final String uri)\n            throws SAXException {\n        contentHandler.startPrefixMapping(prefix, uri);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.xml.sax.ContentHandler.startPrefixMapping"], "call_func_parameter": [["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "35", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/ChecksumGeneratorOptions.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions.getIncludedNodeTypes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Set<String> getIncludedNodeTypes();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "For a node to be checksumable, its primaryType must exists in getIncludedNodesTypes() and not exist in getExcludedNodeTypes().", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "36", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/ChecksumGeneratorOptions.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions.getExcludedNodeTypes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Set<String> getExcludedNodeTypes();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the node types which are not candidates for aggregation and cannot be aggregated under aggregationcandidates.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "37", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/ChecksumGeneratorOptions.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions.getExcludedProperties", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Set<String> getExcludedProperties();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the property names that should not be included as part of the checksum hash", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "38", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/ChecksumGeneratorOptions.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions.getSortedProperties", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Set<String> getSortedProperties();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the property names whose multi-value order as defined in the JCR should be respected.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "39", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/ChecksumGeneratorOptions.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions.getExcludedSubTrees", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default Set<String> getExcludedSubTrees() {\n        return  Collections.EMPTY_SET;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the named node subTrees to exclude (the matching node and any sub-nodes will NOT be traversed/checksumed)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "40", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/ChecksumGeneratorOptions.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions.getExcludedNodeNames", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default Set<String> getExcludedNodeNames() {\n        return  Collections.EMPTY_SET;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the nodeNames to exclude (sub-nodes WILL be traverse/checksumed)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "41", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/ChecksumGenerator.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGenerator.generateChecksums", "methodParameterType": "Session#String#", "methodParameterName": "session#path#", "methodBody": "Map<String, String> generateChecksums(Session session, String path) throws RepositoryException,\n            IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Convenience method for generateChecksums(session, path, new DefaultChecksumGeneratorOptions()).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "42", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/ChecksumGenerator.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGenerator.generateChecksums", "methodParameterType": "Session#String#ChecksumGeneratorOptions#", "methodParameterName": "session#path#options#", "methodBody": "Map<String, String> generateChecksums(Session session, String path, ChecksumGeneratorOptions options)\n            throws RepositoryException, IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Traverses the content tree whose root is defined by the path param, respecting the  {@link ChecksumGeneratorOptions}. Generates map of checksum hashes in the format [ ABSOLUTE PATH ] : [ CHECKSUM OF NODE SYSTEM ]", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "43", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/impl/options/CustomChecksumGeneratorOptions.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.impl.options.CustomChecksumGeneratorOptions.addIncludedNodeTypes", "methodParameterType": "String[]#", "methodParameterName": "arr#", "methodBody": "@Override\n    public void addIncludedNodeTypes(String[] arr) {\n        super.addIncludedNodeTypes(arr);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperMethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "TODO: Please clarifiy the purpose of this class ... we should make the AbstractChecksumGeneratorOptions a non-abstract class and use it.", "call_func_name": ["com.adobe.acs.commons.analysis.jcrchecksum.impl.options.AbstractChecksumGeneratorOptions.addIncludedNodeTypes"], "call_func_parameter": [["java.lang.String[]"]], "passed_comments": "/"}, {"index": "44", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/impl/JSONGenerator.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.impl.JSONGenerator.outputProperties", "methodParameterType": "Node#ChecksumGeneratorOptions#JsonWriter#", "methodParameterName": "node#opts#out#", "methodBody": "private static void outputProperties(Node node,\n                                         ChecksumGeneratorOptions opts, JsonWriter out)\n            throws RepositoryException, ValueFormatException, IOException {\n        Set<String> excludes = opts.getExcludedProperties();\n\n        SortedMap<String, Property> props = new TreeMap<>();\n        PropertyIterator propertyIterator = node.getProperties();\n\n        // sort the properties by name as the JCR makes no guarantees on property order\n        while (propertyIterator.hasNext()) {\n            Property property = propertyIterator.nextProperty();\n            //skip the property if it is in the excludes list\n            if (excludes.contains(property.getName())) {\n                continue;\n            } else {\n                props.put(property.getName(), property);\n            }\n        }\n\n        for (Property property : props.values()) {\n            outputProperty(property, opts, out);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ContinueStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#WhileStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ContinueStatement)ContinueStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)WhileStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "@param node", "call_func_name": ["com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions.getExcludedProperties", "java.util.TreeMap.<init>", "javax.jcr.Node.getProperties", "javax.jcr.PropertyIterator.hasNext", "javax.jcr.PropertyIterator.nextProperty", "javax.jcr.Property.getName", "java.util.Set.contains", "java.util.SortedMap.put", "java.util.SortedMap.values", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.adobe.acs.commons.analysis.jcrchecksum.impl.JSONGenerator.outputProperty"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["java.lang.Object"], ["java.lang.Object", "java.lang.Object"], [""], [""], [""], [""], ["javax.jcr.Property", "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions", "com.google.gson.stream.JsonWriter"]], "passed_comments": [{"com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions.getExcludedProperties": "@return the property names that should not be included as part of the checksum hash"}]}, {"index": "45", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/impl/JSONGenerator.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.impl.JSONGenerator.outputChildNodes", "methodParameterType": "Node#ChecksumGeneratorOptions#JsonWriter#", "methodParameterName": "node#opts#out#", "methodBody": "private static void outputChildNodes(Node node, ChecksumGeneratorOptions opts, JsonWriter out)\n            throws RepositoryException, IOException {\n        Set<String> nodeTypeExcludes = opts.getExcludedNodeTypes();\n\n        NodeIterator nodeIterator = node.getNodes();\n\n        TreeMap<String, Node> childSortMap = new TreeMap<>();\n        boolean hasOrderedChildren = false;\n        try {\n            hasOrderedChildren = node.getPrimaryNodeType().hasOrderableChildNodes();\n        } catch (Exception expected) {\n            // ignore\n        }\n        while (nodeIterator.hasNext()) {\n            Node child = nodeIterator.nextNode();\n            if (!nodeTypeExcludes\n                    .contains(child.getPrimaryNodeType().getName())) {\n                if (hasOrderedChildren) {\n                    //output child node if parent is has orderable children\n                    out.name(child.getName());\n                    out.beginObject();\n                    generateSubnodeJSON(child, opts, out);\n                    out.endObject();\n                } else {\n                    // otherwise put the child nodes into a sorted map\n                    // to output them with consistent ordering\n                    childSortMap.put(child.getName(), child);\n                }\n            }\n        }\n        // output the non-ordered child nodes in sorted order (lexicographically)\n        for (Node child : childSortMap.values()) {\n            out.name(child.getName());\n            out.beginObject();\n            generateSubnodeJSON(child, opts, out);\n            out.endObject();\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#WhileStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)WhileStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "@param node", "call_func_name": ["com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions.getExcludedNodeTypes", "javax.jcr.Node.getNodes", "java.util.TreeMap.<init>", "javax.jcr.Node.getPrimaryNodeType", "javax.jcr.nodetype.NodeType.hasOrderableChildNodes", "javax.jcr.NodeIterator.hasNext", "javax.jcr.NodeIterator.nextNode", "javax.jcr.nodetype.NodeType.getName", "java.util.Set.contains", "javax.jcr.Node.getName", "com.google.gson.stream.JsonWriter.name", "com.google.gson.stream.JsonWriter.beginObject", "com.adobe.acs.commons.analysis.jcrchecksum.impl.JSONGenerator.generateSubnodeJSON", "com.google.gson.stream.JsonWriter.endObject", "java.util.TreeMap.put", "java.util.TreeMap.values", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], [""], [""], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["javax.jcr.Node", "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions", "com.google.gson.stream.JsonWriter"], [""], ["java.lang.Object", "java.lang.Object"], [""], [""], [""], [""]], "passed_comments": [{"com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions.getExcludedNodeTypes": "@return the node types which are not candidates for aggregation and cannot be aggregated under aggregationcandidates."}]}, {"index": "46", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/impl/ChecksumGeneratorImpl.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.generateChecksums", "methodParameterType": "Session#String#", "methodParameterName": "session#path#", "methodBody": "public Map<String, String> generateChecksums(Session session, String path) throws RepositoryException,\n            IOException {\n        return generateChecksums(session, path, new DefaultChecksumGeneratorOptions());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convenience method for  generateChecksums(session, path, new DefaultChecksumGeneratorOptions()).", "call_func_name": ["com.adobe.acs.commons.analysis.jcrchecksum.impl.options.DefaultChecksumGeneratorOptions.<init>", "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.generateChecksums"], "call_func_parameter": [[""], ["javax.jcr.Session", "java.lang.String", "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions"]], "passed_comments": [{"com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.generateChecksums": "Traverses the content tree whose root is defined by the path param, respecting the  {@link ChecksumGeneratorOptions}. Generates map of checksum hashes in the format [ ABSOLUTE PATH ] : [ CHECKSUM OF NODE SYSTEM ]"}]}, {"index": "47", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/impl/ChecksumGeneratorImpl.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.generateChecksums", "methodParameterType": "Session#String#ChecksumGeneratorOptions#", "methodParameterName": "session#path#options#", "methodBody": "public Map<String, String> generateChecksums(Session session, String path, ChecksumGeneratorOptions options)\n            throws RepositoryException, IOException {\n\n        Node node = session.getNode(path);\n\n        if (node == null) {\n            log.warn(\"Path [ {} ] not found while generating checksums\", path);\n            return new LinkedHashMap<>();\n        }\n\n        return traverseTree(node, options);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Traverses the content tree whose root is defined by the path param, respecting the  {@link ChecksumGeneratorOptions}. Generates map of checksum hashes in the format [ ABSOLUTE PATH ] : [ CHECKSUM OF NODE SYSTEM ]", "call_func_name": ["javax.jcr.Session.getNode", "org.slf4j.Logger.warn", "java.util.LinkedHashMap.<init>", "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.traverseTree"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.Object"], [""], ["javax.jcr.Node", "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions"]], "passed_comments": [{"com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.traverseTree": "Traverse the tree for candidate aggregate nodes."}]}, {"index": "48", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/impl/ChecksumGeneratorImpl.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.traverseTree", "methodParameterType": "Node#ChecksumGeneratorOptions#", "methodParameterName": "node#options#", "methodBody": "private Map<String, String> traverseTree(Node node, ChecksumGeneratorOptions options) throws\n            RepositoryException,\n            IOException {\n\n        final Map<String, String> checksums = new LinkedHashMap<>();\n\n        if (isExcludedSubTree(node, options)) {\n            return checksums;\n        } else if (isChecksumable(node, options) && !isExcludedNodeName(node, options)) {\n            // Tree-traversal has found a node to checksum (checksum will include all valid sub-tree nodes)\n            final String checksum = generatedNodeChecksum(node.getPath(), node, options);\n            if (checksum != null) {\n                checksums.put(node.getPath(), checksum);\n                log.debug(\"Top Level Node: {} ~> {}\", node.getPath(), checksum);\n            }\n        } else {\n            // Traverse the tree for checksum-able node systems\n            NodeIterator children = node.getNodes();\n\n            while (children.hasNext()) {\n                // Check each child with recursive logic; if child is checksum-able the call into traverseTree will\n                // handle this case\n                checksums.putAll(traverseTree(children.nextNode(), options));\n            }\n        }\n\n        return checksums;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#WhileStatement#Block#IfStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)WhileStatement)Block)IfStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Traverse the tree for candidate aggregate nodes.", "call_func_name": ["java.util.LinkedHashMap.<init>", "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.isExcludedSubTree", "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.isChecksumable", "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.isExcludedNodeName", "javax.jcr.Node.getPath", "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.generatedNodeChecksum", "java.util.Map.put", "org.slf4j.Logger.debug", "javax.jcr.Node.getNodes", "javax.jcr.NodeIterator.hasNext", "javax.jcr.NodeIterator.nextNode", "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.traverseTree", "java.util.Map.putAll"], "call_func_parameter": [[""], ["javax.jcr.Node", "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions"], ["javax.jcr.Node", "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions"], ["javax.jcr.Node", "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions"], [""], ["java.lang.String", "javax.jcr.Node", "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions"], ["java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], [""], [""], ["javax.jcr.Node", "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions"], ["java.util.Map"]], "passed_comments": [{"com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.isChecksumable": "Ensures the node's primary type is included in the Included Node Types and NOT in the Excluded Node Types and NOT in the Excluded Node Names."}, {"com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.generatedNodeChecksum": "Generates a checksum for a single node and its node sub-system, respecting the options."}, {"com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.traverseTree": "Traverse the tree for candidate aggregate nodes."}]}, {"index": "49", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/impl/ChecksumGeneratorImpl.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.isChecksumable", "methodParameterType": "Node#ChecksumGeneratorOptions#", "methodParameterName": "node#options#", "methodBody": "private boolean isChecksumable(Node node, ChecksumGeneratorOptions options) throws RepositoryException {\n        final Set<String> nodeTypeIncludes = options.getIncludedNodeTypes();\n        final Set<String> nodeTypeExcludes = options.getExcludedNodeTypes();\n\n        final String primaryNodeType = node.getPrimaryNodeType().getName();\n\n        return nodeTypeIncludes.contains(primaryNodeType) && !nodeTypeExcludes.contains(primaryNodeType);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Ensures the node's primary type is included in the Included Node Types and NOT in the Excluded Node Types and NOT in the Excluded Node Names.", "call_func_name": ["com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions.getIncludedNodeTypes", "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions.getExcludedNodeTypes", "javax.jcr.Node.getPrimaryNodeType", "javax.jcr.nodetype.NodeType.getName", "java.util.Set.contains"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions.getIncludedNodeTypes": "For a node to be checksumable, its primaryType must exists in getIncludedNodesTypes() and not exist in getExcludedNodeTypes()."}, {"com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions.getExcludedNodeTypes": "@return the node types which are not candidates for aggregation and cannot be aggregated under aggregationcandidates."}]}, {"index": "50", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/impl/ChecksumGeneratorImpl.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.generatedNodeChecksum", "methodParameterType": "String#Node#ChecksumGeneratorOptions#", "methodParameterName": "aggregateNodePath#node#options#", "methodBody": "@SuppressWarnings(\"squid:S3776\")\n    protected String generatedNodeChecksum(final String aggregateNodePath,\n                                                  final Node node,\n                                                  final ChecksumGeneratorOptions options)\n            throws RepositoryException, IOException {\n\n        if (isExcludedSubTree(node, options)) { return \"\"; }\n\n        final Map<String, String> checksums = new LinkedHashMap<>();\n\n        if (!isExcludedNodeName(node, options)) {\n            /* Create checksums for Node's properties */\n            final String checksum = generatePropertyChecksums(aggregateNodePath, node, options);\n            if (checksum != null) {\n                checksums.put(getChecksumKey(aggregateNodePath, node.getPath()), checksum);\n            }\n        }\n\n        /* Then process node's children */\n\n        final Map<String, String> lexicographicallySortedChecksums = new TreeMap<>();\n        final boolean hasOrderedChildren = hasOrderedChildren(node);\n        final NodeIterator children = node.getNodes();\n\n        while (children.hasNext()) {\n            final Node child = children.nextNode();\n\n            if (isExcludedSubTree(child, options)) {\n                // Skip this node!\n            } else if (!isExcludedNodeType(child, options)) {\n                if (hasOrderedChildren) {\n                    // Use the order dictated by the JCR\n                    final String checksum = generatedNodeChecksum(aggregateNodePath, child, options);\n                    if (checksum != null) {\n                        checksums.put(getChecksumKey(aggregateNodePath, child.getPath()), checksum);\n\n                        log.debug(\"Aggregated Ordered Node: {} ~> {}\",\n                                getChecksumKey(aggregateNodePath, child.getPath()), checksum);\n                    }\n\n                } else {\n                    final String checksum = generatedNodeChecksum(aggregateNodePath, child, options);\n                    if (checksum != null) {\n                        // If order is not dictated by JCR, collect so we can sort later\n                        lexicographicallySortedChecksums.put(getChecksumKey(aggregateNodePath, child.getPath()), checksum);\n\n                        log.debug(\"Aggregated Unordered Node: {} ~> {}\",\n                                getChecksumKey(aggregateNodePath, child.getPath()), checksum);\n                    }\n                }\n            }\n        }\n\n        if (!hasOrderedChildren && lexicographicallySortedChecksums.size() > 0) {\n            // Order is not dictated by JCR, so add the lexicographically sorted entries to the checksums string\n            checksums.putAll(lexicographicallySortedChecksums);\n        }\n\n        final String nodeChecksum = aggregateChecksums(checksums);\n        log.debug(\"Node [ {} ] has a aggregated checksum of [ {} ]\", getChecksumKey(aggregateNodePath, node.getPath()), nodeChecksum);\n\n        return nodeChecksum;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#IfStatement#Block#WhileStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block)Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(IfStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)IfStatement)Block)WhileStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates a checksum for a single node and its node sub-system, respecting the options.", "call_func_name": ["com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.isExcludedSubTree", "java.util.LinkedHashMap.<init>", "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.isExcludedNodeName", "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.generatePropertyChecksums", "javax.jcr.Node.getPath", "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.getChecksumKey", "java.util.Map.put", "java.util.TreeMap.<init>", "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.hasOrderedChildren", "javax.jcr.Node.getNodes", "javax.jcr.NodeIterator.hasNext", "javax.jcr.NodeIterator.nextNode", "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.isExcludedNodeType", "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.generatedNodeChecksum", "org.slf4j.Logger.debug", "java.util.Map.size", "java.util.Map.putAll", "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.aggregateChecksums"], "call_func_parameter": [["javax.jcr.Node", "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions"], [""], ["javax.jcr.Node", "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions"], ["java.lang.String", "javax.jcr.Node", "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions"], [""], ["java.lang.String", "java.lang.String"], ["java.lang.Object", "java.lang.Object"], [""], ["javax.jcr.Node"], [""], [""], [""], ["javax.jcr.Node", "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions"], ["java.lang.String", "javax.jcr.Node", "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], ["java.util.Map"], ["java.util.Map"]], "passed_comments": [{"com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.generatePropertyChecksums": "Returns a lexicographically sorted map of the [PROPERTY PATH] : [CHECKSUM OF PROPERTIES]."}, {"com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.getChecksumKey": "Generates the relative key used for tracking nodes and properties."}, {"com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.hasOrderedChildren": "Checks if node has ordered children."}, {"com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.generatedNodeChecksum": "Generates a checksum for a single node and its node sub-system, respecting the options."}, {"com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.aggregateChecksums": "Aggregates a set of checksum entries into a single checksum value."}]}, {"index": "51", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/impl/ChecksumGeneratorImpl.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.generatePropertyChecksums", "methodParameterType": "String#Node#ChecksumGeneratorOptions#", "methodParameterName": "aggregateNodePath#node#options#", "methodBody": "protected String generatePropertyChecksums(final String aggregateNodePath,\n                                                      final Node node,\n                                                      final ChecksumGeneratorOptions options)\n            throws RepositoryException, IOException {\n\n        SortedMap<String, String> propertyChecksums = new TreeMap<>();\n        PropertyIterator properties = node.getProperties();\n\n        while (properties.hasNext()) {\n            final Property property = properties.nextProperty();\n\n            if (options.getExcludedProperties().contains(property.getName())) {\n                // Skip this property as it is excluded\n                log.debug(\"Excluding property: {}\", node.getPath() + \"/@\" + property.getName());\n                continue;\n            }\n\n            /* Accept the property for checksuming */\n\n            final List<String> checksums = new ArrayList<String>();\n\n            final List<Value> values = getPropertyValues(property);\n\n            for (final Value value : values) {\n                if (value.getType() == PropertyType.BINARY) {\n                    checksums.add(getBinaryChecksum(value));\n                } else {\n                    checksums.add(getStringChecksum(value));\n                }\n            }\n\n            if (!options.getSortedProperties().contains(property.getName())) {\n                Collections.sort(checksums);\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Property: {} ~> {}\",\n                        getChecksumKey(aggregateNodePath, property.getPath()),\n                        StringUtils.join(checksums, \",\"));\n            }\n\n            propertyChecksums.put(getChecksumKey(aggregateNodePath, property.getPath()),\n                    StringUtils.join(checksums, \",\"));\n        }\n\n        return aggregateChecksums(propertyChecksums);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ContinueStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)WhileStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a lexicographically sorted map of the [PROPERTY PATH] : [CHECKSUM OF PROPERTIES].", "call_func_name": ["java.util.TreeMap.<init>", "javax.jcr.Node.getProperties", "javax.jcr.PropertyIterator.hasNext", "javax.jcr.PropertyIterator.nextProperty", "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions.getExcludedProperties", "javax.jcr.Property.getName", "java.util.Set.contains", "java.lang.StringBuilder.<init>", "javax.jcr.Node.getPath", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.slf4j.Logger.debug", "java.util.ArrayList.<init>", "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.getPropertyValues", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "javax.jcr.Value.getType", "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.getBinaryChecksum", "java.util.List.add", "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.getStringChecksum", "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions.getSortedProperties", "java.util.Collections.sort", "org.slf4j.Logger.isDebugEnabled", "javax.jcr.Property.getPath", "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.getChecksumKey", "org.apache.commons.lang.StringUtils.join", "org.slf4j.Logger.debug", "java.util.SortedMap.put", "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.aggregateChecksums"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["java.lang.Object"], [""], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Object"], [""], ["javax.jcr.Property"], [""], [""], [""], [""], ["javax.jcr.Value"], ["java.lang.Object"], ["javax.jcr.Value"], [""], ["java.util.List"], [""], [""], ["java.lang.String", "java.lang.String"], ["java.util.Collection", "java.lang.String"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.Object", "java.lang.Object"], ["java.util.Map"]], "passed_comments": [{"com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions.getExcludedProperties": "@return the property names that should not be included as part of the checksum hash"}, {"com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.getPropertyValues": "Normalizes a property values to a list; allows single and multi-values to be treated the same in code."}, {"com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.getBinaryChecksum": "Gets the checksum for a Binary value."}, {"com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.getStringChecksum": "Gets the checksum for a String value."}, {"com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions.getSortedProperties": "@return the property names whose multi-value order as defined in the JCR should be respected."}, {"com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.getChecksumKey": "Generates the relative key used for tracking nodes and properties."}, {"com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.aggregateChecksums": "Aggregates a set of checksum entries into a single checksum value."}]}, {"index": "52", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/impl/ChecksumGeneratorImpl.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.getChecksumKey", "methodParameterType": "String#String#", "methodParameterName": "aggregatePath#path#", "methodBody": "protected String getChecksumKey(String aggregatePath, String path) {\n        if (\"/\".equals(aggregatePath) && \"/\".equals(path)) {\n            return \"/\";\n        } else if (\"/\".equals(aggregatePath)) {\n            return path;\n        }\n\n        String baseNodeName = Text.getName(aggregatePath);\n        String relPath = StringUtils.removeStart(path, aggregatePath);\n\n        return baseNodeName + relPath;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#StringLiteral#ReturnStatement#Block#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the relative key used for tracking nodes and properties.", "call_func_name": ["java.lang.String.equals", "org.apache.jackrabbit.vault.util.Text.getName", "org.apache.commons.lang.StringUtils.removeStart", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [["java.lang.Object"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "53", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/impl/ChecksumGeneratorImpl.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.getPropertyValues", "methodParameterType": "Property#", "methodParameterName": "property#", "methodBody": "private List<Value> getPropertyValues(final Property property) throws RepositoryException {\n        final List<Value> values = new ArrayList<>();\n\n        if (property.isMultiple()) {\n            values.addAll(Arrays.asList(property.getValues()));\n        } else {\n            values.add(property.getValue());\n        }\n\n        return values;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Normalizes a property values to a list; allows single and multi-values to be treated the same in code.", "call_func_name": ["java.util.ArrayList.<init>", "javax.jcr.Property.isMultiple", "javax.jcr.Property.getValues", "java.util.Arrays.asList", "java.util.List.addAll", "javax.jcr.Property.getValue", "java.util.List.add"], "call_func_parameter": [[""], [""], [""], ["java.lang.Object[]"], ["java.util.Collection"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "54", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/impl/ChecksumGeneratorImpl.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.getBinaryChecksum", "methodParameterType": "Value#", "methodParameterName": "value#", "methodBody": "protected String getBinaryChecksum(final Value value) throws RepositoryException, IOException {\n        InputStream stream = null;\n\n        try {\n            stream = value.getBinary().getStream();\n            return DigestUtils.sha1Hex(stream);\n        } finally {\n            if (stream != null) {\n                stream.close();\n            }\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Gets the checksum for a Binary value.", "call_func_name": ["javax.jcr.Value.getBinary", "javax.jcr.Binary.getStream", "org.apache.commons.codec.digest.DigestUtils.sha1Hex", "java.io.InputStream.close"], "call_func_parameter": [[""], [""], ["java.io.InputStream"], [""]], "passed_comments": "/"}, {"index": "55", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/impl/ChecksumGeneratorImpl.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.getStringChecksum", "methodParameterType": "Value#", "methodParameterName": "value#", "methodBody": "protected static String getStringChecksum(final Value value) throws RepositoryException {\n        return DigestUtils.sha1Hex(value.getString());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the checksum for a String value.", "call_func_name": ["javax.jcr.Value.getString", "org.apache.commons.codec.digest.DigestUtils.sha1Hex"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "56", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/impl/ChecksumGeneratorImpl.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.hasOrderedChildren", "methodParameterType": "Node#", "methodParameterName": "node#", "methodBody": "protected boolean hasOrderedChildren(final Node node) throws RepositoryException {\n        boolean hasOrderedChildren = false;\n\n        try {\n            hasOrderedChildren = node.getPrimaryNodeType().hasOrderableChildNodes();\n        } catch (UnsupportedOperationException e) {\n            // This is an exception thrown in the test scenarios using the Mock JCR API\n            // This would not happen using the actual JCR APIs\n            // Allow other exceptions to be thrown and break processing normally\n        }\n\n        return hasOrderedChildren;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if node has ordered children.", "call_func_name": ["javax.jcr.Node.getPrimaryNodeType", "javax.jcr.nodetype.NodeType.hasOrderableChildNodes"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "57", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/impl/ChecksumGeneratorImpl.java", "methodName": "com.adobe.acs.commons.analysis.jcrchecksum.impl.ChecksumGeneratorImpl.aggregateChecksums", "methodParameterType": "Map<String,String>#", "methodParameterName": "checksums#", "methodBody": "protected String aggregateChecksums(final Map<String, String> checksums) {\n        if (checksums.isEmpty()) { return null; }\n\n        StringBuilder data = new StringBuilder();\n\n        for (Map.Entry<String, String> entry : checksums.entrySet()) {\n            data.append(entry.getKey() + \"=\" + entry.getValue());\n        }\n\n        return DigestUtils.sha1Hex(data.toString());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Aggregates a set of checksum entries into a single checksum value.", "call_func_name": ["java.util.Map.isEmpty", "java.lang.StringBuilder.<init>", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.commons.codec.digest.DigestUtils.sha1Hex"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "58", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/components/longformtext/LongFormTextComponent.java", "methodName": "com.adobe.acs.commons.components.longformtext.LongFormTextComponent.getTextParagraphs", "methodParameterType": "String#", "methodParameterName": "text#", "methodBody": "String[] getTextParagraphs(String text);", "AST": "Javadoc#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Splits long form text into a series of \"chunks\" delimited &lt;/p>. Note: this method does not support intelligence for managing nested <p>'s in <p>'s", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "59", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/components/longformtext/LongFormTextComponent.java", "methodName": "com.adobe.acs.commons.components.longformtext.LongFormTextComponent.mergeParagraphSystems", "methodParameterType": "Resource#int#", "methodParameterName": "resource#numParagraphCount#", "methodBody": "void mergeParagraphSystems(Resource resource, int numParagraphCount) throws RepositoryException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Housekeeping for the Long Form Text responsible for merging dangling par resource up when the number of <p> decreases.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "60", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/components/longformtext/LongFormTextComponent.java", "methodName": "com.adobe.acs.commons.components.longformtext.LongFormTextComponent.hasContents", "methodParameterType": "Resource#int#", "methodParameterName": "resource#index#", "methodBody": "boolean hasContents(Resource resource, int index);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Determines if the specified long form text parsys has content.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "61", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/components/longformtext/impl/LongFormTextComponentImpl.java", "methodName": "com.adobe.acs.commons.components.longformtext.impl.LongFormTextComponentImpl.stripNamespaces", "methodParameterType": "org.w3c.dom.Node#", "methodParameterName": "node#", "methodBody": "private void stripNamespaces(org.w3c.dom.Node node) {\n        Document document = node.getOwnerDocument();\n        if (node.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n            document.renameNode(node, null, node.getNodeName());\n        }\n        NodeList list = node.getChildNodes();\n        for (int i = 0; i < list.getLength(); ++i) {\n            stripNamespaces(list.item(i));\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Method borrowed from: https://blog.avisi.nl/2013/07/24/java-stripping-namespaces-from-xml-using-dom/ Recursively renames the namespace of a node.", "call_func_name": ["org.w3c.dom.Node.getOwnerDocument", "org.w3c.dom.Node.getNodeType", "org.w3c.dom.Node.getNodeName", "org.w3c.dom.Document.renameNode", "org.w3c.dom.Node.getChildNodes", "org.w3c.dom.NodeList.getLength", "org.w3c.dom.NodeList.item", "com.adobe.acs.commons.components.longformtext.impl.LongFormTextComponentImpl.stripNamespaces"], "call_func_parameter": [[""], [""], [""], ["org.w3c.dom.Node", "java.lang.String", "java.lang.String"], [""], [""], ["int"], ["org.w3c.dom.Node"]], "passed_comments": [{"com.adobe.acs.commons.components.longformtext.impl.LongFormTextComponentImpl.stripNamespaces": "Method borrowed from: https://blog.avisi.nl/2013/07/24/java-stripping-namespaces-from-xml-using-dom/ Recursively renames the namespace of a node."}]}, {"index": "62", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/designer/DesignHtmlLibraryManager.java", "methodName": "com.adobe.acs.commons.designer.DesignHtmlLibraryManager.writeCssInclude", "methodParameterType": "SlingHttpServletRequest#Design#PageRegion#Writer#", "methodParameterName": "request#design#pageRegion#writer#", "methodBody": "void writeCssInclude(SlingHttpServletRequest request, Design design, PageRegion pageRegion, Writer writer)\n            throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Writes the CSS include snippets to the given writer. The paths to the CSS libraries are included that match the given categories for client libraries (as specified on the Design page) associated with the pageRegion for the currentDesign.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "63", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/designer/DesignHtmlLibraryManager.java", "methodName": "com.adobe.acs.commons.designer.DesignHtmlLibraryManager.writeJsInclude", "methodParameterType": "SlingHttpServletRequest#Design#PageRegion#Writer#", "methodParameterName": "request#design#pageRegion#writer#", "methodBody": "void writeJsInclude(SlingHttpServletRequest request, Design design, PageRegion pageRegion, Writer writer)\n            throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Writes the JS include snippets to the given writer. The paths to the JS libraries are included that match the given categories for client libraries (as specified on the Design page) associated with the pageRegion for the currentDesign.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "64", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/designer/DesignHtmlLibraryManager.java", "methodName": "com.adobe.acs.commons.designer.DesignHtmlLibraryManager.writeIncludes", "methodParameterType": "SlingHttpServletRequest#Design#PageRegion#Writer#", "methodParameterName": "request#design#pageRegion#writer#", "methodBody": "void writeIncludes(SlingHttpServletRequest request, Design design, PageRegion pageRegion, Writer writer)\n            throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Writes the include snippets to the given writer. The paths to the libraries (CSS and JS) are included that match the given categories for client libraries (as specified on the Design page) associated with the pageRegion for the currentDesign", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "65", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/designer/DesignHtmlLibraryManager.java", "methodName": "com.adobe.acs.commons.designer.DesignHtmlLibraryManager.getCssLibraries", "methodParameterType": "Design#PageRegion#", "methodParameterName": "design#pageRegion#", "methodBody": "String[] getCssLibraries(Design design, PageRegion pageRegion);", "AST": "Javadoc#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns an ordered list of all CSS (as specified on the Design page) client libraries associated with the pageRegion for the design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "66", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/designer/DesignHtmlLibraryManager.java", "methodName": "com.adobe.acs.commons.designer.DesignHtmlLibraryManager.getJsLibraries", "methodParameterType": "Design#PageRegion#", "methodParameterName": "design#pageRegion#", "methodBody": "String[] getJsLibraries(Design design, PageRegion pageRegion);", "AST": "Javadoc#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns an ordered list of all JS (as specified on the Design page) client libraries associated with the pageRegion for the design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "67", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/designer/DesignHtmlLibraryManager.java", "methodName": "com.adobe.acs.commons.designer.DesignHtmlLibraryManager.getLibraries", "methodParameterType": "Design#PageRegion#", "methodParameterName": "design#pageRegion#", "methodBody": "String[] getLibraries(Design design, PageRegion pageRegion);", "AST": "Javadoc#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns an ordered list of all (CSS and JS; as specified on the Design page) client libraries associated with the pageRegion for the design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "68", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/designer/impl/DesignHtmlLibraryManagerImpl.java", "methodName": "com.adobe.acs.commons.designer.impl.DesignHtmlLibraryManagerImpl.getPageRegionProperties", "methodParameterType": "Design#PageRegion#", "methodParameterName": "design#pageRegion#", "methodBody": "private ValueMap getPageRegionProperties(final Design design, final PageRegion pageRegion) {\n        final String relPath = RESOURCE_NAME + \"/\" + pageRegion;\n\n        final ValueMap empty = new ValueMapDecorator(new HashMap<String, Object>());\n\n        if (design == null) {\n            log.warn(\"Cannot find properties for `null` Design\");\n            return empty;\n        } else if (design.getContentResource() == null) {\n            log.warn(\"Cannot find properties for `null` Design content resource\");\n            return empty;\n        } else if (design.getContentResource().getChild(relPath) == null) {\n            log.warn(\"Could not find resource: {}\", design.getContentResource().getPath() + \"/\" + relPath);\n            return empty;\n        }\n\n        return design.getContentResource().getChild(relPath).adaptTo(ValueMap.class);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)IfStatement)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the ValueMap that contains the client library lists for the specified design and PageRegion.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.HashMap.<init>", "org.apache.sling.api.wrappers.ValueMapDecorator.<init>", "org.slf4j.Logger.warn", "com.day.cq.wcm.api.designer.Design.getContentResource", "org.apache.sling.api.resource.Resource.getChild", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.warn", "org.apache.sling.api.resource.Resource.adaptTo"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], [""], ["java.util.Map"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.Class"]], "passed_comments": "/"}, {"index": "69", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/designer/IncludeDesignLibrariesTag.java", "methodName": "com.adobe.acs.commons.designer.IncludeDesignLibrariesTag.doEndTag", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public int doEndTag() throws JspException {\n        final SlingHttpServletRequest request = TagUtil.getRequest(pageContext);\n        final SlingBindings bindings = (SlingBindings) request.getAttribute(SlingBindings.class.getName());\n        final DesignHtmlLibraryManager manager = bindings.getSling().getService(DesignHtmlLibraryManager.class);\n        if (manager != null) {\n            try {\n                if (js && css) {\n                    manager.writeIncludes(request, getDesign(), region, pageContext.getOut());\n                } else if (js) {\n                    manager.writeJsInclude(request, getDesign(), region, pageContext.getOut());\n                } else if (css) {\n                    manager.writeCssInclude(request, getDesign(), region, pageContext.getOut());\n                }\n            } catch (IOException e) {\n                throw new JspException(\"Unable to write client library includes\", e);\n            }\n        }\n        reset();\n        return EVAL_PAGE;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.sling.scripting.jsp.util.TagUtil.getRequest", "java.lang.Class.getName", "org.apache.sling.api.SlingHttpServletRequest.getAttribute", "org.apache.sling.api.scripting.SlingBindings.getSling", "org.apache.sling.api.scripting.SlingScriptHelper.getService", "com.adobe.acs.commons.designer.IncludeDesignLibrariesTag.getDesign", "javax.servlet.jsp.PageContext.getOut", "com.adobe.acs.commons.designer.DesignHtmlLibraryManager.writeIncludes", "com.adobe.acs.commons.designer.DesignHtmlLibraryManager.writeJsInclude", "com.adobe.acs.commons.designer.DesignHtmlLibraryManager.writeCssInclude", "javax.servlet.jsp.JspException.<init>", "com.adobe.acs.commons.designer.IncludeDesignLibrariesTag.reset"], "call_func_parameter": [["javax.servlet.jsp.PageContext"], [""], ["java.lang.String"], [""], ["java.lang.Class"], [""], [""], ["org.apache.sling.api.SlingHttpServletRequest", "com.day.cq.wcm.api.designer.Design", "com.adobe.acs.commons.designer.PageRegion", "java.io.Writer"], ["org.apache.sling.api.SlingHttpServletRequest", "com.day.cq.wcm.api.designer.Design", "com.adobe.acs.commons.designer.PageRegion", "java.io.Writer"], ["org.apache.sling.api.SlingHttpServletRequest", "com.day.cq.wcm.api.designer.Design", "com.adobe.acs.commons.designer.PageRegion", "java.io.Writer"], ["java.lang.String", "java.lang.Throwable"], [""]], "passed_comments": [{"com.adobe.acs.commons.designer.DesignHtmlLibraryManager.writeIncludes": "Writes the include snippets to the given writer. The paths to the libraries (CSS and JS) are included that match the given categories for client libraries (as specified on the Design page) associated with the pageRegion for the currentDesign"}, {"com.adobe.acs.commons.designer.DesignHtmlLibraryManager.writeJsInclude": "Writes the JS include snippets to the given writer. The paths to the JS libraries are included that match the given categories for client libraries (as specified on the Design page) associated with the pageRegion for the currentDesign."}, {"com.adobe.acs.commons.designer.DesignHtmlLibraryManager.writeCssInclude": "Writes the CSS include snippets to the given writer. The paths to the CSS libraries are included that match the given categories for client libraries (as specified on the Design page) associated with the pageRegion for the currentDesign."}]}, {"index": "70", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/json/AbstractJSONObjectVisitor.java", "methodName": "com.adobe.acs.commons.json.AbstractJSONObjectVisitor.accept", "methodParameterType": "JsonObject#", "methodParameterName": "jsonObject#", "methodBody": "public void accept(final JsonObject jsonObject) {\n        if (jsonObject != null) {\n            this.visit(jsonObject);\n            currentDepth++;\n            this.traverseJSONObject(jsonObject);\n            currentDepth--;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Visit the given JSON Object and all its descendants.", "call_func_name": ["com.adobe.acs.commons.json.AbstractJSONObjectVisitor.visit", "com.adobe.acs.commons.json.AbstractJSONObjectVisitor.traverseJSONObject"], "call_func_parameter": [["com.google.gson.JsonObject"], ["com.google.gson.JsonObject"]], "passed_comments": [{"com.adobe.acs.commons.json.AbstractJSONObjectVisitor.visit": "Implement this method to do actual work on the JSON Object."}, {"com.adobe.acs.commons.json.AbstractJSONObjectVisitor.traverseJSONObject": "Visit each JSON Object in the JSON Array."}]}, {"index": "71", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/json/AbstractJSONObjectVisitor.java", "methodName": "com.adobe.acs.commons.json.AbstractJSONObjectVisitor.accept", "methodParameterType": "JsonArray#", "methodParameterName": "jsonArray#", "methodBody": "public void accept(final JsonArray jsonArray) {\n        if (jsonArray != null) {\n            currentDepth++;\n            this.traverseJSONArray(jsonArray);\n            currentDepth--;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Visit the given JSON Array and all its descendants.", "call_func_name": ["com.adobe.acs.commons.json.AbstractJSONObjectVisitor.traverseJSONArray"], "call_func_parameter": [["com.google.gson.JsonArray"]], "passed_comments": [{"com.adobe.acs.commons.json.AbstractJSONObjectVisitor.traverseJSONArray": "Visit each JSON Object in the JSON Array."}]}, {"index": "72", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/json/AbstractJSONObjectVisitor.java", "methodName": "com.adobe.acs.commons.json.AbstractJSONObjectVisitor.traverseJSONObject", "methodParameterType": "JsonObject#", "methodParameterName": "jsonObject#", "methodBody": "protected final void traverseJSONObject(final JsonObject jsonObject) {\n        if (jsonObject == null) {\n            return;\n        }\n\n        for (Entry<String, JsonElement> elem : jsonObject.entrySet()) {\n            if (elem.getValue().isJsonArray()) {\n                accept(elem.getValue().getAsJsonArray());\n            } else if (elem.getValue().isJsonObject()) {\n                accept(elem.getValue().getAsJsonObject());\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Visit each JSON Object in the JSON Array.", "call_func_name": ["com.google.gson.JsonObject.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.google.gson.JsonElement.isJsonArray", "com.google.gson.JsonElement.getAsJsonArray", "com.adobe.acs.commons.json.AbstractJSONObjectVisitor.accept", "com.google.gson.JsonElement.isJsonObject", "com.google.gson.JsonElement.getAsJsonObject", "com.adobe.acs.commons.json.AbstractJSONObjectVisitor.accept"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["com.google.gson.JsonArray"], [""], [""], ["com.google.gson.JsonObject"]], "passed_comments": [{"com.adobe.acs.commons.json.AbstractJSONObjectVisitor.accept": "Visit the given JSON Array and all its descendants."}, {"com.adobe.acs.commons.json.AbstractJSONObjectVisitor.accept": "Visit the given JSON Object and all its descendants."}]}, {"index": "73", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/json/AbstractJSONObjectVisitor.java", "methodName": "com.adobe.acs.commons.json.AbstractJSONObjectVisitor.traverseJSONArray", "methodParameterType": "JsonArray#", "methodParameterName": "jsonArray#", "methodBody": "protected final void traverseJSONArray(final JsonArray jsonArray) {\n        if (jsonArray == null) {\n            return;\n        }\n\n        for (int i = 0; i < jsonArray.size(); i++) {\n            if (jsonArray.get(i).isJsonObject()) {\n                this.accept(jsonArray.get(i).getAsJsonObject());\n            } else if (jsonArray.get(i).isJsonArray()) {\n                this.accept(jsonArray.get(i).getAsJsonArray());\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Visit each JSON Object in the JSON Array.", "call_func_name": ["com.google.gson.JsonArray.size", "com.google.gson.JsonArray.get", "com.google.gson.JsonElement.isJsonObject", "com.google.gson.JsonElement.getAsJsonObject", "com.adobe.acs.commons.json.AbstractJSONObjectVisitor.accept", "com.google.gson.JsonElement.isJsonArray", "com.google.gson.JsonElement.getAsJsonArray", "com.adobe.acs.commons.json.AbstractJSONObjectVisitor.accept"], "call_func_parameter": [[""], ["int"], [""], [""], ["com.google.gson.JsonObject"], [""], [""], ["com.google.gson.JsonArray"]], "passed_comments": [{"com.adobe.acs.commons.json.AbstractJSONObjectVisitor.accept": "Visit the given JSON Object and all its descendants."}, {"com.adobe.acs.commons.json.AbstractJSONObjectVisitor.accept": "Visit the given JSON Array and all its descendants."}]}, {"index": "74", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/json/AbstractJSONObjectVisitor.java", "methodName": "com.adobe.acs.commons.json.AbstractJSONObjectVisitor.visit", "methodParameterType": "JsonObject#", "methodParameterName": "jsonObject#", "methodBody": "protected abstract void visit(final JsonObject jsonObject);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Implement this method to do actual work on the JSON Object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "75", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/marketo/client/MarketoClient.java", "methodName": "com.adobe.acs.commons.marketo.client.MarketoClient.getApiToken", "methodParameterType": "MarketoClientConfiguration#", "methodParameterName": "config#", "methodBody": "public @Nonnull String getApiToken(@Nonnull MarketoClientConfiguration config) throws IOException;", "AST": "Javadoc#Modifier#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Retrieve an API token used for interacting with the Marketo API.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "76", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/marketo/client/MarketoClient.java", "methodName": "com.adobe.acs.commons.marketo.client.MarketoClient.getForms", "methodParameterType": "MarketoClientConfiguration#", "methodParameterName": "config#", "methodBody": "public @Nonnull List<MarketoForm> getForms(@Nonnull MarketoClientConfiguration config) throws IOException;", "AST": "Javadoc#Modifier#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Retrieve all of the available forms from the current organization in Marketo.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "77", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/marketo/client/MarketoClient.java", "methodName": "com.adobe.acs.commons.marketo.client.MarketoClient.getFields", "methodParameterType": "MarketoClientConfiguration#", "methodParameterName": "config#", "methodBody": "public @Nonnull List<MarketoField> getFields(@Nonnull MarketoClientConfiguration config) throws IOException;", "AST": "Javadoc#Modifier#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Retrieve all of the available forms from the current organization in Marketo.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "78", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/genericlists/GenericList.java", "methodName": "com.adobe.acs.commons.genericlists.GenericList.getItems", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Nonnull\n    @Inject\n    @Named(\"list\")\n    @FormField(name = \"List\", component = MultifieldComponent.class)\n    List<Item> getItems();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#MarkerAnnotation#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#SimpleName#StringLiteral#MemberValuePair#SimpleName#SimpleName#SimpleType#TypeLiteral#MemberValuePair#NormalAnnotation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair(MemberValuePair(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MemberValuePair)NormalAnnotation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return an ordered list of title/value pairs.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "79", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/genericlists/GenericList.java", "methodName": "com.adobe.acs.commons.genericlists.GenericList.lookupTitle", "methodParameterType": "String#", "methodParameterName": "value#", "methodBody": "@CheckForNull\n    String lookupTitle(String value);", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Get an item's title by its value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "80", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/genericlists/GenericList.java", "methodName": "com.adobe.acs.commons.genericlists.GenericList.lookupTitle", "methodParameterType": "String#Locale#", "methodParameterName": "value#locale#", "methodBody": "@CheckForNull\n    String lookupTitle(String value, Locale locale);", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Get an item's localized title by its value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "81", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/audit_log_search/AuditLogSearchRequest.java", "methodName": "com.adobe.acs.commons.audit_log_search.AuditLogSearchRequest.AuditLogSearchRequest", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "public AuditLogSearchRequest(SlingHttpServletRequest request) throws ParseException {\n        contentRoot = request.getParameter(\"contentRoot\");\n        includeChildren = \"true\".equals(request.getParameter(\"includeChildren\"));\n        type = request.getParameter(\"type\");\n        user = request.getParameter(\"user\");\n        startDate = loadDate(request.getParameter(\"startDate\"));\n        endDate = loadDate(request.getParameter(\"endDate\"));\n        order = request.getParameter(\"order\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a new AuditLogSearchRequest from the SlingHttpServletRequest", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "82", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/logging/impl/JsonEventLogger.java", "methodName": "com.adobe.acs.commons.logging.impl.JsonEventLogger.logMapperForLevel", "methodParameterType": "LogLevel#Logger#", "methodParameterName": "logLevel#logger#", "methodBody": "static Consumer<String> logMapperForLevel(final LogLevel logLevel, final Logger logger) {\n        if (logger == null) {\n            return (message) -> { /* do nothing */ };\n        }\n        switch (logLevel) {\n            case ERROR:\n                return logger::error;\n            case WARN:\n                return logger::warn;\n            case INFO:\n                return logger::info;\n            case DEBUG:\n                return logger::debug;\n            case TRACE:\n                return logger::trace;\n            default:\n                return (message) -> { /* do nothing */ };\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#VariableDeclarationFragment#Block#LambdaExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SwitchCase#SimpleName#SimpleName#ExpressionMethodReference#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#ExpressionMethodReference#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#ExpressionMethodReference#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#ExpressionMethodReference#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#ExpressionMethodReference#ReturnStatement#SwitchCase#SimpleName#VariableDeclarationFragment#Block#LambdaExpression#ReturnStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block)Block)LambdaExpression)ReturnStatement)Block)IfStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)ReturnStatement(SwitchCase)SwitchCase(ReturnStatement(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block)Block)LambdaExpression)ReturnStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Return a logging function appropriate for the specified loglevel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "83", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/logging/impl/JsonEventLogger.java", "methodName": "com.adobe.acs.commons.logging.impl.JsonEventLogger.logEnablerForLevel", "methodParameterType": "LogLevel#Logger#", "methodParameterName": "logLevel#logger#", "methodBody": "static Supplier<Boolean> logEnablerForLevel(final LogLevel logLevel, final Logger logger) {\n        if (logger == null) {\n            return () -> false;\n        }\n        switch (logLevel) {\n            case ERROR:\n                return logger::isErrorEnabled;\n            case WARN:\n                return logger::isWarnEnabled;\n            case INFO:\n                return logger::isInfoEnabled;\n            case DEBUG:\n                return logger::isDebugEnabled;\n            case TRACE:\n                return logger::isTraceEnabled;\n            default:\n                return () -> false;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#LambdaExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SwitchCase#SimpleName#SimpleName#ExpressionMethodReference#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#ExpressionMethodReference#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#ExpressionMethodReference#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#ExpressionMethodReference#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#ExpressionMethodReference#ReturnStatement#SwitchCase#BooleanLiteral#LambdaExpression#ReturnStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(LambdaExpression(BooleanLiteral)BooleanLiteral)LambdaExpression)ReturnStatement)Block)IfStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)ReturnStatement(SwitchCase)SwitchCase(ReturnStatement(LambdaExpression(BooleanLiteral)BooleanLiteral)LambdaExpression)ReturnStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Return a logging function appropriate for the specified log level.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "84", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/logging/impl/JsonEventLogger.java", "methodName": "com.adobe.acs.commons.logging.impl.JsonEventLogger.constructMessage", "methodParameterType": "Event#", "methodParameterName": "event#", "methodBody": "protected static String constructMessage(Event event) {\n        Map<String, Object> eventProperties = new LinkedHashMap<>();\n        for (String prop : event.getPropertyNames()) {\n            Object val = event.getProperty(prop);\n            Object converted = convertValue(val);\n            eventProperties.put(prop, converted == null ? val : converted);\n        }\n        eventProperties.put(PROP_TIMESTAMP, ISO8601.format(Calendar.getInstance()));\n        Gson gson = new Gson();\n        return gson.toJson(eventProperties);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#ConditionalExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes an OSGi  {@link org.osgi.service.event.Event} into a JSONobject string", "call_func_name": ["java.util.LinkedHashMap.<init>", "org.osgi.service.event.Event.getPropertyNames", "org.osgi.service.event.Event.getProperty", "com.adobe.acs.commons.logging.impl.JsonEventLogger.convertValue", "java.util.Map.put", "java.util.Calendar.getInstance", "org.apache.jackrabbit.util.ISO8601.format", "com.google.gson.Gson.<init>", "com.google.gson.Gson.toJson"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["java.lang.Object"], ["java.lang.Object", "java.lang.Object"], [""], ["java.util.Calendar"], [""], ["java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.logging.impl.JsonEventLogger.convertValue": "Converts individual java objects to JSONObjects using reflection and recursion"}]}, {"index": "85", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/logging/impl/JsonEventLogger.java", "methodName": "com.adobe.acs.commons.logging.impl.JsonEventLogger.convertValue", "methodParameterType": "Object#", "methodParameterName": "val#", "methodBody": "@SuppressWarnings({\"unchecked\", \"squid:S3776\"})\n    protected static Object convertValue(Object val) {\n        if (val instanceof Calendar) {\n            return ISO8601.format((Calendar) val);\n        } else if (val instanceof Date) {\n            Calendar calendar = Calendar.getInstance();\n            calendar.setTime((Date) val);\n            return ISO8601.format(calendar);\n        }\n\n        return val;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#StringLiteral#ArrayInitializer#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts individual java objects to JSONObjects using reflection and recursion", "call_func_name": ["org.apache.jackrabbit.util.ISO8601.format", "java.util.Calendar.getInstance", "java.util.Calendar.setTime"], "call_func_parameter": [["java.util.Calendar"], [""], ["java.util.Date"]], "passed_comments": "/"}, {"index": "86", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/logging/impl/JsonEventLogger.java", "methodName": "com.adobe.acs.commons.logging.impl.JsonEventLogger.handleEvent", "methodParameterType": "Event#", "methodParameterName": "event#", "methodBody": "@Override\n    public void handleEvent(Event event) {\n        if (event.getProperty(\"event.application\") == null && this.logEnabler.get()) {\n            logMapper.accept(constructMessage(event));\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.osgi.service.event.Event.getProperty", "java.util.function.Supplier.get", "java.lang.Boolean.booleanValue", "com.adobe.acs.commons.logging.impl.JsonEventLogger.constructMessage", "java.util.function.Consumer.accept"], "call_func_parameter": [["java.lang.String"], [""], [""], ["org.osgi.service.event.Event"], ["java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.logging.impl.JsonEventLogger.constructMessage": "Serializes an OSGi  {@link org.osgi.service.event.Event} into a JSONobject string"}]}, {"index": "87", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/dam/DAMFunctions.java", "methodName": "com.adobe.acs.commons.dam.DAMFunctions.getTitleOrName", "methodParameterType": "Asset#", "methodParameterName": "asset#", "methodBody": "public static String getTitleOrName(Asset asset) {\n        String title = asset.getMetadataValue(DamConstants.DC_TITLE);\n        return StringUtils.isNotBlank(title) ? title : asset.getName();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the title or name of the asset, if the title is not defined.", "call_func_name": ["com.day.cq.dam.api.Asset.getMetadataValue", "org.apache.commons.lang.StringUtils.isNotBlank", "com.day.cq.dam.api.Asset.getName"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "88", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/dam/audio/AudioFunctions.java", "methodName": "com.adobe.acs.commons.dam.audio.AudioFunctions.getHtmlSource", "methodParameterType": "Rendition#VideoProfile#", "methodParameterName": "rendition#profile#", "methodBody": "public static String getHtmlSource(Rendition rendition, VideoProfile profile) {\n        return profile.getHtmlSource(rendition);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the HTML source for a rendition based on a profile.", "call_func_name": ["com.day.cq.dam.video.VideoProfile.getHtmlSource"], "call_func_parameter": [["com.day.cq.dam.api.Rendition"]], "passed_comments": "/"}, {"index": "89", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/dam/audio/watson/impl/TranscriptionService.java", "methodName": "com.adobe.acs.commons.dam.audio.watson.impl.TranscriptionService.startTranscriptionJob", "methodParameterType": "InputStream#String#", "methodParameterName": "stream#mimeType#", "methodBody": "String startTranscriptionJob(InputStream stream, String mimeType);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Start a transcription job with Watson.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "90", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/dam/audio/watson/impl/TranscriptionService.java", "methodName": "com.adobe.acs.commons.dam.audio.watson.impl.TranscriptionService.getResult", "methodParameterType": "String#", "methodParameterName": "jobId#", "methodBody": "Result getResult(String jobId);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Retrieve the current result for the job ID.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "91", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/dam/audio/impl/AudioException.java", "methodName": "com.adobe.acs.commons.dam.audio.impl.AudioException.AudioException", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AudioException() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "92", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/dam/audio/impl/AudioException.java", "methodName": "com.adobe.acs.commons.dam.audio.impl.AudioException.AudioException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public AudioException(String message) {\n        super(message);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor with an error message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "93", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/dam/audio/impl/AudioException.java", "methodName": "com.adobe.acs.commons.dam.audio.impl.AudioException.AudioException", "methodParameterType": "String#Throwable#", "methodParameterName": "message#cause#", "methodBody": "public AudioException(String message, Throwable cause) {\n        super(message, cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor with an error message and a cause.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "94", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/dam/audio/impl/AudioException.java", "methodName": "com.adobe.acs.commons.dam.audio.impl.AudioException.AudioException", "methodParameterType": "Throwable#", "methodParameterName": "cause#", "methodBody": "public AudioException(Throwable cause) {\n        super(cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor with a cause.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "95", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/dam/audio/impl/AudioHelper.java", "methodName": "com.adobe.acs.commons.dam.audio.impl.AudioHelper.process", "methodParameterType": "Asset#ResourceResolver#A#AudioProcessor<A,R>#", "methodParameterName": "asset#resourceResolver#args#audioProcessor#", "methodBody": "<A,R> R process(Asset asset, ResourceResolver resourceResolver, A args, AudioProcessor<A, R> audioProcessor) throws AudioException;", "AST": "Javadoc#SimpleName#TypeParameter#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(TypeParameter(SimpleName)SimpleName)TypeParameter(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Prepare an asset for processing by FFMpeg. The actual work is handled by the audioProcessor passed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "96", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/dam/AbstractRenditionModifyingProcess.java", "methodName": "com.adobe.acs.commons.dam.AbstractRenditionModifyingProcess.getTempFileSpecifier", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected abstract String getTempFileSpecifier();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Create a specifier to be used for temporary file location.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "97", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/dam/AbstractRenditionModifyingProcess.java", "methodName": "com.adobe.acs.commons.dam.AbstractRenditionModifyingProcess.processLayer", "methodParameterType": "Layer#Rendition#WorkflowSession#String[]#", "methodParameterName": "layer#rendition#workflowSession#args#", "methodBody": "protected abstract Layer processLayer(Layer layer, Rendition rendition, WorkflowSession workflowSession,\n            String[] args);", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Perform the actual layer processing and return the layer to be saved.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "98", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/dam/ColorConversion.java", "methodName": "com.adobe.acs.commons.dam.ColorConversion.toRGB", "methodParameterType": "CMYK#", "methodParameterName": "cymk#", "methodBody": "RGB toRGB(CMYK cymk);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Convert a color in the CYMK color space to RGB.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "99", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/dam/ColorConversion.java", "methodName": "com.adobe.acs.commons.dam.ColorConversion.toRGB", "methodParameterType": "LAB#", "methodParameterName": "lab#", "methodBody": "RGB toRGB(LAB lab);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Convert a color in the LAB color space to RGB.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "100", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/dam/impl/AssetsFolderPropertiesSupport.java", "methodName": "com.adobe.acs.commons.dam.impl.AssetsFolderPropertiesSupport.doFilter", "methodParameterType": "ServletRequest#ServletResponse#FilterChain#", "methodParameterName": "servletRequest#servletResponse#chain#", "methodBody": "public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain) throws IOException, ServletException {\n        final SlingHttpServletRequest request = (SlingHttpServletRequest) servletRequest;\n        final SlingHttpServletResponse response = (SlingHttpServletResponse) servletResponse;\n\n        if (!accepts(request)) {\n            chain.doFilter(request, response);\n            return;\n        }\n\n        log.trace(\"ACS AEM Commons Assets Folder Properties Support applied to POST Request\");\n        chain.doFilter(new AssetsFolderPropertiesSupportRequest(request, null), response);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#NullLiteral#ClassInstanceCreation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(NullLiteral)NullLiteral)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "This method is responsible for post processing POSTs to the FolderShareHandler PostOperation (:operation = dam.share.folder). This method will store a whitelisted set of request parameters to their relative location off of the [sling:", "call_func_name": ["com.adobe.acs.commons.dam.impl.AssetsFolderPropertiesSupport.accepts", "javax.servlet.FilterChain.doFilter", "org.slf4j.Logger.trace"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest"], ["javax.servlet.ServletRequest", "javax.servlet.ServletResponse"], ["java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.dam.impl.AssetsFolderPropertiesSupport.accepts": "Gateway method the Filter uses to determine if the request is a candidate for processing by Assets Folder Properties Support. These checks should be fast and fail broadest and fastest first."}]}, {"index": "101", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/dam/impl/AssetsFolderPropertiesSupport.java", "methodName": "com.adobe.acs.commons.dam.impl.AssetsFolderPropertiesSupport.accepts", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "@SuppressWarnings(\"squid:S3923\")\n    protected boolean accepts(SlingHttpServletRequest request) {\n        if (!StringUtils.equalsIgnoreCase(POST_METHOD, request.getMethod())) {\n            // Only POST methods are processed\n            return false;\n        } else if (!DAM_FOLDER_SHARE_OPERATION.equals(request.getParameter(OPERATION))) {\n            // Only requests with :operation=dam.share.folder are processed\n            return false;\n        } else if (!StringUtils.startsWith(request.getResource().getPath(), DAM_PATH_PREFIX)) {\n            // Only requests under /content/dam are processed\n            return false;\n        } else if (!request.getResource().isResourceType(JcrResourceConstants.NT_SLING_FOLDER)\n                && !request.getResource().isResourceType(JcrResourceConstants.NT_SLING_ORDERED_FOLDER)) {\n            // Only requests to sling:Folders or sling:Ordered folders are processed\n            return false;\n        }\n\n        // If the above checks do not fail, treat as a valid request\n        return true;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gateway method the Filter uses to determine if the request is a candidate for processing by Assets Folder Properties Support. These checks should be fast and fail broadest and fastest first.", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getMethod", "org.apache.commons.lang3.StringUtils.equalsIgnoreCase", "org.apache.sling.api.SlingHttpServletRequest.getParameter", "java.lang.String.equals", "org.apache.sling.api.SlingHttpServletRequest.getResource", "org.apache.sling.api.resource.Resource.getPath", "org.apache.commons.lang3.StringUtils.startsWith", "org.apache.sling.api.resource.Resource.isResourceType"], "call_func_parameter": [[""], ["java.lang.CharSequence", "java.lang.CharSequence"], ["java.lang.String"], ["java.lang.Object"], [""], [""], ["java.lang.CharSequence", "java.lang.CharSequence"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "102", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/dam/impl/AssetsFolderPropertiesSupport.java", "methodName": "com.adobe.acs.commons.dam.impl.AssetsFolderPropertiesSupport.doGet", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "request#response#", "methodBody": "@Override\n    protected final void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws ServletException, IOException {\n        final Resource suffixResource = request.getResourceResolver().resolve(request.getRequestPathInfo().getSuffix());\n        if (suffixResource == null) { return; }\n\n        log.trace(\"AssetsFolderPropertiesSupport GET method for folder resource [ {} ]\", suffixResource.getPath());\n\n        ValueMap formProperties = (ValueMap) request.getAttribute(GRANITE_UI_FORM_VALUES);\n\n        if (formProperties == null) {\n            formProperties = new ValueMapDecorator(new HashMap<String, Object>());\n        }\n\n        request.setAttribute(GRANITE_UI_FORM_VALUES, new CompositeValueMap(formProperties, suffixResource.getValueMap(), true));\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "This method handles the READING of the properties so that granite UI widgets can display stored data in the form. This needs to be included AFTER /apps/dam/gui/content/assets/foldersharewizard/jcr:content/body/items/form/items/wizard/items/settingStep/items/fixedColumns/items/fixedColumn2/items/tabs/items/tab1/items/folderproperties such that it can augment the Property map constructed by that OOTB script. Note that this exposes a value map for the [sling:", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getResourceResolver", "org.apache.sling.api.SlingHttpServletRequest.getRequestPathInfo", "org.apache.sling.api.request.RequestPathInfo.getSuffix", "org.apache.sling.api.resource.ResourceResolver.resolve", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.trace", "org.apache.sling.api.SlingHttpServletRequest.getAttribute", "java.util.HashMap.<init>", "org.apache.sling.api.wrappers.ValueMapDecorator.<init>", "org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.wrappers.CompositeValueMap.<init>", "org.apache.sling.api.SlingHttpServletRequest.setAttribute"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String"], [""], ["java.util.Map"], [""], ["org.apache.sling.api.resource.ValueMap", "org.apache.sling.api.resource.ValueMap", "boolean"], ["java.lang.String", "java.lang.Object"]], "passed_comments": "/"}, {"index": "103", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/dam/RenditionPatternPicker.java", "methodName": "com.adobe.acs.commons.dam.RenditionPatternPicker.RenditionPatternPicker", "methodParameterType": "String#", "methodParameterName": "pattern#", "methodBody": "public RenditionPatternPicker(String pattern) {\n        this.pattern = Pattern.compile(pattern);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create an Asset Rendition Picker that will pick a Rendition by matching the supplied Regex pattern (as String).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "104", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/dam/RenditionPatternPicker.java", "methodName": "com.adobe.acs.commons.dam.RenditionPatternPicker.RenditionPatternPicker", "methodParameterType": "Pattern#", "methodParameterName": "pattern#", "methodBody": "public RenditionPatternPicker(final Pattern pattern) {\n        this.pattern = pattern;\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create an Asset Rendition Picker that will pick a Rendition by matching the supplied Regex pattern.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "105", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/dam/RenditionPatternPicker.java", "methodName": "com.adobe.acs.commons.dam.RenditionPatternPicker.getRendition", "methodParameterType": "Asset#", "methodParameterName": "asset#", "methodBody": "@Override\n    public final Rendition getRendition(final Asset asset) {\n\n        final List<Rendition> renditions = asset.getRenditions();\n        final Pattern p = getPattern();\n\n        boolean hasOriginal = asset.getOriginal() != null;\n        boolean hasRenditions = renditions.size() > 0;\n\n        for (final Rendition rendition : renditions) {\n            final Matcher m = p.matcher(rendition.getName());\n\n            if (m.find()) {\n                return rendition;\n            }\n        }\n\n        if (hasOriginal) {\n            return asset.getOriginal();\n        } else if (hasRenditions) {\n            return renditions.get(0);\n        } else {\n            return null;\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#NullLiteral#ReturnStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Gets the rendition which matches against the constructor's Regex pattern. <p> If no matches are made and an Original exists, returns the Original. <p> If no matches are made and an Original doesn't exist, return the first Rendition.", "call_func_name": ["com.day.cq.dam.api.Asset.getRenditions", "com.adobe.acs.commons.dam.RenditionPatternPicker.getPattern", "com.day.cq.dam.api.Asset.getOriginal", "java.util.List.size", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.day.cq.dam.api.Rendition.getName", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.find", "java.util.List.get"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], [""], [""], ["java.lang.CharSequence"], [""], ["int"]], "passed_comments": "/"}, {"index": "106", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/etag/impl/EtagMessageDigestServletFilter.java", "methodName": "com.adobe.acs.commons.etag.impl.EtagMessageDigestServletFilter.isUnmodified", "methodParameterType": "Enumeration<String>#String#", "methodParameterName": "ifNoneMatchETags#responseETag#", "methodBody": "static boolean isUnmodified(Enumeration<String> ifNoneMatchETags, String responseETag) {\n        if (ifNoneMatchETags == null) {\n            throw new IllegalStateException(\"Can not access request headers\");\n        }\n        while (ifNoneMatchETags.hasMoreElements()) {\n            String ifNoneMatchETag = ifNoneMatchETags.nextElement();\n            if (ifNoneMatchETag.equals(responseETag) || ifNoneMatchETag.equals(\"*\")) {\n                return true;\n            }\n        }\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#WhileStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)WhileStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Handles conditional requests like outlined in RFC7232.", "call_func_name": ["java.lang.IllegalStateException.<init>", "java.util.Enumeration.hasMoreElements", "java.util.Enumeration.nextElement", "java.lang.String.equals"], "call_func_parameter": [["java.lang.String"], [""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "107", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/email/process/impl/SendTemplatedEmailUtils.java", "methodName": "com.adobe.acs.commons.email.process.impl.SendTemplatedEmailUtils.getPayloadProperties", "methodParameterType": "Resource#SimpleDateFormat#", "methodParameterName": "payloadRes#sdf#", "methodBody": "protected static final Map<String, String> getPayloadProperties(Resource payloadRes, SimpleDateFormat sdf) {\n\n        Map<String, String> emailParams = new HashMap<String, String>();\n\n        if (payloadRes == null) {\n            return emailParams;\n        }\n\n        // Check if the payload is an asset\n        if (DamUtil.isAsset(payloadRes)) {\n\n            // get metadata resource\n            Resource mdRes = payloadRes.getChild(JcrConstants.JCR_CONTENT + \"/\" + DamConstants.METADATA_FOLDER);\n\n            Map<String, String> assetMetadata = getJcrKeyValuePairs(mdRes, sdf);\n            emailParams.putAll(assetMetadata);\n\n        } else {\n            // check if the payload is a page\n            Page payloadPage = payloadRes.adaptTo(Page.class);\n\n            if (payloadPage != null) {\n                Map<String, String> pageContent = getJcrKeyValuePairs(payloadPage.getContentResource(), sdf);\n                emailParams.putAll(pageContent);\n            }\n        }\n\n        return emailParams;\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#QualifiedName#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tests whether the payload is a DAM asset or a cq:Page for DAM asset returns all properties at the metadata node for DAM assets for cq:Page returns all properties at the jcr:content node The Map<String, String> that is returned contains string representations of each of the respective properties", "call_func_name": ["java.util.HashMap.<init>", "com.day.cq.dam.commons.util.DamUtil.isAsset", "org.apache.sling.api.resource.Resource.getChild", "com.adobe.acs.commons.email.process.impl.SendTemplatedEmailUtils.getJcrKeyValuePairs", "java.util.Map.putAll", "org.apache.sling.api.resource.Resource.adaptTo", "com.day.cq.wcm.api.Page.getContentResource"], "call_func_parameter": [[""], ["org.apache.sling.api.resource.Resource"], ["java.lang.String"], ["org.apache.sling.api.resource.Resource", "java.text.SimpleDateFormat"], ["java.util.Map"], ["java.lang.Class"], [""]], "passed_comments": [{"com.adobe.acs.commons.email.process.impl.SendTemplatedEmailUtils.getJcrKeyValuePairs": "Method to add all properties of a resource to Key/Value map of strings only converts dates to string format based on simple date format concatenates String[] into a string of comma separated items all other values uses toString"}]}, {"index": "108", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/email/process/impl/SendTemplatedEmailUtils.java", "methodName": "com.adobe.acs.commons.email.process.impl.SendTemplatedEmailUtils.getEmailAddrsFromPathOrName", "methodParameterType": "ResourceResolver#String#", "methodParameterName": "resourceResolver#principleOrPath#", "methodBody": "protected static final String[] getEmailAddrsFromPathOrName(ResourceResolver resourceResolver, String principleOrPath) {\n        if (StringUtils.startsWith(principleOrPath, \"/\")) {\n            return getEmailAddrsFromUserPath(resourceResolver, principleOrPath);\n        }\n\n        try {\n            UserManager userManager = resourceResolver.adaptTo(UserManager.class);\n            Authorizable auth = userManager.getAuthorizable(principleOrPath);\n            return getEmailAddrsFromUserPath(resourceResolver, auth.getPath());\n        } catch (RepositoryException e) {\n            log.warn(\"Could not load repository paths for users. {}\", e);\n        }\n        return new String[]{};\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#Dimension#ArrayType#ArrayInitializer#ArrayCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer)ArrayInitializer)ArrayCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets email(s) based on the path to a principal or principle name. If it points to a user an array with a single email is returned, else an array of emails for each individual in the group", "call_func_name": ["org.apache.commons.lang.StringUtils.startsWith", "com.adobe.acs.commons.email.process.impl.SendTemplatedEmailUtils.getEmailAddrsFromUserPath", "org.apache.sling.api.resource.ResourceResolver.adaptTo", "org.apache.jackrabbit.api.security.user.UserManager.getAuthorizable", "org.apache.jackrabbit.api.security.user.Authorizable.getPath", "org.slf4j.Logger.warn"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String"], ["java.lang.Class"], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"com.adobe.acs.commons.email.process.impl.SendTemplatedEmailUtils.getEmailAddrsFromUserPath": "Gets email(s) based on the path to a principal If the path is a user it returns an array with a single email if the path is a group returns an array emails for each individual in the group"}]}, {"index": "109", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/email/process/impl/SendTemplatedEmailUtils.java", "methodName": "com.adobe.acs.commons.email.process.impl.SendTemplatedEmailUtils.getEmailAddrsFromUserPath", "methodParameterType": "ResourceResolver#String#", "methodParameterName": "resourceResolver#principlePath#", "methodBody": "@SuppressWarnings({\"squid:S3776\"})\n    protected static final String[] getEmailAddrsFromUserPath(ResourceResolver resourceResolver, String principlePath) {\n        List<String> emailList = new LinkedList<String>();\n\n        try {\n            Resource authRes = resourceResolver.getResource(principlePath);\n\n            if (authRes != null) {\n                Authorizable authorizable = authRes.adaptTo(Authorizable.class);\n                if (authorizable != null) {\n                    // check if it is a group\n                    if (authorizable.isGroup()) {\n                        Group authGroup = authRes.adaptTo(Group.class);\n\n                        // iterate over members of the group and add emails\n                        Iterator<Authorizable> memberIt = authGroup.getMembers();\n                        while (memberIt.hasNext()) {\n                            String currEmail = getAuthorizableEmail(memberIt.next());\n                            if (currEmail != null) {\n                                emailList.add(currEmail);\n                            }\n                        }\n                    } else {\n                        // otherwise is an individual user\n                        String authEmail = getAuthorizableEmail(authorizable);\n                        if (authEmail != null) {\n                            emailList.add(authEmail);\n                        }\n                    }\n                }\n            }\n        } catch (RepositoryException e) {\n            log.warn(\"Could not get list of email(s) for users. {}\", e);\n        }\n        String[] emailReturn = new String[emailList.size()];\n        return emailList.toArray(emailReturn);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#ArrayInitializer#SingleMemberAnnotation#Modifier#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#WhileStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(ArrayInitializer(StringLiteral)StringLiteral)ArrayInitializer)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)WhileStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets email(s) based on the path to a principal If the path is a user it returns an array with a single email if the path is a group returns an array emails for each individual in the group", "call_func_name": ["java.util.LinkedList.<init>", "org.apache.sling.api.resource.ResourceResolver.getResource", "org.apache.sling.api.resource.Resource.adaptTo", "org.apache.jackrabbit.api.security.user.Authorizable.isGroup", "org.apache.jackrabbit.api.security.user.Group.getMembers", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.adobe.acs.commons.email.process.impl.SendTemplatedEmailUtils.getAuthorizableEmail", "java.util.List.add", "org.slf4j.Logger.warn", "java.util.List.size", "java.util.List.toArray"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Class"], [""], [""], [""], [""], ["org.apache.jackrabbit.api.security.user.Authorizable"], ["java.lang.Object"], ["java.lang.String", "java.lang.Throwable"], [""], ["java.lang.Object[]"]], "passed_comments": "/"}, {"index": "110", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/email/process/impl/SendTemplatedEmailUtils.java", "methodName": "com.adobe.acs.commons.email.process.impl.SendTemplatedEmailUtils.getJcrKeyValuePairs", "methodParameterType": "Resource#SimpleDateFormat#", "methodParameterName": "resource#sdf#", "methodBody": "private static Map<String, String> getJcrKeyValuePairs(Resource resource, SimpleDateFormat sdf) {\n\n        Map<String, String> returnMap = new HashMap<String, String>();\n\n        if (resource == null) {\n            return returnMap;\n        }\n\n        ValueMap resMap = resource.getValueMap();\n\n        for (Map.Entry<String, Object> entry : resMap.entrySet()) {\n\n            Object value = entry.getValue();\n\n            if (value instanceof Calendar) {\n                // Date property\n                String fmtDate = formatDate((Calendar) value, sdf);\n                returnMap.put(entry.getKey(), fmtDate);\n            } else if (value instanceof String[]) {\n                // concatenate string array\n                String strValue = StringUtils.join((String[]) value, \", \");\n                returnMap.put(entry.getKey(), strValue);\n\n            } else {\n                // all other properties just use default to string\n                returnMap.put(entry.getKey(), value.toString());\n            }\n        }\n\n        return returnMap;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#CastExpression#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)CastExpression(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Method to add all properties of a resource to Key/Value map of strings only converts dates to string format based on simple date format concatenates String[] into a string of comma separated items all other values uses toString", "call_func_name": ["java.util.HashMap.<init>", "org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.adobe.acs.commons.email.process.impl.SendTemplatedEmailUtils.formatDate", "java.util.Map.put", "org.apache.commons.lang.StringUtils.join", "java.lang.Object.toString"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["java.util.Calendar", "java.text.SimpleDateFormat"], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object[]", "java.lang.String"], [""]], "passed_comments": [{"com.adobe.acs.commons.email.process.impl.SendTemplatedEmailUtils.formatDate": "Format date as a string using global variable sdf"}]}, {"index": "111", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/email/process/impl/SendTemplatedEmailUtils.java", "methodName": "com.adobe.acs.commons.email.process.impl.SendTemplatedEmailUtils.formatDate", "methodParameterType": "Calendar#SimpleDateFormat#", "methodParameterName": "calendar#sdf#", "methodBody": "private static String formatDate(Calendar calendar, SimpleDateFormat sdf) {\n\n        return sdf.format(calendar.getTime());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Format date as a string using global variable sdf", "call_func_name": ["java.util.Calendar.getTime", "java.text.SimpleDateFormat.format"], "call_func_parameter": [[""], ["java.util.Date"]], "passed_comments": "/"}, {"index": "112", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/email/process/impl/SendTemplatedEmailProcess.java", "methodName": "com.adobe.acs.commons.email.process.impl.SendTemplatedEmailProcess.getEmailAddrs", "methodParameterType": "WorkItem#Resource#String[]#", "methodParameterName": "workItem#payloadResource#args#", "methodBody": "protected String[] getEmailAddrs(WorkItem workItem, Resource payloadResource, String[] args) {\n        ResourceResolver resolver = payloadResource.getResourceResolver();\n        String sendToUser = getValueFromArgs(Arguments.SEND_TO.getArgumentName(), args);\n        return SendTemplatedEmailUtils.getEmailAddrsFromPathOrName(resolver, sendToUser);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets a String[] of email addresses to send the email to. By default calls {@link com.adobe.acs.commons.email.process.impl.SendTemplatedEmailUtils#getEmailAddrsFromUserPath(ResourceResolver,String)}Protected so that it can be overridden by implementing classes to add unique logic to where emails are routed to.", "call_func_name": ["org.apache.sling.api.resource.Resource.getResourceResolver", "com.adobe.acs.commons.email.process.impl.SendTemplatedEmailProcess.getValueFromArgs", "com.adobe.acs.commons.email.process.impl.SendTemplatedEmailUtils.getEmailAddrsFromPathOrName"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String[]"], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.email.process.impl.SendTemplatedEmailProcess.getValueFromArgs": "Gets value from workflow process arguments"}, {"com.adobe.acs.commons.email.process.impl.SendTemplatedEmailUtils.getEmailAddrsFromPathOrName": "Gets email(s) based on the path to a principal or principle name. If it points to a user an array with a single email is returned, else an array of emails for each individual in the group"}]}, {"index": "113", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/email/process/impl/SendTemplatedEmailProcess.java", "methodName": "com.adobe.acs.commons.email.process.impl.SendTemplatedEmailProcess.getAdditionalParams", "methodParameterType": "WorkItem#WorkflowSession#Resource#", "methodParameterName": "workItem#workflowSession#payloadResource#", "methodBody": "protected Map<String, String> getAdditionalParams(WorkItem workItem, WorkflowSession workflowSession,\n            Resource payloadResource) {\n        Map<String, String> wfParams = new HashMap<String, String>();\n\n        try {\n            wfParams.put(SendTemplatedEmailConstants.WF_STEP_TITLE, workItem.getNode().getTitle());\n            wfParams.put(SendTemplatedEmailConstants.WF_MODEL_TITLE, workItem.getWorkflow().getWorkflowModel()\n                    .getTitle());\n            // Set workflow initiator\n            wfParams.put(SendTemplatedEmailConstants.WF_INITIATOR, workItem.getWorkflow().getInitiator());\n        } catch (Exception e) {\n            log.warn(\"Error getting workflow title and workflow step title {}\", e);\n        }\n\n        return wfParams;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a Map<String, String> of additional parameters that will be added to the full list of email parameters that is sent to the EmailService. By default adds the Workflow Title: {@link com.adobe.acs.commons.email.process.impl.SendTemplatedEmailConstants#WF_MODEL_TITLE WF_MODEL_TITLE} and adds the Workflow Step Title:{@link com.adobe.acs.commons.email.process.impl.SendTemplatedEmailConstants#WF_STEP_TITLE WF_STEP_TITLE}{@link com.adobe.acs.commons.email.process.impl.SendTemplatedEmailConstants#WF_INITIATOR WF_INITIATOR} Protected so that implementing classes can override andadd additional parameters.", "call_func_name": ["java.util.HashMap.<init>", "com.day.cq.workflow.exec.WorkItem.getNode", "com.day.cq.workflow.model.WorkflowNode.getTitle", "java.util.Map.put", "com.day.cq.workflow.exec.WorkItem.getWorkflow", "com.day.cq.workflow.exec.Workflow.getWorkflowModel", "com.day.cq.workflow.model.WorkflowModel.getTitle", "com.day.cq.workflow.exec.Workflow.getInitiator", "org.slf4j.Logger.warn"], "call_func_parameter": [[""], [""], [""], ["java.lang.Object", "java.lang.Object"], [""], [""], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "114", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/email/process/impl/SendTemplatedEmailProcess.java", "methodName": "com.adobe.acs.commons.email.process.impl.SendTemplatedEmailProcess.getValueFromArgs", "methodParameterType": "String#String[]#", "methodParameterName": "key#arguments#", "methodBody": "protected String getValueFromArgs(String key, String[] arguments) {\n        for (String str : arguments) {\n            String trimmedStr = str.trim();\n            if (trimmedStr.startsWith(key + \":\")) {\n                return trimmedStr.substring((key + \":\").length());\n            }\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#ParenthesizedExpression#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets value from workflow process arguments", "call_func_name": ["java.lang.String.trim", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.String.startsWith", "java.lang.String.length", "java.lang.String.substring"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["int"]], "passed_comments": "/"}, {"index": "115", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/email/process/impl/SendTemplatedEmailProcess.java", "methodName": "com.adobe.acs.commons.email.process.impl.SendTemplatedEmailProcess.getUrls", "methodParameterType": "Resource#", "methodParameterName": "payloadRes#", "methodBody": "private Map<String, String> getUrls(Resource payloadRes) {\n\n        Map<String, String> urlParams = new HashMap<String, String>();\n        if (payloadRes == null) {\n            return urlParams;\n        }\n\n        String payloadPath = payloadRes.getPath();\n        ResourceResolver resolver = payloadRes.getResourceResolver();\n\n        if (DamUtil.isAsset(payloadRes)) {\n            // add author url\n            String assetDetailsUrl = authorUiHelper.generateEditAssetLink(payloadPath, true, resolver);\n            urlParams.put(SendTemplatedEmailConstants.AUTHOR_LINK, assetDetailsUrl);\n\n            // add publish url\n            String publishUrl = externalizer.publishLink(resolver, payloadPath);\n            urlParams.put(SendTemplatedEmailConstants.PUBLISH_LINK, publishUrl);\n\n        } else {\n\n            // add absolute author url\n            String assetDetailsUrl = authorUiHelper.generateEditPageLink(payloadPath, true, resolver);\n            urlParams.put(SendTemplatedEmailConstants.AUTHOR_LINK, assetDetailsUrl);\n\n            // add publish url\n            String publishUrl = externalizer.publishLink(resolver, payloadPath + \".html\");\n            urlParams.put(SendTemplatedEmailConstants.PUBLISH_LINK, publishUrl);\n        }\n\n        return urlParams;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Uses the AuthorUIHelper to generate links to the payload on author Uses Externalizer to generate links to the payload on publish", "call_func_name": ["java.util.HashMap.<init>", "org.apache.sling.api.resource.Resource.getPath", "org.apache.sling.api.resource.Resource.getResourceResolver", "com.day.cq.dam.commons.util.DamUtil.isAsset", "com.adobe.acs.commons.wcm.AuthorUIHelper.generateEditAssetLink", "java.util.Map.put", "com.day.cq.commons.Externalizer.publishLink", "com.adobe.acs.commons.wcm.AuthorUIHelper.generateEditPageLink", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], [""], ["org.apache.sling.api.resource.Resource"], ["java.lang.String", "boolean", "org.apache.sling.api.resource.ResourceResolver"], ["java.lang.Object", "java.lang.Object"], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String"], ["java.lang.String", "boolean", "org.apache.sling.api.resource.ResourceResolver"], [""], ["java.lang.String"], [""]], "passed_comments": [{"com.adobe.acs.commons.wcm.AuthorUIHelper.generateEditAssetLink": "Generates a URL to edit a DAM asset in AEM author environment. Will return a url using either the classic or touch UI url based on configuration properties. Defaults to Touch UI ('/assetdetails.html')"}, {"com.adobe.acs.commons.wcm.AuthorUIHelper.generateEditPageLink": "Generates a URL to edit a page in AEM author environment. Will return a url using either the classic or touch UI url based on configuration properties. Defaults to Touch UI ('/editor.html') appends the '.html' extension to the returned URL String"}]}, {"index": "116", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/email/process/impl/SendTemplatedEmailProcess.java", "methodName": "com.adobe.acs.commons.email.process.impl.SendTemplatedEmailProcess.buildArguments", "methodParameterType": "MetaDataMap#", "methodParameterName": "metaData#", "methodBody": "private String[] buildArguments(MetaDataMap metaData) {\n        // the 'old' way, ensures backward compatibility\n        String processArgs = metaData.get(Arguments.PROCESS_ARGS.getArgumentName(), String.class);\n        if (processArgs != null && !processArgs.equals(\"\")) {\n            return processArgs.split(\",\");\n        } else {\n            return new String[0];\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@param metaData", "call_func_name": ["com.day.cq.workflow.metadata.MetaDataMap.get", "java.lang.String.equals", "java.lang.String.split"], "call_func_parameter": [["java.lang.String", "java.lang.Class"], ["java.lang.Object"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "117", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/email/process/impl/SendTemplatedEmailProcess.java", "methodName": "com.adobe.acs.commons.email.process.impl.SendTemplatedEmailProcess.getSimpleDateFormat", "methodParameterType": "String#", "methodParameterName": "formatString#", "methodBody": "private SimpleDateFormat getSimpleDateFormat(String formatString) {\n        SimpleDateFormat defaultFormat = new SimpleDateFormat(\"yyyy-MM-dd hh:mm a\");\n\n        if (formatString == null || formatString.isEmpty()) {\n            return defaultFormat;\n        }\n\n        try {\n            return new SimpleDateFormat(formatString);\n        } catch (IllegalArgumentException e) {\n            // invalid pattern\n            return defaultFormat;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(TryStatement(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Set the format to be used for displaying dates in the email Defaults to format of 'yyyy-MM-dd hh:mm a'", "call_func_name": ["java.text.SimpleDateFormat.<init>", "java.lang.String.isEmpty"], "call_func_parameter": [["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "118", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/email/EmailService.java", "methodName": "com.adobe.acs.commons.email.EmailService.sendEmail", "methodParameterType": "String#Map<String,String>#InternetAddress#", "methodParameterName": "templatePath#emailParams#recipients#", "methodBody": "List<InternetAddress> sendEmail(String templatePath, Map<String, String> emailParams,\n        InternetAddress... recipients);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Construct an email based on a template and send it to one or more recipients.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "119", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/email/EmailService.java", "methodName": "com.adobe.acs.commons.email.EmailService.sendEmail", "methodParameterType": "String#Map<String,String>#String#", "methodParameterName": "templatePath#emailParams#recipients#", "methodBody": "List<String> sendEmail(String templatePath, Map<String, String> emailParams, String... recipients);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Construct an email based on a template and send it to one or more recipients.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "120", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/email/EmailService.java", "methodName": "com.adobe.acs.commons.email.EmailService.sendEmail", "methodParameterType": "String#Map<String,String>#Map<String,DataSource>#InternetAddress#", "methodParameterName": "templatePath#emailParams#attachments#recipients#", "methodBody": "List<InternetAddress> sendEmail(String templatePath, Map<String, String> emailParams, Map<String, DataSource> attachments, InternetAddress... recipients);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Construct an email with attachments based on a template and send it to one or more recipients.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "121", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/email/EmailService.java", "methodName": "com.adobe.acs.commons.email.EmailService.sendEmail", "methodParameterType": "String#Map<String,String>#Map<String,DataSource>#String#", "methodParameterName": "templatePath#emailParams#attachments#recipients#", "methodBody": "List<String> sendEmail(String templatePath, Map<String, String> emailParams, Map<String, DataSource> attachments, String... recipients);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Construct an email with attachments based on a template and send it to one or more recipients.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "122", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/xss/XSSFunctions.java", "methodName": "com.adobe.acs.commons.xss.XSSFunctions.encodeForHTML", "methodParameterType": "XSSAPI#String#", "methodParameterName": "xssAPI#source#", "methodBody": "public static CharSequence encodeForHTML(XSSAPI xssAPI, String source) {\n        return xssAPI.encodeForHTML(source);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Encode a string for HTML.", "call_func_name": ["com.adobe.granite.xss.XSSAPI.encodeForHTML"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "123", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/xss/XSSFunctions.java", "methodName": "com.adobe.acs.commons.xss.XSSFunctions.encodeForHTML", "methodParameterType": "com.adobe.granite.xss.XSSAPI#String#", "methodParameterName": "xssAPI#source#", "methodBody": "@Deprecated\n    public static CharSequence encodeForHTML(com.adobe.granite.xss.XSSAPI xssAPI, String source) {\n        return xssAPI.encodeForHTML(source);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated replaced by {@link #encodeForHTML(XSSAPI,String)}Encode a string for HTML.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "124", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/xss/XSSFunctions.java", "methodName": "com.adobe.acs.commons.xss.XSSFunctions.encodeForHTMLAttr", "methodParameterType": "XSSAPI#String#", "methodParameterName": "xssAPI#source#", "methodBody": "public static CharSequence encodeForHTMLAttr(XSSAPI xssAPI, String source) {\n        return xssAPI.encodeForHTMLAttr(source);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Encode a string for an HTML attribute.", "call_func_name": ["com.adobe.granite.xss.XSSAPI.encodeForHTMLAttr"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "125", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/xss/XSSFunctions.java", "methodName": "com.adobe.acs.commons.xss.XSSFunctions.encodeForHTMLAttr", "methodParameterType": "com.adobe.granite.xss.XSSAPI#String#", "methodParameterName": "xssAPI#source#", "methodBody": "@Deprecated\n    public static CharSequence encodeForHTMLAttr(com.adobe.granite.xss.XSSAPI xssAPI, String source) {\n        return xssAPI.encodeForHTMLAttr(source);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated replaced by {@link #encodeForHTMLAttr(XSSAPI,String)}Encode a string for an HTML attribute.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "126", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/xss/XSSFunctions.java", "methodName": "com.adobe.acs.commons.xss.XSSFunctions.encodeForJSString", "methodParameterType": "XSSAPI#String#", "methodParameterName": "xssAPI#source#", "methodBody": "public static CharSequence encodeForJSString(XSSAPI xssAPI, String source) {\n        return xssAPI.encodeForJSString(source);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Encode a string for an JavaScript string.", "call_func_name": ["com.adobe.granite.xss.XSSAPI.encodeForJSString"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "127", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/xss/XSSFunctions.java", "methodName": "com.adobe.acs.commons.xss.XSSFunctions.encodeForJSString", "methodParameterType": "com.adobe.granite.xss.XSSAPI#String#", "methodParameterName": "xssAPI#source#", "methodBody": "@Deprecated\n    public static CharSequence encodeForJSString(com.adobe.granite.xss.XSSAPI xssAPI, String source) {\n        return xssAPI.encodeForJSString(source);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated replaced by {@link #encodeForJSString(XSSAPI,String)}Encode a string for an JavaScript string.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "128", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/xss/XSSFunctions.java", "methodName": "com.adobe.acs.commons.xss.XSSFunctions.filterHTML", "methodParameterType": "XSSAPI#String#", "methodParameterName": "xssAPI#source#", "methodBody": "public static CharSequence filterHTML(XSSAPI xssAPI, String source) {\n        return xssAPI.filterHTML(source);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Filter a string for HTML.", "call_func_name": ["com.adobe.granite.xss.XSSAPI.filterHTML"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "129", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/xss/XSSFunctions.java", "methodName": "com.adobe.acs.commons.xss.XSSFunctions.filterHTML", "methodParameterType": "com.adobe.granite.xss.XSSAPI#String#", "methodParameterName": "xssAPI#source#", "methodBody": "@Deprecated\n    public static CharSequence filterHTML(com.adobe.granite.xss.XSSAPI xssAPI, String source) {\n        return xssAPI.filterHTML(source);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated replaced by {@link #filterHTML(XSSAPI,String)}Filter a string for HTML.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "130", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/xss/XSSFunctions.java", "methodName": "com.adobe.acs.commons.xss.XSSFunctions.getValidHref", "methodParameterType": "XSSAPI#String#", "methodParameterName": "xssAPI#source#", "methodBody": "public static CharSequence getValidHref(XSSAPI xssAPI, String source) {\n        return xssAPI.getValidHref(source);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get a valid href. This does not use the standard XSS API due to a bug impacting CQ 5.6.1 (and earlier). Internal bug reference: GRANITE-4193", "call_func_name": ["com.adobe.granite.xss.XSSAPI.getValidHref"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "131", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/xss/XSSFunctions.java", "methodName": "com.adobe.acs.commons.xss.XSSFunctions.getValidHref", "methodParameterType": "com.adobe.granite.xss.XSSAPI#String#", "methodParameterName": "xssAPI#source#", "methodBody": "@Deprecated\n    public static CharSequence getValidHref(com.adobe.granite.xss.XSSAPI xssAPI, String source) {\n        return xssAPI.getValidHref(source);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated replaced by {@link #getValidHref(XSSAPI,String)}Get a valid href. This does not use the standard XSS API due to a bug impacting CQ 5.6.1 (and earlier). Internal bug reference: GRANITE-4193", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "132", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/xss/XSSFunctions.java", "methodName": "com.adobe.acs.commons.xss.XSSFunctions.getValidDimension", "methodParameterType": "XSSAPI#String#String#", "methodParameterName": "xssAPI#dimension#defaultValue#", "methodBody": "public static String getValidDimension(XSSAPI xssAPI, String dimension, String defaultValue) {\n        return xssAPI.getValidDimension(dimension, defaultValue);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Validate a string which should contain a dimension, returning a default value if the source is empty, can't be parsed, or contains XSS risks.  Allows integer dimensions and the keyword \"auto\".", "call_func_name": ["com.adobe.granite.xss.XSSAPI.getValidDimension"], "call_func_parameter": [["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "133", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/xss/XSSFunctions.java", "methodName": "com.adobe.acs.commons.xss.XSSFunctions.getValidDimension", "methodParameterType": "com.adobe.granite.xss.XSSAPI#String#String#", "methodParameterName": "xssAPI#dimension#defaultValue#", "methodBody": "@Deprecated\n    public static String getValidDimension(com.adobe.granite.xss.XSSAPI xssAPI, String dimension, String defaultValue) {\n        return xssAPI.getValidDimension(dimension, defaultValue);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated replaced by {@link #getValidDimension(XSSAPI,String,String)}Validate a string which should contain a dimension, returning a default value if the source is empty, can't be parsed, or contains XSS risks.  Allows integer dimensions and the keyword \"auto\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "134", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/xss/XSSFunctions.java", "methodName": "com.adobe.acs.commons.xss.XSSFunctions.getValidInteger", "methodParameterType": "XSSAPI#String#int#", "methodParameterName": "xssAPI#integer#defaultValue#", "methodBody": "public static Integer getValidInteger(XSSAPI xssAPI, String integer, int defaultValue) {\n        return xssAPI.getValidInteger(integer, defaultValue);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Validate a string which should contain an integer, returning a default value if the source is empty, can't be parsed, or contains XSS risks.", "call_func_name": ["com.adobe.granite.xss.XSSAPI.getValidInteger"], "call_func_parameter": [["java.lang.String", "int"]], "passed_comments": "/"}, {"index": "135", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/xss/XSSFunctions.java", "methodName": "com.adobe.acs.commons.xss.XSSFunctions.getValidInteger", "methodParameterType": "com.adobe.granite.xss.XSSAPI#String#int#", "methodParameterName": "xssAPI#integer#defaultValue#", "methodBody": "@Deprecated\n    public static Integer getValidInteger(com.adobe.granite.xss.XSSAPI xssAPI, String integer, int defaultValue) {\n        return xssAPI.getValidInteger(integer, defaultValue);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated replaced by {@link #getValidInteger(XSSAPI,String,int)}Validate a string which should contain an integer, returning a default value if the source is empty, can't be parsed, or contains XSS risks.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "136", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/xss/XSSFunctions.java", "methodName": "com.adobe.acs.commons.xss.XSSFunctions.getValidJSToken", "methodParameterType": "XSSAPI#String#String#", "methodParameterName": "xssAPI#token#defaultValue#", "methodBody": "public static String getValidJSToken(XSSAPI xssAPI, String token, String defaultValue) {\n        return xssAPI.getValidJSToken(token, defaultValue);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Validate a Javascript token.  The value must be either a single identifier, a literal number, or a literal string.", "call_func_name": ["com.adobe.granite.xss.XSSAPI.getValidJSToken"], "call_func_parameter": [["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "137", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/xss/XSSFunctions.java", "methodName": "com.adobe.acs.commons.xss.XSSFunctions.getValidJSToken", "methodParameterType": "com.adobe.granite.xss.XSSAPI#String#String#", "methodParameterName": "xssAPI#token#defaultValue#", "methodBody": "@Deprecated\n    public static String getValidJSToken(com.adobe.granite.xss.XSSAPI xssAPI, String token, String defaultValue) {\n        return xssAPI.getValidJSToken(token, defaultValue);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated replaced by {@link #getValidJSToken(XSSAPI,String,String)}Validate a Javascript token.  The value must be either a single identifier, a literal number, or a literal string.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "138", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/throttling/ThrottlingState.java", "methodName": "com.adobe.acs.commons.throttling.ThrottlingState.evaluateThrottling", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected synchronized ThrottlingDecision evaluateThrottling() {\n\n        ThrottlingDecision result = null;\n        purgeExpiredEntries();\n        resize(loadEstimator.getMaxRequestPerMinute());\n\n        int idx = currentIndex.get();\n        if (isSlotEmpty(idx)) {\n            // 1 minute already passed, reuse that slot\n\n            timestamps[idx] = clock.instant();\n            currentIndex.updateAndGet(index -> (index == this.timestamps.length - 1) ? 0 : index+1);\n            result = new ThrottlingDecision(ThrottlingDecision.State.NOTHROTTLE);\n\n        } else {\n            // time has not yet passed, we need some throttling\n\n            long diff = timestamps[idx].toEpochMilli() + ONE_MINUTE - clock.instant().toEpochMilli();\n            result = new ThrottlingDecision(ThrottlingDecision.State.THROTTLE).withDelay(diff)\n                    .withMessage(\"throttling required (at least \" + diff + \" ms)\");\n\n        }\n        return result;\n\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#NumberLiteral#InfixExpression#InfixExpression#ParenthesizedExpression#NumberLiteral#SimpleName#NumberLiteral#InfixExpression#ConditionalExpression#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(InfixExpression(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ConditionalExpression)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)Assignment)ExpressionStatement)Block(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(InfixExpression(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return", "call_func_name": ["com.adobe.acs.commons.throttling.ThrottlingState.purgeExpiredEntries", "com.adobe.acs.commons.throttling.LoadEstimator.getMaxRequestPerMinute", "com.adobe.acs.commons.throttling.ThrottlingState.resize", "java.util.concurrent.atomic.AtomicInteger.get", "com.adobe.acs.commons.throttling.ThrottlingState.isSlotEmpty", "java.time.Clock.instant", "java.util.function.IntUnaryOperator.applyAsInt", "java.util.concurrent.atomic.AtomicInteger.updateAndGet", "java.time.Instant.toEpochMilli", "com.adobe.acs.commons.throttling.ThrottlingDecision.withDelay", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.adobe.acs.commons.throttling.ThrottlingDecision.withMessage"], "call_func_parameter": [[""], [""], ["int"], [""], ["int"], [""], ["com.adobe.acs.commons.throttling.ThrottlingState"], ["java.util.function.IntUnaryOperator"], [""], ["long"], [""], ["java.lang.String"], ["long"], [""], ["java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.throttling.ThrottlingState.purgeExpiredEntries": "cleanup the timestamps array and replace all expired entries with Instant.EPOCH;"}, {"com.adobe.acs.commons.throttling.ThrottlingState.resize": "resize the queue"}]}, {"index": "139", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/throttling/ThrottlingState.java", "methodName": "com.adobe.acs.commons.throttling.ThrottlingState.purgeExpiredEntries", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private int purgeExpiredEntries() {\n        int result = 0;\n\n        // the array is expected to be small; therefor we can iterate through all\n        // entries without a huge performance impact (although it would be possible\n        // to reduce the number of array accesses by a more efficient and complex\n        // algorithm\n        for (int i = 0; i < timestamps.length; i++) {\n            long now = clock.instant().toEpochMilli();\n            if (now - timestamps[i].toEpochMilli() > ONE_MINUTE) {\n                timestamps[i] = Instant.EPOCH;\n                result++;\n            }\n        }\n        return result;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#InfixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#IfStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "cleanup the timestamps array and replace all expired entries with Instant.EPOCH;", "call_func_name": ["java.time.Clock.instant", "java.time.Instant.toEpochMilli"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "140", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/throttling/ThrottlingState.java", "methodName": "com.adobe.acs.commons.throttling.ThrottlingState.resize", "methodParameterType": "int#", "methodParameterName": "newSize#", "methodBody": "protected int resize(int newSize) {\n\n        if (newSize != timestamps.length) {\n\n            LOG.debug(\"Resizing throttling queue from {} to {}\", timestamps.length, newSize);\n            Instant[] newQueue = new Instant[newSize];\n            int result = 0;\n\n            if (timestamps.length - newSize > 0) { // queue got smaller\n                result = reduceSize(newQueue);\n\n            } else { // queue got larger, just resize the timestamps array and ignore the purge till\n                // next cycle\n                result = increaseSize(newQueue);\n            }\n\n            timestamps = newQueue;\n\n            return result;\n\n        } else {\n            // Do not resize\n            LOG.debug(\"No resizing required\");\n\n        }\n\n        return 0;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#NumberLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "resize the queue", "call_func_name": ["java.lang.Integer.valueOf", "org.slf4j.Logger.debug", "com.adobe.acs.commons.throttling.ThrottlingState.reduceSize", "com.adobe.acs.commons.throttling.ThrottlingState.increaseSize", "org.slf4j.Logger.debug"], "call_func_parameter": [["int"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.time.Instant[]"], ["java.time.Instant[]"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "141", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/keys/CacheKey.java", "methodName": "com.adobe.acs.commons.httpcache.keys.CacheKey.getUri", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getUri();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get URI.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "142", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/keys/CacheKey.java", "methodName": "com.adobe.acs.commons.httpcache.keys.CacheKey.getHierarchyResourcePath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getHierarchyResourcePath();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets the Hierarchy Resource Path (the resourcePath above jcr:content). This is used for invalidations.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "143", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/keys/CacheKey.java", "methodName": "com.adobe.acs.commons.httpcache.keys.CacheKey.getExpiryForCreation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default long getExpiryForCreation(){\n        return -1L;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#NumberLiteral#PrefixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the expiry time for the cache entry creation. If set, it will override the default TTL for entries to expire on cache creation. Value is in miliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "144", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/keys/CacheKey.java", "methodName": "com.adobe.acs.commons.httpcache.keys.CacheKey.getExpiryForAccess", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default long getExpiryForAccess(){\n        return -1L;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#NumberLiteral#PrefixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the expiry time for the cache entry access / read. If set, it will refresh the expiry time when an entry is read with given value. Value is in miliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "145", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/keys/CacheKey.java", "methodName": "com.adobe.acs.commons.httpcache.keys.CacheKey.getExpiryForUpdate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default long getExpiryForUpdate(){\n        return -1L;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#NumberLiteral#PrefixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the expiry time for the cache entry updated. If set, it will refresh the expiry time when an entry is updated with given value. Value is in miliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "146", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/keys/CacheKey.java", "methodName": "com.adobe.acs.commons.httpcache.keys.CacheKey.isInvalidatedBy", "methodParameterType": "CacheKey#", "methodParameterName": "cacheKey#", "methodBody": "boolean isInvalidatedBy(CacheKey cacheKey);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Determines if the @{param cacheKey} will invalidate this cache key entry.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "147", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/keys/CacheKey.java", "methodName": "com.adobe.acs.commons.httpcache.keys.CacheKey.hashCode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int hashCode();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The hashCode for the cache key.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "148", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/keys/CacheKey.java", "methodName": "com.adobe.acs.commons.httpcache.keys.CacheKey.toString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String toString();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The useful string representation of this cache key. This should be generally unique as it drives display in the mbean.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "149", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/keys/CacheKey.java", "methodName": "com.adobe.acs.commons.httpcache.keys.CacheKey.equals", "methodParameterType": "Object#", "methodParameterName": "o#", "methodBody": "boolean equals(Object o);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "The equals method used to match up request-derived cache keys with keys in the httpcache.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "150", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/keys/CacheKeyFactory.java", "methodName": "com.adobe.acs.commons.httpcache.keys.CacheKeyFactory.build", "methodParameterType": "SlingHttpServletRequest#HttpCacheConfig#", "methodParameterName": "request#cacheConfig#", "methodBody": "CacheKey build(SlingHttpServletRequest request, HttpCacheConfig cacheConfig) throws HttpCacheKeyCreationException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Build a cache key.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "151", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/keys/CacheKeyFactory.java", "methodName": "com.adobe.acs.commons.httpcache.keys.CacheKeyFactory.build", "methodParameterType": "String#HttpCacheConfig#", "methodParameterName": "resourcePath#cacheConfig#", "methodBody": "CacheKey build(String resourcePath, HttpCacheConfig cacheConfig) throws HttpCacheKeyCreationException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Build a cache key.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "152", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/keys/CacheKeyFactory.java", "methodName": "com.adobe.acs.commons.httpcache.keys.CacheKeyFactory.doesKeyMatchConfig", "methodParameterType": "CacheKey#HttpCacheConfig#", "methodParameterName": "key#cacheConfig#", "methodBody": "boolean doesKeyMatchConfig(CacheKey key, HttpCacheConfig cacheConfig) throws HttpCacheKeyCreationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Does the Cache Key matches the Http Cache Config.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "153", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/mem/impl/MemCachePersistenceObject.java", "methodName": "com.adobe.acs.commons.httpcache.store.mem.impl.MemCachePersistenceObject.MemCachePersistenceObject", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public MemCachePersistenceObject() {\n        //empty constructor\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Create <code>MemCachePersistenceObject</code>. Use <code>buildForCaching</code> method to initialize parameters.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "154", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/mem/impl/MemCachePersistenceObject.java", "methodName": "com.adobe.acs.commons.httpcache.store.mem.impl.MemCachePersistenceObject.buildForCaching", "methodParameterType": "int#String#String#Map<String,List<String>>#InputStream#HttpCacheServletResponseWrapper.ResponseWriteMethod#", "methodParameterName": "status#charEncoding#contentType#headers#dataInputStream#writeMethod#", "methodBody": "public MemCachePersistenceObject buildForCaching(int status, String charEncoding, String contentType, Map<String,\n            List<String>> headers, InputStream dataInputStream, HttpCacheServletResponseWrapper.ResponseWriteMethod writeMethod) throws HttpCacheDataStreamException {\n\n        this.status = status;\n        this.charEncoding = charEncoding;\n        this.contentType = contentType;\n        this.writeMethod = writeMethod;\n\n        // Iterate headers and take a copy.\n        this.headers = HashMultimap.create();\n        for (Map.Entry<String, List<String>> entry : headers.entrySet()) {\n            for (String value : entry.getValue()) {\n                if (!\"Sling-Tracer-Protocol-Version\".equals(entry.getKey()) && !\"Sling-Tracer-Request-Id\".equals(entry.getKey())) {\n                    // Do NOT cache Sling Tracer headers as this makes debugging difficult and confusing!\n                    this.headers.put(entry.getKey(), value);\n                }\n            }\n        }\n\n        // Read input stream and place it in a byte array.\n        try {\n            this.bytes = IOUtils.toByteArray(dataInputStream);\n        } catch (IOException e) {\n            throw new HttpCacheDataStreamException(\"Unable to get byte array out of stream\", e);\n        }\n\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#EnhancedForStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)EnhancedForStatement(TryStatement(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Construct a Mem cache value suitable for caching. This constructor takes deep copy of parameters making the object suitable for caching avoiding any memory leaks.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "155", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/mem/impl/MemCachePersistenceObject.java", "methodName": "com.adobe.acs.commons.httpcache.store.mem.impl.MemCachePersistenceObject.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getStatus() {\n        return status;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get response status", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "156", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/mem/impl/MemCachePersistenceObject.java", "methodName": "com.adobe.acs.commons.httpcache.store.mem.impl.MemCachePersistenceObject.getCharEncoding", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCharEncoding() {\n        return charEncoding;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get char encoding.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "157", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/mem/impl/MemCachePersistenceObject.java", "methodName": "com.adobe.acs.commons.httpcache.store.mem.impl.MemCachePersistenceObject.getContentType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContentType() {\n        return contentType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get content type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "158", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/mem/impl/MemCachePersistenceObject.java", "methodName": "com.adobe.acs.commons.httpcache.store.mem.impl.MemCachePersistenceObject.getHeaders", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, List<String>> getHeaders() {\n        Map<String, List<String>> map = new HashMap<String, List<String>>();\n\n        // Convert com.google.common.collect.AbstractMapBasedMultimap$WrappedSet to List<String> value to avoid cast\n        // exception\n        for (Map.Entry<String, Collection<String>> entry : Multimaps.asMap(headers).entrySet()) {\n            map.put(entry.getKey(), new ArrayList<String>(entry.getValue()));\n        }\n\n        return map;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the header in multimap format.", "call_func_name": ["java.util.HashMap.<init>", "acscommons.com.google.common.collect.Multimaps.asMap", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.ArrayList.<init>", "java.util.Map.put"], "call_func_parameter": [[""], ["acscommons.com.google.common.collect.Multimap"], [""], [""], [""], [""], ["java.util.Collection"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "159", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/mem/impl/MemCachePersistenceObject.java", "methodName": "com.adobe.acs.commons.httpcache.store.mem.impl.MemCachePersistenceObject.getBytes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public byte[] getBytes() {\n        return bytes;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the data byte array", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "160", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/mem/impl/MemCachePersistenceObject.java", "methodName": "com.adobe.acs.commons.httpcache.store.mem.impl.MemCachePersistenceObject.incrementHitCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void incrementHitCount() {\n        count.incrementAndGet();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Increments the hit for this cache entry.", "call_func_name": ["java.util.concurrent.atomic.AtomicInteger.incrementAndGet"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "161", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/mem/impl/MemCachePersistenceObject.java", "methodName": "com.adobe.acs.commons.httpcache.store.mem.impl.MemCachePersistenceObject.getHitCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getHitCount() {\n        return count.get();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the number of times this cache entry has been requested", "call_func_name": ["java.util.concurrent.atomic.AtomicInteger.get"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "162", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/jcr/impl/writer/EntryNodeWriter.java", "methodName": "com.adobe.acs.commons.httpcache.store.jcr.impl.writer.EntryNodeWriter.write", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void write() throws RepositoryException, IOException\n    {\n        entryNode.setProperty(JCRHttpCacheStoreConstants.PN_ISCACHEENTRYNODE, true);\n\n        populateMetaData();\n        populateHeaders();\n        populateBinaryContent();\n\n        //if we the expire time is set, set it on the node\n        if(expireTimeInMilliSeconds > 0) {\n            setExpireTime();\n        }\n\n        if(!entryNode.hasProperty(JCRHttpCacheStoreConstants.PN_CACHEKEY)) {\n            populateCacheKey();\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Populate the entry node with values", "call_func_name": ["javax.jcr.Node.setProperty", "com.adobe.acs.commons.httpcache.store.jcr.impl.writer.EntryNodeWriter.populateMetaData", "com.adobe.acs.commons.httpcache.store.jcr.impl.writer.EntryNodeWriter.populateHeaders", "com.adobe.acs.commons.httpcache.store.jcr.impl.writer.EntryNodeWriter.populateBinaryContent", "com.adobe.acs.commons.httpcache.store.jcr.impl.writer.EntryNodeWriter.setExpireTime", "javax.jcr.Node.hasProperty", "com.adobe.acs.commons.httpcache.store.jcr.impl.writer.EntryNodeWriter.populateCacheKey"], "call_func_parameter": [["java.lang.String", "boolean"], [""], [""], [""], [""], ["java.lang.String"], [""]], "passed_comments": [{"com.adobe.acs.commons.httpcache.store.jcr.impl.writer.EntryNodeWriter.populateHeaders": "Save the headers into a headers node under the cache entry node."}, {"com.adobe.acs.commons.httpcache.store.jcr.impl.writer.EntryNodeWriter.populateBinaryContent": "Save the inputstream to a binary property under the cache entry node."}]}, {"index": "163", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/jcr/impl/writer/EntryNodeWriter.java", "methodName": "com.adobe.acs.commons.httpcache.store.jcr.impl.writer.EntryNodeWriter.populateBinaryContent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void populateBinaryContent() throws RepositoryException\n    {\n        final Node contents = getOrCreateByPath(entryNode, JCRHttpCacheStoreConstants.PATH_CONTENTS, JcrConstants.NT_FILE, JcrConstants.NT_FILE);\n\n        final Node jcrContent = getOrCreateByPath(contents, JcrConstants.JCR_CONTENT, JcrConstants.NT_RESOURCE, JcrConstants.NT_RESOURCE);\n        //save input stream to node\n        final Binary binary = session.getValueFactory().createBinary(cacheContent.getInputDataStream());\n        jcrContent.setProperty(JcrConstants.JCR_DATA, binary);\n        jcrContent.setProperty(JcrConstants.JCR_MIMETYPE, cacheContent.getContentType());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Save the inputstream to a binary property under the cache entry node.", "call_func_name": ["com.adobe.acs.commons.httpcache.store.jcr.impl.writer.EntryNodeWriter.getOrCreateByPath", "javax.jcr.Session.getValueFactory", "com.adobe.acs.commons.httpcache.engine.CacheContent.getInputDataStream", "javax.jcr.ValueFactory.createBinary", "javax.jcr.Node.setProperty", "com.adobe.acs.commons.httpcache.engine.CacheContent.getContentType", "javax.jcr.Node.setProperty"], "call_func_parameter": [["javax.jcr.Node", "java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["java.io.InputStream"], ["java.lang.String", "javax.jcr.Binary"], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.httpcache.engine.CacheContent.getInputDataStream": "Get input stream of response content"}, {"com.adobe.acs.commons.httpcache.engine.CacheContent.getContentType": "Get content type."}]}, {"index": "164", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/jcr/impl/writer/EntryNodeWriter.java", "methodName": "com.adobe.acs.commons.httpcache.store.jcr.impl.writer.EntryNodeWriter.populateHeaders", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void populateHeaders() throws RepositoryException\n    {\n        final Node headers = getOrCreateByPath(entryNode, JCRHttpCacheStoreConstants.PATH_HEADERS, OAK_UNSTRUCTURED, OAK_UNSTRUCTURED);\n\n        for(Iterator<Map.Entry<String, List<String>>> entryIterator = cacheContent.getHeaders().entrySet().iterator(); entryIterator.hasNext();){\n            Map.Entry<String, List<String>> entry = entryIterator.next();\n            final String key = entry.getKey();\n            final List<String> values = entry.getValue();\n            headers.setProperty(key, values.toArray(new String[values.size()]));\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Save the headers into a headers node under the cache entry node.", "call_func_name": ["com.adobe.acs.commons.httpcache.store.jcr.impl.writer.EntryNodeWriter.getOrCreateByPath", "com.adobe.acs.commons.httpcache.engine.CacheContent.getHeaders", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.List.size", "java.util.List.toArray", "javax.jcr.Node.setProperty"], "call_func_parameter": [["javax.jcr.Node", "java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], [""], [""], [""], [""], ["java.lang.Object[]"], ["java.lang.String", "java.lang.String[]"]], "passed_comments": [{"com.adobe.acs.commons.httpcache.engine.CacheContent.getHeaders": "Get headers."}]}, {"index": "165", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/HttpCacheStore.java", "methodName": "com.adobe.acs.commons.httpcache.store.HttpCacheStore.put", "methodParameterType": "CacheKey#CacheContent#", "methodParameterName": "key#content#", "methodBody": "void put(CacheKey key, CacheContent content) throws HttpCacheDataStreamException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Put an item into the cache.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "166", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/HttpCacheStore.java", "methodName": "com.adobe.acs.commons.httpcache.store.HttpCacheStore.contains", "methodParameterType": "CacheKey#", "methodParameterName": "key#", "methodBody": "boolean contains(CacheKey key);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Check if there is an entry in cache for the given key.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "167", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/HttpCacheStore.java", "methodName": "com.adobe.acs.commons.httpcache.store.HttpCacheStore.getIfPresent", "methodParameterType": "CacheKey#", "methodParameterName": "key#", "methodBody": "CacheContent getIfPresent(CacheKey key);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Get the Cache item given a key.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "168", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/HttpCacheStore.java", "methodName": "com.adobe.acs.commons.httpcache.store.HttpCacheStore.size", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "long size();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the number of entries in the cache.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "169", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/HttpCacheStore.java", "methodName": "com.adobe.acs.commons.httpcache.store.HttpCacheStore.invalidate", "methodParameterType": "CacheKey#", "methodParameterName": "key#", "methodBody": "void invalidate(CacheKey key);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invalidate the given cache key.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "170", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/HttpCacheStore.java", "methodName": "com.adobe.acs.commons.httpcache.store.HttpCacheStore.invalidate", "methodParameterType": "HttpCacheConfig#", "methodParameterName": "cacheConfig#", "methodBody": "void invalidate(HttpCacheConfig cacheConfig);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invalidate all the cached items applicable for the given cache config.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "171", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/HttpCacheStore.java", "methodName": "com.adobe.acs.commons.httpcache.store.HttpCacheStore.invalidateAll", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void invalidateAll();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Invalidate all entries in the cache.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "172", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/HttpCacheStore.java", "methodName": "com.adobe.acs.commons.httpcache.store.HttpCacheStore.createTempSink", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "TempSink createTempSink();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Create a temp sink for stashing response stream.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "173", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/HttpCacheStore.java", "methodName": "com.adobe.acs.commons.httpcache.store.HttpCacheStore.getStoreType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getStoreType();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the store type of this store.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "174", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/TempSink.java", "methodName": "com.adobe.acs.commons.httpcache.store.TempSink.createOutputStream", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "OutputStream createOutputStream() throws HttpCacheDataStreamException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Create an output stream to write to the sink.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "175", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/TempSink.java", "methodName": "com.adobe.acs.commons.httpcache.store.TempSink.createInputStream", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "InputStream createInputStream() throws HttpCacheDataStreamException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Creates an input stream to read from the sink.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "176", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/store/TempSink.java", "methodName": "com.adobe.acs.commons.httpcache.store.TempSink.length", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "long length();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the length of the sink.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "177", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/invalidator/HttpCacheInvalidationJobConsumer.java", "methodName": "com.adobe.acs.commons.httpcache.invalidator.HttpCacheInvalidationJobConsumer.invalidate", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "void invalidate(String path){\n        // Check if the path in the job is applicable for the set cache configs.\n        if (httpCacheEngine.isPathPotentialToInvalidate(path)) {\n            // Invalidate the cache.\n            try{\n                log.debug(\"invalidating {}\", path);\n                httpCacheEngine.invalidateCache(path);\n            } catch (HttpCacheException e){\n                log.debug(\"Job with the payload path - {} has invalidated the cache\", path);\n            }\n        }\n\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Invalidate the cache for the given path", "call_func_name": ["com.adobe.acs.commons.httpcache.engine.HttpCacheEngine.isPathPotentialToInvalidate", "org.slf4j.Logger.debug", "com.adobe.acs.commons.httpcache.engine.HttpCacheEngine.invalidateCache"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.Object"], ["java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.httpcache.engine.HttpCacheEngine.isPathPotentialToInvalidate": "Check if the supplied JCR repository path has the potential to invalidate cache. This can be identified based on the  {@link HttpCacheConfig}."}, {"com.adobe.acs.commons.httpcache.engine.HttpCacheEngine.invalidateCache": "Invalidate the cache for the  {@linkplain HttpCacheConfig} which isinterested in the given path. Custom cache handling rule hook  {@link com.adobe.acs.commons.httpcache.rule.HttpCacheHandlingRule#onCacheInvalidate(String)} exposed."}]}, {"index": "178", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/invalidator/HttpCacheInvalidationJobConsumer.java", "methodName": "com.adobe.acs.commons.httpcache.invalidator.HttpCacheInvalidationJobConsumer.invalidateReferences", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "void invalidateReferences(String path) {\n        try (ResourceResolver adminResolver = resolverFactory.getServiceResourceResolver(null)){\n            Collection<ReferenceSearch.Info> refs = new ReferenceSearch()\n                    .search(adminResolver, path).values();\n            for (ReferenceSearch.Info info : refs) {\n                String refPath = info.getPage().getPath();\n                invalidate(refPath);\n\n            }\n        } catch (Exception e){\n            log.debug(\"failed to invalidate references of {}\", path);\n        }\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Searches for references to the given path and invalidates them in the cache", "call_func_name": ["org.apache.sling.api.resource.ResourceResolverFactory.getServiceResourceResolver", "com.day.cq.wcm.commons.ReferenceSearch.<init>", "com.day.cq.wcm.commons.ReferenceSearch.search", "java.util.Map.values", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.day.cq.wcm.api.Page.getPath", "com.adobe.acs.commons.httpcache.invalidator.HttpCacheInvalidationJobConsumer.invalidate", "org.apache.sling.api.resource.ResourceResolver.close", "java.lang.Throwable.addSuppressed", "org.slf4j.Logger.debug"], "call_func_parameter": [["java.util.Map"], [""], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String"], [""], [""], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.Throwable"], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.httpcache.invalidator.HttpCacheInvalidationJobConsumer.invalidate": "Invalidate the cache for the given path"}]}, {"index": "179", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/util/CacheUtils.java", "methodName": "com.adobe.acs.commons.httpcache.util.CacheUtils.createTemporaryCacheFile", "methodParameterType": "CacheKey#", "methodParameterName": "cacheKey#", "methodBody": "public static File createTemporaryCacheFile(CacheKey cacheKey) throws IOException {\n        // Create a file in Java temp directory with cacheKey.toSting() as file name.\n\n        File file = File.createTempFile(cacheKey.toString(), \".tmp\");\n        if (null != file) {\n            log.debug(\"Temp file created with the name - {}\", cacheKey.toString());\n        }\n        return file;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a temporary file for taking copy of servlet response stream.", "call_func_name": ["com.adobe.acs.commons.httpcache.keys.CacheKey.toString", "java.io.File.createTempFile", "org.slf4j.Logger.debug"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.httpcache.keys.CacheKey.toString": "The useful string representation of this cache key. This should be generally unique as it drives display in the mbean."}]}, {"index": "180", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/util/UserUtils.java", "methodName": "com.adobe.acs.commons.httpcache.util.UserUtils.isAnonymous", "methodParameterType": "String#", "methodParameterName": "userId#", "methodBody": "public static boolean isAnonymous(String userId) {\n        if (USER_ID_ANONYMOUS.equals(userId)) {\n            return true;\n        }\n        return false;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if the given user id is anonymous.", "call_func_name": ["java.lang.String.equals"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "181", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/util/UserUtils.java", "methodName": "com.adobe.acs.commons.httpcache.util.UserUtils.getUserGroupMembershipNames", "methodParameterType": "User#", "methodParameterName": "user#", "methodBody": "public static List<String> getUserGroupMembershipNames(User user) throws RepositoryException {\n        List<String> groupNames = new ArrayList<String>();\n\n        Iterator<Group> groupIterator = user.memberOf();\n        while (groupIterator.hasNext()) {\n            groupNames.add(groupIterator.next().getID());\n        }\n\n        return groupNames;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)WhileStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the list of names of groups for which this user has a membership.", "call_func_name": ["java.util.ArrayList.<init>", "org.apache.jackrabbit.api.security.user.User.memberOf", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.jackrabbit.api.security.user.Group.getID", "java.util.List.add"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "182", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/rule/HttpCacheHandlingRule.java", "methodName": "com.adobe.acs.commons.httpcache.rule.HttpCacheHandlingRule.onRequestReceive", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "boolean onRequestReceive(SlingHttpServletRequest request);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Hook to supply custom behavior on  {@link com.adobe.acs.commons.httpcache.engine.HttpCacheEngine} receiving therequest.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "183", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/rule/HttpCacheHandlingRule.java", "methodName": "com.adobe.acs.commons.httpcache.rule.HttpCacheHandlingRule.onResponseCache", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#HttpCacheConfig#CacheContent#", "methodParameterName": "request#response#cacheConfig#cacheContent#", "methodBody": "boolean onResponseCache(SlingHttpServletRequest request, SlingHttpServletResponse response, HttpCacheConfig\n            cacheConfig, CacheContent cacheContent);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Hook to supply custom behavior on  {@link com.adobe.acs.commons.httpcache.engine.HttpCacheEngine} about to cache aresponse.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "184", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/rule/HttpCacheHandlingRule.java", "methodName": "com.adobe.acs.commons.httpcache.rule.HttpCacheHandlingRule.onCacheDeliver", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#HttpCacheConfig#CacheContent#", "methodParameterName": "request#response#cacheConfig#cacheContent#", "methodBody": "boolean onCacheDeliver(SlingHttpServletRequest request, SlingHttpServletResponse response, HttpCacheConfig\n            cacheConfig, CacheContent cacheContent);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Hook to supply custom behavior on  {@link com.adobe.acs.commons.httpcache.engine.HttpCacheEngine} delivering cachecontent after being read from cache store.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "185", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/rule/HttpCacheHandlingRule.java", "methodName": "com.adobe.acs.commons.httpcache.rule.HttpCacheHandlingRule.onCacheInvalidate", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "boolean onCacheInvalidate(String path);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Hook to supply custom behavior on  {@link com.adobe.acs.commons.httpcache.engine.HttpCacheEngine} invalidatingcache for the changes in the given JCR repository path.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "186", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/HttpCacheConfigExtension.java", "methodName": "com.adobe.acs.commons.httpcache.config.HttpCacheConfigExtension.accepts", "methodParameterType": "SlingHttpServletRequest#HttpCacheConfig#", "methodParameterName": "request#cacheConfig#", "methodBody": "boolean accepts(SlingHttpServletRequest request, HttpCacheConfig cacheConfig) throws HttpCacheRepositoryAccessException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Examine if this extension accepts the request. <p> Implementation of <code>HttpCacheConfig.accept (SlingHttpServletRequest)</code> method invokes this to check if the given cache config custom attributes matches with the given request.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "187", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/HttpCacheConfig.java", "methodName": "com.adobe.acs.commons.httpcache.config.HttpCacheConfig.getCacheStoreName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getCacheStoreName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Name of the configured cache store.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "188", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/HttpCacheConfig.java", "methodName": "com.adobe.acs.commons.httpcache.config.HttpCacheConfig.getAuthenticationRequirement", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getAuthenticationRequirement();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the authentication requirement for request set for this config.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "189", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/HttpCacheConfig.java", "methodName": "com.adobe.acs.commons.httpcache.config.HttpCacheConfig.getRequestUriPatterns", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<Pattern> getRequestUriPatterns();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the configured list of whitelisted request URIs.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "190", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/HttpCacheConfig.java", "methodName": "com.adobe.acs.commons.httpcache.config.HttpCacheConfig.getBlacklistedRequestUriPatterns", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<Pattern> getBlacklistedRequestUriPatterns();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the configured list of blacklisted request URIs.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "191", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/HttpCacheConfig.java", "methodName": "com.adobe.acs.commons.httpcache.config.HttpCacheConfig.getJCRInvalidationPathPatterns", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<Pattern> getJCRInvalidationPathPatterns();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the configured list of JCR paths that could unvalidate this config.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "192", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/HttpCacheConfig.java", "methodName": "com.adobe.acs.commons.httpcache.config.HttpCacheConfig.getExcludedResponseHeaderPatterns", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default List<Pattern> getExcludedResponseHeaderPatterns() {\n        return Collections.emptyList();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get a list of headers (as regex pattern) that should NOT be put in the cached response, to be served to the output.", "call_func_name": ["java.util.Collections.emptyList"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "193", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/HttpCacheConfig.java", "methodName": "com.adobe.acs.commons.httpcache.config.HttpCacheConfig.getExcludedCookieKeys", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default List<String> getExcludedCookieKeys() {\n        return Collections.emptyList();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get a list of excluded cookie keys (simple string) of cookies that should NOT be put in the cached response, to be served to the output. This is useful for example with systems that put a login cookie in each response.", "call_func_name": ["java.util.Collections.emptyList"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "194", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/HttpCacheConfig.java", "methodName": "com.adobe.acs.commons.httpcache.config.HttpCacheConfig.accepts", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "boolean accepts(SlingHttpServletRequest request) throws HttpCacheRepositoryAccessException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Determine if this cache config is applicable for the given request. Calls <code>HttpCacheConfigExtension .accept()</code> for providing share of control to the custom code.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "195", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/HttpCacheConfig.java", "methodName": "com.adobe.acs.commons.httpcache.config.HttpCacheConfig.isValid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isValid();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return true if this config is considered valid and processable by the HttpCacheEngine.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "196", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/HttpCacheConfig.java", "methodName": "com.adobe.acs.commons.httpcache.config.HttpCacheConfig.buildCacheKey", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "CacheKey buildCacheKey(SlingHttpServletRequest request) throws HttpCacheKeyCreationException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Creates the CacheKey object using the CacheKeyFactory associated with this HttpCacheConfig factory instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "197", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/HttpCacheConfig.java", "methodName": "com.adobe.acs.commons.httpcache.config.HttpCacheConfig.buildCacheKey", "methodParameterType": "String#", "methodParameterName": "resourcePath#", "methodBody": "CacheKey buildCacheKey(String resourcePath) throws HttpCacheKeyCreationException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Creates the CacheKey object using the CacheKeyFactory associated with this HttpCacheConfig factory instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "198", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/HttpCacheConfig.java", "methodName": "com.adobe.acs.commons.httpcache.config.HttpCacheConfig.canInvalidate", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "boolean canInvalidate(String path);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Determines if a JCR path is a candidate for invalidating this cache.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "199", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/HttpCacheConfig.java", "methodName": "com.adobe.acs.commons.httpcache.config.HttpCacheConfig.knows", "methodParameterType": "CacheKey#", "methodParameterName": "key#", "methodBody": "boolean knows(CacheKey key) throws HttpCacheKeyCreationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns true if the key is generated using this cache config.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "200", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/HttpCacheConfig.java", "methodName": "com.adobe.acs.commons.httpcache.config.HttpCacheConfig.getOrder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getOrder();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets the order the HttpCacheConfig should be executed in.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "201", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/HttpCacheConfig.java", "methodName": "com.adobe.acs.commons.httpcache.config.HttpCacheConfig.acceptsRule", "methodParameterType": "String#", "methodParameterName": "servicePid#", "methodBody": "boolean acceptsRule(String servicePid);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Check if the cache config accepts the service pid of the cache handling rule.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "202", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/HttpCacheConfig.java", "methodName": "com.adobe.acs.commons.httpcache.config.HttpCacheConfig.getFilterScope", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "FilterScope getFilterScope();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the filter scope this HttpCacheConfig should involve itself in.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "203", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/HttpCacheConfig.java", "methodName": "com.adobe.acs.commons.httpcache.config.HttpCacheConfig.getExpiryOnCreate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default long getExpiryOnCreate() {\n        return -1L;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#NumberLiteral#PrefixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a custom expiry for this config in miliseconds. -1 means the entry will never expire itself. 0 means the expiry is not set, and the default expiry will be used. 1 or above is the expiry for entries produced by this config .", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "204", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/HttpCacheConfig.java", "methodName": "com.adobe.acs.commons.httpcache.config.HttpCacheConfig.getExpiryForAccess", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default long getExpiryForAccess() {\n        return -1L;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#NumberLiteral#PrefixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the expiry time for the cache entry access / read. If set, it will refresh the expiry time when an entry is read with given value. Value is in miliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "205", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/HttpCacheConfig.java", "methodName": "com.adobe.acs.commons.httpcache.config.HttpCacheConfig.getExpiryForUpdate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default long getExpiryForUpdate() {\n        return -1L;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#NumberLiteral#PrefixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the expiry time for the cache entry updated. If set, it will refresh the expiry time when an entry is updated with given value. Value is in miliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "206", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/impl/HttpCacheConfigImpl.java", "methodName": "com.adobe.acs.commons.httpcache.config.impl.HttpCacheConfigImpl.compileToPatterns", "methodParameterType": "List<String>#", "methodParameterName": "regexes#", "methodBody": "private List<Pattern> compileToPatterns(final List<String> regexes) {\n        final List<Pattern> patterns = new ArrayList<Pattern>();\n\n        for (String regex : regexes) {\n            if (StringUtils.isNotBlank(regex)) {\n                patterns.add(Pattern.compile(regex));\n            }\n        }\n\n        return patterns;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts an array of Regex strings into compiled Patterns.", "call_func_name": ["java.util.ArrayList.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.commons.lang.StringUtils.isNotBlank", "java.util.regex.Pattern.compile", "java.util.List.add"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "207", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/impl/HttpCacheConfigImpl.java", "methodName": "com.adobe.acs.commons.httpcache.config.impl.HttpCacheConfigImpl.matches", "methodParameterType": "List<Pattern>#String#", "methodParameterName": "patterns#data#", "methodBody": "private boolean matches(List<Pattern> patterns, String data) {\n        for (Pattern pattern : patterns) {\n            final Matcher matcher = pattern.matcher(data);\n            if (matcher.matches()) {\n                return true;\n            }\n        }\n\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Matching the given data with the set of compiled patterns.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches"], "call_func_parameter": [[""], [""], [""], ["java.lang.CharSequence"], [""]], "passed_comments": "/"}, {"index": "208", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/impl/keys/KeyValueCacheKey.java", "methodName": "com.adobe.acs.commons.httpcache.config.impl.keys.KeyValueCacheKey.writeObject", "methodParameterType": "ObjectOutputStream#", "methodParameterName": "o#", "methodBody": "private void writeObject(ObjectOutputStream o) throws IOException  {\n        parentWriteObject(o);\n        o.writeUTF(cacheKeyId);\n        o.writeObject(new HashMap<>(allowedKeyValues));\n        o.writeObject(new HashMap<>(actualKeyValues));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "For Serialization", "call_func_name": ["com.adobe.acs.commons.httpcache.config.impl.keys.KeyValueCacheKey.parentWriteObject", "java.io.ObjectOutputStream.writeUTF", "java.util.HashMap.<init>", "java.io.ObjectOutputStream.writeObject"], "call_func_parameter": [["java.io.ObjectOutputStream"], ["java.lang.String"], ["java.util.Map"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "209", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/impl/keys/KeyValueCacheKey.java", "methodName": "com.adobe.acs.commons.httpcache.config.impl.keys.KeyValueCacheKey.readObject", "methodParameterType": "ObjectInputStream#", "methodParameterName": "o#", "methodBody": "private void readObject(ObjectInputStream o) throws IOException, ClassNotFoundException {\n        parentReadObject(o);\n        cacheKeyId = o.readUTF();\n        allowedKeyValues = ImmutableMap.copyOf((Map<String, String[]>) o.readObject());\n        actualKeyValues = ImmutableMap.copyOf(((Map<String,String>) o.readObject()));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#Dimension#ArrayType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#CastExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#CastExpression#ParenthesizedExpression#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ParenthesizedExpression)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "For De-serialization", "call_func_name": ["com.adobe.acs.commons.httpcache.config.impl.keys.KeyValueCacheKey.parentReadObject", "java.io.ObjectInputStream.readUTF", "java.io.ObjectInputStream.readObject", "acscommons.com.google.common.collect.ImmutableMap.copyOf"], "call_func_parameter": [["java.io.ObjectInputStream"], [""], [""], ["java.util.Map"]], "passed_comments": "/"}, {"index": "210", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/impl/keys/ResourcePathCacheKey.java", "methodName": "com.adobe.acs.commons.httpcache.config.impl.keys.ResourcePathCacheKey.writeObject", "methodParameterType": "ObjectOutputStream#", "methodParameterName": "o#", "methodBody": "private void writeObject(ObjectOutputStream o) throws IOException {\n        parentWriteObject(o);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "For Serialization", "call_func_name": ["com.adobe.acs.commons.httpcache.config.impl.keys.ResourcePathCacheKey.parentWriteObject"], "call_func_parameter": [["java.io.ObjectOutputStream"]], "passed_comments": "/"}, {"index": "211", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/impl/keys/ResourcePathCacheKey.java", "methodName": "com.adobe.acs.commons.httpcache.config.impl.keys.ResourcePathCacheKey.readObject", "methodParameterType": "ObjectInputStream#", "methodParameterName": "o#", "methodBody": "private void readObject(ObjectInputStream o) throws IOException, ClassNotFoundException {\n        parentReadObject(o);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "For De serialization", "call_func_name": ["com.adobe.acs.commons.httpcache.config.impl.keys.ResourcePathCacheKey.parentReadObject"], "call_func_parameter": [["java.io.ObjectInputStream"]], "passed_comments": "/"}, {"index": "212", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/impl/keys/GroupCacheKey.java", "methodName": "com.adobe.acs.commons.httpcache.config.impl.keys.GroupCacheKey.writeObject", "methodParameterType": "ObjectOutputStream#", "methodParameterName": "o#", "methodBody": "private void writeObject(ObjectOutputStream o) throws IOException\n    {\n        parentWriteObject(o);\n        final Object[] userGroupArray = cacheKeyUserGroups.toArray();\n        o.writeObject(StringUtils.join(userGroupArray, \",\"));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "For Serialization", "call_func_name": ["com.adobe.acs.commons.httpcache.config.impl.keys.GroupCacheKey.parentWriteObject", "java.util.List.toArray", "org.apache.commons.lang.StringUtils.join", "java.io.ObjectOutputStream.writeObject"], "call_func_parameter": [["java.io.ObjectOutputStream"], [""], ["java.lang.Object[]", "java.lang.String"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "213", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/impl/keys/GroupCacheKey.java", "methodName": "com.adobe.acs.commons.httpcache.config.impl.keys.GroupCacheKey.readObject", "methodParameterType": "ObjectInputStream#", "methodParameterName": "o#", "methodBody": "private void readObject(ObjectInputStream o)\n            throws IOException, ClassNotFoundException {\n\n        parentReadObject(o);\n        final String userGroupsStr = (String) o.readObject();\n        final String[] userGroupStrArray = userGroupsStr.split(\",\");\n        cacheKeyUserGroups = Arrays.asList(userGroupStrArray);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "For De serialization", "call_func_name": ["com.adobe.acs.commons.httpcache.config.impl.keys.GroupCacheKey.parentReadObject", "java.io.ObjectInputStream.readObject", "java.lang.String.split", "java.util.Arrays.asList"], "call_func_parameter": [["java.io.ObjectInputStream"], [""], ["java.lang.String"], ["java.lang.Object[]"]], "passed_comments": "/"}, {"index": "214", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/impl/keys/CombinedCacheKey.java", "methodName": "com.adobe.acs.commons.httpcache.config.impl.keys.CombinedCacheKey.writeObject", "methodParameterType": "ObjectOutputStream#", "methodParameterName": "o#", "methodBody": "private void writeObject(ObjectOutputStream o) throws IOException {\n        parentWriteObject(o);\n        o.writeObject(cacheKeys);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "For Serialization", "call_func_name": ["com.adobe.acs.commons.httpcache.config.impl.keys.CombinedCacheKey.parentWriteObject", "java.io.ObjectOutputStream.writeObject"], "call_func_parameter": [["java.io.ObjectOutputStream"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "215", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/config/impl/keys/CombinedCacheKey.java", "methodName": "com.adobe.acs.commons.httpcache.config.impl.keys.CombinedCacheKey.readObject", "methodParameterType": "ObjectInputStream#", "methodParameterName": "o#", "methodBody": "private void readObject(ObjectInputStream o)\n            throws IOException, ClassNotFoundException {\n\n        parentReadObject(o);\n        cacheKeys = (LinkedList<CacheKey>) o.readObject();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "For De serialization", "call_func_name": ["com.adobe.acs.commons.httpcache.config.impl.keys.CombinedCacheKey.parentReadObject", "java.io.ObjectInputStream.readObject"], "call_func_parameter": [["java.io.ObjectInputStream"], [""]], "passed_comments": "/"}, {"index": "216", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/CacheContent.java", "methodName": "com.adobe.acs.commons.httpcache.engine.CacheContent.CacheContent", "methodParameterType": "String#String#Map<String,List<String>>#InputStream#", "methodParameterName": "charEncoding#contentType#headers#dataInputStream#", "methodBody": "public CacheContent(String charEncoding, String contentType, Map<String, List<String>> headers, InputStream\n            dataInputStream){\n        this(HttpServletResponse.SC_OK, charEncoding, contentType, headers, dataInputStream, HttpCacheServletResponseWrapper.ResponseWriteMethod.PRINTWRITER);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct <code>CacheContent</code> using parameters. Prefer constructing an instance using <code>build</code> method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "217", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/CacheContent.java", "methodName": "com.adobe.acs.commons.httpcache.engine.CacheContent.CacheContent", "methodParameterType": "String#String#Map<String,List<String>>#InputStream#HttpCacheServletResponseWrapper.ResponseWriteMethod#", "methodParameterName": "charEncoding#contentType#headers#dataInputStream#writeMethod#", "methodBody": "public CacheContent(String charEncoding, String contentType, Map<String, List<String>> headers, InputStream\n            dataInputStream,HttpCacheServletResponseWrapper.ResponseWriteMethod writeMethod) {\n\n        this(HttpServletResponse.SC_OK, charEncoding, contentType, headers, dataInputStream, writeMethod);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct <code>CacheContent</code> using parameters. Prefer constructing an instance using <code>build</code> method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "218", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/CacheContent.java", "methodName": "com.adobe.acs.commons.httpcache.engine.CacheContent.CacheContent", "methodParameterType": "int#String#String#Map<String,List<String>>#InputStream#", "methodParameterName": "status#charEncoding#contentType#headers#dataInputStream#", "methodBody": "public CacheContent(int status, String charEncoding, String contentType, Map<String, List<String>> headers, InputStream\n            dataInputStream) {\n        this.writeMethod = HttpCacheServletResponseWrapper.ResponseWriteMethod.PRINTWRITER;\n        this.status = status;\n        this.charEncoding = charEncoding;\n        this.contentType = contentType;\n        this.headers = headers;\n        this.dataInputStream = dataInputStream;\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Construct <code>CacheContent</code> using parameters. Prefer constructing an instance using <code>build</code> method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "219", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/CacheContent.java", "methodName": "com.adobe.acs.commons.httpcache.engine.CacheContent.CacheContent", "methodParameterType": "int#String#String#Map<String,List<String>>#InputStream#HttpCacheServletResponseWrapper.ResponseWriteMethod#", "methodParameterName": "status#charEncoding#contentType#headers#dataInputStream#writeMethod#", "methodBody": "public CacheContent(int status, String charEncoding, String contentType, Map<String, List<String>> headers, InputStream\n            dataInputStream, HttpCacheServletResponseWrapper.ResponseWriteMethod writeMethod) {\n\n        this.writeMethod = writeMethod;\n        this.status = status;\n        this.charEncoding = charEncoding;\n        this.contentType = contentType;\n        this.headers = headers;\n        this.dataInputStream = dataInputStream;\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Construct <code>CacheContent</code> using parameters. Prefer constructing an instance using <code>build</code> method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "220", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/CacheContent.java", "methodName": "com.adobe.acs.commons.httpcache.engine.CacheContent.CacheContent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CacheContent() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "No argument constructor for the build method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "221", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/CacheContent.java", "methodName": "com.adobe.acs.commons.httpcache.engine.CacheContent.build", "methodParameterType": "HttpCacheServletResponseWrapper#", "methodParameterName": "responseWrapper#", "methodBody": "@Deprecated\n    public CacheContent build(HttpCacheServletResponseWrapper responseWrapper) throws HttpCacheDataStreamException {\n          // Extracting HTTP Response Header Names and Values\n        Map<String, List<String>> extractedHeaders = responseWrapper.getHeaderNames().stream().collect(\n                        Collectors.toMap(headerName -> headerName, headerName ->\n                            new ArrayList<>(responseWrapper.getHeaders(headerName)\n                        )\n        ));\n\n        return build(responseWrapper, responseWrapper.getStatus(), responseWrapper.getCharacterEncoding(), responseWrapper. getContentType(), extractedHeaders);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#LambdaExpression#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#LambdaExpression#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(SimpleName)SimpleName)LambdaExpression(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)LambdaExpression)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Construct from the custom servlet response wrapper..", "call_func_name": ["com.adobe.acs.commons.httpcache.engine.HttpCacheServletResponseWrapper.getHeaderNames", "java.util.Collection.stream", "java.util.function.Function.apply", "java.util.function.Function.apply", "java.util.stream.Collectors.toMap", "java.util.stream.Stream.collect", "com.adobe.acs.commons.httpcache.engine.HttpCacheServletResponseWrapper.getStatus", "com.adobe.acs.commons.httpcache.engine.HttpCacheServletResponseWrapper.getCharacterEncoding", "com.adobe.acs.commons.httpcache.engine.HttpCacheServletResponseWrapper.getContentType", "com.adobe.acs.commons.httpcache.engine.CacheContent.build"], "call_func_parameter": [[""], [""], [""], ["com.adobe.acs.commons.httpcache.engine.HttpCacheServletResponseWrapper"], ["java.util.function.Function", "java.util.function.Function"], ["java.util.stream.Collector"], [""], [""], [""], ["com.adobe.acs.commons.httpcache.engine.HttpCacheServletResponseWrapper", "int", "java.lang.String", "java.lang.String", "java.util.Map"]], "passed_comments": [{"com.adobe.acs.commons.httpcache.engine.CacheContent.build": "Construct from the custom servlet response wrapper.."}]}, {"index": "222", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/CacheContent.java", "methodName": "com.adobe.acs.commons.httpcache.engine.CacheContent.build", "methodParameterType": "HttpCacheServletResponseWrapper#int#String#String#Map<String,List<String>>#", "methodParameterName": "responseWrapper#status#charEncoding#contentType#headers#", "methodBody": "public CacheContent build(HttpCacheServletResponseWrapper responseWrapper,int status, String charEncoding, String contentType, Map<String, List<String>> headers) throws HttpCacheDataStreamException {\n        this.status = status;\n\n        // Extract information from response and populate state of the instance.\n        this.charEncoding = charEncoding;\n        this.contentType = contentType;\n\n        // Extracting header K,V.\n        this.headers.putAll(headers);\n\n        // Get hold of the temp sink.\n        this.tempSink = responseWrapper.getTempSink();\n\n        // Get hold of the response content available in sink.\n        this.dataInputStream = responseWrapper.getTempSink().createInputStream();\n        this.writeMethod = responseWrapper.getWriteMethod();\n\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Construct from the custom servlet response wrapper..", "call_func_name": ["java.util.Map.putAll", "com.adobe.acs.commons.httpcache.engine.HttpCacheServletResponseWrapper.getTempSink", "com.adobe.acs.commons.httpcache.store.TempSink.createInputStream", "com.adobe.acs.commons.httpcache.engine.HttpCacheServletResponseWrapper.getWriteMethod"], "call_func_parameter": [["java.util.Map"], [""], [""], [""]], "passed_comments": [{"com.adobe.acs.commons.httpcache.store.TempSink.createInputStream": "Creates an input stream to read from the sink."}]}, {"index": "223", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/CacheContent.java", "methodName": "com.adobe.acs.commons.httpcache.engine.CacheContent.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getStatus() {\n        return status;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get status code.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "224", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/CacheContent.java", "methodName": "com.adobe.acs.commons.httpcache.engine.CacheContent.getCharEncoding", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCharEncoding() {\n        return charEncoding;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get character encoding.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "225", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/CacheContent.java", "methodName": "com.adobe.acs.commons.httpcache.engine.CacheContent.getContentType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContentType() {\n        return contentType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get content type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "226", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/CacheContent.java", "methodName": "com.adobe.acs.commons.httpcache.engine.CacheContent.getHeaders", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, List<String>> getHeaders() {\n        return headers;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get headers.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "227", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/CacheContent.java", "methodName": "com.adobe.acs.commons.httpcache.engine.CacheContent.getInputDataStream", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public InputStream getInputDataStream() {\n        return dataInputStream;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get input stream of response content", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "228", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/CacheContent.java", "methodName": "com.adobe.acs.commons.httpcache.engine.CacheContent.getTempSink", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public TempSink getTempSink(){\n        return this.tempSink;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the temp size attached to this cache content.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "229", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/impl/delegate/HttpCacheEngineBindingsDelegate.java", "methodName": "com.adobe.acs.commons.httpcache.engine.impl.delegate.HttpCacheEngineBindingsDelegate.bindHttpCacheConfig", "methodParameterType": "HttpCacheConfig#Map<String,Object>#", "methodParameterName": "cacheConfig#configs#", "methodBody": "public void bindHttpCacheConfig(final HttpCacheConfig cacheConfig, final Map<String, Object> configs) {\n\n        // Validate cache config object\n        if (!cacheConfig.isValid()) {\n            log.info(\"Http cache config rejected as the request uri is absent.\");\n            return;\n        }\n\n        // Check if the same object is already there in the map.\n        if (cacheConfigs.contains(cacheConfig)) {\n            log.trace(\"Http cache config object already exists in the cacheConfigs map and hence ignored.\");\n            return;\n        }\n\n        // Sort cacheConfigs by order\n        final CopyOnWriteArrayList<HttpCacheConfig> tmp = new CopyOnWriteArrayList<HttpCacheConfig>(this.cacheConfigs);\n        tmp.add(cacheConfig);\n\n        Collections.sort(tmp, new HttpCacheConfigComparator());\n        this.cacheConfigs = tmp;\n\n        this.cacheConfigConfigs.put(cacheConfig, configs);\n\n        log.debug(\"Total number of cache configs added: {}\", cacheConfigs.size());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ThisExpression#SimpleName#FieldAccess#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Binds cache config. Cache config could come and go at run time.", "call_func_name": ["com.adobe.acs.commons.httpcache.config.HttpCacheConfig.isValid", "org.slf4j.Logger.info", "java.util.concurrent.CopyOnWriteArrayList.contains", "org.slf4j.Logger.trace", "java.util.concurrent.CopyOnWriteArrayList.<init>", "java.util.concurrent.CopyOnWriteArrayList.add", "com.adobe.acs.commons.httpcache.config.impl.HttpCacheConfigComparator.<init>", "java.util.Collections.sort", "java.util.concurrent.ConcurrentHashMap.put", "java.util.concurrent.CopyOnWriteArrayList.size", "java.lang.Integer.valueOf", "org.slf4j.Logger.debug"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String"], ["java.util.Collection"], ["java.lang.Object"], [""], ["java.util.List", "java.util.Comparator"], ["java.lang.Object", "java.lang.Object"], [""], ["int"], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.httpcache.config.HttpCacheConfig.isValid": "@return true if this config is considered valid and processable by the HttpCacheEngine."}]}, {"index": "230", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/impl/delegate/HttpCacheEngineBindingsDelegate.java", "methodName": "com.adobe.acs.commons.httpcache.engine.impl.delegate.HttpCacheEngineBindingsDelegate.unbindHttpCacheConfig", "methodParameterType": "HttpCacheConfig#", "methodParameterName": "cacheConfig#", "methodBody": "public void unbindHttpCacheConfig(final HttpCacheConfig cacheConfig) {\n\n        if (cacheConfigs.contains(cacheConfig)) {\n            // Remove the associated cached items from the cache store.\n            if (cacheStoresMap.containsKey(cacheConfig.getCacheStoreName())) {\n                cacheStoresMap.get(cacheConfig.getCacheStoreName()).invalidate(cacheConfig);\n            } else {\n                log.debug(\"Configured cache store is unavailable and hence nothing to invalidate.\");\n            }\n\n            // Remove the entry from the map.\n            cacheConfigs.remove(cacheConfig);\n            cacheConfigConfigs.remove(cacheConfig);\n\n            log.debug(\"Total number of cache configs after removal: {}\", cacheConfigs.size());\n            return;\n        }\n        log.debug(\"This cache config entry was not bound and hence nothing to unbind.\");\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Unbinds cache config.", "call_func_name": ["java.util.concurrent.CopyOnWriteArrayList.contains", "com.adobe.acs.commons.httpcache.config.HttpCacheConfig.getCacheStoreName", "java.util.concurrent.ConcurrentHashMap.containsKey", "java.util.concurrent.ConcurrentHashMap.get", "com.adobe.acs.commons.httpcache.store.HttpCacheStore.invalidate", "org.slf4j.Logger.debug", "java.util.concurrent.CopyOnWriteArrayList.remove", "java.util.concurrent.ConcurrentHashMap.remove", "java.util.concurrent.CopyOnWriteArrayList.size", "java.lang.Integer.valueOf", "org.slf4j.Logger.debug"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.Object"], ["java.lang.Object"], ["com.adobe.acs.commons.httpcache.config.HttpCacheConfig"], ["java.lang.String"], ["java.lang.Object"], ["java.lang.Object"], [""], ["int"], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.httpcache.config.HttpCacheConfig.getCacheStoreName": "Name of the configured cache store."}, {"com.adobe.acs.commons.httpcache.store.HttpCacheStore.invalidate": "Invalidate all the cached items applicable for the given cache config."}]}, {"index": "231", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/impl/delegate/HttpCacheEngineBindingsDelegate.java", "methodName": "com.adobe.acs.commons.httpcache.engine.impl.delegate.HttpCacheEngineBindingsDelegate.bindHttpCacheStore", "methodParameterType": "HttpCacheStore#", "methodParameterName": "cacheStore#", "methodBody": "public void bindHttpCacheStore(final HttpCacheStore cacheStore) {\n        final String cacheStoreType = cacheStore.getStoreType();\n        if (cacheStoreType != null && cacheStoresMap.putIfAbsent(cacheStoreType, cacheStore) == null) {\n            log.debug(\"HTTP Cache Store [ {} -> ADDED ] for a total of [ {} ]\", cacheStore.getStoreType(), cacheStoresMap.size());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Binds cache store implementation", "call_func_name": ["com.adobe.acs.commons.httpcache.store.HttpCacheStore.getStoreType", "java.util.concurrent.ConcurrentHashMap.putIfAbsent", "java.util.concurrent.ConcurrentHashMap.size", "java.lang.Integer.valueOf", "org.slf4j.Logger.debug"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.Object"], [""], ["int"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.httpcache.store.HttpCacheStore.getStoreType": "Returns the store type of this store."}]}, {"index": "232", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/impl/delegate/HttpCacheEngineBindingsDelegate.java", "methodName": "com.adobe.acs.commons.httpcache.engine.impl.delegate.HttpCacheEngineBindingsDelegate.unbindHttpCacheStore", "methodParameterType": "HttpCacheStore#", "methodParameterName": "cacheStore#", "methodBody": "public void unbindHttpCacheStore(final HttpCacheStore cacheStore) {\n        final String cacheStoreType = cacheStore.getStoreType();\n        if (cacheStoreType != null && cacheStoresMap.remove(cacheStoreType) != null) {\n            log.debug(\"HTTP Cache Store [ {} -> REMOVED ] for a total of [ {} ]\", cacheStore.getStoreType(), cacheStoresMap.size());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Unbinds cache store.", "call_func_name": ["com.adobe.acs.commons.httpcache.store.HttpCacheStore.getStoreType", "java.util.concurrent.ConcurrentHashMap.remove", "java.util.concurrent.ConcurrentHashMap.size", "java.lang.Integer.valueOf", "org.slf4j.Logger.debug"], "call_func_parameter": [[""], ["java.lang.Object"], [""], ["int"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.httpcache.store.HttpCacheStore.getStoreType": "Returns the store type of this store."}]}, {"index": "233", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/impl/delegate/HttpCacheEngineBindingsDelegate.java", "methodName": "com.adobe.acs.commons.httpcache.engine.impl.delegate.HttpCacheEngineBindingsDelegate.bindHttpCacheHandlingRule", "methodParameterType": "HttpCacheHandlingRule#Map<String,Object>#", "methodParameterName": "cacheHandlingRule#properties#", "methodBody": "public void bindHttpCacheHandlingRule(final HttpCacheHandlingRule cacheHandlingRule, final Map<String, Object>\n            properties) {\n\n        // Get the service pid and make it as key.\n        if (cacheHandlingRules.putIfAbsent(getServicePid(properties), cacheHandlingRule) == null) {\n            log.debug(\"Cache handling rule implementation {} has been added\", cacheHandlingRule.getClass().getName());\n            log.debug(\"Total number of cache handling rule available after addition: {}\", cacheHandlingRules.size());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Binds cache handling rule", "call_func_name": ["com.adobe.acs.commons.httpcache.engine.impl.delegate.HttpCacheEngineBindingsDelegate.getServicePid", "java.util.concurrent.ConcurrentHashMap.putIfAbsent", "java.lang.Object.getClass", "java.lang.Class.getName", "org.slf4j.Logger.debug", "java.util.concurrent.ConcurrentHashMap.size", "java.lang.Integer.valueOf"], "call_func_parameter": [["java.util.Map"], ["java.lang.Object", "java.lang.Object"], [""], [""], ["java.lang.String", "java.lang.Object"], [""], ["int"]], "passed_comments": "/"}, {"index": "234", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/impl/delegate/HttpCacheEngineBindingsDelegate.java", "methodName": "com.adobe.acs.commons.httpcache.engine.impl.delegate.HttpCacheEngineBindingsDelegate.unbindHttpCacheHandlingRule", "methodParameterType": "HttpCacheHandlingRule#Map<String,Object>#", "methodParameterName": "cacheHandlingRule#configs#", "methodBody": "public void unbindHttpCacheHandlingRule(final HttpCacheHandlingRule cacheHandlingRule, final Map<String,\n            Object> configs) {\n\n        if (cacheHandlingRules.remove(getServicePid(configs) ) != null) {\n            log.debug(\"Cache handling rule removed - {}.\", cacheHandlingRule.getClass().getName());\n            log.debug(\"Total number of cache handling rules available after removal: {}\", cacheHandlingRules.size());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Unbinds handling rule.", "call_func_name": ["com.adobe.acs.commons.httpcache.engine.impl.delegate.HttpCacheEngineBindingsDelegate.getServicePid", "java.util.concurrent.ConcurrentHashMap.remove", "java.lang.Object.getClass", "java.lang.Class.getName", "org.slf4j.Logger.debug", "java.util.concurrent.ConcurrentHashMap.size", "java.lang.Integer.valueOf"], "call_func_parameter": [["java.util.Map"], ["java.lang.Object"], [""], [""], ["java.lang.String", "java.lang.Object"], [""], ["int"]], "passed_comments": "/"}, {"index": "235", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/impl/HttpCacheEngineImpl.java", "methodName": "com.adobe.acs.commons.httpcache.engine.impl.HttpCacheEngineImpl.getCacheStore", "methodParameterType": "HttpCacheConfig#", "methodParameterName": "cacheConfig#", "methodBody": "private HttpCacheStore getCacheStore(HttpCacheConfig cacheConfig) throws HttpCachePersistenceException {\n        if (bindingsDelegate.getCacheStoresMap().containsKey(cacheConfig.getCacheStoreName())) {\n            return bindingsDelegate.getCacheStoresMap().get(cacheConfig.getCacheStoreName());\n        } else {\n            throw new HttpCachePersistenceException(\"Configured cache store unavailable \" + cacheConfig\n                    .getCacheStoreName());\n        }\n\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Get the cache store set for the config if available.", "call_func_name": ["com.adobe.acs.commons.httpcache.engine.impl.delegate.HttpCacheEngineBindingsDelegate.getCacheStoresMap", "com.adobe.acs.commons.httpcache.config.HttpCacheConfig.getCacheStoreName", "java.util.Map.containsKey", "java.util.Map.get", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.adobe.acs.commons.httpcache.exception.HttpCachePersistenceException.<init>"], "call_func_parameter": [[""], [""], ["java.lang.Object"], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.httpcache.config.HttpCacheConfig.getCacheStoreName": "Name of the configured cache store."}]}, {"index": "236", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/impl/HttpCacheEngineImpl.java", "methodName": "com.adobe.acs.commons.httpcache.engine.impl.HttpCacheEngineImpl.bindHttpCacheConfig", "methodParameterType": "HttpCacheConfig#Map<String,Object>#", "methodParameterName": "cacheConfig#configs#", "methodBody": "protected void bindHttpCacheConfig(final HttpCacheConfig cacheConfig, final Map<String, Object> configs) {\n        bindingsDelegate.bindHttpCacheConfig(cacheConfig, configs);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Binds cache config. Cache config could come and go at run time.", "call_func_name": ["com.adobe.acs.commons.httpcache.engine.impl.delegate.HttpCacheEngineBindingsDelegate.bindHttpCacheConfig"], "call_func_parameter": [["com.adobe.acs.commons.httpcache.config.HttpCacheConfig", "java.util.Map"]], "passed_comments": [{"com.adobe.acs.commons.httpcache.engine.impl.delegate.HttpCacheEngineBindingsDelegate.bindHttpCacheConfig": "Binds cache config. Cache config could come and go at run time."}]}, {"index": "237", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/impl/HttpCacheEngineImpl.java", "methodName": "com.adobe.acs.commons.httpcache.engine.impl.HttpCacheEngineImpl.unbindHttpCacheConfig", "methodParameterType": "HttpCacheConfig#Map<String,Object>#", "methodParameterName": "cacheConfig#config#", "methodBody": "protected void unbindHttpCacheConfig(final HttpCacheConfig cacheConfig, final Map<String, Object> config) {\n        bindingsDelegate.unbindHttpCacheConfig(cacheConfig);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Unbinds cache config.", "call_func_name": ["com.adobe.acs.commons.httpcache.engine.impl.delegate.HttpCacheEngineBindingsDelegate.unbindHttpCacheConfig"], "call_func_parameter": [["com.adobe.acs.commons.httpcache.config.HttpCacheConfig"]], "passed_comments": [{"com.adobe.acs.commons.httpcache.engine.impl.delegate.HttpCacheEngineBindingsDelegate.unbindHttpCacheConfig": "Unbinds cache config."}]}, {"index": "238", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/impl/HttpCacheEngineImpl.java", "methodName": "com.adobe.acs.commons.httpcache.engine.impl.HttpCacheEngineImpl.bindHttpCacheStore", "methodParameterType": "HttpCacheStore#", "methodParameterName": "cacheStore#", "methodBody": "protected void bindHttpCacheStore(final HttpCacheStore cacheStore) {\n        bindingsDelegate.bindHttpCacheStore(cacheStore);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Binds cache store implementation", "call_func_name": ["com.adobe.acs.commons.httpcache.engine.impl.delegate.HttpCacheEngineBindingsDelegate.bindHttpCacheStore"], "call_func_parameter": [["com.adobe.acs.commons.httpcache.store.HttpCacheStore"]], "passed_comments": [{"com.adobe.acs.commons.httpcache.engine.impl.delegate.HttpCacheEngineBindingsDelegate.bindHttpCacheStore": "Binds cache store implementation"}]}, {"index": "239", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/impl/HttpCacheEngineImpl.java", "methodName": "com.adobe.acs.commons.httpcache.engine.impl.HttpCacheEngineImpl.unbindHttpCacheStore", "methodParameterType": "HttpCacheStore#", "methodParameterName": "cacheStore#", "methodBody": "protected void unbindHttpCacheStore(final HttpCacheStore cacheStore) {\n        bindingsDelegate.unbindHttpCacheStore(cacheStore);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Unbinds cache store.", "call_func_name": ["com.adobe.acs.commons.httpcache.engine.impl.delegate.HttpCacheEngineBindingsDelegate.unbindHttpCacheStore"], "call_func_parameter": [["com.adobe.acs.commons.httpcache.store.HttpCacheStore"]], "passed_comments": [{"com.adobe.acs.commons.httpcache.engine.impl.delegate.HttpCacheEngineBindingsDelegate.unbindHttpCacheStore": "Unbinds cache store."}]}, {"index": "240", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/impl/HttpCacheEngineImpl.java", "methodName": "com.adobe.acs.commons.httpcache.engine.impl.HttpCacheEngineImpl.bindHttpCacheHandlingRule", "methodParameterType": "HttpCacheHandlingRule#Map<String,Object>#", "methodParameterName": "cacheHandlingRule#properties#", "methodBody": "protected void bindHttpCacheHandlingRule(final HttpCacheHandlingRule cacheHandlingRule, final Map<String, Object>\n            properties) {\n        bindingsDelegate.bindHttpCacheHandlingRule(cacheHandlingRule, properties);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Binds cache handling rule", "call_func_name": ["com.adobe.acs.commons.httpcache.engine.impl.delegate.HttpCacheEngineBindingsDelegate.bindHttpCacheHandlingRule"], "call_func_parameter": [["com.adobe.acs.commons.httpcache.rule.HttpCacheHandlingRule", "java.util.Map"]], "passed_comments": [{"com.adobe.acs.commons.httpcache.engine.impl.delegate.HttpCacheEngineBindingsDelegate.bindHttpCacheHandlingRule": "Binds cache handling rule"}]}, {"index": "241", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/impl/HttpCacheEngineImpl.java", "methodName": "com.adobe.acs.commons.httpcache.engine.impl.HttpCacheEngineImpl.unbindHttpCacheHandlingRule", "methodParameterType": "HttpCacheHandlingRule#Map<String,Object>#", "methodParameterName": "cacheHandlingRule#configs#", "methodBody": "protected void unbindHttpCacheHandlingRule(final HttpCacheHandlingRule cacheHandlingRule, final Map<String,\n            Object> configs) {\n        bindingsDelegate.unbindHttpCacheHandlingRule(cacheHandlingRule, configs);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Unbinds handling rule.", "call_func_name": ["com.adobe.acs.commons.httpcache.engine.impl.delegate.HttpCacheEngineBindingsDelegate.unbindHttpCacheHandlingRule"], "call_func_parameter": [["com.adobe.acs.commons.httpcache.rule.HttpCacheHandlingRule", "java.util.Map"]], "passed_comments": [{"com.adobe.acs.commons.httpcache.engine.impl.delegate.HttpCacheEngineBindingsDelegate.unbindHttpCacheHandlingRule": "Unbinds handling rule."}]}, {"index": "242", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/HttpCacheEngine.java", "methodName": "com.adobe.acs.commons.httpcache.engine.HttpCacheEngine.isRequestCacheable", "methodParameterType": "SlingHttpServletRequest#HttpCacheConfig#", "methodParameterName": "request#cacheConfig#", "methodBody": "boolean isRequestCacheable(SlingHttpServletRequest request, HttpCacheConfig cacheConfig) throws\n            HttpCacheRepositoryAccessException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Check if the given request is cache-able per custom cache handling rules. Rules hook  {@link com.adobe.acs.commons.httpcache.rule.HttpCacheHandlingRule#onRequestReceive(SlingHttpServletRequest)} exposed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "243", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/HttpCacheEngine.java", "methodName": "com.adobe.acs.commons.httpcache.engine.HttpCacheEngine.getCacheConfig", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "HttpCacheConfig getCacheConfig(SlingHttpServletRequest request) throws HttpCacheConfigConflictException,\n            HttpCacheRepositoryAccessException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Get the first, based on cache config order, cache config applicable for the given request. Defaults to the Request scope.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "244", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/HttpCacheEngine.java", "methodName": "com.adobe.acs.commons.httpcache.engine.HttpCacheEngine.getCacheConfig", "methodParameterType": "SlingHttpServletRequest#HttpCacheConfig.FilterScope#", "methodParameterName": "request#filterScope#", "methodBody": "HttpCacheConfig getCacheConfig(SlingHttpServletRequest request, HttpCacheConfig.FilterScope filterScope) throws HttpCacheConfigConflictException,\n            HttpCacheRepositoryAccessException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Get the first, based on cache config order, cache config applicable for the given request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "245", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/HttpCacheEngine.java", "methodName": "com.adobe.acs.commons.httpcache.engine.HttpCacheEngine.isCacheHit", "methodParameterType": "SlingHttpServletRequest#HttpCacheConfig#", "methodParameterName": "request#cacheConfig#", "methodBody": "boolean isCacheHit(SlingHttpServletRequest request, HttpCacheConfig cacheConfig) throws\n            HttpCachePersistenceException, HttpCacheKeyCreationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Check if the given request can be served from available cache.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "246", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/HttpCacheEngine.java", "methodName": "com.adobe.acs.commons.httpcache.engine.HttpCacheEngine.deliverCacheContent", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#HttpCacheConfig#", "methodParameterName": "request#response#cacheConfig#", "methodBody": "boolean deliverCacheContent(SlingHttpServletRequest request, SlingHttpServletResponse response, HttpCacheConfig\n            cacheConfig) throws HttpCachePersistenceException, HttpCacheKeyCreationException,\n            HttpCacheDataStreamException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Deliver the response from the cache. Custom cache handling rule hook  {@link com.adobe.acs.commons.httpcache.rule.HttpCacheHandlingRule#onCacheDeliver(SlingHttpServletRequest,SlingHttpServletResponse)} exposed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "247", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/HttpCacheEngine.java", "methodName": "com.adobe.acs.commons.httpcache.engine.HttpCacheEngine.wrapResponse", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#HttpCacheConfig#", "methodParameterName": "request#response#httpCacheConfig#", "methodBody": "HttpCacheServletResponseWrapper wrapResponse(SlingHttpServletRequest request, SlingHttpServletResponse response,\n                                                 HttpCacheConfig httpCacheConfig) throws\n            HttpCacheDataStreamException, HttpCacheKeyCreationException, HttpCachePersistenceException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Wrap the response so that response stream can be duplicated.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "248", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/HttpCacheEngine.java", "methodName": "com.adobe.acs.commons.httpcache.engine.HttpCacheEngine.cacheResponse", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#HttpCacheConfig#", "methodParameterName": "request#response#cacheConfig#", "methodBody": "void cacheResponse(SlingHttpServletRequest request, SlingHttpServletResponse response, HttpCacheConfig\n            cacheConfig) throws HttpCacheKeyCreationException, HttpCacheDataStreamException,\n            HttpCachePersistenceException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Cache the given response. Custom cache handling rule hook  {@link com.adobe.acs.commons.httpcache.rule.HttpCacheHandlingRule#onResponseCache(SlingHttpServletRequest,SlingHttpServletResponse)} exposed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "249", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/HttpCacheEngine.java", "methodName": "com.adobe.acs.commons.httpcache.engine.HttpCacheEngine.isPathPotentialToInvalidate", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "boolean isPathPotentialToInvalidate(String path);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Check if the supplied JCR repository path has the potential to invalidate cache. This can be identified based on the  {@link HttpCacheConfig}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "250", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/httpcache/engine/HttpCacheEngine.java", "methodName": "com.adobe.acs.commons.httpcache.engine.HttpCacheEngine.invalidateCache", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "void invalidateCache(String path) throws HttpCachePersistenceException, HttpCacheKeyCreationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Invalidate the cache for the  {@linkplain HttpCacheConfig} which isinterested in the given path. Custom cache handling rule hook  {@link com.adobe.acs.commons.httpcache.rule.HttpCacheHandlingRule#onCacheInvalidate(String)} exposed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "251", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/impl/ErrorPageHandlerImpl.java", "methodName": "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.findErrorPage", "methodParameterType": "SlingHttpServletRequest#Resource#", "methodParameterName": "request#errorResource#", "methodBody": "@Override\n    @SuppressWarnings(\"squid:S3776\")\n    public String findErrorPage(SlingHttpServletRequest request, Resource errorResource) {\n        if (!isEnabled()) {\n            return null;\n        }\n\n        final String errorsPath = findErrorsPath(request, errorResource);\n\n        Resource errorPage = null;\n        if (StringUtils.isNotBlank(errorsPath)) {\n            final ResourceResolver resourceResolver = errorResource.getResourceResolver();\n            final String errorPath = errorsPath + \"/\" + getErrorPageName(request);\n            errorPage = getResource(resourceResolver, errorPath);\n\n            if (errorPage == null && StringUtils.isNotBlank(errorsPath)) {\n                log.trace(\"No error-specific errorPage could be found, use the 'default' error errorPage for the Root content path\");\n                errorPage = resourceResolver.resolve(errorsPath);\n            }\n        }\n\n        String errorPagePath = null;\n        if (errorPage == null || ResourceUtil.isNonExistingResource(errorPage)) {\n            log.trace(\"no custom error page could be found\");\n            if (this.hasSystemErrorPage()) {\n                errorPagePath = this.getSystemErrorPagePath();\n                log.trace(\"using system error page [ {} ]\", errorPagePath);\n            }\n        } else {\n            errorPagePath = errorPage.getPath();\n        }\n\n        if (errorImagesEnabled && this.isImageRequest(request)) {\n\n            if (StringUtils.startsWith(this.errorImagePath, \"/\")) {\n                // Absolute path\n                return this.errorImagePath;\n            } else if (StringUtils.isNotBlank(errorPagePath)) {\n                // Selector or Relative path; compute path based off found error page\n\n                if (StringUtils.startsWith(this.errorImagePath, \".\")) {\n                    final String selectorErrorImagePath = errorPagePath + this.errorImagePath;\n                    log.debug(\"Using selector-based error image: {}\", selectorErrorImagePath);\n                    return selectorErrorImagePath;\n                } else {\n                    final String relativeErrorImagePath = errorPagePath + \"/\"\n                            + StringUtils.removeStart(this.errorImagePath, \"/\");\n                    log.debug(\"Using relative path-based error image: {}\", relativeErrorImagePath);\n                    return relativeErrorImagePath;\n                }\n            } else {\n                log.warn(\"Error image path found, but no error page could be found so relative path cannot \"\n                        + \"be applied: {}\", this.errorImagePath);\n            }\n        } else if (StringUtils.isNotBlank(errorPagePath)) {\n            errorPagePath = StringUtils.stripToNull(applyExtension(errorPagePath));\n            log.debug(\"Using resolved error page: {}\", errorPagePath);\n            return errorPagePath;\n        } else {\n            log.debug(\"ACS AEM Commons Error Page Handler is enabled but mis-configured. A valid error image\"\n                    + \" handler nor a valid error page could be found.\");\n        }\n        return null;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#PrefixExpression#NullLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#StringLiteral#MethodInvocation#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#StringLiteral#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#StringLiteral#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Find the JCR full path to the most appropriate Error Page.", "call_func_name": ["com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.isEnabled", "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.findErrorsPath", "org.apache.commons.lang.StringUtils.isNotBlank", "org.apache.sling.api.resource.Resource.getResourceResolver", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.getErrorPageName", "java.lang.StringBuilder.toString", "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.getResource", "org.slf4j.Logger.trace", "org.apache.sling.api.resource.ResourceResolver.resolve", "org.apache.sling.api.resource.ResourceUtil.isNonExistingResource", "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.hasSystemErrorPage", "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.getSystemErrorPagePath", "org.slf4j.Logger.trace", "org.apache.sling.api.resource.Resource.getPath", "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.isImageRequest", "org.apache.commons.lang.StringUtils.startsWith", "org.slf4j.Logger.debug", "org.apache.commons.lang.StringUtils.removeStart", "org.slf4j.Logger.warn", "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.applyExtension", "org.apache.commons.lang.StringUtils.stripToNull", "org.slf4j.Logger.debug"], "call_func_parameter": [[""], ["org.apache.sling.api.SlingHttpServletRequest", "org.apache.sling.api.resource.Resource"], ["java.lang.String"], [""], [""], ["java.lang.String"], ["org.apache.sling.api.SlingHttpServletRequest"], [""], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["org.apache.sling.api.resource.Resource"], [""], [""], ["java.lang.String", "java.lang.Object"], [""], ["org.apache.sling.api.SlingHttpServletRequest"], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.Object"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.isEnabled": "Determines if this Service is \"enabled\". If it has been configured to be \"Disabled\" the Service still exists however it should not be used. This OSGi Property toggle allows error page handler to be toggled on an off without via OSGi means without throwing Null pointers, etc."}, {"com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.findErrorsPath": "Searches for a resource specific error page."}, {"com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.getErrorPageName": "Get the Error Page's name (all lowercase) that should be used to render the page for this error. <p> This looks at the Status code delivered via by Sling into the error page content"}, {"com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.getResource": "Gets the resource object for the provided path. <p> Performs checks to ensure resource exists and is accessible to user."}, {"com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.hasSystemErrorPage": "Checks if the System Error Page has been configured."}, {"com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.getSystemErrorPagePath": "Get the configured System Error Page Path."}, {"com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.isImageRequest": "Check if this is an image request."}, {"com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.applyExtension": "Add extension as configured via OSGi Component Property. <p> Defaults to .html"}]}, {"index": "252", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/impl/ErrorPageHandlerImpl.java", "methodName": "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.findErrorsPath", "methodParameterType": "SlingHttpServletRequest#Resource#", "methodParameterName": "request#errorResource#", "methodBody": "private String findErrorsPath(SlingHttpServletRequest request, Resource errorResource) {\n        final String errorResourcePath = errorResource.getPath();\n        Resource real = findFirstRealParentOrSelf(request, errorResource);\n\n        String errorsPath = null;\n        if (real != null) {\n            log.trace(\"Found real resource at [ {} ]\", real.getPath());\n            if (!JcrConstants.JCR_CONTENT.equals(real.getName())) {\n                Resource tmp = real.getChild(JcrConstants.JCR_CONTENT);\n                if (tmp != null) {\n                    real = tmp;\n                }\n            }\n            final InheritanceValueMap pageProperties = new HierarchyNodeInheritanceValueMap(real);\n            errorsPath = pageProperties.getInherited(ERROR_PAGE_PROPERTY, String.class);\n        } else {\n            log.trace(\"No page found for [ {} ]\", errorResource);\n        }\n\n        if (errorsPath == null) {\n            log.trace(\"could not find inherited property for [ {} ]\", errorResource);\n            for (final Map.Entry<String, String> mapPage : pathMap.entrySet()) {\n                if (errorResourcePath.startsWith(mapPage.getKey())) {\n                    log.trace(\"found error path in map [ {} ]\", mapPage.getKey());\n                    errorsPath = mapPage.getValue();\n                    break;\n                }\n            }\n        }\n\n        log.debug(\"Best matching errors path for request is: {}\", errorsPath);\n        return errorsPath;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Searches for a resource specific error page.", "call_func_name": ["org.apache.sling.api.resource.Resource.getPath", "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.findFirstRealParentOrSelf", "org.slf4j.Logger.trace", "org.apache.sling.api.resource.Resource.getName", "java.lang.String.equals", "org.apache.sling.api.resource.Resource.getChild", "com.day.cq.commons.inherit.HierarchyNodeInheritanceValueMap.<init>", "com.day.cq.commons.inherit.InheritanceValueMap.getInherited", "java.util.SortedMap.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.String.startsWith", "org.slf4j.Logger.debug"], "call_func_parameter": [[""], ["org.apache.sling.api.SlingHttpServletRequest", "org.apache.sling.api.resource.Resource"], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.Object"], ["java.lang.String"], ["org.apache.sling.api.resource.Resource"], ["java.lang.String", "java.lang.Class"], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.findFirstRealParentOrSelf": "Given the Request path, find the first Real Parent of the Request (even if the resource doesnt exist)."}]}, {"index": "253", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/impl/ErrorPageHandlerImpl.java", "methodName": "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.getResource", "methodParameterType": "ResourceResolver#String#", "methodParameterName": "resourceResolver#path#", "methodBody": "private Resource getResource(ResourceResolver resourceResolver, String path) {\n        // Double check that the resource exists and return it as a match\n        final Resource resource = resourceResolver.getResource(path);\n\n        if (resource != null && !ResourceUtil.isNonExistingResource(resource)) {\n            return resource;\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the resource object for the provided path. <p> Performs checks to ensure resource exists and is accessible to user.", "call_func_name": ["org.apache.sling.api.resource.ResourceResolver.getResource", "org.apache.sling.api.resource.ResourceUtil.isNonExistingResource"], "call_func_parameter": [["java.lang.String"], ["org.apache.sling.api.resource.Resource"]], "passed_comments": "/"}, {"index": "254", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/impl/ErrorPageHandlerImpl.java", "methodName": "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.getStatusCode", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "@Override\n    public int getStatusCode(SlingHttpServletRequest request) {\n        Integer statusCode = (Integer) request.getAttribute(SlingConstants.ERROR_STATUS);\n\n        if (statusCode != null) {\n            return statusCode;\n        } else {\n            return ErrorPageHandlerService.DEFAULT_STATUS_CODE;\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Get Error Status Code from Request or Default (500) if no status code can be found.", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getAttribute", "java.lang.Integer.intValue"], "call_func_parameter": [["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "255", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/impl/ErrorPageHandlerImpl.java", "methodName": "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.getErrorPageName", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "@Override\n    public String getErrorPageName(SlingHttpServletRequest request) {\n        // Get status code from request\n        // Set the servlet name ot find to statusCode; update later if needed\n        String servletName = String.valueOf(getStatusCode(request));\n\n        // Only support Status codes as error exception lookup scheme is too complex/expensive at this time.\n        // Using the 500 response code/default error page should suffice for all errors pages generated from exceptions.\n\n        servletName = StringUtils.lowerCase(servletName);\n\n        log.debug(\"Error page name to (try to) use: {} \", servletName);\n\n        return servletName;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the Error Page's name (all lowercase) that should be used to render the page for this error. <p> This looks at the Status code delivered via by Sling into the error page content", "call_func_name": ["com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.getStatusCode", "java.lang.String.valueOf", "org.apache.commons.lang.StringUtils.lowerCase", "org.slf4j.Logger.debug"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest"], ["int"], ["java.lang.String"], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.getStatusCode": "Get Error Status Code from Request or Default (500) if no status code can be found."}]}, {"index": "256", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/impl/ErrorPageHandlerImpl.java", "methodName": "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.isEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public boolean isEnabled() {\n        return enabled;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines if this Service is \"enabled\". If it has been configured to be \"Disabled\" the Service still exists however it should not be used. This OSGi Property toggle allows error page handler to be toggled on an off without via OSGi means without throwing Null pointers, etc.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "257", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/impl/ErrorPageHandlerImpl.java", "methodName": "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.hasSystemErrorPage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean hasSystemErrorPage() {\n        return StringUtils.isNotBlank(this.getSystemErrorPagePath());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the System Error Page has been configured.", "call_func_name": ["com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.getSystemErrorPagePath", "org.apache.commons.lang.StringUtils.isNotBlank"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.getSystemErrorPagePath": "Get the configured System Error Page Path."}]}, {"index": "258", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/impl/ErrorPageHandlerImpl.java", "methodName": "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.getSystemErrorPagePath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSystemErrorPagePath() {\n        return StringUtils.strip(this.systemErrorPagePath);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the configured System Error Page Path.", "call_func_name": ["org.apache.commons.lang.StringUtils.strip"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "259", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/impl/ErrorPageHandlerImpl.java", "methodName": "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.getErrorPagesPath", "methodParameterType": "String#Map<String,String>#", "methodParameterName": "rootPath#errorPagesMap#", "methodBody": "public String getErrorPagesPath(String rootPath, Map<String, String> errorPagesMap) {\n        if (errorPagesMap.containsKey(rootPath)) {\n            return errorPagesMap.get(rootPath);\n        } else {\n            return null;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#NullLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Gets the Error Pages Path for the provided content root path.", "call_func_name": ["java.util.Map.containsKey", "java.util.Map.get"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "260", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/impl/ErrorPageHandlerImpl.java", "methodName": "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.isImageRequest", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "private boolean isImageRequest(final SlingHttpServletRequest request) {\n        if (StringUtils.isBlank(errorImagePath)) {\n            log.warn(\"ACS AEM Commons error page handler enabled to handle error images, \"\n                    + \"but no error image path was provided.\");\n            return false;\n        }\n\n        final String extension = StringUtils.stripToEmpty(StringUtils.lowerCase(\n                request.getRequestPathInfo().getExtension()));\n\n        return ArrayUtils.contains(errorImageExtensions, extension);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if this is an image request.", "call_func_name": ["org.apache.commons.lang.StringUtils.isBlank", "org.slf4j.Logger.warn", "org.apache.sling.api.SlingHttpServletRequest.getRequestPathInfo", "org.apache.sling.api.request.RequestPathInfo.getExtension", "org.apache.commons.lang.StringUtils.lowerCase", "org.apache.commons.lang.StringUtils.stripToEmpty", "org.apache.commons.lang.ArrayUtils.contains"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object[]", "java.lang.Object"]], "passed_comments": "/"}, {"index": "261", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/impl/ErrorPageHandlerImpl.java", "methodName": "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.findFirstRealParentOrSelf", "methodParameterType": "SlingHttpServletRequest#Resource#", "methodParameterName": "request#errorResource#", "methodBody": "private Resource findFirstRealParentOrSelf(SlingHttpServletRequest request, Resource errorResource) {\n        if (errorResource == null) {\n            log.debug(\"Error resource is null\");\n            return null;\n        }\n\n        log.trace(\"Finding first real parent for [ {} ]\", errorResource.getPath());\n\n        final ResourceResolver resourceResolver = errorResource.getResourceResolver();\n\n        // Get the lowest aggregate node ancestor for the errorResource\n        String path = StringUtils.substringBefore(errorResource.getPath(), JcrConstants.JCR_CONTENT);\n\n        Resource resource = errorResource;\n\n        if (!StringUtils.equals(path, errorResource.getPath())) {\n            // Only resolve the resource if the path of the errorResource is different from the cleaned up path; else\n            // we know the errorResource and what the path resolves to is the same\n            // #1415 - First try to get the resource at the direct path; this look-up is very fast (compared to rr.resolve and often what's required)\n            resource = resourceResolver.getResource(path);\n\n            if (resource == null) {\n                // #1415 - If the resource is not available at the direct path, then try to resolve (handle sling:alias).\n                // First map the path, as the resolve could duplicate pathing.\n                resource = resourceResolver.resolve(request, resourceResolver.map(request, path));\n            }\n        }\n\n        // If the resource exists, then use it!\n        if (!ResourceUtil.isNonExistingResource(resource)) {\n            log.debug(\"Found real aggregate resource at [ {} }\", resource.getPath());\n            return resource;\n        }\n\n        // Quick check for the Parent; Handles common case of deactivated pages\n        final Resource parent = resource.getParent();\n        if (parent != null && !ResourceUtil.isNonExistingResource(resource)) {\n            log.debug(\"Found real aggregate resource via getParent() at [ {} ]\", parent.getPath());\n            return parent;\n        }\n\n        // Start checking the path until the first real ancestor is found\n        final PathInfo pathInfo = new PathInfo(resource.getPath());\n        String[] parts = StringUtils.split(pathInfo.getResourcePath(), '/');\n\n        for (int i = parts.length - 1; i >= 0; i--) {\n            String[] tmpArray = (String[]) ArrayUtils.subarray(parts, 0, i);\n            String candidatePath = \"/\".concat(StringUtils.join(tmpArray, '/'));\n\n            // #1415 - First try to get the resource at the direct path; this look-up is\n            // very fast (compared to rr.resolve and often what's required)\n            final Resource candidatePathResource = resourceResolver.getResource(candidatePath);\n            if (candidatePathResource != null) {\n                return candidatePathResource;\n            }\n\n            final Resource candidateResource = resourceResolver.resolve(request, candidatePath);\n\n            if (candidateResource != null && !ResourceUtil.isNonExistingResource(candidateResource)) {\n                log.debug(\"Found first real aggregate parent via path look-up at [ {} ]\", candidateResource.getPath());\n                return candidateResource;\n            }\n        }\n\n        log.debug(\"Could not find real parent for [ {} ]\", errorResource.getPath());\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#CharacterLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#Block#ForStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(CharacterLiteral)CharacterLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)ForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Given the Request path, find the first Real Parent of the Request (even if the resource doesnt exist).", "call_func_name": ["org.slf4j.Logger.debug", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.trace", "org.apache.sling.api.resource.Resource.getResourceResolver", "org.apache.commons.lang.StringUtils.substringBefore", "org.apache.commons.lang.StringUtils.equals", "org.apache.sling.api.resource.ResourceResolver.getResource", "org.apache.sling.api.resource.ResourceResolver.map", "org.apache.sling.api.resource.ResourceResolver.resolve", "org.apache.sling.api.resource.ResourceUtil.isNonExistingResource", "org.slf4j.Logger.debug", "org.apache.sling.api.resource.Resource.getParent", "com.day.cq.commons.PathInfo.<init>", "com.day.cq.commons.PathInfo.getResourcePath", "org.apache.commons.lang.StringUtils.split", "org.apache.commons.lang.ArrayUtils.subarray", "org.apache.commons.lang.StringUtils.join", "java.lang.String.concat"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["javax.servlet.http.HttpServletRequest", "java.lang.String"], ["javax.servlet.http.HttpServletRequest", "java.lang.String"], ["org.apache.sling.api.resource.Resource"], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String", "char"], ["java.lang.Object[]", "int", "int"], ["java.lang.Object[]", "char"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "262", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/impl/ErrorPageHandlerImpl.java", "methodName": "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.applyExtension", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "private String applyExtension(String path) {\n        if (path == null) {\n            return null;\n        }\n\n        if (StringUtils.isBlank(errorPageExtension)) {\n            return path;\n        }\n\n        return StringUtils.stripToEmpty(path).concat(\".\").concat(errorPageExtension);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add extension as configured via OSGi Component Property. <p> Defaults to .html", "call_func_name": ["org.apache.commons.lang.StringUtils.isBlank", "org.apache.commons.lang.StringUtils.stripToEmpty", "java.lang.String.concat"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "263", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/impl/ErrorPageHandlerImpl.java", "methodName": "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.isAnonymousRequest", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "protected boolean isAnonymousRequest(SlingHttpServletRequest request) {\n        return (request.getAuthType() == null || request.getRemoteUser() == null);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ParenthesizedExpression(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines if the request has been authenticated or is Anonymous.", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getAuthType", "org.apache.sling.api.SlingHttpServletRequest.getRemoteUser"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "264", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/impl/ErrorPageHandlerImpl.java", "methodName": "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.authenticateRequest", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "request#response#", "methodBody": "protected boolean authenticateRequest(SlingHttpServletRequest request, SlingHttpServletResponse response) {\n        if (authenticator == null) {\n            log.warn(\"Cannot login: Missing Authenticator service\");\n            return false;\n        }\n\n        authenticator.login(request, response);\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Attempts to invoke a valid Sling Authentication Handler for the request.", "call_func_name": ["org.slf4j.Logger.warn", "org.apache.sling.commons.auth.Authenticator.login"], "call_func_parameter": [["java.lang.String"], ["javax.servlet.http.HttpServletRequest", "javax.servlet.http.HttpServletResponse"]], "passed_comments": "/"}, {"index": "265", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/impl/ErrorPageHandlerImpl.java", "methodName": "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.doHandle404", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "request#response#", "methodBody": "@Override\n    public boolean doHandle404(SlingHttpServletRequest request, SlingHttpServletResponse response) {\n        String path = request.getResource().getPath();\n\n        if (StringUtils.isBlank(path)) {\n            path = request.getPathInfo();\n        }\n\n\n        if (log.isDebugEnabled()) {\n\n            InfoWriter iw = new InfoWriter();\n\n            iw.title(\"ACS AEM Commons - Error Page Handler 404 Handling\");\n\n            iw.message(\"Status code: {}\", this.getStatusCode(request));\n            iw.message(\"Is anonymous: {}\", isAnonymousRequest(request));\n            iw.message(\"Is browser request: {}\", AuthUtil.isBrowserRequest(request));\n            iw.message(\"Is redirect to login page: {}\", this.isRedirectToLogin(path));\n            iw.message(\"Default 404 Behavior: {}\", this.notFoundBehavior);\n\n            iw.line();\n\n            log.debug(iw.toString());\n        }\n\n        if (this.getStatusCode(request) == SlingHttpServletResponse.SC_NOT_FOUND\n                && this.isAnonymousRequest(request)\n                && AuthUtil.isBrowserRequest(request)\n                && this.isRedirectToLogin(path)) {\n\n            // Authenticate Request\n            // If an authenticator cannot be found, then process as a normal 404\n            return !authenticateRequest(request, response);\n\n        } else {\n            log.debug(\"Allow error page handler to handle request\");\n\n            return true;\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#ThisExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#ThisExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ThisExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ThisExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(InfixExpression(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Determine is the request is a 404 and if so handles the request appropriately base on some CQ idiosyncrasies. <p> Mainly forces an authentication request in Authoring modes (!WCMMode.DISABLED)", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getResource", "org.apache.sling.api.resource.Resource.getPath", "org.apache.commons.lang.StringUtils.isBlank", "org.apache.sling.api.SlingHttpServletRequest.getPathInfo", "org.slf4j.Logger.isDebugEnabled", "com.adobe.acs.commons.util.InfoWriter.<init>", "com.adobe.acs.commons.util.InfoWriter.title", "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.getStatusCode", "java.lang.Integer.valueOf", "com.adobe.acs.commons.util.InfoWriter.message", "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.isAnonymousRequest", "java.lang.Boolean.valueOf", "org.apache.sling.auth.core.AuthUtil.isBrowserRequest", "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.isRedirectToLogin", "com.adobe.acs.commons.util.InfoWriter.line", "com.adobe.acs.commons.util.InfoWriter.toString", "org.slf4j.Logger.debug", "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.authenticateRequest"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.String"], ["org.apache.sling.api.SlingHttpServletRequest"], ["int"], ["java.lang.String", "java.lang.Object[]"], ["org.apache.sling.api.SlingHttpServletRequest"], ["boolean"], ["javax.servlet.http.HttpServletRequest"], ["java.lang.String"], [""], [""], ["java.lang.String"], ["org.apache.sling.api.SlingHttpServletRequest", "org.apache.sling.api.SlingHttpServletResponse"]], "passed_comments": [{"com.adobe.acs.commons.util.InfoWriter.title": "Creates the opening line with a Title."}, {"com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.getStatusCode": "Get Error Status Code from Request or Default (500) if no status code can be found."}, {"com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.isAnonymousRequest": "Determines if the request has been authenticated or is Anonymous."}, {"com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.isRedirectToLogin": "Determines if the request should redirect to login or respond with 404 based on the Error Page Handler's config."}, {"com.adobe.acs.commons.util.InfoWriter.line": "Creates a line."}, {"com.adobe.acs.commons.util.InfoWriter.line": "Creates an indented (with whitespace) line."}, {"com.adobe.acs.commons.util.InfoWriter.toString": "Gets the string representation of the InfoWriter."}, {"com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.authenticateRequest": "Attempts to invoke a valid Sling Authentication Handler for the request."}]}, {"index": "266", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/impl/ErrorPageHandlerImpl.java", "methodName": "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.isRedirectToLogin", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "private boolean isRedirectToLogin(final String path) {\n        log.debug(\"Not Found Behavior: {}\", this.notFoundBehavior);\n\n        if (StringUtils.equals(REDIRECT_TO_LOGIN, this.notFoundBehavior)) {\n            // Default behavior redirect to login\n            for (final Pattern p : this.notFoundExclusionPatterns) {\n                final Matcher m = p.matcher(path);\n                if (m.matches()) {\n                    // Path is an exclusion to \"redirect to login\" ~> \"respond w/ 404\"\n                    log.debug(\"Path is an exclusion to \\\"redirect to login\\\" ~> \\\"respond w/ 404\\\"\");\n                    return false;\n                }\n            }\n            // Path did NOT match exclusions for \"redirect to login\" ~> \"redirect to login\"\n            log.debug(\"Path did NOT match exclusions for \\\"redirect to login\\\" ~> \\\"redirect to login\\\"\");\n            return true;\n        } else {\n            // Default behavior is to respond w/ 404\n            for (final Pattern p : this.notFoundExclusionPatterns) {\n                final Matcher m = p.matcher(path);\n                if (m.matches()) {\n                    // Path is an exclusion to \"respond w/ 404\" ~> \"redirect to login\"\n                    log.debug(\"Path is an exclusion to \\\"respond w/ 404\\\" ~> \\\"redirect to login\\\"\");\n                    return true;\n                }\n            }\n\n            // Path did NOT match exclusions for \"respond w/ 404\" ~> \"respond w/ 404\"\n            log.debug(\"Path did NOT match exclusions for \\\"respond w/ 404\\\" ~> \\\"respond w/ 404\\\"\");\n            return false;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Determines if the request should redirect to login or respond with 404 based on the Error Page Handler's config.", "call_func_name": ["org.slf4j.Logger.debug", "org.apache.commons.lang.StringUtils.equals", "java.util.ArrayList.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "org.slf4j.Logger.debug"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], [""], [""], ["java.lang.CharSequence"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "267", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/impl/ErrorPageHandlerImpl.java", "methodName": "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.getException", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "@Override\n    public String getException(SlingHttpServletRequest request) {\n        StringWriter stringWriter = new StringWriter();\n        if (request.getAttribute(SlingConstants.ERROR_EXCEPTION) instanceof Throwable) {\n            Throwable throwable = (Throwable) request.getAttribute(SlingConstants.ERROR_EXCEPTION);\n\n            if (throwable == null) {\n                return \"\";\n            }\n\n            if (throwable instanceof ServletException) {\n                ServletException se = (ServletException) throwable;\n                while (se.getRootCause() != null) {\n                    throwable = se.getRootCause();\n                    if (throwable instanceof ServletException) {\n                        se = (ServletException) throwable;\n                    } else {\n                        break;\n                    }\n                }\n            }\n\n            throwable.printStackTrace(new PrintWriter(stringWriter, true));\n        }\n\n        return stringWriter.toString();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#StringLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#Assignment#ExpressionStatement#Block#BreakStatement#Block#IfStatement#Block#WhileStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#BooleanLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement)Block(Block(BreakStatement)BreakStatement)Block)IfStatement)Block)WhileStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Exception Message (Stacktrace) from the Request.", "call_func_name": ["java.io.StringWriter.<init>", "org.apache.sling.api.SlingHttpServletRequest.getAttribute", "javax.servlet.ServletException.getRootCause", "java.io.PrintWriter.<init>", "java.lang.Throwable.printStackTrace", "java.io.StringWriter.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.io.Writer", "boolean"], ["java.io.PrintWriter"], [""]], "passed_comments": "/"}, {"index": "268", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/impl/ErrorPageHandlerImpl.java", "methodName": "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.getRequestProgress", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "@Override\n    public String getRequestProgress(SlingHttpServletRequest request) {\n        StringWriter stringWriter = new StringWriter();\n        if (request != null) {\n            RequestProgressTracker tracker = request.getRequestProgressTracker();\n            tracker.dump(new PrintWriter(stringWriter, true));\n        }\n        return stringWriter.toString();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#BooleanLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a String representation of the RequestProgress trace.", "call_func_name": ["java.io.StringWriter.<init>", "org.apache.sling.api.SlingHttpServletRequest.getRequestProgressTracker", "java.io.PrintWriter.<init>", "org.apache.sling.api.request.RequestProgressTracker.dump", "java.io.StringWriter.toString"], "call_func_parameter": [[""], [""], ["java.io.Writer", "boolean"], ["java.io.PrintWriter"], [""]], "passed_comments": "/"}, {"index": "269", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/impl/ErrorPageHandlerImpl.java", "methodName": "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.resetRequestAndResponse", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#int#", "methodParameterName": "request#response#statusCode#", "methodBody": "@Override\n    public void resetRequestAndResponse(SlingHttpServletRequest request, SlingHttpServletResponse response,\n                                        int statusCode) {\n        // Clear client libraries. Would be better if there was a proper API call for this, but there isn't at present.\n        request.setAttribute(\"com.day.cq.widget.HtmlLibraryManager.included\",\n                new HashSet<String>());\n\n        // Fixes AEM 6.2 issue (https://github.com/Adobe-Consulting-Services/acs-aem-commons/issues/790)\n        request.setAttribute(\"com.adobe.granite.ui.clientlibs.HtmlLibraryManager.included\",\n                new HashSet<String>());\n\n        //Reset the component context attribute to remove inclusion of response from top level components\n        request.removeAttribute(\"com.day.cq.wcm.componentcontext\");\n\n        // Clear the response\n        response.reset();\n        response.setContentType(\"text/html\");\n        response.setStatus(statusCode);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Reset response attributes to support printing out a new page (rather than one that potentially errored out). This includes clearing clientlib inclusion state, and resetting the response. <p> If the response is committed, and it hasnt been closed by code, check the response AND jsp buffer sizes and ensure they are large enough to NOT force a buffer flush.", "call_func_name": ["java.util.HashSet.<init>", "org.apache.sling.api.SlingHttpServletRequest.setAttribute", "org.apache.sling.api.SlingHttpServletRequest.removeAttribute", "org.apache.sling.api.SlingHttpServletResponse.reset", "org.apache.sling.api.SlingHttpServletResponse.setContentType", "org.apache.sling.api.SlingHttpServletResponse.setStatus"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object"], ["java.lang.String"], [""], ["java.lang.String"], ["int"]], "passed_comments": "/"}, {"index": "270", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/impl/ErrorPageHandlerImpl.java", "methodName": "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.toSimpleEntry", "methodParameterType": "String#String#", "methodParameterName": "value#separator#", "methodBody": "private SimpleEntry<String, String> toSimpleEntry(String value, String separator) {\n        String[] tmp = StringUtils.split(value, separator);\n\n        if (tmp == null) {\n            return null;\n        }\n\n        if (tmp.length == 2) {\n            return new SimpleEntry<String, String>(tmp[0], tmp[1]);\n        } else {\n            return null;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#NumberLiteral#ArrayAccess#SimpleName#NumberLiteral#ArrayAccess#ClassInstanceCreation#ReturnStatement#Block#NullLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Util for parsing Service properties in the form &gt;value&lt;&gt;separator&lt;&gt;value&lt;.", "call_func_name": ["org.apache.commons.lang.StringUtils.split"], "call_func_parameter": [["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "271", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/impl/ErrorPageHandlerImpl.java", "methodName": "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.configurePathMap", "methodParameterType": "String[]#", "methodParameterName": "paths#", "methodBody": "private SortedMap<String, String> configurePathMap(String[] paths) {\n        SortedMap<String, String> sortedMap = new TreeMap<String, String>(new StringLengthComparator());\n\n        for (String path : paths) {\n            if (StringUtils.isBlank(path)) {\n                continue;\n            }\n\n            final SimpleEntry<String, String> tmp = toSimpleEntry(path, \":\");\n\n            if (tmp == null) {\n                continue;\n            }\n\n            String key = StringUtils.strip(tmp.getKey());\n            String val = StringUtils.strip(tmp.getValue());\n\n            // Only accept absolute paths\n            if (StringUtils.isBlank(key) || !StringUtils.startsWith(key, \"/\")) {\n                continue;\n            }\n\n            // Validate page name value\n            if (StringUtils.isBlank(val)) {\n                val = key + \"/\" + DEFAULT_ERROR_PAGE_NAME;\n            } else if (StringUtils.equals(val, \".\")) {\n                val = key;\n            } else if (!StringUtils.startsWith(val, \"/\")) {\n                val = key + \"/\" + val;\n            }\n\n            sortedMap.put(key, val);\n        }\n\n        return sortedMap;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ContinueStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement)IfStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convert OSGi Property storing Root content paths:Error page paths into a SortMap.", "call_func_name": ["com.adobe.acs.commons.errorpagehandler.impl.StringLengthComparator.<init>", "java.util.TreeMap.<init>", "org.apache.commons.lang.StringUtils.isBlank", "com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.toSimpleEntry", "org.apache.commons.lang.StringUtils.strip", "org.apache.commons.lang.StringUtils.startsWith", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.commons.lang.StringUtils.equals", "java.util.SortedMap.put"], "call_func_parameter": [[""], ["java.util.Comparator"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.errorpagehandler.impl.ErrorPageHandlerImpl.toSimpleEntry": "Util for parsing Service properties in the form &gt;value&lt;&gt;separator&lt;&gt;value&lt;."}]}, {"index": "272", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/ErrorPageHandlerService.java", "methodName": "com.adobe.acs.commons.errorpagehandler.ErrorPageHandlerService.isEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isEnabled();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Determines if this Service is \"enabled\". If it has been configured to be \"Disabled\" the Service still exists however it should not be used. This OSGi Property toggle allows error page handler to be toggled on an off without via OSGi means without throwing Null pointers, etc.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "273", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/ErrorPageHandlerService.java", "methodName": "com.adobe.acs.commons.errorpagehandler.ErrorPageHandlerService.findErrorPage", "methodParameterType": "SlingHttpServletRequest#Resource#", "methodParameterName": "request#errorResource#", "methodBody": "String findErrorPage(SlingHttpServletRequest request, Resource errorResource);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Find the JCR full path to the most appropriate Error Page", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "274", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/ErrorPageHandlerService.java", "methodName": "com.adobe.acs.commons.errorpagehandler.ErrorPageHandlerService.getStatusCode", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "int getStatusCode(SlingHttpServletRequest request);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Get Error Status Code from Request or Default (500) if no status code can be found", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "275", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/ErrorPageHandlerService.java", "methodName": "com.adobe.acs.commons.errorpagehandler.ErrorPageHandlerService.getErrorPageName", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "String getErrorPageName(SlingHttpServletRequest request);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Get the Error Page's name (all lowercase) that should be used to render the page for this error. This looks at the Servlet Sling has already resolved to handle this request (making Sling do all the hard work)!", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "276", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/ErrorPageHandlerService.java", "methodName": "com.adobe.acs.commons.errorpagehandler.ErrorPageHandlerService.doHandle404", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "request#response#", "methodBody": "boolean doHandle404(SlingHttpServletRequest request, SlingHttpServletResponse response);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Determine is the request is a 404 and if so handles the request appropriately base on some CQ idiosyncrasies . Invokes the AEM Login Selector Autheticator on 404'ing requests made by anonymous users.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "277", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/ErrorPageHandlerService.java", "methodName": "com.adobe.acs.commons.errorpagehandler.ErrorPageHandlerService.getException", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "String getException(SlingHttpServletRequest request);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the Exception Message (Stacktrace) from the Request", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "278", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/ErrorPageHandlerService.java", "methodName": "com.adobe.acs.commons.errorpagehandler.ErrorPageHandlerService.getRequestProgress", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "String getRequestProgress(SlingHttpServletRequest request);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns a String representation of the RequestProgress trace", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "279", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/ErrorPageHandlerService.java", "methodName": "com.adobe.acs.commons.errorpagehandler.ErrorPageHandlerService.resetRequestAndResponse", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#int#", "methodParameterName": "request#response#statusCode#", "methodBody": "void resetRequestAndResponse(SlingHttpServletRequest request, SlingHttpServletResponse response, int statusCode);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Reset response attributes to support printing out a new page (rather than one that potentially errored out). This includes clearing clientlib inclusion state, and resetting the response. If the response is committed, and it hasnt been closed by code, check the response AND jsp buffer sizes and ensure they are large enough to NOT force a buffer flush.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "280", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/ErrorPageHandlerService.java", "methodName": "com.adobe.acs.commons.errorpagehandler.ErrorPageHandlerService.includeUsingGET", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#String#", "methodParameterName": "request#response#path#", "methodBody": "@SuppressWarnings(\"checkstyle:abbreviationaswordinname\")\n    void includeUsingGET(SlingHttpServletRequest request, SlingHttpServletResponse response, String path);", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Include the path, forcing the request method to be GET. This method will silently swallow exceptions.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "281", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/errorpagehandler/ErrorPageHandlerService.java", "methodName": "com.adobe.acs.commons.errorpagehandler.ErrorPageHandlerService.isVanityDispatchCheckEnabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isVanityDispatchCheckEnabled();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Determines if Vanity-URL dispatch check is enabled. When enabled and current request URI is a valid vanity (after performing resource resolver mapping), request will be forwarded.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "282", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/quickly/operations/AbstractOperation.java", "methodName": "com.adobe.acs.commons.quickly.operations.AbstractOperation.getResults", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#Command#", "methodParameterName": "request#response#cmd#", "methodBody": "@Override\n    public Collection<Result> getResults(final SlingHttpServletRequest request,\n                                         final SlingHttpServletResponse response,\n                                         final Command cmd) {\n\n        if (StringUtils.isBlank(cmd.getParam())) {\n            return this.withoutParams(request, response, cmd);\n        } else {\n            return this.withParams(request, response, cmd);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Gets results of the operation.", "call_func_name": ["com.adobe.acs.commons.quickly.Command.getParam", "org.apache.commons.lang.StringUtils.isBlank", "com.adobe.acs.commons.quickly.operations.AbstractOperation.withoutParams", "com.adobe.acs.commons.quickly.operations.AbstractOperation.withParams"], "call_func_parameter": [[""], ["java.lang.String"], ["org.apache.sling.api.SlingHttpServletRequest", "org.apache.sling.api.SlingHttpServletResponse", "com.adobe.acs.commons.quickly.Command"], ["org.apache.sling.api.SlingHttpServletRequest", "org.apache.sling.api.SlingHttpServletResponse", "com.adobe.acs.commons.quickly.Command"]], "passed_comments": [{"com.adobe.acs.commons.quickly.operations.AbstractOperation.withoutParams": "Returns a list of results for a Command without params."}, {"com.adobe.acs.commons.quickly.operations.AbstractOperation.withParams": "Returns a list of results for a Command with params."}]}, {"index": "283", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/quickly/operations/AbstractOperation.java", "methodName": "com.adobe.acs.commons.quickly.operations.AbstractOperation.withoutParams", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#Command#", "methodParameterName": "request#response#cmd#", "methodBody": "protected abstract List<Result> withoutParams(final SlingHttpServletRequest request,\n                                                  final SlingHttpServletResponse response,\n                                                  final Command cmd);", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns a list of results for a Command without params.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "284", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/quickly/operations/AbstractOperation.java", "methodName": "com.adobe.acs.commons.quickly.operations.AbstractOperation.withParams", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#Command#", "methodParameterName": "request#response#cmd#", "methodBody": "protected abstract List<Result> withParams(final SlingHttpServletRequest request,\n                                               final SlingHttpServletResponse response,\n                                               final Command cmd);", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns a list of results for a Command with params.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "285", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/quickly/operations/impl/GoOperationImpl.java", "methodName": "com.adobe.acs.commons.quickly.operations.impl.GoOperationImpl.buildShortcuts", "methodParameterType": "ResourceResolver#", "methodParameterName": "resourceResolver#", "methodBody": "private List<Result> buildShortcuts(final ResourceResolver resourceResolver) {\n        final List<Result> shortcuts = new ArrayList<Result>();\n\n        shortcuts.addAll(new ClassicConsoleResults().getResults(resourceResolver));\n        shortcuts.addAll(new TouchConsoleResults().getResults(resourceResolver));\n        shortcuts.addAll(DevConsoleResults.getResults());\n        shortcuts.addAll(new OpsConsoleResults().getResults());\n        shortcuts.addAll(new ACSToolsResults().getResults(resourceResolver));\n\n        /* Switching Authoring UI Modes */\n\n        shortcuts.add(new Result.Builder(\"touch\")\n                .description(\"Switch to Touch UI\")\n                .action(new Action.Builder()\n                    .script(\"document.cookie='cq-authoring-mode=TOUCH;path=/;'\")\n                    .build())\n                .classic()\n                .build());\n\n        shortcuts.add(new Result.Builder(\"classic\")\n                .description(\"Switch to Classic UI\")\n                .action(new Action.Builder()\n                        .script(\"document.cookie='cq-authoring-mode=CLASSIC;path=/;'\")\n                        .build())\n                .classic()\n                .touch()\n                .build());\n\n        return shortcuts;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#StringLiteral#ClassInstanceCreation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#StringLiteral#ClassInstanceCreation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Build the manually curated shortcuts lists. This must be built every time due to permissions checking", "call_func_name": ["java.util.ArrayList.<init>", "com.adobe.acs.commons.quickly.results.impl.lists.ClassicConsoleResults.<init>", "com.adobe.acs.commons.quickly.results.impl.lists.ClassicConsoleResults.getResults", "java.util.List.addAll", "com.adobe.acs.commons.quickly.results.impl.lists.TouchConsoleResults.<init>", "com.adobe.acs.commons.quickly.results.impl.lists.TouchConsoleResults.getResults", "com.adobe.acs.commons.quickly.results.impl.lists.DevConsoleResults.getResults", "com.adobe.acs.commons.quickly.results.impl.lists.OpsConsoleResults.<init>", "com.adobe.acs.commons.quickly.results.impl.lists.OpsConsoleResults.getResults", "com.adobe.acs.commons.quickly.results.impl.lists.ACSToolsResults.<init>", "com.adobe.acs.commons.quickly.results.impl.lists.ACSToolsResults.getResults", "java.util.List.add"], "call_func_parameter": [[""], [""], ["org.apache.sling.api.resource.ResourceResolver"], ["java.util.Collection"], [""], ["org.apache.sling.api.resource.ResourceResolver"], [""], [""], [""], [""], ["org.apache.sling.api.resource.ResourceResolver"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "286", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/quickly/operations/Operation.java", "methodName": "com.adobe.acs.commons.quickly.operations.Operation.accepts", "methodParameterType": "SlingHttpServletRequest#Command#", "methodParameterName": "slingRequest#cmd#", "methodBody": "boolean accepts(SlingHttpServletRequest slingRequest, Command cmd);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Checks if the Operation should handle the Command/Request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "287", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/quickly/operations/Operation.java", "methodName": "com.adobe.acs.commons.quickly.operations.Operation.getResults", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#Command#", "methodParameterName": "request#response#cmd#", "methodBody": "Collection<Result> getResults(SlingHttpServletRequest request, SlingHttpServletResponse response,\n                                  Command cmd);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns a list of Results.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "288", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/quickly/operations/Operation.java", "methodName": "com.adobe.acs.commons.quickly.operations.Operation.getCmd", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getCmd();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the command operation this Operation is registered for.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "289", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/quickly/results/ResultSerializer.java", "methodName": "com.adobe.acs.commons.quickly.results.ResultSerializer.toJSON", "methodParameterType": "Result#ValueMap#", "methodParameterName": "result#config#", "methodBody": "JsonObject toJSON(Result result, ValueMap config);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Turns a Result object into a JSON object", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "290", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/quickly/results/ResultBuilder.java", "methodName": "com.adobe.acs.commons.quickly.results.ResultBuilder.toJSON", "methodParameterType": "Command#Result#ValueMap#", "methodParameterName": "cmd#result#config#", "methodBody": "JsonObject toJSON(Command cmd, Result result, ValueMap config);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Turns the Result combination into a JSON object by way of ResultSerializers.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "291", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/quickly/QuicklyEngine.java", "methodName": "com.adobe.acs.commons.quickly.QuicklyEngine.execute", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#Command#", "methodParameterName": "slingRequest#slingResponse#cmd#", "methodBody": "JsonObject execute(SlingHttpServletRequest slingRequest,\n                       SlingHttpServletResponse slingResponse,\n                       Command cmd);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "@param slingRequest the Request object", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "292", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedSupplier.java", "methodName": "com.adobe.acs.commons.functions.CheckedSupplier.get", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "T get() throws Exception;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Gets a result.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "293", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedFunction.java", "methodName": "com.adobe.acs.commons.functions.CheckedFunction.apply", "methodParameterType": "T#", "methodParameterName": "t#", "methodBody": "public R apply(T t) throws Exception;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Applies this function to the given argument.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "294", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedFunction.java", "methodName": "com.adobe.acs.commons.functions.CheckedFunction.compose", "methodParameterType": "CheckedFunction<? super V,? extends T>#", "methodParameterName": "before#", "methodBody": "default <V> CheckedFunction<V, R> compose(final CheckedFunction<? super V, ? extends T> before) {\n        if (before == null) {\n            throw new NullPointerException();\n        }\n        return (V t) -> apply(before.apply(t));\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(LambdaExpression(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a composed function that first applies the  {@code before}function to its input, and then applies this function to the result. If evaluation of either function throws an exception, it is relayed to the caller of the composed function.", "call_func_name": ["java.lang.NullPointerException.<init>", "com.adobe.acs.commons.functions.CheckedFunction.apply"], "call_func_parameter": [[""], ["com.adobe.acs.commons.functions.CheckedFunction", "com.adobe.acs.commons.functions.CheckedFunction"]], "passed_comments": "/"}, {"index": "295", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedFunction.java", "methodName": "com.adobe.acs.commons.functions.CheckedFunction.andThen", "methodParameterType": "CheckedFunction<? super R,? extends V>#", "methodParameterName": "after#", "methodBody": "default <V> CheckedFunction<T, V> andThen(final CheckedFunction<? super R, ? extends V> after) {\n        if (after == null) {\n            throw new NullPointerException();\n        }\n        return (T t) -> after.apply(apply(t));\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(LambdaExpression(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a composed function that first applies this function to its input, and then applies the  {@code after} function to the result.If evaluation of either function throws an exception, it is relayed to the caller of the composed function.", "call_func_name": ["java.lang.NullPointerException.<init>", "com.adobe.acs.commons.functions.CheckedFunction.apply"], "call_func_parameter": [[""], ["com.adobe.acs.commons.functions.CheckedFunction", "com.adobe.acs.commons.functions.CheckedFunction"]], "passed_comments": "/"}, {"index": "296", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedFunction.java", "methodName": "com.adobe.acs.commons.functions.CheckedFunction.identity", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static <T> CheckedFunction<T, T> identity() {\n        return (T t) -> t;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(LambdaExpression(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a function that always returns its input argument.", "call_func_name": ["com.adobe.acs.commons.functions.CheckedFunction.apply"], "call_func_parameter": [[""]], "passed_comments": [{"com.adobe.acs.commons.functions.CheckedFunction.apply": "Applies this function to the given argument."}]}, {"index": "297", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedBiFunction.java", "methodName": "com.adobe.acs.commons.functions.CheckedBiFunction.apply", "methodParameterType": "T#U#", "methodParameterName": "t#u#", "methodBody": "R apply(T t, U u) throws Exception;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Applies this function to the given arguments.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "298", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedBiFunction.java", "methodName": "com.adobe.acs.commons.functions.CheckedBiFunction.andThen", "methodParameterType": "CheckedFunction<? super R,? extends V>#", "methodParameterName": "after#", "methodBody": "default <V> CheckedBiFunction<T, U, V> andThen(final CheckedFunction<? super R, ? extends V> after) {\n        if (after == null) {\n            throw new NullPointerException();\n        }\n        return (T t, U u) -> after.apply(apply(t, u));\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(LambdaExpression(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a composed function that first applies this function to its input, and then applies the  {@code after} function to the result.If evaluation of either function throws an exception, it is relayed to the caller of the composed function.", "call_func_name": ["java.lang.NullPointerException.<init>", "com.adobe.acs.commons.functions.CheckedBiFunction.apply"], "call_func_parameter": [[""], ["com.adobe.acs.commons.functions.CheckedBiFunction", "com.adobe.acs.commons.functions.CheckedFunction"]], "passed_comments": "/"}, {"index": "299", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedBiConsumer.java", "methodName": "com.adobe.acs.commons.functions.CheckedBiConsumer.accept", "methodParameterType": "T#U#", "methodParameterName": "t#u#", "methodBody": "void accept(T t, U u) throws Exception;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Performs this operation on the given arguments.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "300", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedBiConsumer.java", "methodName": "com.adobe.acs.commons.functions.CheckedBiConsumer.andThen", "methodParameterType": "CheckedBiConsumer<? super T,? super U>#", "methodParameterName": "after#", "methodBody": "default CheckedBiConsumer<T, U> andThen(final CheckedBiConsumer<? super T, ? super U> after) {\n        if (after == null) {\n            throw new NullPointerException();\n        }\n        return (T t, U u) -> {\n            accept(t, u);\n            after.accept(t, u);\n        };\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(LambdaExpression(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a composed  {@code BiConsumer} that performs, in sequence, thisoperation followed by the  {@code after} operation. If performing eitheroperation throws an exception, it is relayed to the caller of the composed operation.  If performing this operation throws an exception, the  {@code after} operation will not be performed.", "call_func_name": ["java.lang.NullPointerException.<init>", "com.adobe.acs.commons.functions.CheckedBiConsumer.accept"], "call_func_parameter": [[""], ["com.adobe.acs.commons.functions.CheckedBiConsumer", "com.adobe.acs.commons.functions.CheckedBiConsumer"]], "passed_comments": "/"}, {"index": "301", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/BufferedSlingHttpServletResponse.java", "methodName": "com.adobe.acs.commons.util.BufferedSlingHttpServletResponse.getBufferedServletOutput", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public BufferedServletOutput getBufferedServletOutput() {\n        return bufferedOutput;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the underlying wrapper around the buffered output", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "302", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/RunnableOnMaster.java", "methodName": "com.adobe.acs.commons.util.RunnableOnMaster.runOnMaster", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected abstract void runOnMaster();", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Run the scheduled job.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "303", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/RunnableOnMaster.java", "methodName": "com.adobe.acs.commons.util.RunnableOnMaster.handleTopologyEvent", "methodParameterType": "TopologyEvent#", "methodParameterName": "te#", "methodBody": "@Override\n    public void handleTopologyEvent(TopologyEvent te) {\n        this.isLeader = te.getNewView().getLocalInstance().isLeader();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.sling.discovery.TopologyEvent.getNewView", "org.apache.sling.discovery.TopologyView.getLocalInstance", "org.apache.sling.discovery.InstanceDescription.isLeader"], "call_func_parameter": [[""], [""], [""]], "passed_comments": "/"}, {"index": "304", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/RunnableOnMaster.java", "methodName": "com.adobe.acs.commons.util.RunnableOnMaster.run", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public final void run() {\n        if (isLeader) {\n            runOnMaster();\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["com.adobe.acs.commons.util.RunnableOnMaster.runOnMaster"], "call_func_parameter": [[""]], "passed_comments": [{"com.adobe.acs.commons.util.RunnableOnMaster.runOnMaster": "Run the scheduled job."}]}, {"index": "305", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ResourceUtil.java", "methodName": "com.adobe.acs.commons.util.ResourceUtil.ResourceUtil", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private ResourceUtil() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Private ctor to hide the defualt public ctor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "306", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ResourceUtil.java", "methodName": "com.adobe.acs.commons.util.ResourceUtil.getPropertyBoolean", "methodParameterType": "Resource#String#", "methodParameterName": "resource#namePattern#", "methodBody": "public static boolean getPropertyBoolean(Resource resource, String namePattern) {\n        return resource.getValueMap().get(namePattern, false);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convenience method for getting a single-value boolean property from a resource.", "call_func_name": ["org.apache.sling.api.resource.Resource.getValueMap", "java.lang.Boolean.valueOf", "org.apache.sling.api.resource.ValueMap.get", "java.lang.Boolean.booleanValue"], "call_func_parameter": [[""], ["boolean"], ["java.lang.String", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "307", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ResourceUtil.java", "methodName": "com.adobe.acs.commons.util.ResourceUtil.getPropertyCalendar", "methodParameterType": "Resource#String#", "methodParameterName": "resource#namePattern#", "methodBody": "public static Calendar getPropertyCalendar(Resource resource, String namePattern) {\n        return resource.getValueMap().get(namePattern, Calendar.class);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convenience method for getting a single-value Calendar property from a resource.", "call_func_name": ["org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.get"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Class"]], "passed_comments": "/"}, {"index": "308", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ResourceUtil.java", "methodName": "com.adobe.acs.commons.util.ResourceUtil.getPropertyDate", "methodParameterType": "Resource#String#", "methodParameterName": "resource#namePattern#", "methodBody": "public static Date getPropertyDate(Resource resource, String namePattern) {\n        return resource.getValueMap().get(namePattern, Date.class);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convenience method for getting a single-value Date property from a resource.", "call_func_name": ["org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.get"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Class"]], "passed_comments": "/"}, {"index": "309", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ResourceUtil.java", "methodName": "com.adobe.acs.commons.util.ResourceUtil.getPropertyDecimal", "methodParameterType": "Resource#String#", "methodParameterName": "resource#namePattern#", "methodBody": "public static BigDecimal getPropertyDecimal(Resource resource, String namePattern) {\n        return resource.getValueMap().get(namePattern, BigDecimal.class);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Conventience method for getting a single-value BigDecimal property from a resource.", "call_func_name": ["org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.get"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Class"]], "passed_comments": "/"}, {"index": "310", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ResourceUtil.java", "methodName": "com.adobe.acs.commons.util.ResourceUtil.getPropertyDouble", "methodParameterType": "Resource#String#", "methodParameterName": "resource#namePattern#", "methodBody": "public static Double getPropertyDouble(Resource resource, String namePattern) {\n        return resource.getValueMap().get(namePattern, Double.class);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Conventience method for getting a single-value Double property from a resource.", "call_func_name": ["org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.get"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Class"]], "passed_comments": "/"}, {"index": "311", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ResourceUtil.java", "methodName": "com.adobe.acs.commons.util.ResourceUtil.getPropertyLong", "methodParameterType": "Resource#String#", "methodParameterName": "resource#namePattern#", "methodBody": "public static Long getPropertyLong(Resource resource, String namePattern) {\n        return resource.getValueMap().get(namePattern, Long.class);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Conventience method for getting a single-value Long property from a resource.", "call_func_name": ["org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.get"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Class"]], "passed_comments": "/"}, {"index": "312", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ResourceUtil.java", "methodName": "com.adobe.acs.commons.util.ResourceUtil.getPropertyReference", "methodParameterType": "Resource#String#", "methodParameterName": "resource#namePattern#", "methodBody": "public static Resource getPropertyReference(Resource resource, String namePattern) {\n        String referencePath = getPropertyString(resource, namePattern);\n        if (StringUtils.isNotBlank(referencePath)) {\n            return resource.getResourceResolver().getResource(referencePath);\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get a Resource from a path specified in a resource property. Returns null if the path cannot be resolved to a resource.", "call_func_name": ["com.adobe.acs.commons.util.ResourceUtil.getPropertyString", "org.apache.commons.lang3.StringUtils.isNotBlank", "org.apache.sling.api.resource.Resource.getResourceResolver", "org.apache.sling.api.resource.ResourceResolver.getResource"], "call_func_parameter": [["org.apache.sling.api.resource.Resource", "java.lang.String"], ["java.lang.CharSequence"], [""], ["java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.util.ResourceUtil.getPropertyString": "Convenience method for getting a single-value String property from a resource."}]}, {"index": "313", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ResourceUtil.java", "methodName": "com.adobe.acs.commons.util.ResourceUtil.getPropertyString", "methodParameterType": "Resource#String#", "methodParameterName": "resource#namePattern#", "methodBody": "public static String getPropertyString(Resource resource, String namePattern) {\n        return resource.getValueMap().get(namePattern, String.class);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convenience method for getting a single-value String property from a resource.", "call_func_name": ["org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.get"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Class"]], "passed_comments": "/"}, {"index": "314", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ResourceUtil.java", "methodName": "com.adobe.acs.commons.util.ResourceUtil.getPropertyStrings", "methodParameterType": "Resource#String#", "methodParameterName": "resource#namePattern#", "methodBody": "public static List<String> getPropertyStrings(Resource resource, String namePattern) {\n        String[] vals = resource.getValueMap().get(namePattern, String[].class);\n        return vals != null ? Arrays.asList(vals) : Collections.EMPTY_LIST;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convenience method for getting a multi-value String property from a resource.", "call_func_name": ["org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.get", "java.util.Arrays.asList"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Class"], ["java.lang.Object[]"]], "passed_comments": "/"}, {"index": "315", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ParameterUtil.java", "methodName": "com.adobe.acs.commons.util.ParameterUtil.toMapEntryWithOptionalValue", "methodParameterType": "String#String#", "methodParameterName": "value#separator#", "methodBody": "public static Map.Entry<String, String> toMapEntryWithOptionalValue(final String value, final String separator) {\n        return toSimpleEntry(value, separator, true);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Util for parsing Service properties in the form  {@code <value><separator><value>}", "call_func_name": ["com.adobe.acs.commons.util.ParameterUtil.toSimpleEntry"], "call_func_parameter": [["java.lang.String", "java.lang.String", "boolean"]], "passed_comments": [{"com.adobe.acs.commons.util.ParameterUtil.toSimpleEntry": "Util for parsing Service properties in the form  {@code <value><separator><value>}"}]}, {"index": "316", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ParameterUtil.java", "methodName": "com.adobe.acs.commons.util.ParameterUtil.toMapEntry", "methodParameterType": "String#String#", "methodParameterName": "value#separator#", "methodBody": "public static Map.Entry<String, String> toMapEntry(final String value, final String separator) {\n        return toSimpleEntry(value, separator, false);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Util for parsing Service properties in the form  {@code <value><separator><value>}", "call_func_name": ["com.adobe.acs.commons.util.ParameterUtil.toSimpleEntry"], "call_func_parameter": [["java.lang.String", "java.lang.String", "boolean"]], "passed_comments": [{"com.adobe.acs.commons.util.ParameterUtil.toSimpleEntry": "Util for parsing Service properties in the form  {@code <value><separator><value>}"}]}, {"index": "317", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ParameterUtil.java", "methodName": "com.adobe.acs.commons.util.ParameterUtil.toSimpleEntry", "methodParameterType": "String#String#boolean#", "methodParameterName": "value#separator#isValueOptional#", "methodBody": "private static AbstractMap.SimpleEntry<String, String> toSimpleEntry(final String value, final String separator, boolean isValueOptional) {\n        final String[] tmp = StringUtils.split(value, separator, 2);\n\n        if (tmp == null) {\n            return null;\n        }\n\n        if (tmp.length == 2) {\n            return new AbstractMap.SimpleEntry<String, String>(tmp[0], tmp[1]);\n        } else {\n            if (isValueOptional && tmp.length == 1) {\n                return new AbstractMap.SimpleEntry<String, String>(tmp[0], null);\n            }\n            return null;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#NumberLiteral#ArrayAccess#SimpleName#NumberLiteral#ArrayAccess#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#NumberLiteral#ArrayAccess#NullLiteral#ClassInstanceCreation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)ClassInstanceCreation)ReturnStatement)Block(Block(IfStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(NullLiteral)NullLiteral)ClassInstanceCreation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Util for parsing Service properties in the form  {@code <value><separator><value>}", "call_func_name": ["org.apache.commons.lang.StringUtils.split"], "call_func_parameter": [["java.lang.String", "java.lang.String", "int"]], "passed_comments": "/"}, {"index": "318", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ParameterUtil.java", "methodName": "com.adobe.acs.commons.util.ParameterUtil.toMap", "methodParameterType": "String[]#String#", "methodParameterName": "values#separator#", "methodBody": "public static Map<String, String> toMap(final String[] values, final String separator) {\n        return toMap(values, separator, false, null);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#BooleanLiteral#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Util for parsing Arrays of Service properties in the form &gt;value&lt;&gt;separator&lt;&gt;value&lt; If a value is missing from a key/value pair, the entry is rejected. To keep valueless keys used the overloaded version of this function with allowValuelessKeys = true", "call_func_name": ["com.adobe.acs.commons.util.ParameterUtil.toMap"], "call_func_parameter": [["java.lang.String[]", "java.lang.String", "boolean", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.util.ParameterUtil.toMap": "Util for parsing Arrays of Service properties in the form &gt;value&lt;&gt;separator&lt;&gt;value&lt; If a value is missing from a key/value pair, the entry is rejected only if allowValuelessKyes is false. To keep the valueless keys pass in allowValuelessKeys => true"}]}, {"index": "319", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ParameterUtil.java", "methodName": "com.adobe.acs.commons.util.ParameterUtil.toMap", "methodParameterType": "String[]#String#boolean#String#", "methodParameterName": "values#separator#allowValuelessKeys#defaultValue#", "methodBody": "public static Map<String, String> toMap(final String[] values, final String separator,\n                                            final boolean allowValuelessKeys, final String defaultValue) {\n        return toMap(values, separator, allowValuelessKeys, defaultValue, false);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Util for parsing Arrays of Service properties in the form &gt;value&lt;&gt;separator&lt;&gt;value&lt; If a value is missing from a key/value pair, the entry is rejected only if allowValuelessKyes is false. To keep the valueless keys pass in allowValuelessKeys => true", "call_func_name": ["com.adobe.acs.commons.util.ParameterUtil.toMap"], "call_func_parameter": [["java.lang.String[]", "java.lang.String", "boolean", "java.lang.String", "boolean"]], "passed_comments": [{"com.adobe.acs.commons.util.ParameterUtil.toMap": "Util for parsing Arrays of Service properties in the form &gt;value&lt;&gt;separator&lt;&gt;value&lt; If a value is missing from a key/value pair, the entry is rejected only if allowValuelessKyes is false. To keep the valueless keys pass in allowValuelessKeys => true"}]}, {"index": "320", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ParameterUtil.java", "methodName": "com.adobe.acs.commons.util.ParameterUtil.toMap", "methodParameterType": "String[]#String#boolean#String#boolean#", "methodParameterName": "values#separator#allowValuelessKeys#defaultValue#allowMultipleSeparators#", "methodBody": "@SuppressWarnings(\"squid:S3776\")\n    public static Map<String, String> toMap(final String[] values, final String separator,\n                                            final boolean allowValuelessKeys, final String defaultValue,\n                                            final boolean allowMultipleSeparators) {\n\n        final Map<String, String> map = new LinkedHashMap<String, String>();\n\n        if (values == null || values.length < 1) {\n            return map;\n        }\n\n        for (final String value : values) {\n            final String[] tmp = StringUtils.split(value, separator, allowMultipleSeparators ? 2 : -1);\n\n            if(tmp.length == 1 && allowValuelessKeys) {\n                if(StringUtils.startsWith(value, separator)) {\n                    // Skip keyless values\n                    continue;\n                }\n\n                if (StringUtils.stripToNull(tmp[0]) != null) {\n                    map.put(StringUtils.trim(tmp[0]), StringUtils.trimToEmpty(defaultValue));\n                }\n            } else if (tmp.length == 2\n                    && StringUtils.stripToNull(tmp[0]) != null) {\n                map.put(StringUtils.trim(tmp[0]), StringUtils.trimToEmpty(tmp[1]));\n            }\n        }\n\n        return map;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#NumberLiteral#PrefixExpression#ConditionalExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)ConditionalExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Util for parsing Arrays of Service properties in the form &gt;value&lt;&gt;separator&lt;&gt;value&lt; If a value is missing from a key/value pair, the entry is rejected only if allowValuelessKyes is false. To keep the valueless keys pass in allowValuelessKeys => true", "call_func_name": ["java.util.LinkedHashMap.<init>", "org.apache.commons.lang.StringUtils.split", "org.apache.commons.lang.StringUtils.startsWith", "org.apache.commons.lang.StringUtils.stripToNull", "org.apache.commons.lang.StringUtils.trim", "org.apache.commons.lang.StringUtils.trimToEmpty", "java.util.Map.put"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "int"], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "321", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ParameterUtil.java", "methodName": "com.adobe.acs.commons.util.ParameterUtil.toMap", "methodParameterType": "String[]#String#String#", "methodParameterName": "values#mapSeparator#listSeparator#", "methodBody": "public static Map<String, String[]> toMap(final String[] values, final String mapSeparator, final String listSeparator) {\n       return toMap(values, mapSeparator, listSeparator, false, null);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#Dimension#ArrayType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Util for parsing Arrays of Service properties in the form &gt;value&lt;&gt;map-separator&lt;&gt;value&gt;list-separator&lt;&gt;value&lt;&lt;", "call_func_name": ["com.adobe.acs.commons.util.ParameterUtil.toMap"], "call_func_parameter": [["java.lang.String[]", "java.lang.String", "java.lang.String", "boolean", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.util.ParameterUtil.toMap": "Util for parsing Arrays of Service properties in the form &gt;value&lt;&gt;map-separator&lt;&gt;value&gt;list-separator&lt;&gt;value&lt;&lt;"}]}, {"index": "322", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ParameterUtil.java", "methodName": "com.adobe.acs.commons.util.ParameterUtil.toMap", "methodParameterType": "String[]#String#String#boolean#String#", "methodParameterName": "values#mapSeparator#listSeparator#allowValuelessKeys#defaultValue#", "methodBody": "public static Map<String, String[]> toMap(final String[] values, final String mapSeparator, final String listSeparator,\n                                              final boolean allowValuelessKeys, final String defaultValue) {\n        final Map<String, String> map = toMap(values, mapSeparator, allowValuelessKeys, defaultValue);\n        final Map<String, String[]> result = new LinkedHashMap<>(map.size());\n        for (final Map.Entry<String, String> entry : map.entrySet()) {\n            result.put(entry.getKey(), StringUtils.split(entry.getValue(), listSeparator));\n        }\n        return result;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#Dimension#ArrayType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#Dimension#ArrayType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Util for parsing Arrays of Service properties in the form &gt;value&lt;&gt;map-separator&lt;&gt;value&gt;list-separator&lt;&gt;value&lt;&lt;", "call_func_name": ["com.adobe.acs.commons.util.ParameterUtil.toMap", "java.util.Map.size", "java.util.LinkedHashMap.<init>", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.commons.lang.StringUtils.split", "java.util.Map.put"], "call_func_parameter": [["java.lang.String[]", "java.lang.String", "boolean", "java.lang.String"], [""], ["int"], [""], [""], [""], [""], ["java.lang.String", "java.lang.String"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.util.ParameterUtil.toMap": "Util for parsing Arrays of Service properties in the form &gt;value&lt;&gt;separator&lt;&gt;value&lt; If a value is missing from a key/value pair, the entry is rejected only if allowValuelessKyes is false. To keep the valueless keys pass in allowValuelessKeys => true"}]}, {"index": "323", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ParameterUtil.java", "methodName": "com.adobe.acs.commons.util.ParameterUtil.toPatterns", "methodParameterType": "String[]#", "methodParameterName": "values#", "methodBody": "public static List<Pattern> toPatterns(String[] values) {\n        List<Pattern> patterns = new ArrayList<Pattern>();\n\n        if(values == null) {\n            return patterns;\n        }\n\n        for (String value : values) {\n            if (StringUtils.isNotBlank(value)) {\n                patterns.add(Pattern.compile(value));\n            }\n        }\n\n        return patterns;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Util for converting a String[] into a List of compiled Patterns. Empty/blank strings will be skipped.", "call_func_name": ["java.util.ArrayList.<init>", "org.apache.commons.lang.StringUtils.isNotBlank", "java.util.regex.Pattern.compile", "java.util.List.add"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "324", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ModeUtil.java", "methodName": "com.adobe.acs.commons.util.ModeUtil.isAuthor", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static boolean isAuthor() {\n        return isAuthor;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Is AEM runmode author.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "325", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ModeUtil.java", "methodName": "com.adobe.acs.commons.util.ModeUtil.isPublish", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static boolean isPublish() {\n        return isPublish;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Is AEM runmode publish.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "326", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ModeUtil.java", "methodName": "com.adobe.acs.commons.util.ModeUtil.isRunmode", "methodParameterType": "String#", "methodParameterName": "mode#", "methodBody": "public static boolean isRunmode(String mode) {\n        return runmodes.contains(mode);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Helper method to check for given runmode.", "call_func_name": ["java.util.Set.contains"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "327", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ModeUtil.java", "methodName": "com.adobe.acs.commons.util.ModeUtil.isAnalytics", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "public static boolean isAnalytics(SlingHttpServletRequest request) {\n        return WCMMode.ANALYTICS == getMode(request);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the request is in mode  {@link WCMMode#ANALYTICS}", "call_func_name": ["com.adobe.acs.commons.util.ModeUtil.getMode"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest"]], "passed_comments": "/"}, {"index": "328", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ModeUtil.java", "methodName": "com.adobe.acs.commons.util.ModeUtil.isDesign", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "public static boolean isDesign(SlingHttpServletRequest request) {\n        return WCMMode.DESIGN == getMode(request);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the request is in mode  {@link WCMMode#DESIGN}", "call_func_name": ["com.adobe.acs.commons.util.ModeUtil.getMode"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest"]], "passed_comments": "/"}, {"index": "329", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ModeUtil.java", "methodName": "com.adobe.acs.commons.util.ModeUtil.isDisabled", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "public static boolean isDisabled(SlingHttpServletRequest request) {\n        return WCMMode.DISABLED == getMode(request);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the request is in mode  {@link WCMMode#DISABLED}", "call_func_name": ["com.adobe.acs.commons.util.ModeUtil.getMode"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest"]], "passed_comments": "/"}, {"index": "330", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ModeUtil.java", "methodName": "com.adobe.acs.commons.util.ModeUtil.isEdit", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "public static boolean isEdit(SlingHttpServletRequest request) {\n        return WCMMode.EDIT == getMode(request);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the request is in mode  {@link WCMMode#EDIT}", "call_func_name": ["com.adobe.acs.commons.util.ModeUtil.getMode"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest"]], "passed_comments": "/"}, {"index": "331", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ModeUtil.java", "methodName": "com.adobe.acs.commons.util.ModeUtil.isPreview", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "public static boolean isPreview(SlingHttpServletRequest request) {\n        return WCMMode.PREVIEW == getMode(request);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the request is in mode  {@link WCMMode#PREVIEW}", "call_func_name": ["com.adobe.acs.commons.util.ModeUtil.getMode"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest"]], "passed_comments": "/"}, {"index": "332", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ModeUtil.java", "methodName": "com.adobe.acs.commons.util.ModeUtil.isReadOnly", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "public static boolean isReadOnly(SlingHttpServletRequest request) {\n        return WCMMode.READ_ONLY == getMode(request);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the request is in mode  {@link WCMMode#READ_ONLY}", "call_func_name": ["com.adobe.acs.commons.util.ModeUtil.getMode"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest"]], "passed_comments": "/"}, {"index": "333", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ModeUtil.java", "methodName": "com.adobe.acs.commons.util.ModeUtil.isClassic", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "public static boolean isClassic(SlingHttpServletRequest request) {\n        return AuthoringUIMode.CLASSIC == AuthoringUIMode.fromRequest(request);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the request is in  {@link AuthoringUIMode#CLASSIC}", "call_func_name": ["com.day.cq.wcm.api.AuthoringUIMode.fromRequest"], "call_func_parameter": [["javax.servlet.ServletRequest"]], "passed_comments": "/"}, {"index": "334", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ModeUtil.java", "methodName": "com.adobe.acs.commons.util.ModeUtil.isTouch", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "public static boolean isTouch(SlingHttpServletRequest request) {\n        return AuthoringUIMode.TOUCH == AuthoringUIMode.fromRequest(request);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the request is in  {@link AuthoringUIMode#TOUCH}", "call_func_name": ["com.day.cq.wcm.api.AuthoringUIMode.fromRequest"], "call_func_parameter": [["javax.servlet.ServletRequest"]], "passed_comments": "/"}, {"index": "335", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/visitors/ResourceRunnable.java", "methodName": "com.adobe.acs.commons.util.visitors.ResourceRunnable.run", "methodParameterType": "Resource#", "methodParameterName": "resource#", "methodBody": "@SuppressWarnings(\"squid:S00112\")\n    void run(Resource resource) throws Exception;", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Perform the work on the provided resource.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "336", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/visitors/TreeFilteringResourceVisitor.java", "methodName": "com.adobe.acs.commons.util.visitors.TreeFilteringResourceVisitor.TreeFilteringResourceVisitor", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public TreeFilteringResourceVisitor() {\n        this(TREE_TYPES);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Create a standard visitor for commonly used folder structures.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "337", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/visitors/TreeFilteringResourceVisitor.java", "methodName": "com.adobe.acs.commons.util.visitors.TreeFilteringResourceVisitor.TreeFilteringResourceVisitor", "methodParameterType": "String#", "methodParameterName": "treeTypes#", "methodBody": "public TreeFilteringResourceVisitor(String... treeTypes) {\n        this.treeTypes = treeTypes;\n        setTraversalFilter(this::isFolder);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create a visitor for a specific set of folder structures. This is useful for including other things such as nt:unstructured or oak folder types.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "338", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/InfoWriter.java", "methodName": "com.adobe.acs.commons.util.InfoWriter.toString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String toString() {\n        return sw.toString();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the string representation of the InfoWriter.", "call_func_name": ["java.io.StringWriter.toString"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "339", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/InfoWriter.java", "methodName": "com.adobe.acs.commons.util.InfoWriter.title", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void title() {\n        title(null);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates the opening line.", "call_func_name": ["com.adobe.acs.commons.util.InfoWriter.title"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.util.InfoWriter.title": "Creates the opening line with a Title."}]}, {"index": "340", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/InfoWriter.java", "methodName": "com.adobe.acs.commons.util.InfoWriter.title", "methodParameterType": "String#", "methodParameterName": "title#", "methodBody": "public void title(String title) {\n        pw.println();\n        pw.println(StringUtils.repeat(LINE_CHAR, LINE_LENGTH));\n\n        if (StringUtils.isNotBlank(title)) {\n            pw.println(title);\n            pw.println(StringUtils.repeat(\"=\", LINE_LENGTH));\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates the opening line with a Title.", "call_func_name": ["java.io.PrintWriter.println", "org.apache.commons.lang.StringUtils.repeat", "java.io.PrintWriter.println", "org.apache.commons.lang.StringUtils.isNotBlank"], "call_func_parameter": [[""], ["java.lang.String", "int"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "341", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/InfoWriter.java", "methodName": "com.adobe.acs.commons.util.InfoWriter.message", "methodParameterType": "String#Object#", "methodParameterName": "message#vars#", "methodBody": "public void message(String message, final Object... vars) {\n        if (ArrayUtils.isEmpty(vars)) {\n            pw.println(message);\n        } else {\n            for (final Object var : vars) {\n                try {\n                    message = StringUtils.replaceOnce(message, \"{}\", TypeUtil.toString(var));\n                } catch (Exception e) {\n                    log.error(\"Could not derive a valid String representation for {} using TypeUtil.toString(..)\",\n                            var, e);\n\n                    message = StringUtils.replaceOnce(message, \"{}\", \"???\");\n                }\n            }\n\n            pw.println(message);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a message with optional var injection. Message format: \"A String with any number of {} placeholders that will have the vars injected in order\"", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "342", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/InfoWriter.java", "methodName": "com.adobe.acs.commons.util.InfoWriter.end", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void end() {\n        this.line();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates the closing line.", "call_func_name": ["com.adobe.acs.commons.util.InfoWriter.line"], "call_func_parameter": [[""]], "passed_comments": [{"com.adobe.acs.commons.util.InfoWriter.line": "Creates a line."}, {"com.adobe.acs.commons.util.InfoWriter.line": "Creates an indented (with whitespace) line."}]}, {"index": "343", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/InfoWriter.java", "methodName": "com.adobe.acs.commons.util.InfoWriter.line", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void line() {\n        line(0);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a line.", "call_func_name": ["com.adobe.acs.commons.util.InfoWriter.line"], "call_func_parameter": [["int"]], "passed_comments": [{"com.adobe.acs.commons.util.InfoWriter.line": "Creates an indented (with whitespace) line."}]}, {"index": "344", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/InfoWriter.java", "methodName": "com.adobe.acs.commons.util.InfoWriter.line", "methodParameterType": "int#", "methodParameterName": "indent#", "methodBody": "public void line(int indent) {\n        if (indent < 0) {\n            indent = 0;\n        }\n\n        pw.println(StringUtils.repeat(\" \", indent) + StringUtils.repeat(LINE_CHAR, LINE_LENGTH - indent));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates an indented (with whitespace) line.", "call_func_name": ["java.lang.StringBuilder.<init>", "org.apache.commons.lang.StringUtils.repeat", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.io.PrintWriter.println"], "call_func_parameter": [[""], ["java.lang.String", "int"], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "345", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/QueryHelper.java", "methodName": "com.adobe.acs.commons.util.QueryHelper.findResources", "methodParameterType": "ResourceResolver#String#String#String#", "methodParameterName": "resourceResolver#language#statement#relPath#", "methodBody": "List<Resource> findResources(ResourceResolver resourceResolver,\n                                 String language,\n                                 String statement,\n                                 String relPath) throws RepositoryException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "@param resourceResolver the resourceResolver providing access into the JCR", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "346", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/QueryHelper.java", "methodName": "com.adobe.acs.commons.util.QueryHelper.isTraversal", "methodParameterType": "ResourceResolver#String#String#", "methodParameterName": "resourceResolver#language#statement#", "methodBody": "boolean isTraversal(ResourceResolver resourceResolver,\n                       String language,\n                       String statement) throws RepositoryException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Determines if the provided query will traverse.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "347", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/QueryHelper.java", "methodName": "com.adobe.acs.commons.util.QueryHelper.isTraversal", "methodParameterType": "ResourceResolver#Map<String,String>#", "methodParameterName": "resourceResolver#queryBuilderParams#", "methodBody": "boolean isTraversal(ResourceResolver resourceResolver,\n                       Map<String, String> queryBuilderParams) throws RepositoryException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Determines if the provided query will traverse.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "348", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/CookieUtil.java", "methodName": "com.adobe.acs.commons.util.CookieUtil.addCookie", "methodParameterType": "Cookie#HttpServletResponse#", "methodParameterName": "cookie#response#", "methodBody": "public static boolean addCookie(final Cookie cookie, final HttpServletResponse response) {\n        if (cookie == null || response == null) {\n            return false;\n        }\n\n        response.addCookie(cookie);\n        return true;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add the provided HTTP Cookie to the Response", "call_func_name": ["javax.servlet.http.HttpServletResponse.addCookie"], "call_func_parameter": [["javax.servlet.http.Cookie"]], "passed_comments": "/"}, {"index": "349", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/CookieUtil.java", "methodName": "com.adobe.acs.commons.util.CookieUtil.getCookie", "methodParameterType": "HttpServletRequest#String#", "methodParameterName": "request#cookieName#", "methodBody": "public static Cookie getCookie(final HttpServletRequest request, final String cookieName) {\n        if (StringUtils.isBlank(cookieName)) {\n            return null;\n        }\n\n        final Cookie[] cookies = request.getCookies();\n        if (cookies == null) {\n            return null;\n        }\n\n        if (cookies.length > 0) {\n            for (final Cookie cookie : cookies) {\n                if (StringUtils.equals(cookieName, cookie.getName())) {\n                    return cookie;\n                }\n            }\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the named cookie from the HTTP Request", "call_func_name": ["org.apache.commons.lang.StringUtils.isBlank", "javax.servlet.http.HttpServletRequest.getCookies", "javax.servlet.http.Cookie.getName", "org.apache.commons.lang.StringUtils.equals"], "call_func_parameter": [["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "350", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/CookieUtil.java", "methodName": "com.adobe.acs.commons.util.CookieUtil.getCookies", "methodParameterType": "HttpServletRequest#String#", "methodParameterName": "request#regex#", "methodBody": "public static List<Cookie> getCookies(final HttpServletRequest request, final String regex) {\n        final ArrayList<Cookie> foundCookies = new ArrayList<Cookie>();\n        if (StringUtils.isBlank(regex)) {\n            return foundCookies;\n        }\n\n        final Cookie[] cookies = request.getCookies();\n        if (cookies == null) {\n            return Collections.emptyList();\n        }\n\n        final Pattern p = Pattern.compile(regex);\n        for (final Cookie cookie : cookies) {\n            final Matcher m = p.matcher(cookie.getName());\n            if (m.matches()) {\n                foundCookies.add(cookie);\n            }\n        }\n\n        return foundCookies;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets Cookies from the Request whose names match the provides Regex", "call_func_name": ["java.util.ArrayList.<init>", "org.apache.commons.lang.StringUtils.isBlank", "javax.servlet.http.HttpServletRequest.getCookies", "java.util.Collections.emptyList", "java.util.regex.Pattern.compile", "javax.servlet.http.Cookie.getName", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "java.util.ArrayList.add"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], ["java.lang.CharSequence"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "351", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/CookieUtil.java", "methodName": "com.adobe.acs.commons.util.CookieUtil.extendCookieLife", "methodParameterType": "HttpServletRequest#HttpServletResponse#String#String#int#", "methodParameterName": "request#response#cookieName#cookiePath#expiry#", "methodBody": "public static boolean extendCookieLife(final HttpServletRequest request, final HttpServletResponse response,\n                                           final String cookieName, final String cookiePath, final int expiry) {\n        final Cookie cookie = getCookie(request, cookieName);\n        if (cookie == null) {\n            return false;\n        }\n\n        if (cookie.getMaxAge() <= 0) {\n            return false;\n        }\n\n        final Cookie responseCookie = (Cookie) cookie.clone();\n        responseCookie.setMaxAge(expiry);\n        responseCookie.setPath(cookiePath);\n\n        addCookie(responseCookie, response);\n\n        return true;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p> Extend the cookie life. <p></p> This can be used when a cookie should be valid for X minutes from the last point of activity. <p></p> This method will leave expired or deleted cookies alone. </p>", "call_func_name": ["com.adobe.acs.commons.util.CookieUtil.getCookie", "javax.servlet.http.Cookie.getMaxAge", "javax.servlet.http.Cookie.clone", "javax.servlet.http.Cookie.setMaxAge", "javax.servlet.http.Cookie.setPath", "com.adobe.acs.commons.util.CookieUtil.addCookie"], "call_func_parameter": [["javax.servlet.http.HttpServletRequest", "java.lang.String"], [""], [""], ["int"], ["java.lang.String"], ["javax.servlet.http.Cookie", "javax.servlet.http.HttpServletResponse"]], "passed_comments": [{"com.adobe.acs.commons.util.CookieUtil.getCookie": "Get the named cookie from the HTTP Request"}, {"com.adobe.acs.commons.util.CookieUtil.addCookie": "Add the provided HTTP Cookie to the Response"}]}, {"index": "352", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/CookieUtil.java", "methodName": "com.adobe.acs.commons.util.CookieUtil.dropCookies", "methodParameterType": "HttpServletRequest#HttpServletResponse#String#String#", "methodParameterName": "request#response#cookiePath#cookieNames#", "methodBody": "public static int dropCookies(final HttpServletRequest request, final HttpServletResponse response, final String cookiePath, final String... cookieNames) {\n        int count = 0;\n        if (cookieNames == null) {\n            return count;\n        }\n\n        final List<Cookie> cookies = new ArrayList<Cookie>();\n        for (final String cookieName : cookieNames) {\n            cookies.add(getCookie(request, cookieName));\n        }\n\n        return dropCookies(response, cookies.toArray(new Cookie[cookies.size()]), cookiePath);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Remove the named Cookies from Response", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "353", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/CookieUtil.java", "methodName": "com.adobe.acs.commons.util.CookieUtil.dropCookies", "methodParameterType": "HttpServletResponse#Cookie[]#String#", "methodParameterName": "response#cookies#cookiePath#", "methodBody": "private static int dropCookies(final HttpServletResponse response, final Cookie[] cookies, final String cookiePath) {\n        int count = 0;\n\n        for (final Cookie cookie : cookies) {\n            if (cookie == null) {\n                continue;\n            }\n\n            final Cookie responseCookie = (Cookie) cookie.clone();\n            responseCookie.setMaxAge(0);\n            responseCookie.setPath(cookiePath);\n            responseCookie.setValue(\"\");\n\n            addCookie(responseCookie, response);\n            count++;\n        }\n\n        return count;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#InfixExpression#ContinueStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Internal method used for dropping cookies", "call_func_name": ["javax.servlet.http.Cookie.clone", "javax.servlet.http.Cookie.setMaxAge", "javax.servlet.http.Cookie.setPath", "javax.servlet.http.Cookie.setValue", "com.adobe.acs.commons.util.CookieUtil.addCookie"], "call_func_parameter": [[""], ["int"], ["java.lang.String"], ["java.lang.String"], ["javax.servlet.http.Cookie", "javax.servlet.http.HttpServletResponse"]], "passed_comments": [{"com.adobe.acs.commons.util.CookieUtil.addCookie": "Add the provided HTTP Cookie to the Response"}]}, {"index": "354", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/CookieUtil.java", "methodName": "com.adobe.acs.commons.util.CookieUtil.dropCookiesByRegex", "methodParameterType": "HttpServletRequest#HttpServletResponse#String#String#", "methodParameterName": "request#response#cookiePath#regexes#", "methodBody": "public static int dropCookiesByRegex(final HttpServletRequest request, final HttpServletResponse response, final String cookiePath, final String... regexes) {\n        return dropCookiesByRegexArray(request, response, cookiePath, regexes);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Remove the Cookies whose names match the provided Regex from Response", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "355", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/CookieUtil.java", "methodName": "com.adobe.acs.commons.util.CookieUtil.dropCookiesByRegexArray", "methodParameterType": "HttpServletRequest#HttpServletResponse#String#String[]#", "methodParameterName": "request#response#cookiePath#regexes#", "methodBody": "public static int dropCookiesByRegexArray(final HttpServletRequest request, final HttpServletResponse response, final String cookiePath, final String[] regexes) {\n        int count = 0;\n        if (regexes == null) {\n            return count;\n        }\n        final List<Cookie> cookies = new ArrayList<Cookie>();\n\n        for (final String regex : regexes) {\n            cookies.addAll(getCookies(request, regex));\n        }\n\n        return dropCookies(response, cookies.toArray(new Cookie[cookies.size()]), cookiePath);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Remove the Cookies whose names match the provided Regex from Response", "call_func_name": ["java.util.ArrayList.<init>", "com.adobe.acs.commons.util.CookieUtil.getCookies", "java.util.List.addAll", "java.util.List.size", "java.util.List.toArray", "com.adobe.acs.commons.util.CookieUtil.dropCookies"], "call_func_parameter": [[""], ["javax.servlet.http.HttpServletRequest", "java.lang.String"], ["java.util.Collection"], [""], ["java.lang.Object[]"], ["javax.servlet.http.HttpServletResponse", "javax.servlet.http.Cookie[]", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.util.CookieUtil.getCookies": "Gets Cookies from the Request whose names match the provides Regex"}, {"com.adobe.acs.commons.util.CookieUtil.dropCookies": "Internal method used for dropping cookies"}]}, {"index": "356", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/CookieUtil.java", "methodName": "com.adobe.acs.commons.util.CookieUtil.dropAllCookies", "methodParameterType": "HttpServletRequest#HttpServletResponse#String#", "methodParameterName": "request#response#cookiePath#", "methodBody": "public static int dropAllCookies(final HttpServletRequest request, final HttpServletResponse response, final String cookiePath) {\n        final Cookie[] cookies = request.getCookies();\n\n        if (cookies == null) {\n            return 0;\n        }\n\n        return dropCookies(response, cookies, cookiePath);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NumberLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Removes all cookies for the domain", "call_func_name": ["javax.servlet.http.HttpServletRequest.getCookies", "com.adobe.acs.commons.util.CookieUtil.dropCookies"], "call_func_parameter": [[""], ["javax.servlet.http.HttpServletResponse", "javax.servlet.http.Cookie[]", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.util.CookieUtil.dropCookies": "Internal method used for dropping cookies"}]}, {"index": "357", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/TextUtil.java", "methodName": "com.adobe.acs.commons.util.TextUtil.getFirstNonNull", "methodParameterType": "T#", "methodParameterName": "values#", "methodBody": "public static <T> T getFirstNonNull(T... values) {\n        if (values == null || values.length < 1) {\n            return null;\n        }\n        List<T> list = Arrays.asList(values);\n\n        for (T item : list) {\n            if (item != null) {\n                return item;\n            }\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns first non-null value from the parameter list <p> Ex. TextUtil.getFirstNonNull(x.getLastModifiedDate(), x.getCreatedDate()) <p> If getLastModifiedDate() returns null, and getCreatedDate() returns not-null, the value for getCreatedDate() is returned.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "358", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/TextUtil.java", "methodName": "com.adobe.acs.commons.util.TextUtil.getFirstNonEmpty", "methodParameterType": "String#", "methodParameterName": "values#", "methodBody": "public static String getFirstNonEmpty(String... values) {\n        if (values == null || values.length < 1) {\n            return null;\n        }\n        List<String> list = Arrays.asList(values);\n\n        for (String item : list) {\n            if (StringUtils.isNotBlank(item)) {\n                return item;\n            }\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the first non-null and non-empty String from the parameter list of strings. <p> Ex. TextUtil.getFirstNonEmpty(x.getPageTitle(), x.getNavigationTitle(), x.getTitle(), x.getName())", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "359", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/TextUtil.java", "methodName": "com.adobe.acs.commons.util.TextUtil.getFirstProperty", "methodParameterType": "Resource#Class<T>#String#", "methodParameterName": "resource#klass#keys#", "methodBody": "public static <T> T getFirstProperty(Resource resource, Class<T> klass, String... keys) {\n        return getFirstProperty(resource.adaptTo(ValueMap.class), klass, keys);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns first non-null value from the resource property.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "360", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/TextUtil.java", "methodName": "com.adobe.acs.commons.util.TextUtil.getFirstProperty", "methodParameterType": "ValueMap#Class<T>#String#", "methodParameterName": "valueMap#klass#keys#", "methodBody": "public static <T> T getFirstProperty(ValueMap valueMap, Class<T> klass, String... keys) {\n        if (valueMap == null || keys == null || keys.length < 1) {\n            return null;\n        }\n\n        List<String> keyList = Arrays.asList(keys);\n\n        for (String key : keyList) {\n            if (valueMap.containsKey(key) && valueMap.get(key) != null) {\n                return valueMap.get(key, klass);\n            }\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns first non-null value from the resource property value map. <p> Ex. TextUtil.getFirstProperty(Date.class, \"jcr:lastModified\", \"jcr:created\") <p> If getLastModifiedDate() returns null, and getCreatedDate() returns not-null, the value for getCreatedDate() is returned.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "361", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/TextUtil.java", "methodName": "com.adobe.acs.commons.util.TextUtil.isRichText", "methodParameterType": "String#", "methodParameterName": "str#", "methodBody": "public static boolean isRichText(String str) {\n        Matcher m = RICH_TEXT_PATTERN.matcher(str);\n\n        return m.find();\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Looks for <..> substrings in the parameter string. If any are found it assume Rich text.", "call_func_name": ["java.util.regex.Pattern.matcher", "java.util.regex.Matcher.find"], "call_func_parameter": [["java.lang.CharSequence"], [""]], "passed_comments": "/"}, {"index": "362", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/BufferedServletOutput.java", "methodName": "com.adobe.acs.commons.util.BufferedServletOutput.BufferedServletOutput", "methodParameterType": "ServletResponse#", "methodParameterName": "wrappedResponse#", "methodBody": "public BufferedServletOutput(ServletResponse wrappedResponse) {\n        this(wrappedResponse, new StringWriter(), new ByteArrayOutputStream());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new servlet output buffering both the underlying writer and output stream.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "363", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/BufferedServletOutput.java", "methodName": "com.adobe.acs.commons.util.BufferedServletOutput.BufferedServletOutput", "methodParameterType": "ServletResponse#StringWriter#ByteArrayOutputStream#", "methodParameterName": "wrappedResponse#writer#outputStream#", "methodBody": "public BufferedServletOutput(ServletResponse wrappedResponse, StringWriter writer, ByteArrayOutputStream outputStream) {\n        this.wrappedResponse = wrappedResponse;\n        this.writer = writer;\n        if (writer != null) {\n            this.printWriter = new PrintWriter(writer);\n        } else {\n            this.printWriter = null;\n        }\n        this.outputStream = outputStream;\n        if (outputStream != null) {\n            this.servletOutputStream = new ServletOutputStreamWrapper(outputStream);\n        } else {\n            this.servletOutputStream = null;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#ThisExpression#SimpleName#FieldAccess#NullLiteral#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#ThisExpression#SimpleName#FieldAccess#NullLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new servlet output using the given StringWriter and OutputStream as buffers.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "364", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/BufferedServletOutput.java", "methodName": "com.adobe.acs.commons.util.BufferedServletOutput.getWriteMethod", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ResponseWriteMethod getWriteMethod() {\n        return writeMethod;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return {@link ResponseWriteMethod#OUTPUTSTREAM} in case {@link #getOutputStream()} has been called,{@link ResponseWriteMethod#WRITER} in case {@link #getWriter()} has been called, {@code null} in case none of those have beencalled yet.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "365", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/BufferedServletOutput.java", "methodName": "com.adobe.acs.commons.util.BufferedServletOutput.getBufferedString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getBufferedString() {\n        if (ResponseWriteMethod.OUTPUTSTREAM.equals(this.writeMethod)) {\n            throw new IllegalStateException(\"Cannot invoke getBufferedString() once getOutputStream() has been called.\");\n        }\n        if (writer == null) {\n            throw new IllegalStateException(\"Cannot get buffered string, as the writer was not buffered!\");\n        }\n        return writer.toString();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the buffered string which is the content of the response being written via {@link #getWriter()}", "call_func_name": ["java.lang.IllegalStateException.<init>", "java.io.StringWriter.toString"], "call_func_parameter": [["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "366", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/BufferedServletOutput.java", "methodName": "com.adobe.acs.commons.util.BufferedServletOutput.getBufferedBytes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public byte[] getBufferedBytes() {\n        if (ResponseWriteMethod.WRITER.equals(this.writeMethod)) {\n            throw new IllegalStateException(\"Cannot invoke getBufferedBytes() once getWriter() has been called.\");\n        }\n        if (outputStream == null) {\n            throw new IllegalStateException(\"Cannot get buffered bytes, as the output stream was not buffered!\");\n        }\n        return outputStream.toByteArray();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the buffered bytes which which were written via {@link #getOutputStream()}", "call_func_name": ["java.lang.IllegalStateException.<init>", "java.io.ByteArrayOutputStream.toByteArray"], "call_func_parameter": [["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "367", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/BufferedServletOutput.java", "methodName": "com.adobe.acs.commons.util.BufferedServletOutput.resetBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void resetBuffer() {\n        if (writer != null) {\n            writer.getBuffer().setLength(0);\n        }\n        if (outputStream != null) {\n            outputStream.reset();\n        }\n        wrappedResponse.resetBuffer();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Flushes the buffers bound to this object. In addition calls  {@link ServletResponse#flushBuffer()} of the underlying response.", "call_func_name": ["java.io.StringWriter.getBuffer", "java.lang.StringBuffer.setLength", "java.io.ByteArrayOutputStream.reset", "javax.servlet.ServletResponse.resetBuffer"], "call_func_parameter": [[""], ["int"], [""], [""]], "passed_comments": "/"}, {"index": "368", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/BufferedServletOutput.java", "methodName": "com.adobe.acs.commons.util.BufferedServletOutput.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void close() throws IOException {\n        if (ResponseWriteMethod.OUTPUTSTREAM.equals(this.writeMethod) && outputStream != null) {\n            wrappedResponse.getOutputStream().write(getBufferedBytes());\n        } else if (ResponseWriteMethod.WRITER.equals(this.writeMethod) && writer != null) {\n            wrappedResponse.getWriter().write(getBufferedString());\n        }\n        if (flushBuffer) {\n            wrappedResponse.flushBuffer();\n        }\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Closing leads to spooling the buffered output stream or writer to the underlying/wrapped response. Also this will automatically commit the response in case  {@link #flushBuffer} has been called previously!", "call_func_name": ["javax.servlet.ServletResponse.getOutputStream", "com.adobe.acs.commons.util.BufferedServletOutput.getBufferedBytes", "javax.servlet.ServletOutputStream.write", "javax.servlet.ServletResponse.getWriter", "com.adobe.acs.commons.util.BufferedServletOutput.getBufferedString", "java.io.PrintWriter.write", "javax.servlet.ServletResponse.flushBuffer"], "call_func_parameter": [[""], [""], ["byte[]"], [""], [""], ["java.lang.String"], [""]], "passed_comments": [{"com.adobe.acs.commons.util.BufferedServletOutput.getBufferedBytes": "@return the buffered bytes which which were written via {@link #getOutputStream()}"}, {"com.adobe.acs.commons.util.BufferedServletOutput.getBufferedString": "@return the buffered string which is the content of the response being written via {@link #getWriter()}"}]}, {"index": "369", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/BufferedServletOutput.java", "methodName": "com.adobe.acs.commons.util.BufferedServletOutput.flushBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void flushBuffer() {\n        log.warn(\"Prevent committing the response, it will be committed deferred, i.e. once this buffered response is closed\");\n        if (log.isDebugEnabled()) {\n            Throwable t = new Throwable(\"\");\n            log.debug(\"Stacktrace which triggered ServletResponse.flushBuffer()\", t);\n        }\n        flushBuffer = true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Will not commit the response, but only make sure that the wrapped response's  {@code flushBuffer()} is executed, once this {@link #close()} is called", "call_func_name": ["org.slf4j.Logger.warn", "org.slf4j.Logger.isDebugEnabled", "java.lang.Throwable.<init>", "org.slf4j.Logger.debug"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "370", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/WorkflowHelper.java", "methodName": "com.adobe.acs.commons.util.WorkflowHelper.getResourceResolver", "methodParameterType": "com.adobe.granite.workflow.WorkflowSession#", "methodParameterName": "workflowSession#", "methodBody": "ResourceResolver getResourceResolver(com.adobe.granite.workflow.WorkflowSession workflowSession);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Convenience method for getting a ResourceResolver object from a Granite based Workflow Process.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "371", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/WorkflowHelper.java", "methodName": "com.adobe.acs.commons.util.WorkflowHelper.getResourceResolver", "methodParameterType": "WorkflowSession#", "methodParameterName": "workflowSession#", "methodBody": "ResourceResolver getResourceResolver(WorkflowSession workflowSession) throws LoginException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Convenience method for getting a ResourceResolver object from a CQ based Workflow Process.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "372", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/WorkflowHelper.java", "methodName": "com.adobe.acs.commons.util.WorkflowHelper.getAssetFromPayload", "methodParameterType": "WorkItem#WorkflowSession#", "methodParameterName": "item#workflowSession#", "methodBody": "WorkflowHelper.AssetResourceResolverPair getAssetFromPayload(WorkItem item, WorkflowSession workflowSession);", "AST": "Javadoc#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Resolve the asset for the workflow's payload and return it, along with a resolved resource resolver.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "373", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/WorkflowHelper.java", "methodName": "com.adobe.acs.commons.util.WorkflowHelper.getExtension", "methodParameterType": "String#", "methodParameterName": "mimetype#", "methodBody": "String getExtension(String mimetype);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Return the extension corresponding to the mime type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "374", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/WorkflowHelper.java", "methodName": "com.adobe.acs.commons.util.WorkflowHelper.buildArguments", "methodParameterType": "MetaDataMap#", "methodParameterName": "metaData#", "methodBody": "String[] buildArguments(MetaDataMap metaData);", "AST": "Javadoc#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Build an arguments array from the metadata map.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "375", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/WorkflowHelper.java", "methodName": "com.adobe.acs.commons.util.WorkflowHelper.getValuesFromArgs", "methodParameterType": "String#String[]#", "methodParameterName": "name#args#", "methodBody": "List<String> getValuesFromArgs(String name, String[] args);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Parse a workflow args string in the formaat &gt;name&lt;:&gt;value&lt;,&gt;name&lt;:&gt;value&lt; and extract the values with the specified name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "376", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/WorkflowHelper.java", "methodName": "com.adobe.acs.commons.util.WorkflowHelper.getQuality", "methodParameterType": "double#String#", "methodParameterName": "base#qualityStr#", "methodBody": "double getQuality(double base, String qualityStr);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Parse the provided quality string, from 1 to 100, and apply it to the base. Allows for a constant scale to be used and applied to different image types which support different quality scales.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "377", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/WorkflowHelper.java", "methodName": "com.adobe.acs.commons.util.WorkflowHelper.getPageOrAssetResource", "methodParameterType": "ResourceResolver#String#", "methodParameterName": "resourceResolver#path#", "methodBody": "Resource getPageOrAssetResource(ResourceResolver resourceResolver, String path);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Derives either an Asset or Page resource (dam:Asset or cq:Page) that the provided path belongs to. Example: When path = /content/dam/foo.png/jcr:content/renditions/original, this method will return the resource at /content/dam/foo.png Example: When path = /content/site/bar/jcr:content/root/text, this method will return the resource at /content/site/bar", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "378", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/WorkflowHelper.java", "methodName": "com.adobe.acs.commons.util.WorkflowHelper.isPathTypedPayload", "methodParameterType": "WorkflowData#", "methodParameterName": "workflowData#", "methodBody": "boolean isPathTypedPayload(WorkflowData workflowData);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Method for CQ Workflow APIs.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "379", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/WorkflowHelper.java", "methodName": "com.adobe.acs.commons.util.WorkflowHelper.isPathTypedPayload", "methodParameterType": "com.adobe.granite.workflow.exec.WorkflowData#", "methodParameterName": "workflowData#", "methodBody": "boolean isPathTypedPayload(com.adobe.granite.workflow.exec.WorkflowData workflowData);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Method for Granite Workflow APIs.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "380", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ResourceServiceManager.java", "methodName": "com.adobe.acs.commons.util.ResourceServiceManager.getResourceResolver", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected abstract ResourceResolver getResourceResolver();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get a resource resolver to access the Sling Repository.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "381", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ResourceServiceManager.java", "methodName": "com.adobe.acs.commons.util.ResourceServiceManager.getRootPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract String getRootPath();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the root path for the instance of the ResourceServiceManager, the configuration should be cq:Page children of the resource at this path.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "382", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ResourceServiceManager.java", "methodName": "com.adobe.acs.commons.util.ResourceServiceManager.isServiceUpdated", "methodParameterType": "Resource#ServiceReference#", "methodParameterName": "config#reference#", "methodBody": "protected abstract boolean isServiceUpdated(Resource config, ServiceReference reference);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Checks whether or not the specified ServiceReference is up to date with the configuration resource.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "383", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ResourceServiceManager.java", "methodName": "com.adobe.acs.commons.util.ResourceServiceManager.registerServiceObject", "methodParameterType": "Resource#Hashtable<String,Object>#", "methodParameterName": "config#props#", "methodBody": "@SuppressWarnings(\"squid:S1149\")\n    protected abstract ServiceRegistration registerServiceObject(Resource config, Hashtable<String, Object> props);", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Register the service with the OSGi Container based on the configuration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "384", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/TypeUtil.java", "methodName": "com.adobe.acs.commons.util.TypeUtil.arrayToMap", "methodParameterType": "T[]#", "methodParameterName": "list#", "methodBody": "public static <T> Map<T, T> arrayToMap(T[] list) {\n        final HashMap<T, T> map = new HashMap<T, T>();\n        if (list == null) {\n            return map;\n        }\n        if (list.length > 0 && (list.length % 2) == 1) {\n            throw new IllegalArgumentException(\n                    \"Array must be even in length, representing a series of Key, Value pairs.\");\n        }\n\n        for (int i = 0; i < list.length; i = i + 2) {\n            map.put(list[i], list[i + 1]);\n        }\n\n        return map;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(ParenthesizedExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)MethodInvocation)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Turn a even length Array into a Map. The Array is expected to be in the format: { key1, value1, key2, value2, ... , keyN, valueN }", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "385", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/TypeUtil.java", "methodName": "com.adobe.acs.commons.util.TypeUtil.toMap", "methodParameterType": "JsonObject#", "methodParameterName": "json#", "methodBody": "public static Map<String, Object> toMap(JsonObject json) {\n        Gson gson = new Gson();\n        return gson.fromJson(json, Map.class);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convenience wrapper for toMap(jsonObj, Object.class).", "call_func_name": ["com.google.gson.Gson.<init>", "com.google.gson.Gson.fromJson"], "call_func_parameter": [[""], ["com.google.gson.JsonElement", "java.lang.Class"]], "passed_comments": "/"}, {"index": "386", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/TypeUtil.java", "methodName": "com.adobe.acs.commons.util.TypeUtil.getType", "methodParameterType": "Object#", "methodParameterName": "object#", "methodBody": "@SuppressWarnings({ \"unchecked\", \"PMD.CollapsibleIfStatements\" })\n    public static <T> Class<T> getType(final Object object) {\n        if (object instanceof Double || object instanceof Float) {\n            return (Class<T>) Double.class;\n        } else if (object instanceof Number) {\n            return (Class<T>) Long.class;\n        } else if (object instanceof Boolean) {\n            return (Class<T>) Boolean.class;\n        } else if (object instanceof String) {\n            if (JSON_DATE.matcher((String) object).matches()) {\n                return (Class<T>) Date.class;\n            }\n        } else if(object instanceof Calendar) {\n            return (Class<T>) Calendar.class;\n        } else if(object instanceof Date) {\n            return (Class<T>) Date.class;\n        }\n\n        return (Class<T>) String.class;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#StringLiteral#ArrayInitializer#SingleMemberAnnotation#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#TypeLiteral#CastExpression#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#TypeLiteral#CastExpression#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#TypeLiteral#CastExpression#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#TypeLiteral#CastExpression#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#TypeLiteral#CastExpression#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#TypeLiteral#CastExpression#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#TypeLiteral#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)InfixExpression(Block(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)CastExpression)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)CastExpression)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)CastExpression)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)CastExpression)ReturnStatement)Block)IfStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)CastExpression)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)CastExpression)ReturnStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines the type of the parameter object. <p/> TODO - review this method", "call_func_name": ["java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches"], "call_func_parameter": [["java.lang.CharSequence"], [""]], "passed_comments": "/"}, {"index": "387", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/TypeUtil.java", "methodName": "com.adobe.acs.commons.util.TypeUtil.toObjectType", "methodParameterType": "String#Class<T>#", "methodParameterName": "data#klass#", "methodBody": "public static <T> T toObjectType(String data, Class<T> klass) {\n        if (Double.class.equals(klass)) {\n            try {\n                return klass.cast(Double.parseDouble(data));\n            } catch (NumberFormatException ex) {\n                return null;\n            }\n        } else if (Long.class.equals(klass)) {\n            try {\n                return klass.cast(Long.parseLong(data));\n            } catch (NumberFormatException ex) {\n                return null;\n            }\n        } else if (Integer.class.equals(klass)) {\n            try {\n                return klass.cast(Long.parseLong(data));\n            } catch (NumberFormatException ex) {\n                return null;\n            }\n        } else if (StringUtils.equalsIgnoreCase(\"true\", data)) {\n            return klass.cast(Boolean.TRUE);\n        } else if (StringUtils.equalsIgnoreCase(\"false\", data)) {\n            return klass.cast(Boolean.FALSE);\n        } else if (JSON_DATE.matcher(data).matches()) {\n            return klass.cast(ISODateTimeFormat.dateTimeParser().parseDateTime(data).toDate());\n        } else {\n            return klass.cast(data);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Converts a limited set of String representations to their corresponding Objects <p/> Supports", "call_func_name": ["java.lang.Object.equals", "java.lang.Double.parseDouble", "java.lang.Double.valueOf", "java.lang.Class.cast", "java.lang.Long.parseLong", "java.lang.Long.valueOf", "org.apache.commons.lang.StringUtils.equalsIgnoreCase", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "org.joda.time.format.ISODateTimeFormat.dateTimeParser", "org.joda.time.format.DateTimeFormatter.parseDateTime", "org.joda.time.DateTime.toDate"], "call_func_parameter": [["java.lang.Object"], ["java.lang.String"], ["double"], ["java.lang.Object"], ["java.lang.String"], ["long"], ["java.lang.String", "java.lang.String"], ["java.lang.CharSequence"], [""], [""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "388", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/TypeUtil.java", "methodName": "com.adobe.acs.commons.util.TypeUtil.toString", "methodParameterType": "Object#Class<?>#", "methodParameterName": "obj#klass#", "methodBody": "public static String toString(final Object obj, final Class<?> klass)\n            throws IllegalAccessException, NoSuchMethodException, InvocationTargetException {\n        return toString(obj, klass, null);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the default string representation of the parameter object.", "call_func_name": ["com.adobe.acs.commons.util.TypeUtil.toString"], "call_func_parameter": [["java.lang.Object", "java.lang.Class", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.util.TypeUtil.toString": "Gets a custom string representation based on the parameter (0 argument) methodName."}]}, {"index": "389", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/TypeUtil.java", "methodName": "com.adobe.acs.commons.util.TypeUtil.toString", "methodParameterType": "Object#Class<?>#String#", "methodParameterName": "obj#klass#methodName#", "methodBody": "public static String toString(final Object obj, final Class<?> klass, String methodName)\n            throws InvocationTargetException, IllegalAccessException, NoSuchMethodException {\n        if (StringUtils.isBlank(methodName)) {\n            methodName = \"toString\";\n        }\n\n        boolean isPrimitiveOrWrapped =\n                obj.getClass().isPrimitive() || ClassUtils.wrapperToPrimitive(obj.getClass()) != null;\n\n        if (isPrimitiveOrWrapped) {\n            return String.valueOf(obj);\n        } else if (Date.class.equals(klass)) {\n            return ((Date) obj).toString();\n        } else if (Calendar.class.equals(klass)) {\n            return ((Calendar) obj).getTime().toString();\n        } else if(isArray(obj)) {\n            return toStringFromArray(obj);\n        } else {\n            Method method = klass.getMethod(methodName);\n            return (String) method.invoke(obj);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#Assignment#ExpressionStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Gets a custom string representation based on the parameter (0 argument) methodName.", "call_func_name": ["org.apache.commons.lang.StringUtils.isBlank", "java.lang.Object.getClass", "java.lang.Class.isPrimitive", "org.apache.commons.lang.ClassUtils.wrapperToPrimitive", "java.lang.String.valueOf", "java.lang.Object.equals", "java.util.Date.toString", "java.util.Calendar.getTime", "com.adobe.acs.commons.util.TypeUtil.isArray", "com.adobe.acs.commons.util.TypeUtil.toStringFromArray", "java.lang.Class.getMethod", "java.lang.reflect.Method.invoke"], "call_func_parameter": [["java.lang.String"], [""], [""], ["java.lang.Class"], ["java.lang.Object"], ["java.lang.Object"], [""], [""], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.String", "java.lang.Class[]"], ["java.lang.Object", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "390", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/TypeUtil.java", "methodName": "com.adobe.acs.commons.util.TypeUtil.toString", "methodParameterType": "Object#", "methodParameterName": "obj#", "methodBody": "public static String toString(final Object obj)\n            throws InvocationTargetException, IllegalAccessException, NoSuchMethodException {\n\n        if (obj == null) {\n            return \"null\";\n        }\n\n        boolean isPrimitiveOrWrapped =\n                obj.getClass().isPrimitive() || ClassUtils.wrapperToPrimitive(obj.getClass()) != null;\n\n        if (isPrimitiveOrWrapped) {\n            return String.valueOf(obj);\n        } else if (obj instanceof Date) {\n            return ((Date) obj).toString();\n        } else if (obj instanceof Calendar) {\n            return ((Calendar) obj).getTime().toString();\n        } else if(isArray(obj)) {\n            return toStringFromArray(obj);\n        } else {\n            Method method = obj.getClass().getMethod(\"toString\");\n            return (String) method.invoke(obj);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#StringLiteral#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Attempt to create a string representation of an object.", "call_func_name": ["java.lang.Object.getClass", "java.lang.Class.isPrimitive", "org.apache.commons.lang.ClassUtils.wrapperToPrimitive", "java.lang.String.valueOf", "java.util.Date.toString", "java.util.Calendar.getTime", "com.adobe.acs.commons.util.TypeUtil.isArray", "com.adobe.acs.commons.util.TypeUtil.toStringFromArray", "java.lang.Class.getMethod", "java.lang.reflect.Method.invoke"], "call_func_parameter": [[""], [""], ["java.lang.Class"], ["java.lang.Object"], [""], [""], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.String", "java.lang.Class[]"], ["java.lang.Object", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "391", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/TypeUtil.java", "methodName": "com.adobe.acs.commons.util.TypeUtil.toValueMap", "methodParameterType": "Map<String,?>#", "methodParameterName": "map#", "methodBody": "public static ValueMap toValueMap(final Map<String, ?> map) {\n        final Map<String, Object> objectMap = new LinkedHashMap<String, Object>(map.size());\n\n        for (final Map.Entry<String, ?> entry : map.entrySet()) {\n            objectMap.put(entry.getKey(), entry.getValue());\n        }\n\n        return new ValueMapDecorator(objectMap);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Transforms a Map of <String, ?> into a ValueMap.", "call_func_name": ["java.util.Map.size", "java.util.LinkedHashMap.<init>", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.Map.put", "org.apache.sling.api.wrappers.ValueMapDecorator.<init>"], "call_func_parameter": [[""], ["int"], [""], [""], [""], [""], ["java.lang.Object", "java.lang.Object"], ["java.util.Map"]], "passed_comments": "/"}, {"index": "392", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/AemCapabilityHelper.java", "methodName": "com.adobe.acs.commons.util.AemCapabilityHelper.isOak", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isOak() throws RepositoryException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Determines if the AEM installation is running on an Apache Jackrabbit Oak-based repository. With the current versions of ACS AEM Commons the support for non-Oak based AEM versions has been dropped, so the usage of this method is no longer required.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "393", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/ThreadContextClassLoaderTaskExecutor.java", "methodName": "com.adobe.acs.commons.util.ThreadContextClassLoaderTaskExecutor.doWithTccl", "methodParameterType": "ClassLoader#Callable<V>#", "methodParameterName": "classLoader#task#", "methodBody": "public static <V> V doWithTccl(ClassLoader classLoader, Callable<V> task) throws Exception {\n        ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader();\n        Thread.currentThread().setContextClassLoader(classLoader);\n        try {\n            return task.call();\n        } finally {\n            Thread.currentThread().setContextClassLoader(oldClassLoader);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Execute the task while the Thread Context Class Loader is set to the provided Class Loader.", "call_func_name": ["java.lang.Thread.currentThread", "java.lang.Thread.getContextClassLoader", "java.lang.Thread.setContextClassLoader", "java.util.concurrent.Callable.call"], "call_func_parameter": [[""], [""], ["java.lang.ClassLoader"], [""]], "passed_comments": "/"}, {"index": "394", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/PathInfoUtil.java", "methodName": "com.adobe.acs.commons.util.PathInfoUtil.getQueryParam", "methodParameterType": "SlingHttpServletRequest#String#", "methodParameterName": "request#key#", "methodBody": "public static String getQueryParam(final SlingHttpServletRequest request, final String key) {\n        return request.getParameter(key);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get a named Query Parameter from the Request.", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getParameter"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "395", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/PathInfoUtil.java", "methodName": "com.adobe.acs.commons.util.PathInfoUtil.getQueryParam", "methodParameterType": "SlingHttpServletRequest#String#String#", "methodParameterName": "request#key#dfault#", "methodBody": "public static String getQueryParam(final SlingHttpServletRequest request, final String key, final String dfault) {\n        String tmp = request.getParameter(key);\n\n        if (StringUtils.isBlank(tmp)) {\n            return dfault;\n        }\n\n        return tmp;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get a named Query Parameter from the Request.", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getParameter", "org.apache.commons.lang.StringUtils.isBlank"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "396", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/PathInfoUtil.java", "methodName": "com.adobe.acs.commons.util.PathInfoUtil.getSelector", "methodParameterType": "SlingHttpServletRequest#int#", "methodParameterName": "request#index#", "methodBody": "public static String getSelector(final SlingHttpServletRequest request, final int index) {\n        return getSelector(request, index, null);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p> Gets the selector at the supplied index. </p><p> Given: /content/page.selA.selB.html <br/> getSelector(request, 0) // --> \"selA\" <br/> getSelector(request, 1) // --> \"selB\" </p>", "call_func_name": ["com.adobe.acs.commons.util.PathInfoUtil.getSelector"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest", "int", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.util.PathInfoUtil.getSelector": "<p> Gets the selector at the supplied index, using a default if there is no selector at that index. </p><p> Given: /content/page.selA.html <br/> getSelector(request, 0, \"default\") // --> \"selA\" <br/> getSelector(request, 1, \"default2\") // --> \"default2\" </p>"}]}, {"index": "397", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/PathInfoUtil.java", "methodName": "com.adobe.acs.commons.util.PathInfoUtil.getSelector", "methodParameterType": "SlingHttpServletRequest#int#String#", "methodParameterName": "request#index#defaultValue#", "methodBody": "public static String getSelector(final SlingHttpServletRequest request,\n                                     final int index, final String defaultValue) {\n        RequestPathInfo pathInfo = request.getRequestPathInfo();\n        if (pathInfo == null) {\n            return null;\n        }\n\n        String[] selectors =  pathInfo.getSelectors();\n        if (selectors == null) {\n            return null;\n        }\n\n        if (index >= 0 && index < selectors.length) {\n            return selectors[index];\n        } else {\n            return defaultValue;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#ArrayAccess#ReturnStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ReturnStatement(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ReturnStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "<p> Gets the selector at the supplied index, using a default if there is no selector at that index. </p><p> Given: /content/page.selA.html <br/> getSelector(request, 0, \"default\") // --> \"selA\" <br/> getSelector(request, 1, \"default2\") // --> \"default2\" </p>", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getRequestPathInfo", "org.apache.sling.api.request.RequestPathInfo.getSelectors"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "398", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/PathInfoUtil.java", "methodName": "com.adobe.acs.commons.util.PathInfoUtil.getSuffixSegments", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "public static String[] getSuffixSegments(final SlingHttpServletRequest request) {\n        RequestPathInfo pathInfo = request.getRequestPathInfo();\n        if (pathInfo == null || pathInfo.getSuffix() == null) {\n            return new String[] {};\n        }\n\n        return StringUtils.split(pathInfo.getSuffix(), '/');\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#ArrayInitializer#ArrayCreation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#CharacterLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer)ArrayInitializer)ArrayCreation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(CharacterLiteral)CharacterLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the suffixes as an array; each segment is the text between the /'s. /segment-0/segment-1/segment-2", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getRequestPathInfo", "org.apache.sling.api.request.RequestPathInfo.getSuffix", "org.apache.commons.lang.StringUtils.split"], "call_func_parameter": [[""], [""], ["java.lang.String", "char"]], "passed_comments": "/"}, {"index": "399", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/PathInfoUtil.java", "methodName": "com.adobe.acs.commons.util.PathInfoUtil.getSuffixSegment", "methodParameterType": "SlingHttpServletRequest#int#", "methodParameterName": "request#index#", "methodBody": "public static String getSuffixSegment(final SlingHttpServletRequest request, int index) {\n        final String[] suffixes = getSuffixSegments(request);\n\n        if (index >= 0 && index < suffixes.length) {\n            return suffixes[index];\n        } else {\n            return null;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#ArrayAccess#ReturnStatement#Block#NullLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ReturnStatement(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ReturnStatement)Block(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "<p> Gets the suffix segment at the supplied index. </p><p> Given: /content/page.html/suffixA/suffixB <br/> getSuffixSegment(request, 0) // --> \"suffixA\" <br/> getSuffixSegment(request, 1) // --> \"suffixB\" </p>", "call_func_name": ["com.adobe.acs.commons.util.PathInfoUtil.getSuffixSegments"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest"]], "passed_comments": [{"com.adobe.acs.commons.util.PathInfoUtil.getSuffixSegments": "Gets the suffixes as an array; each segment is the text between the /'s. /segment-0/segment-1/segment-2"}]}, {"index": "400", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/PathInfoUtil.java", "methodName": "com.adobe.acs.commons.util.PathInfoUtil.getSuffix", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "public static String getSuffix(final SlingHttpServletRequest request) {\n        RequestPathInfo pathInfo = request.getRequestPathInfo();\n        if (pathInfo == null || pathInfo.getSuffix() == null) {\n            return null;\n        }\n\n        return pathInfo.getSuffix();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the entire suffix.", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getRequestPathInfo", "org.apache.sling.api.request.RequestPathInfo.getSuffix"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "401", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/PathInfoUtil.java", "methodName": "com.adobe.acs.commons.util.PathInfoUtil.getFirstSuffixSegment", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "public static String getFirstSuffixSegment(final SlingHttpServletRequest request) {\n        return getSuffixSegment(request, 0);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the first suffix segment.", "call_func_name": ["com.adobe.acs.commons.util.PathInfoUtil.getSuffixSegment"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest", "int"]], "passed_comments": [{"com.adobe.acs.commons.util.PathInfoUtil.getSuffixSegment": "<p> Gets the suffix segment at the supplied index. </p><p> Given: /content/page.html/suffixA/suffixB <br/> getSuffixSegment(request, 0) // --> \"suffixA\" <br/> getSuffixSegment(request, 1) // --> \"suffixB\" </p>"}]}, {"index": "402", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/PathInfoUtil.java", "methodName": "com.adobe.acs.commons.util.PathInfoUtil.getLastSuffixSegment", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "public static String getLastSuffixSegment(final SlingHttpServletRequest request) {\n        final String[] suffixes = getSuffixSegments(request);\n\n        if (suffixes.length < 1) {\n            return null;\n        } else {\n            return suffixes[suffixes.length - 1];\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#ArrayAccess#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block(Block(ReturnStatement(ArrayAccess(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Gets the last suffix segment.", "call_func_name": ["com.adobe.acs.commons.util.PathInfoUtil.getSuffixSegments"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest"]], "passed_comments": [{"com.adobe.acs.commons.util.PathInfoUtil.getSuffixSegments": "Gets the suffixes as an array; each segment is the text between the /'s. /segment-0/segment-1/segment-2"}]}, {"index": "403", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/OverridePathSlingRequestWrapper.java", "methodName": "com.adobe.acs.commons.util.OverridePathSlingRequestWrapper.OverridePathSlingRequestWrapper", "methodParameterType": "SlingHttpServletRequest#String#", "methodParameterName": "request#path#", "methodBody": "public OverridePathSlingRequestWrapper(final SlingHttpServletRequest request, final String path) {\n        super(request);\n\n        SlingBindings slingBindings = (SlingBindings) getSlingRequest().getAttribute(ATTR_SLING_BINDINGS);\n\n        this.adapterManager = slingBindings.getSling().getService(AdapterManager.class);\n\n        // Using `resolve` instead of `getResource` in order to support requests to non-existent resources\n        this.resource = getSlingRequest().getResourceResolver().resolve(getSlingRequest(), path);\n\n        this.myBindings.putAll(slingBindings);\n        this.myBindings.put(WCMBindings.PROPERTIES, this.resource.getValueMap());\n        this.myBindings.put(SlingBindings.RESOURCE, this.resource);\n        this.myBindings.put(SlingBindings.REQUEST, this);\n\n        Page currentPage = null;\n        PageManager pageManager = getSlingRequest().getResourceResolver().adaptTo(PageManager.class);\n        if (pageManager != null) {\n            currentPage = pageManager.getContainingPage(this.resource);\n        }\n        this.myBindings.put(WCMBindings.CURRENT_PAGE, currentPage);\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "404", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/OverridePathSlingRequestWrapper.java", "methodName": "com.adobe.acs.commons.util.OverridePathSlingRequestWrapper.adaptTo", "methodParameterType": "Class<AdapterType>#", "methodParameterName": "type#", "methodBody": "@Override\n    public <AdapterType> AdapterType adaptTo(Class<AdapterType> type) {\n        AdapterType result = null;\n        synchronized(this) {\n            result = (AdapterType) this.adaptersCache.get(type);\n\n            if (result == null) {\n                AdapterManager mgr = this.adapterManager;\n                if (mgr == null) {\n                    LOG.warn(\"Unable to adapt request for path {} to {} because AdapterManager is null\", this.resource.getPath(), type);\n                } else {\n                    result = mgr.getAdapter(this, type);\n                }\n                if (result != null) {\n                    this.adaptersCache.put(type, result);\n                }\n            }\n\n            return result;\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(ThisExpression)ThisExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Overriding `adaptTo` to avoid using the original request as the adaptable.", "call_func_name": ["java.util.Map.get", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.warn", "org.apache.sling.api.adapter.AdapterManager.getAdapter", "java.util.Map.put"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.Object", "java.lang.Class"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "405", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/TemplateUtil.java", "methodName": "com.adobe.acs.commons.util.TemplateUtil.hasTemplate", "methodParameterType": "Page#String#", "methodParameterName": "page#templatePath#", "methodBody": "public static boolean hasTemplate(@CheckForNull final Page page, @CheckForNull final String templatePath) {\n        if (page == null) {\n            return false;\n        }\n        return hasTemplate(page.getProperties(), templatePath);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine if the page is of a particular template type. This method is null safe and works properly in the publish and author environments.", "call_func_name": ["com.day.cq.wcm.api.Page.getProperties", "com.adobe.acs.commons.util.TemplateUtil.hasTemplate"], "call_func_parameter": [[""], ["org.apache.sling.api.resource.ValueMap", "java.lang.String"]], "passed_comments": "/"}, {"index": "406", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/impl/SecureRandomStringUtils.java", "methodName": "com.adobe.acs.commons.util.impl.SecureRandomStringUtils.randomAlphanumeric", "methodParameterType": "int#", "methodParameterName": "count#", "methodBody": "public static String randomAlphanumeric(final int count) {\n        return RandomStringUtils.random(count, 0, 0, true, true, null, RANDOM);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NumberLiteral#NumberLiteral#BooleanLiteral#BooleanLiteral#NullLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of Latin alphabetic characters (a-z, A-Z) and the digits 0-9.</p>", "call_func_name": ["org.apache.commons.lang.RandomStringUtils.random"], "call_func_parameter": [["int", "int", "int", "boolean", "boolean", "char[]", "java.util.Random"]], "passed_comments": "/"}, {"index": "407", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/impl/QueryHelperImpl.java", "methodName": "com.adobe.acs.commons.util.impl.QueryHelperImpl.findResources", "methodParameterType": "ResourceResolver#String#String#String#", "methodParameterName": "resourceResolver#language#statement#relPath#", "methodBody": "public List<Resource> findResources(final ResourceResolver resourceResolver,\n                                        final String language,\n                                        final String statement,\n                                        final String relPath) throws RepositoryException {\n        if (StringUtils.isEmpty(statement)) {\n            return Collections.emptyList();\n        }\n\n        final String[] lines = StringUtils.split(statement, '\\n');\n\n        if (QUERY_BUILDER.equalsIgnoreCase(language)) {\n            return getResourcesFromQueryBuilder(resourceResolver, lines, relPath);\n        } else if (LIST.equalsIgnoreCase(language)) {\n            return getResourcesFromList(resourceResolver, lines, relPath);\n        } else {\n            return getResourcesFromQuery(resourceResolver, language, statement, relPath);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Find all the resources needed for the package definition.", "call_func_name": ["org.apache.commons.lang.StringUtils.isEmpty", "java.util.Collections.emptyList", "org.apache.commons.lang.StringUtils.split", "java.lang.String.equalsIgnoreCase", "com.adobe.acs.commons.util.impl.QueryHelperImpl.getResourcesFromQueryBuilder", "com.adobe.acs.commons.util.impl.QueryHelperImpl.getResourcesFromList", "com.adobe.acs.commons.util.impl.QueryHelperImpl.getResourcesFromQuery"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String", "char"], ["java.lang.String"], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String[]", "java.lang.String"], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String[]", "java.lang.String"], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String", "java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "408", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/impl/QueryHelperImpl.java", "methodName": "com.adobe.acs.commons.util.impl.QueryHelperImpl.getRelativeAwareResource", "methodParameterType": "Resource#String#", "methodParameterName": "resource#relPath#", "methodBody": "private Resource getRelativeAwareResource(final Resource resource, final String relPath) {\n        if (resource != null && StringUtils.isNotBlank(relPath)) {\n            final Resource relResource = resource.getChild(relPath);\n\n            if (relResource != null) {\n                return relResource;\n            }\n        }\n\n        return resource;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the relative resource of the given resource if it resolves otherwise the provided resource.", "call_func_name": ["org.apache.commons.lang.StringUtils.isNotBlank", "org.apache.sling.api.resource.Resource.getChild"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "409", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/impl/ReflectionUtil.java", "methodName": "com.adobe.acs.commons.util.impl.ReflectionUtil.toArray", "methodParameterType": "Collection<T>#Class#", "methodParameterName": "c#klass#", "methodBody": "public static <T> T[] toArray(Collection<T> c, Class klass) {\n        return toArray(c, (T[]) Array.newInstance(klass, c.size()));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#CastExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)CastExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The collection CAN be empty", "call_func_name": ["java.util.Collection.size", "java.lang.reflect.Array.newInstance", "com.adobe.acs.commons.util.impl.ReflectionUtil.toArray"], "call_func_parameter": [[""], ["java.lang.Class", "int"], ["java.util.Collection", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "410", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/impl/ReflectionUtil.java", "methodName": "com.adobe.acs.commons.util.impl.ReflectionUtil.toArray", "methodParameterType": "Collection<T>#", "methodParameterName": "c#", "methodBody": "public static <T> T[] toArray(Collection<T> c) {\n        return toArray(c, c.iterator().next().getClass());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The collection CANNOT be empty!", "call_func_name": ["java.util.Collection.iterator", "java.util.Iterator.next", "java.lang.Object.getClass", "com.adobe.acs.commons.util.impl.ReflectionUtil.toArray"], "call_func_parameter": [[""], [""], [""], ["java.util.Collection", "java.lang.Class"]], "passed_comments": [{"com.adobe.acs.commons.util.impl.ReflectionUtil.toArray": "The collection CAN be empty"}]}, {"index": "411", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/impl/DelegatingServletFactoryImpl.java", "methodName": "com.adobe.acs.commons.util.impl.DelegatingServletFactoryImpl.doGeneric", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "request#response#", "methodBody": "public void doGeneric(final SlingHttpServletRequest request, final SlingHttpServletResponse response) throws ServletException {\n        this.delegate(request, response);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Safe HTTP Methods", "call_func_name": ["com.adobe.acs.commons.util.impl.DelegatingServletFactoryImpl.delegate"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest", "org.apache.sling.api.SlingHttpServletResponse"]], "passed_comments": [{"com.adobe.acs.commons.util.impl.DelegatingServletFactoryImpl.delegate": "Delegates request through to the target resource type"}]}, {"index": "412", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/impl/DelegatingServletFactoryImpl.java", "methodName": "com.adobe.acs.commons.util.impl.DelegatingServletFactoryImpl.doDelete", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "request#response#", "methodBody": "public void doDelete(final SlingHttpServletRequest request, final SlingHttpServletResponse response) throws ServletException {\n        this.delegate(request, response);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Un-Safe HTTP Methods", "call_func_name": ["com.adobe.acs.commons.util.impl.DelegatingServletFactoryImpl.delegate"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest", "org.apache.sling.api.SlingHttpServletResponse"]], "passed_comments": [{"com.adobe.acs.commons.util.impl.DelegatingServletFactoryImpl.delegate": "Delegates request through to the target resource type"}]}, {"index": "413", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/impl/DelegatingServletFactoryImpl.java", "methodName": "com.adobe.acs.commons.util.impl.DelegatingServletFactoryImpl.delegate", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "request#response#", "methodBody": "private void delegate(final SlingHttpServletRequest request, final SlingHttpServletResponse response) throws ServletException {\n        final RequestDispatcherOptions options = new RequestDispatcherOptions();\n\n        if(this.isCyclic(request, targetResourceType)) {\n            log.error(\"Delegation Servlet creating a cycle for Target Resource Type: {}\", targetResourceType);\n            throw new ServletException(\"Cyclic delegation detected for \" + targetResourceType);\n        }\n\n        if(StringUtils.isNotBlank(targetResourceType)) {\n            log.debug(\"Delegating Request resource type with: {}\", targetResourceType);\n            options.setForceResourceType(targetResourceType);\n        } else {\n            log.warn(\"Delegating Servlet's \\\"Target Resource Type\\\" is blank or null\");\n        }\n\n        try {\n            this.setDelegationHistory(request, targetResourceType);\n            request.getRequestDispatcher(request.getResource(), options).forward(request, response);\n        } catch (ServletException e) {\n            log.error(\"Could not properly re-route request to delegate resource type: {}\", targetResourceType);\n        } catch (IOException e) {\n            log.error(\"Could not properly re-route request to delegate resource type: {}\", targetResourceType);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Delegates request through to the target resource type", "call_func_name": ["org.apache.sling.api.request.RequestDispatcherOptions.<init>", "com.adobe.acs.commons.util.impl.DelegatingServletFactoryImpl.isCyclic", "org.slf4j.Logger.error", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "javax.servlet.ServletException.<init>", "org.apache.commons.lang.StringUtils.isNotBlank", "org.slf4j.Logger.debug", "org.apache.sling.api.request.RequestDispatcherOptions.setForceResourceType", "org.slf4j.Logger.warn", "com.adobe.acs.commons.util.impl.DelegatingServletFactoryImpl.setDelegationHistory", "org.apache.sling.api.SlingHttpServletRequest.getResource", "org.apache.sling.api.SlingHttpServletRequest.getRequestDispatcher", "javax.servlet.RequestDispatcher.forward"], "call_func_parameter": [[""], ["org.apache.sling.api.SlingHttpServletRequest", "java.lang.String"], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.Object"], ["java.lang.String"], ["java.lang.String"], ["org.apache.sling.api.SlingHttpServletRequest", "java.lang.String"], [""], ["org.apache.sling.api.resource.Resource", "org.apache.sling.api.request.RequestDispatcherOptions"], ["javax.servlet.ServletRequest", "javax.servlet.ServletResponse"]], "passed_comments": [{"com.adobe.acs.commons.util.impl.DelegatingServletFactoryImpl.isCyclic": "Determines if the Request is or will be cyclic"}, {"com.adobe.acs.commons.util.impl.DelegatingServletFactoryImpl.setDelegationHistory": "Sets the targetResourceType as part of the delegation history and adds update history set to the Request"}]}, {"index": "414", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/impl/DelegatingServletFactoryImpl.java", "methodName": "com.adobe.acs.commons.util.impl.DelegatingServletFactoryImpl.isCyclic", "methodParameterType": "SlingHttpServletRequest#String#", "methodParameterName": "request#targetResourceType#", "methodBody": "private boolean isCyclic(final SlingHttpServletRequest request, final String targetResourceType) {\n        if(StringUtils.isBlank(targetResourceType)) {\n            log.debug(\"Delegating Servlet's \\\"Target Resource Type\\\" is blank or null\");\n            return true;\n        }\n\n        final Set<String> history = this.getDelegationHistory(request);\n        if(history.contains(targetResourceType)) {\n            log.debug(\"Delegating Servlet's \\\"Target Resource Type\\\" is been forwarded to previously\");\n            return true;\n        }\n\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines if the Request is or will be cyclic", "call_func_name": ["org.apache.commons.lang.StringUtils.isBlank", "org.slf4j.Logger.debug", "com.adobe.acs.commons.util.impl.DelegatingServletFactoryImpl.getDelegationHistory", "java.util.Set.contains"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["org.apache.sling.api.SlingHttpServletRequest"], ["java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.util.impl.DelegatingServletFactoryImpl.getDelegationHistory": "Retrieves the delegation history from the Request"}]}, {"index": "415", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/impl/DelegatingServletFactoryImpl.java", "methodName": "com.adobe.acs.commons.util.impl.DelegatingServletFactoryImpl.getDelegationHistory", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    private Set<String> getDelegationHistory(final SlingHttpServletRequest request) {\n        Set<String> history = new HashSet<String>();\n        final Object tmp = request.getAttribute(REQUEST_ATTR_DELEGATION_HISTORY);\n        if(history.getClass().isInstance(tmp)) {\n            return (Set<String>)tmp;\n        } else {\n            return history;\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#CastExpression#ReturnStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)CastExpression)ReturnStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Retrieves the delegation history from the Request", "call_func_name": ["java.util.HashSet.<init>", "org.apache.sling.api.SlingHttpServletRequest.getAttribute", "java.lang.Object.getClass", "java.lang.Class.isInstance"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "416", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/impl/DelegatingServletFactoryImpl.java", "methodName": "com.adobe.acs.commons.util.impl.DelegatingServletFactoryImpl.setDelegationHistory", "methodParameterType": "SlingHttpServletRequest#String#", "methodParameterName": "request#targetResourceType#", "methodBody": "private void setDelegationHistory(final SlingHttpServletRequest request, final String targetResourceType) {\n        final Set<String> history = this.getDelegationHistory(request);\n        history.add(targetResourceType);\n        request.setAttribute(REQUEST_ATTR_DELEGATION_HISTORY, history);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the targetResourceType as part of the delegation history and adds update history set to the Request", "call_func_name": ["com.adobe.acs.commons.util.impl.DelegatingServletFactoryImpl.getDelegationHistory", "java.util.Set.add", "org.apache.sling.api.SlingHttpServletRequest.setAttribute"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest"], ["java.lang.Object"], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.util.impl.DelegatingServletFactoryImpl.getDelegationHistory": "Retrieves the delegation history from the Request"}]}, {"index": "417", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/impl/WorkflowHelperImpl.java", "methodName": "com.adobe.acs.commons.util.impl.WorkflowHelperImpl.getResourceResolver", "methodParameterType": "com.adobe.granite.workflow.WorkflowSession#", "methodParameterName": "workflowSession#", "methodBody": "@Override\n    public final ResourceResolver getResourceResolver(com.adobe.granite.workflow.WorkflowSession workflowSession) {\n        return workflowSession.adaptTo(ResourceResolver.class);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@{inheritDoc }", "call_func_name": ["java.util.HashMap.<init>", "com.day.cq.workflow.WorkflowSession.getSession", "java.util.Map.put", "org.apache.sling.api.resource.ResourceResolverFactory.getResourceResolver"], "call_func_parameter": [[""], [""], ["java.lang.Object", "java.lang.Object"], ["java.util.Map"]], "passed_comments": "/"}, {"index": "418", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/impl/WorkflowHelperImpl.java", "methodName": "com.adobe.acs.commons.util.impl.WorkflowHelperImpl.getResourceResolver", "methodParameterType": "WorkflowSession#", "methodParameterName": "workflowSession#", "methodBody": "@Override\n    public final ResourceResolver getResourceResolver(WorkflowSession workflowSession) throws LoginException {\n        final Map<String, Object> authInfo = new HashMap<String, Object>();\n        authInfo.put(JcrResourceConstants.AUTHENTICATION_INFO_SESSION, workflowSession.getSession());\n        return resourceResolverFactory.getResourceResolver(authInfo);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@{inheritDoc }", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "419", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/impl/WorkflowHelperImpl.java", "methodName": "com.adobe.acs.commons.util.impl.WorkflowHelperImpl.getPageOrAssetResource", "methodParameterType": "ResourceResolver#String#", "methodParameterName": "resourceResolver#path#", "methodBody": "@Override\n    public final Resource getPageOrAssetResource(ResourceResolver resourceResolver, String path) {\n        Resource payloadResource = resourceResolver.getResource(path);\n\n        if (payloadResource == null) {\n            return null;\n        }\n\n        Asset asset = DamUtil.resolveToAsset(payloadResource);\n        if (asset != null) {\n            return asset.adaptTo(Resource.class);\n        }\n\n        PageManager pageManager = resourceResolver.adaptTo(PageManager.class);\n        Page page = pageManager.getContainingPage(payloadResource);\n\n        if (page != null) {\n            return page.adaptTo(Resource.class);\n        }\n\n        return null;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@{inheritDoc }", "call_func_name": ["org.apache.sling.api.resource.ResourceResolver.getResource", "com.day.cq.dam.commons.util.DamUtil.resolveToAsset", "com.day.cq.dam.api.Asset.adaptTo", "org.apache.sling.api.resource.ResourceResolver.adaptTo", "com.day.cq.wcm.api.PageManager.getContainingPage", "com.day.cq.wcm.api.Page.adaptTo"], "call_func_parameter": [["java.lang.String"], ["org.apache.sling.api.resource.Resource"], ["java.lang.Class"], ["java.lang.Class"], ["org.apache.sling.api.resource.Resource"], ["java.lang.Class"]], "passed_comments": "/"}, {"index": "420", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/impl/WorkflowHelperImpl.java", "methodName": "com.adobe.acs.commons.util.impl.WorkflowHelperImpl.isPathTypedPayload", "methodParameterType": "WorkflowData#", "methodParameterName": "workflowData#", "methodBody": "@Override\n    public boolean isPathTypedPayload(WorkflowData workflowData) {\n        return PAYLOAD_TYPE_JCR_PATH.equals(workflowData.getPayloadType());\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@{inheritDoc }", "call_func_name": ["com.adobe.granite.workflow.exec.WorkflowData.getPayloadType", "java.lang.String.equals"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "421", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/util/impl/WorkflowHelperImpl.java", "methodName": "com.adobe.acs.commons.util.impl.WorkflowHelperImpl.isPathTypedPayload", "methodParameterType": "com.adobe.granite.workflow.exec.WorkflowData#", "methodParameterName": "workflowData#", "methodBody": "@Override\n    public boolean isPathTypedPayload(com.adobe.granite.workflow.exec.WorkflowData workflowData) {\n        return PAYLOAD_TYPE_JCR_PATH.equals(workflowData.getPayloadType());\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@{inheritDoc }", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "422", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/RemoteAssetsNodeSync.java", "methodName": "com.adobe.acs.commons.remoteassets.RemoteAssetsNodeSync.syncAssetNodes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void syncAssetNodes();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Sync remote asset nodes from remote server, excluding binaries.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "423", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/RemoteAssetsBinarySync.java", "methodName": "com.adobe.acs.commons.remoteassets.RemoteAssetsBinarySync.syncAsset", "methodParameterType": "Resource#", "methodParameterName": "resource#", "methodBody": "boolean syncAsset(Resource resource);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sync an asset's binaries from a remote server. All binaries (original + renditions) are sync'd.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "424", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/RemoteAssetsNodeSyncTriggerMBean.java", "methodName": "com.adobe.acs.commons.remoteassets.RemoteAssetsNodeSyncTriggerMBean.syncAssetNodes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Description(\"Executes remote asset node sync based on configured paths.\")\n    void syncAssetNodes();", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Method to run when triggering the syncAssetNodes() located in  {@link RemoteAssetsNodeSync}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "425", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsConfigImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.activate", "methodParameterType": "RemoteAssetsConfigImpl.Config#", "methodParameterName": "config#", "methodBody": "@Activate\n    protected final void activate(RemoteAssetsConfigImpl.Config config) {\n        this.server = config.server_url();\n        if (StringUtils.isBlank(this.server)) {\n            throw new IllegalArgumentException(\"Remote server must be specified\");\n        }\n        this.username = config.server_user();\n        if (StringUtils.isBlank(this.username)) {\n            throw new IllegalArgumentException(\"Remote server username must be specified\");\n        }\n        this.password = config.server_pass();\n        if (StringUtils.isBlank(this.password)) {\n            throw new IllegalArgumentException(\"Remote server password must be specified\");\n        }\n        this.allowInsecureRemote = config.server_insecure();\n        this.tagSyncPaths = Stream.of(ObjectUtils.defaultIfNull(config.tag_paths(), new String[]{}))\n                .filter(item -> StringUtils.isNotBlank(item))\n                .collect(Collectors.toList());\n        this.damSyncPaths = Stream.of(ObjectUtils.defaultIfNull(config.dam_paths(), new String[]{}))\n                .filter(item -> StringUtils.isNotBlank(item))\n                .collect(Collectors.toList());\n        this.retryDelay = config.retry_delay();\n        this.saveInterval = config.save_interval();\n        this.eventUserData = config.event_user_data();\n        this.whitelistedServiceUsers = Stream.of(ObjectUtils.defaultIfNull(config.whitelisted_service_users(), new String[]{}))\n                .filter(item -> StringUtils.isNotBlank(item))\n                .collect(Collectors.toSet());\n\n        buildRemoteHttpExecutor();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#Dimension#ArrayType#ArrayInitializer#ArrayCreation#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#Dimension#ArrayType#ArrayInitializer#ArrayCreation#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#Dimension#ArrayType#ArrayInitializer#ArrayCreation#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer)ArrayInitializer)ArrayCreation)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer)ArrayInitializer)ArrayCreation)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer)ArrayInitializer)ArrayCreation)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Method to run on activation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "426", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsConfigImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getServer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getServer() {\n        return this.server;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return String", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "427", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsConfigImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getUsername", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUsername() {\n        return this.username;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return String", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "428", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsConfigImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getPassword", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPassword() {\n        return this.password;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return String", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "429", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsConfigImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getTagSyncPaths", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<String> getTagSyncPaths() {\n        return this.tagSyncPaths;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return List<String>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "430", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsConfigImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getDamSyncPaths", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<String> getDamSyncPaths() {\n        return this.damSyncPaths;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return List<String>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "431", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsConfigImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getRetryDelay", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getRetryDelay() {\n        return this.retryDelay;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return Integer", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "432", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsConfigImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getSaveInterval", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getSaveInterval() {\n        return this.saveInterval;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return Integer", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "433", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsConfigImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getEventUserData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEventUserData() {\n        return this.eventUserData;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return String", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "434", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsConfigImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getWhitelistedServiceUsers", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Set<String> getWhitelistedServiceUsers() {\n        return this.whitelistedServiceUsers;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return String", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "435", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsConfigImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getRemoteAssetsHttpExecutor", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Executor getRemoteAssetsHttpExecutor() {\n        return remoteAssetsHttpExecutor;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return Executor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "436", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsConfigImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getResourceResolver", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ResourceResolver getResourceResolver() {\n        try {\n            Map<String, Object> userParams = new HashMap<>();\n            userParams.put(ResourceResolverFactory.SUBSERVICE, RemoteAssets.SERVICE_NAME);\n            ResourceResolver resourceResolver = this.resourceResolverFactory.getServiceResourceResolver(userParams);\n            Session session = resourceResolver.adaptTo(Session.class);\n            if (StringUtils.isNotBlank(this.getEventUserData())) {\n                session.getWorkspace().getObservationManager().setUserData(this.getEventUserData());\n            }\n            return resourceResolver;\n        } catch (Exception e) {\n            LOG.error(\"Remote assets functionality cannot be enabled - service user login failed\");\n            throw new RemoteAssetsServiceException(e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "/", "call_func_name": ["java.util.HashMap.<init>", "java.util.Map.put", "org.apache.sling.api.resource.ResourceResolverFactory.getServiceResourceResolver", "org.apache.sling.api.resource.ResourceResolver.adaptTo", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getEventUserData", "org.apache.commons.lang3.StringUtils.isNotBlank", "javax.jcr.Session.getWorkspace", "javax.jcr.Workspace.getObservationManager", "javax.jcr.observation.ObservationManager.setUserData", "org.slf4j.Logger.error", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsServiceException.<init>"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.Object"], ["java.util.Map"], ["java.lang.Class"], [""], ["java.lang.CharSequence"], [""], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.Throwable"]], "passed_comments": [{"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getEventUserData": "@return String"}]}, {"index": "437", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssets.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssets.RemoteAssets", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private RemoteAssets() {\n        throw new IllegalStateException(\"Utility class\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Private constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "438", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetDecorator.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetDecorator.decorate", "methodParameterType": "Resource#", "methodParameterName": "resource#", "methodBody": "@Override\n    public Resource decorate(final Resource resource) {\n        try {\n            if (!this.accepts(resource)) {\n                return resource;\n            }\n        } catch (Exception e) {\n            // Logging at debug level b/c if this happens it could represent a ton of logging\n            LOG.debug(\"Failed binary sync check for remote asset: {}\", resource.getPath());\n            return resource;\n        }\n\n        boolean syncSuccessful = false;\n        if (isAlreadySyncing(resource.getPath())) {\n            syncSuccessful = waitForSyncInProgress(resource);\n        } else {\n            syncSuccessful = syncAssetBinaries(resource);\n        }\n        if (syncSuccessful) {\n            LOG.trace(\"Refreshing resource after binary sync of {}\", resource.getPath());\n            resource.getResourceResolver().refresh();\n            return resource.getResourceResolver().getResource(resource.getPath());\n        } else {\n            return resource;\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#CatchClause#TryStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(IfStatement(PrefixExpression(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "When resolving a remote asset, first sync the asset from the remote server.", "call_func_name": ["com.adobe.acs.commons.remoteassets.impl.RemoteAssetDecorator.accepts", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.debug", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetDecorator.isAlreadySyncing", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetDecorator.waitForSyncInProgress", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetDecorator.syncAssetBinaries", "org.slf4j.Logger.trace", "org.apache.sling.api.resource.Resource.getResourceResolver", "org.apache.sling.api.resource.ResourceResolver.refresh", "org.apache.sling.api.resource.ResourceResolver.getResource"], "call_func_parameter": [["org.apache.sling.api.resource.Resource"], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String"], ["org.apache.sling.api.resource.Resource"], ["org.apache.sling.api.resource.Resource"], ["java.lang.String", "java.lang.Object"], [""], [""], ["java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.remoteassets.impl.RemoteAssetDecorator.accepts": "Check if this resource is a remote resource."}]}, {"index": "439", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetDecorator.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetDecorator.decorate", "methodParameterType": "Resource#HttpServletRequest#", "methodParameterName": "resource#request#", "methodBody": "@Deprecated\n    @Override\n    public Resource decorate(final Resource resource, final HttpServletRequest request) {\n        return this.decorate(resource);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated When resolving a remote asset, first sync the asset from the remote server.", "call_func_name": ["com.adobe.acs.commons.remoteassets.impl.RemoteAssetDecorator.decorate"], "call_func_parameter": [["org.apache.sling.api.resource.Resource"]], "passed_comments": [{"com.adobe.acs.commons.remoteassets.impl.RemoteAssetDecorator.decorate": "When resolving a remote asset, first sync the asset from the remote server."}]}, {"index": "440", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetDecorator.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetDecorator.accepts", "methodParameterType": "Resource#", "methodParameterName": "resource#", "methodBody": "protected boolean accepts(final Resource resource) throws RepositoryException {ValueMap props = resource.getValueMap();\n        if (!DamConstants.NT_DAM_ASSETCONTENT.equals(props.get(JcrConstants.JCR_PRIMARYTYPE))) {\n            return false;\n        }\n\n        if (!props.get(RemoteAssets.IS_REMOTE_ASSET, false)) {\n            return false;\n        }\n\n        Calendar lastFailure = props.get(RemoteAssets.REMOTE_SYNC_FAILED, (Calendar) null);\n        if (lastFailure != null && System.currentTimeMillis() < (lastFailure.getTimeInMillis() + (this.config.getRetryDelay() * 60000))) {\n            return false;\n        }\n\n        boolean matchesSyncPath = false;\n        for (String syncPath : this.config.getDamSyncPaths()) {\n            if (resource.getPath().startsWith(syncPath)) {\n                matchesSyncPath = true;\n            }\n        }\n\n        return matchesSyncPath && isAllowedUser(resource);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#NullLiteral#CastExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#InfixExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral)CastExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ParenthesizedExpression(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression)InfixExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if this resource is a remote resource.", "call_func_name": ["org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.get", "java.lang.String.equals", "java.lang.Boolean.valueOf", "org.apache.sling.api.resource.ValueMap.get", "java.lang.Boolean.booleanValue", "java.lang.System.currentTimeMillis", "java.util.Calendar.getTimeInMillis", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getRetryDelay", "java.lang.Integer.intValue", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getDamSyncPaths", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.sling.api.resource.Resource.getPath", "java.lang.String.startsWith", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetDecorator.isAllowedUser"], "call_func_parameter": [[""], ["java.lang.Object"], ["java.lang.Object"], ["boolean"], ["java.lang.String", "java.lang.Object"], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], ["java.lang.String"], ["org.apache.sling.api.resource.Resource"]], "passed_comments": [{"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getRetryDelay": "@return Integer"}, {"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getDamSyncPaths": "@return List<String>"}, {"com.adobe.acs.commons.remoteassets.impl.RemoteAssetDecorator.isAllowedUser": "Check if the user is allowed to sync binaries. Service users, as well as the admin user, are prevented from sync'ing binaries to ensure that some back end procress traversing the DAM doesn't trigger a sync of the entire DAM, thus subverting the benefits of remote assets. Service users can be whitelisted via remote aseets configuration if it is desired for a particular service user to be able to sync binaries."}]}, {"index": "441", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetDecorator.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetDecorator.isAllowedUser", "methodParameterType": "Resource#", "methodParameterName": "resource#", "methodBody": "private boolean isAllowedUser(Resource resource) throws RepositoryException {\n        ResourceResolver resourceResolver = resource.getResourceResolver();\n        String userId = resourceResolver.getUserID();\n        if (!userId.equals(UserConstants.DEFAULT_ADMIN_ID)) {\n            if (this.config.getWhitelistedServiceUsers().contains(userId)) {\n                return true;\n            }\n\n            Session session = resourceResolver.adaptTo(Session.class);\n            User currentUser = (User) getUserManager(session).getAuthorizable(userId);\n            if (currentUser != null && !currentUser.isSystemUser()) {\n                return true;\n            } else {\n                LOG.trace(\"Avoiding binary sync b/c this is a non-whitelisted service user: {}\", session.getUserID());\n            }\n        } else {\n            LOG.trace(\"Avoiding binary sync for admin user\");\n        }\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(Block(IfStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if the user is allowed to sync binaries. Service users, as well as the admin user, are prevented from sync'ing binaries to ensure that some back end procress traversing the DAM doesn't trigger a sync of the entire DAM, thus subverting the benefits of remote assets. Service users can be whitelisted via remote aseets configuration if it is desired for a particular service user to be able to sync binaries.", "call_func_name": ["org.apache.sling.api.resource.Resource.getResourceResolver", "org.apache.sling.api.resource.ResourceResolver.getUserID", "java.lang.String.equals", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getWhitelistedServiceUsers", "java.util.Set.contains", "org.apache.sling.api.resource.ResourceResolver.adaptTo", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetDecorator.getUserManager", "org.apache.jackrabbit.api.security.user.UserManager.getAuthorizable", "org.apache.jackrabbit.api.security.user.User.isSystemUser", "javax.jcr.Session.getUserID", "org.slf4j.Logger.trace", "org.slf4j.Logger.trace"], "call_func_parameter": [[""], [""], ["java.lang.Object"], [""], ["java.lang.Object"], ["java.lang.Class"], ["javax.jcr.Session"], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getWhitelistedServiceUsers": "@return String"}]}, {"index": "442", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsBinarySyncImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsBinarySyncImpl.syncAsset", "methodParameterType": "Resource#", "methodParameterName": "resource#", "methodBody": "@Override\n    public boolean syncAsset(Resource resource) {\n        \n        try (ResourceResolver remoteAssetsResolver = this.remoteAssetsConfig.getResourceResolver()){\n            \n            try {\n                Resource localRes = remoteAssetsResolver.getResource(resource.getPath());\n                Asset asset = DamUtil.resolveToAsset(localRes);\n                URI pathUri = new URI(null, null, asset.getPath(), null);\n                String baseUrl = this.remoteAssetsConfig.getServer().concat(pathUri.toString()).concat(\"/_jcr_content/renditions/\");\n\n                Iterator<? extends Rendition> renditions = asset.listRenditions();\n                while (renditions.hasNext()) {\n                    Rendition assetRendition = renditions.next();\n                    if (StringUtils.isEmpty(assetRendition.getMimeType())) {\n                        continue;\n                    }\n                    String renditionName = assetRendition.getName();\n                    String remoteUrl = String.format(\"%s%s\", baseUrl, renditionName);\n                    setRenditionOnAsset(remoteUrl, assetRendition, asset, renditionName);\n                }\n\n                ModifiableValueMap localResProps = localRes.adaptTo(ModifiableValueMap.class);\n                localResProps.remove(RemoteAssets.IS_REMOTE_ASSET);\n                localResProps.remove(RemoteAssets.REMOTE_SYNC_FAILED);\n                remoteAssetsResolver.commit();\n                return true;\n            } catch (Exception e) {\n                LOG.error(\"Error transferring remote asset '{}' to local server\", resource.getPath(), e);\n                try {\n                    remoteAssetsResolver.revert();\n                    flagAssetAsFailedSync(remoteAssetsResolver, resource.getPath());\n                } catch (Exception re) {\n                    LOG.error(\"Failed to mark sync of {} as failed\", resource.getPath(),re);\n                }\n            } \n        }\n        return false;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NullLiteral#NullLiteral#SimpleName#SimpleName#MethodInvocation#NullLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ContinueStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#CatchClause#TryStatement#Block#TryStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)CatchClause)TryStatement)Block)TryStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see RemoteAssetsBinarySync#syncAsset(Resource)", "call_func_name": ["com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getResourceResolver", "org.apache.sling.api.resource.Resource.getPath", "org.apache.sling.api.resource.ResourceResolver.getResource", "com.day.cq.dam.commons.util.DamUtil.resolveToAsset", "com.day.cq.dam.api.Asset.getPath", "java.net.URI.<init>", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getServer", "java.net.URI.toString", "java.lang.String.concat", "com.day.cq.dam.api.Asset.listRenditions", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.day.cq.dam.api.Rendition.getMimeType", "org.apache.commons.lang3.StringUtils.isEmpty", "com.day.cq.dam.api.Rendition.getName", "java.lang.String.format", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsBinarySyncImpl.setRenditionOnAsset", "org.apache.sling.api.resource.Resource.adaptTo", "org.apache.sling.api.resource.ModifiableValueMap.remove", "org.apache.sling.api.resource.ResourceResolver.commit", "org.apache.sling.api.resource.ResourceResolver.close", "java.lang.Throwable.addSuppressed", "org.slf4j.Logger.error", "org.apache.sling.api.resource.ResourceResolver.revert", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsBinarySyncImpl.flagAssetAsFailedSync"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["org.apache.sling.api.resource.Resource"], [""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String"], [""], [""], [""], [""], ["java.lang.CharSequence"], [""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String", "com.day.cq.dam.api.Rendition", "com.day.cq.dam.api.Asset", "java.lang.String"], ["java.lang.Class"], ["java.lang.Object"], [""], [""], ["java.lang.Throwable"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getResourceResolver": "/"}, {"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getServer": "@return String"}, {"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsBinarySyncImpl.setRenditionOnAsset": "Fetch binary from URL and set into the asset rendition."}, {"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsBinarySyncImpl.flagAssetAsFailedSync": "Sets a property on the resource if the asset sync failed."}]}, {"index": "443", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsBinarySyncImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsBinarySyncImpl.setRenditionOnAsset", "methodParameterType": "String#Rendition#Asset#String#", "methodParameterName": "remoteUrl#assetRendition#asset#renditionName#", "methodBody": "private void setRenditionOnAsset(String remoteUrl, Rendition assetRendition, Asset asset, String renditionName)\n            throws IOException {\n\n        LOG.debug(\"Syncing from remote asset url: {}\", remoteUrl);\n        Executor executor = this.remoteAssetsConfig.getRemoteAssetsHttpExecutor();\n        try (InputStream inputStream = executor.execute(Request.Get(remoteUrl)).returnContent().asStream()) {\n            asset.addRendition(renditionName, inputStream, assetRendition.getMimeType());\n        } catch (HttpResponseException fne) {\n            if (DamConstants.ORIGINAL_FILE.equals(renditionName) || fne.getStatusCode() != HTTP_NOT_FOUND) {\n                throw fne;\n            }\n\n            asset.removeRendition(renditionName);\n            LOG.warn(\"Rendition '{}' not found on remote environment. Removing local rendition.\", renditionName);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#InfixExpression#SimpleName#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)InfixExpression(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Fetch binary from URL and set into the asset rendition.", "call_func_name": ["org.slf4j.Logger.debug", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getRemoteAssetsHttpExecutor", "org.apache.http.client.fluent.Request.Get", "org.apache.http.client.fluent.Executor.execute", "org.apache.http.client.fluent.Response.returnContent", "org.apache.http.client.fluent.Content.asStream", "com.day.cq.dam.api.Rendition.getMimeType", "com.day.cq.dam.api.Asset.addRendition", "java.io.InputStream.close", "java.lang.Throwable.addSuppressed", "java.lang.String.equals", "org.apache.http.client.HttpResponseException.getStatusCode", "com.day.cq.dam.api.Asset.removeRendition", "org.slf4j.Logger.warn"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], [""], ["java.lang.String"], ["org.apache.http.client.fluent.Request"], [""], [""], [""], ["java.lang.String", "java.io.InputStream", "java.lang.String"], [""], ["java.lang.Throwable"], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getRemoteAssetsHttpExecutor": "@return Executor"}]}, {"index": "444", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsBinarySyncImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsBinarySyncImpl.flagAssetAsFailedSync", "methodParameterType": "ResourceResolver#String#", "methodParameterName": "remoteAssetsResolver#path#", "methodBody": "private void flagAssetAsFailedSync(ResourceResolver remoteAssetsResolver, String path) throws PersistenceException {\n        Resource localRes = remoteAssetsResolver.getResource(path);\n        ModifiableValueMap localResProps = localRes.adaptTo(ModifiableValueMap.class);\n        localResProps.put(RemoteAssets.REMOTE_SYNC_FAILED, Calendar.getInstance());\n        remoteAssetsResolver.commit();\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets a property on the resource if the asset sync failed.", "call_func_name": ["org.apache.sling.api.resource.ResourceResolver.getResource", "org.apache.sling.api.resource.Resource.adaptTo", "java.util.Calendar.getInstance", "org.apache.sling.api.resource.ModifiableValueMap.put", "org.apache.sling.api.resource.ResourceResolver.commit"], "call_func_parameter": [["java.lang.String"], ["java.lang.Class"], [""], ["java.lang.Object", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "445", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsNodeSyncScheduler.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncScheduler.run", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public final void run() {\n        LOG.info(\"Remote assets node sync job started.\");\n        this.remoteAssetsNodeSync.syncAssetNodes();\n        LOG.info(\"Remote assets node sync job finished.\");\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see Runnable#run().", "call_func_name": ["org.slf4j.Logger.info", "com.adobe.acs.commons.remoteassets.RemoteAssetsNodeSync.syncAssetNodes"], "call_func_parameter": [["java.lang.String"], [""]], "passed_comments": [{"com.adobe.acs.commons.remoteassets.RemoteAssetsNodeSync.syncAssetNodes": "Sync remote asset nodes from remote server, excluding binaries."}]}, {"index": "446", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsNodeSyncImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.syncAssetNodes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void syncAssetNodes() {\n        \n        try (ResourceResolver remoteAssetsResolver = this.remoteAssetsConfig.getResourceResolver();) {\n            List<String> syncPaths = new ArrayList<>();\n            syncPaths.addAll(this.remoteAssetsConfig.getTagSyncPaths());\n            syncPaths.addAll(this.remoteAssetsConfig.getDamSyncPaths());\n            for (String syncPath : syncPaths) {\n                LOG.info(\"Starting sync of nodes for {}\", syncPath);\n                remoteAssetsResolver.refresh();\n                JsonObject topLevelJsonWithChildren = getJsonFromUri(syncPath);\n                String resourcePrimaryType = topLevelJsonWithChildren.getAsJsonPrimitive(JcrConstants.JCR_PRIMARYTYPE).getAsString();\n                Resource topLevelSyncResource = getOrCreateNode(remoteAssetsResolver, syncPath, resourcePrimaryType);\n                createOrUpdateNodes(remoteAssetsResolver, topLevelJsonWithChildren, topLevelSyncResource);\n                remoteAssetsResolver.commit();\n                LOG.info(\"Completed sync of nodes for {}\", syncPath);\n            }\n        } catch (Exception e) {\n            LOG.error(\"Unexpected error sync'ing remote asset nodes\", e);\n        } \n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see RemoteAssetsNodeSync#syncAssetNodes()", "call_func_name": ["com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getResourceResolver", "java.util.ArrayList.<init>", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getTagSyncPaths", "java.util.List.addAll", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getDamSyncPaths", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.slf4j.Logger.info", "org.apache.sling.api.resource.ResourceResolver.refresh", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.getJsonFromUri", "com.google.gson.JsonObject.getAsJsonPrimitive", "com.google.gson.JsonPrimitive.getAsString", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.getOrCreateNode", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.createOrUpdateNodes", "org.apache.sling.api.resource.ResourceResolver.commit", "org.apache.sling.api.resource.ResourceResolver.close", "java.lang.Throwable.addSuppressed", "org.slf4j.Logger.error"], "call_func_parameter": [[""], [""], [""], ["java.util.Collection"], [""], [""], [""], [""], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String"], ["java.lang.String"], [""], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String", "java.lang.String"], ["org.apache.sling.api.resource.ResourceResolver", "com.google.gson.JsonObject", "org.apache.sling.api.resource.Resource"], [""], [""], ["java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getResourceResolver": "/"}, {"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getTagSyncPaths": "@return List<String>"}, {"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getDamSyncPaths": "@return List<String>"}, {"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.getJsonFromUri": "Get  {@link JsonObject} from URL response."}, {"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.getOrCreateNode": "Retrieve or create a node in the JCR."}, {"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.createOrUpdateNodes": "Create or update resources from remote JSON."}]}, {"index": "447", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsNodeSyncImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.getOrCreateNode", "methodParameterType": "ResourceResolver#String#String#", "methodParameterName": "remoteAssetsResolver#nextPath#primaryType#", "methodBody": "private Resource getOrCreateNode(final ResourceResolver remoteAssetsResolver, final String nextPath, final String primaryType) throws RepositoryException {\n        Resource resource;\n\n        try {\n            resource = remoteAssetsResolver.getResource(nextPath);\n            if (resource == null) {\n                Node node = JcrUtil.createPath(nextPath, primaryType, remoteAssetsResolver.adaptTo(Session.class));\n                resource = remoteAssetsResolver.getResource(node.getPath());\n                LOG.debug(\"New resource '{}' created.\", resource.getPath());\n            } else {\n                LOG.debug(\"Resource '{}' retrieved from JCR.\", resource.getPath());\n            }\n        } catch (RepositoryException re) {\n            LOG.error(\"Repository Exception. Unable to get or create resource '{}'\", nextPath, re);\n            throw re;\n        }\n\n        return resource;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve or create a node in the JCR.", "call_func_name": ["org.apache.sling.api.resource.ResourceResolver.getResource", "org.apache.sling.api.resource.ResourceResolver.adaptTo", "com.day.cq.commons.jcr.JcrUtil.createPath", "javax.jcr.Node.getPath", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.debug", "org.slf4j.Logger.error"], "call_func_parameter": [["java.lang.String"], ["java.lang.Class"], ["java.lang.String", "java.lang.String", "javax.jcr.Session"], [""], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "448", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsNodeSyncImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.getJsonFromUri", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "private JsonObject getJsonFromUri(final String path) throws IOException {\n        URI pathUri;\n        try {\n            pathUri = new URI(null, null, path, null);\n        } catch (URISyntaxException e) {\n            LOG.error(\"URI Syntax Exception\", e);\n            throw new IOException(\"Invalid URI\", e);\n        }\n\n        // we want to traverse the JCR one level at a time, hence the '1' selector.\n        String url = this.remoteAssetsConfig.getServer() + pathUri.toString() + \".1.json\";\n        Executor executor = this.remoteAssetsConfig.getRemoteAssetsHttpExecutor();\n        String responseString = executor.execute(Request.Get(url)).returnContent().asString();\n\n        try {\n            JsonObject responseJson = new JsonParser().parse(responseString).getAsJsonObject();\n            LOG.debug(\"JSON successfully fetched for URL '{}'.\", url);\n            return responseJson;\n        } catch (JsonSyntaxException | IllegalStateException e) {\n            LOG.error(\"Unable to grab JSON Object. Please ensure URL {} is valid. \\nRaw Response: {}\", url, responseString);\n            throw new IOException(\"Invalid JSON response\", e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#NullLiteral#NullLiteral#SimpleName#NullLiteral#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(NullLiteral)NullLiteral(SimpleName)SimpleName(NullLiteral)NullLiteral)ClassInstanceCreation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Get  {@link JsonObject} from URL response.", "call_func_name": ["java.net.URI.<init>", "org.slf4j.Logger.error", "java.io.IOException.<init>", "java.lang.StringBuilder.<init>", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getServer", "java.lang.StringBuilder.append", "java.net.URI.toString", "java.lang.StringBuilder.toString", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getRemoteAssetsHttpExecutor", "org.apache.http.client.fluent.Request.Get", "org.apache.http.client.fluent.Executor.execute", "org.apache.http.client.fluent.Response.returnContent", "org.apache.http.client.fluent.Content.asString", "com.google.gson.JsonParser.<init>", "com.google.gson.JsonParser.parse", "com.google.gson.JsonElement.getAsJsonObject", "org.slf4j.Logger.debug", "org.slf4j.Logger.error"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"], [""], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.String"], ["org.apache.http.client.fluent.Request"], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getServer": "@return String"}, {"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getRemoteAssetsHttpExecutor": "@return Executor"}]}, {"index": "449", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsNodeSyncImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.createOrUpdateNodes", "methodParameterType": "ResourceResolver#JsonObject#Resource#", "methodParameterName": "remoteAssetsResolver#json#resource#", "methodBody": "private void createOrUpdateNodes(final ResourceResolver remoteAssetsResolver, final JsonObject json, final Resource resource) throws IOException, RepositoryException {\n        for (Map.Entry<String, JsonElement> jsonEntry : json.entrySet()) {\n            JsonElement jsonElement = jsonEntry.getValue();\n            if (jsonElement.isJsonObject()) {\n                createOrUpdateNodesForJsonObject(remoteAssetsResolver, jsonEntry.getKey(), resource);\n            } else if (jsonElement.isJsonArray()) {\n                setNodeArrayProperty(remoteAssetsResolver, jsonEntry.getKey(), jsonElement.getAsJsonArray(), resource);\n            } else {\n                setNodeProperty(remoteAssetsResolver, jsonEntry.getKey(), json, resource);\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Create or update resources from remote JSON.", "call_func_name": ["com.google.gson.JsonObject.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.google.gson.JsonElement.isJsonObject", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.createOrUpdateNodesForJsonObject", "com.google.gson.JsonElement.isJsonArray", "com.google.gson.JsonElement.getAsJsonArray", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.setNodeArrayProperty", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.setNodeProperty"], "call_func_parameter": [[""], [""], [""], [""], [""], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String", "org.apache.sling.api.resource.Resource"], [""], [""], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String", "com.google.gson.JsonArray", "org.apache.sling.api.resource.Resource"], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String", "com.google.gson.JsonObject", "org.apache.sling.api.resource.Resource"]], "passed_comments": [{"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.createOrUpdateNodesForJsonObject": "Handler for when a JSON element is an Object, representing a resource."}, {"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.setNodeArrayProperty": "Handler for when a JSON element is an array."}, {"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.setNodeProperty": "Handler for when a JSON element represents a resource property."}]}, {"index": "450", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsNodeSyncImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.createOrUpdateNodesForJsonObject", "methodParameterType": "ResourceResolver#String#Resource#", "methodParameterName": "remoteAssetsResolver#key#parentResource#", "methodBody": "private void createOrUpdateNodesForJsonObject(final ResourceResolver remoteAssetsResolver, final String key, final Resource parentResource) throws IOException, RepositoryException {\n        if (PROTECTED_NODES.contains(key)) {\n            return;\n        }\n\n        String objectPath = String.format(\"%s/%s\", parentResource.getPath(), key);\n        JsonObject jsonObjectWithChildren = getJsonFromUri(objectPath);\n        String resourcePrimaryType = jsonObjectWithChildren.getAsJsonPrimitive(JcrConstants.JCR_PRIMARYTYPE).getAsString();\n        Resource resource = getOrCreateNode(remoteAssetsResolver, objectPath, resourcePrimaryType);\n        createOrUpdateNodes(remoteAssetsResolver, jsonObjectWithChildren, resource);\n\n        ValueMap resourceProperties = resource.adaptTo(ModifiableValueMap.class);\n        if (DamConstants.NT_DAM_ASSET.equals(parentResource.getValueMap().get(JcrConstants.JCR_PRIMARYTYPE, String.class))\n                && DamConstants.NT_DAM_ASSETCONTENT.equals(resourceProperties.get(JcrConstants.JCR_PRIMARYTYPE, String.class))) {\n            resourceProperties.put(RemoteAssets.IS_REMOTE_ASSET, true);\n            LOG.trace(\"Property '{}' added for resource '{}'.\", RemoteAssets.IS_REMOTE_ASSET, resource.getPath());\n\n            // Save and refresh the session after the save refresh count has reached the configured amount.\n            this.saveRefreshCount++;\n            if (this.saveRefreshCount == this.remoteAssetsConfig.getSaveInterval()) {\n                this.saveRefreshCount = 0;\n                remoteAssetsResolver.commit();\n                remoteAssetsResolver.refresh();\n                LOG.info(\"Executed incremental save of node sync.\");\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#PostfixExpression#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#InfixExpression#ThisExpression#SimpleName#FieldAccess#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)PostfixExpression)ExpressionStatement(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Handler for when a JSON element is an Object, representing a resource.", "call_func_name": ["java.util.Set.contains", "org.apache.sling.api.resource.Resource.getPath", "java.lang.String.format", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.getJsonFromUri", "com.google.gson.JsonObject.getAsJsonPrimitive", "com.google.gson.JsonPrimitive.getAsString", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.getOrCreateNode", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.createOrUpdateNodes", "org.apache.sling.api.resource.Resource.adaptTo", "org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.get", "java.lang.String.equals", "java.lang.Boolean.valueOf", "org.apache.sling.api.resource.ValueMap.put", "org.slf4j.Logger.trace", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getSaveInterval", "java.lang.Integer.intValue", "org.apache.sling.api.resource.ResourceResolver.commit", "org.apache.sling.api.resource.ResourceResolver.refresh", "org.slf4j.Logger.info"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String"], ["java.lang.String"], [""], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String", "java.lang.String"], ["org.apache.sling.api.resource.ResourceResolver", "com.google.gson.JsonObject", "org.apache.sling.api.resource.Resource"], ["java.lang.Class"], [""], ["java.lang.String", "java.lang.Class"], ["java.lang.Object"], ["boolean"], ["java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], [""], [""], [""], ["java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.getJsonFromUri": "Get  {@link JsonObject} from URL response."}, {"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.getOrCreateNode": "Retrieve or create a node in the JCR."}, {"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.createOrUpdateNodes": "Create or update resources from remote JSON."}, {"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsConfigImpl.getSaveInterval": "@return Integer"}]}, {"index": "451", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsNodeSyncImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.setNodeProperty", "methodParameterType": "ResourceResolver#String#JsonObject#Resource#", "methodParameterName": "remoteAssetsResolver#key#json#resource#", "methodBody": "private void setNodeProperty(final ResourceResolver remoteAssetsResolver, final String key, final JsonObject json, final Resource resource) throws RepositoryException {\n        try {\n            JsonElement value = json.get(key);\n\n            if (\":\".concat(JcrConstants.JCR_DATA).equals(key)) {\n                setNodeJcrDataProperty(remoteAssetsResolver, resource, json.getAsJsonPrimitive(JcrConstants.JCR_LASTMODIFIED).getAsString());\n            } else if (key.startsWith(\":\")) {\n                // Skip binary properties, since they do not come across in JSON\n                return;\n            } else if (PROTECTED_PROPERTIES.contains(key)) {\n                // Skipping due to the property being unmodifiable.\n                return;\n            } else if (resource.getValueMap().get(key) != null && resource.getValueMap().get(key, String.class).equals(value.getAsString())) {\n                // Skipping due to the property already existing and being equal\n                return;\n            } else {\n                setNodeSimpleProperty(value.getAsJsonPrimitive(), key, resource);\n            }\n        } catch (RepositoryException re) {\n            LOG.warn(\"Repository exception thrown. Skipping '{}' single property for resource '{}'.\", key, resource.getPath());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#StringLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement)ReturnStatement)Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(ReturnStatement)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Handler for when a JSON element represents a resource property.", "call_func_name": ["com.google.gson.JsonObject.get", "java.lang.String.concat", "java.lang.String.equals", "com.google.gson.JsonObject.getAsJsonPrimitive", "com.google.gson.JsonPrimitive.getAsString", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.setNodeJcrDataProperty", "java.lang.String.startsWith", "java.util.Set.contains", "org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.get", "org.apache.sling.api.resource.ValueMap.get", "com.google.gson.JsonElement.getAsString", "com.google.gson.JsonElement.getAsJsonPrimitive", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.setNodeSimpleProperty", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.warn"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String"], [""], ["org.apache.sling.api.resource.ResourceResolver", "org.apache.sling.api.resource.Resource", "java.lang.String"], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.Object"], ["java.lang.String", "java.lang.Class"], [""], [""], ["com.google.gson.JsonPrimitive", "java.lang.String", "org.apache.sling.api.resource.Resource"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.setNodeJcrDataProperty": "Set jcr:data property to a temporary binary for a rendition resource."}, {"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.setNodeSimpleProperty": "Set a simple resource property from the fetched JSON."}]}, {"index": "452", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsNodeSyncImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.setNodeArrayProperty", "methodParameterType": "ResourceResolver#String#JsonArray#Resource#", "methodParameterName": "remoteAssetsResolver#key#jsonArray#resource#", "methodBody": "private void setNodeArrayProperty(final ResourceResolver remoteAssetsResolver, final String key, final JsonArray jsonArray, final Resource resource) throws RepositoryException {\n        try {\n            if (PROTECTED_PROPERTIES.contains(key)) {\n                // Skipping due to the property being unmodifiable.\n                return;\n            } else if (JcrConstants.JCR_MIXINTYPES.equals(key)) {\n                setNodeMixinsProperty(jsonArray, key, resource);\n            } else if (NameConstants.PN_TAGS.equals(key)) {\n                setNodeTagsProperty(remoteAssetsResolver, jsonArray, resource);\n            } else {\n                setNodeSimpleArrayProperty(jsonArray, key, resource);\n            }\n        } catch (RepositoryException re) {\n            LOG.warn(\"Repository exception thrown. Skipping {} array property for resource '{}'.\", key, resource.getPath());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement)ReturnStatement)Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Handler for when a JSON element is an array.", "call_func_name": ["java.util.Set.contains", "java.lang.String.equals", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.setNodeMixinsProperty", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.setNodeTagsProperty", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.setNodeSimpleArrayProperty", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.warn"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"], ["com.google.gson.JsonArray", "java.lang.String", "org.apache.sling.api.resource.Resource"], ["org.apache.sling.api.resource.ResourceResolver", "com.google.gson.JsonArray", "org.apache.sling.api.resource.Resource"], ["com.google.gson.JsonArray", "java.lang.String", "org.apache.sling.api.resource.Resource"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.setNodeMixinsProperty": "Set mixins property for a resource, based on an array found in the retrieved JSON.."}, {"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.setNodeTagsProperty": "Set tags property for a resource, based on an array found in the retrieved JSON.."}, {"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.setNodeSimpleArrayProperty": "Set generic array property for a resource, based on an array found in the retrieved JSON."}]}, {"index": "453", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsNodeSyncImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.setNodeMixinsProperty", "methodParameterType": "JsonArray#String#Resource#", "methodParameterName": "jsonArray#key#resource#", "methodBody": "protected void setNodeMixinsProperty(final JsonArray jsonArray, final String key, final Resource resource) throws RepositoryException {\n        Node node = resource.adaptTo(Node.class);\n        for (JsonElement jsonElement : jsonArray) {\n            LOG.trace(\"Adding mixin '{}' for resource '{}'.\", jsonElement.getAsString(), resource.getPath());\n            node.addMixin(jsonElement.getAsString());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Set mixins property for a resource, based on an array found in the retrieved JSON..", "call_func_name": ["org.apache.sling.api.resource.Resource.adaptTo", "com.google.gson.JsonArray.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.google.gson.JsonElement.getAsString", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.trace", "javax.jcr.Node.addMixin"], "call_func_parameter": [["java.lang.Class"], [""], [""], [""], [""], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "454", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsNodeSyncImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.setNodeTagsProperty", "methodParameterType": "ResourceResolver#JsonArray#Resource#", "methodParameterName": "remoteAssetsResolver#jsonArray#resource#", "methodBody": "private void setNodeTagsProperty(final ResourceResolver remoteAssetsResolver, final JsonArray jsonArray, final Resource resource) throws RepositoryException {\n        TagManager tagManager = remoteAssetsResolver.adaptTo(TagManager.class);\n        ArrayList<Tag> tagList = new ArrayList<>();\n\n        for (JsonElement jsonElement : jsonArray) {\n            Tag tag = tagManager.resolve(jsonElement.getAsString());\n            if (tag == null) {\n                LOG.warn(\"Tag '{}' could not be found. Skipping tag for resource '{}'.\", jsonElement.getAsString(), resource.getPath());\n                continue;\n            }\n\n            tagList.add(tag);\n        }\n\n        if (tagList.size() > 0) {\n            tagManager.setTags(resource, tagList.toArray(new Tag[tagList.size()]));\n            LOG.trace(\"Tags added for resource '{}'.\", resource.getPath());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Set tags property for a resource, based on an array found in the retrieved JSON..", "call_func_name": ["org.apache.sling.api.resource.ResourceResolver.adaptTo", "java.util.ArrayList.<init>", "com.google.gson.JsonArray.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.google.gson.JsonElement.getAsString", "com.day.cq.tagging.TagManager.resolve", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.warn", "java.util.ArrayList.add", "java.util.ArrayList.size", "java.util.ArrayList.toArray", "com.day.cq.tagging.TagManager.setTags", "org.slf4j.Logger.trace"], "call_func_parameter": [["java.lang.Class"], [""], [""], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.Object"], [""], ["java.lang.Object[]"], ["org.apache.sling.api.resource.Resource", "com.day.cq.tagging.Tag[]"], ["java.lang.String", "java.lang.Object"]], "passed_comments": "/"}, {"index": "455", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsNodeSyncImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.setNodeSimpleArrayProperty", "methodParameterType": "JsonArray#String#Resource#", "methodParameterName": "jsonArray#key#resource#", "methodBody": "private void setNodeSimpleArrayProperty(final JsonArray jsonArray, final String key, final Resource resource) throws RepositoryException {\n        JsonPrimitive firstVal = jsonArray.get(0).getAsJsonPrimitive();\n\n        try {\n            Object[] values;\n            if (firstVal.isBoolean()) {\n                values = new Boolean[jsonArray.size()];\n                for (int i = 0; i < jsonArray.size(); i++) {\n                    values[i] = jsonArray.get(i).getAsBoolean();\n                }\n            } else if (DECIMAL_REGEX.matcher(firstVal.getAsString()).matches()) {\n                values = new BigDecimal[jsonArray.size()];\n                for (int i = 0; i < jsonArray.size(); i++) {\n                    values[i] = jsonArray.get(i).getAsBigDecimal();\n                }\n            } else if (firstVal.isNumber()) {\n                values = new Long[jsonArray.size()];\n                for (int i = 0; i < jsonArray.size(); i++) {\n                    values[i] = jsonArray.get(i).getAsLong();\n                }\n            } else {\n                values = new String[jsonArray.size()];\n                for (int i = 0; i < jsonArray.size(); i++) {\n                    values[i] = jsonArray.get(i).getAsString();\n                }\n            }\n\n            ValueMap resourceProperties = resource.adaptTo(ModifiableValueMap.class);\n            resourceProperties.put(key, values);\n            LOG.trace(\"Array property '{}' added for resource '{}'\", key, resource.getPath());\n        } catch (Exception e) {\n            LOG.error(\"Unable to assign property '{}' to resource '{}'\", key, resource.getPath(), e);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#ForStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#ForStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#ForStatement#Block#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#ForStatement#Block#IfStatement#IfStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)Assignment)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)ForStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)Assignment)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)ForStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)Assignment)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)ForStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)Assignment)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)ForStatement)Block)IfStatement)IfStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Set generic array property for a resource, based on an array found in the retrieved JSON.", "call_func_name": ["com.google.gson.JsonArray.get", "com.google.gson.JsonElement.getAsJsonPrimitive", "com.google.gson.JsonPrimitive.isBoolean", "com.google.gson.JsonArray.size", "com.google.gson.JsonElement.getAsBoolean", "java.lang.Boolean.valueOf", "com.google.gson.JsonPrimitive.getAsString", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "com.google.gson.JsonElement.getAsBigDecimal", "com.google.gson.JsonPrimitive.isNumber", "com.google.gson.JsonElement.getAsLong", "java.lang.Long.valueOf", "com.google.gson.JsonElement.getAsString", "org.apache.sling.api.resource.Resource.adaptTo", "org.apache.sling.api.resource.ValueMap.put", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.trace", "org.slf4j.Logger.error"], "call_func_parameter": [["int"], [""], [""], [""], [""], ["boolean"], [""], ["java.lang.CharSequence"], [""], [""], [""], [""], ["long"], [""], ["java.lang.Class"], ["java.lang.Object", "java.lang.Object"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "456", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsNodeSyncImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.setNodeJcrDataProperty", "methodParameterType": "ResourceResolver#Resource#String#", "methodParameterName": "remoteAssetsResolver#resource#rawResponseLastModified#", "methodBody": "private void setNodeJcrDataProperty(final ResourceResolver remoteAssetsResolver, final Resource resource, final String rawResponseLastModified) throws RepositoryException {\n        ValueMap resourceProperties = resource.adaptTo(ModifiableValueMap.class);\n        // first checking to make sure existing resource has lastModified and jcr:data properties then seeing if binaries\n        // should be updated based off of whether the resource's lastModified matches the JSON's lastModified\n        if (resourceProperties.get(JcrConstants.JCR_LASTMODIFIED) != null && resourceProperties.get(JcrConstants.JCR_DATA) != null\n                && StringUtils.isNotEmpty(rawResponseLastModified)) {\n\n            String resourceLastModified = resourceProperties.get(JcrConstants.JCR_LASTMODIFIED, String.class);\n            Calendar remoteLastModified = GregorianCalendar.from(ZonedDateTime.parse(rawResponseLastModified, DATE_TIME_FORMATTER));\n\n            ValueFactory valueFactory = remoteAssetsResolver.adaptTo(Session.class).getValueFactory();\n            if (resourceLastModified.equals(valueFactory.createValue(remoteLastModified).getString())) {\n                LOG.debug(\"Not creating binary for resource '{}' because binary has not been updated.\", resource.getPath());\n                return;\n            }\n        }\n\n        InputStream inputStream = getRemoteAssetPlaceholder(resource);\n        try {\n            resourceProperties.put(JcrConstants.JCR_DATA, inputStream);\n            LOG.debug(\"Binary added for resource '{}'.\", resource.getPath());\n        } finally {\n            try {\n                if (inputStream != null) {\n                    inputStream.close();\n                }\n            } catch (IOException ie) {\n                LOG.error(\"IOException thrown {}\", ie);\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(TryStatement(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Set jcr:data property to a temporary binary for a rendition resource.", "call_func_name": ["org.apache.sling.api.resource.Resource.adaptTo", "org.apache.sling.api.resource.ValueMap.get", "org.apache.commons.lang3.StringUtils.isNotEmpty", "org.apache.sling.api.resource.ValueMap.get", "java.time.ZonedDateTime.parse", "java.util.GregorianCalendar.from", "org.apache.sling.api.resource.ResourceResolver.adaptTo", "javax.jcr.Session.getValueFactory", "javax.jcr.ValueFactory.createValue", "javax.jcr.Value.getString", "java.lang.String.equals", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.debug", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.getRemoteAssetPlaceholder", "org.apache.sling.api.resource.ValueMap.put", "java.io.InputStream.close", "org.slf4j.Logger.error"], "call_func_parameter": [["java.lang.Class"], ["java.lang.Object"], ["java.lang.CharSequence"], ["java.lang.String", "java.lang.Class"], ["java.lang.CharSequence", "java.time.format.DateTimeFormatter"], ["java.time.ZonedDateTime"], ["java.lang.Class"], [""], ["java.util.Calendar"], [""], ["java.lang.Object"], [""], ["java.lang.String", "java.lang.Object"], ["org.apache.sling.api.resource.Resource"], ["java.lang.Object", "java.lang.Object"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.getRemoteAssetPlaceholder": "Get the placeholder binary for a given rendition."}]}, {"index": "457", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsNodeSyncImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.setNodeSimpleProperty", "methodParameterType": "JsonPrimitive#String#Resource#", "methodParameterName": "value#key#resource#", "methodBody": "private void setNodeSimpleProperty(final JsonPrimitive value, final String key, final Resource resource) throws RepositoryException {\n        ValueMap resourceProperties = resource.adaptTo(ModifiableValueMap.class);\n        if (value.isString() && DATE_REGEX.matcher(value.getAsString()).matches()) {\n            try {\n                resourceProperties.put(key, GregorianCalendar.from(ZonedDateTime.parse(value.getAsString(), DATE_TIME_FORMATTER)));\n            } catch (DateTimeParseException e) {\n                LOG.warn(\"Unable to parse date '{}' for property:resource '{}'.\", value, key + \":\" + resource.getPath());\n            }\n        } else if (value.isString() && DECIMAL_REGEX.matcher(value.getAsString()).matches()) {\n            resourceProperties.put(key, value.getAsBigDecimal());\n        } else if (value.isBoolean()) {\n            resourceProperties.put(key, value.getAsBoolean());\n        } else if (value.isNumber()) {\n            if (DECIMAL_REGEX.matcher(value.getAsString()).matches()) {\n                resourceProperties.put(key, value.getAsBigDecimal());\n            } else {\n                resourceProperties.put(key, value.getAsLong());\n            }\n        } else if (value.isJsonNull()) {\n            resourceProperties.remove(key);\n        } else {\n            resourceProperties.put(key, value.getAsString());\n        }\n\n        LOG.trace(\"Property '{}' added for resource '{}'.\", key, resource.getPath());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set a simple resource property from the fetched JSON.", "call_func_name": ["org.apache.sling.api.resource.Resource.adaptTo", "com.google.gson.JsonPrimitive.isString", "com.google.gson.JsonPrimitive.getAsString", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "java.time.ZonedDateTime.parse", "java.util.GregorianCalendar.from", "org.apache.sling.api.resource.ValueMap.put", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.apache.sling.api.resource.Resource.getPath", "java.lang.StringBuilder.toString", "org.slf4j.Logger.warn", "com.google.gson.JsonPrimitive.getAsBigDecimal", "com.google.gson.JsonPrimitive.isBoolean", "com.google.gson.JsonPrimitive.getAsBoolean", "java.lang.Boolean.valueOf", "com.google.gson.JsonPrimitive.isNumber", "com.google.gson.JsonPrimitive.getAsLong", "java.lang.Long.valueOf", "com.google.gson.JsonPrimitive.isJsonNull", "org.apache.sling.api.resource.ValueMap.remove", "org.slf4j.Logger.trace"], "call_func_parameter": [["java.lang.Class"], [""], [""], ["java.lang.CharSequence"], [""], ["java.lang.CharSequence", "java.time.format.DateTimeFormatter"], ["java.time.ZonedDateTime"], ["java.lang.Object", "java.lang.Object"], [""], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], [""], [""], ["boolean"], [""], [""], ["long"], [""], ["java.lang.Object"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "458", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsNodeSyncImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.getRemoteAssetPlaceholder", "methodParameterType": "Resource#", "methodParameterName": "renditionContentResource#", "methodBody": "@SuppressWarnings(\"squid:S1479\")\n    protected InputStream getRemoteAssetPlaceholder(Resource renditionContentResource) throws RepositoryException {\n        String mimeType = (String) renditionContentResource.getValueMap().get(JcrConstants.JCR_MIMETYPE);\n        InputStream inputStream;\n\n        switch (mimeType) {\n            case FileExtensionMimeTypeConstants.EXT_3G2: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".3g2\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_3GP: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".3gp\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_AAC: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".aac\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_AIFF: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".aiff\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_AVI: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".avi\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_BMP: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".bmp\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_CSS: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".css\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_DOC: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".doc\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_DOCX: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".docx\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_AI_EPS_PS: {\n                inputStream = getCorrectBinaryTypeStream(renditionContentResource, \"ai\", \"eps\", \"ps\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_EPUB: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".epub\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_F4V: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".f4v\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_FLA_SWF: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".swf\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_GIF: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".gif\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_HTML: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".html\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_INDD: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".indd\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_JAR: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".jar\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_JPEG_JPG: {\n                inputStream = getCorrectBinaryTypeStream(renditionContentResource, \"jpeg\", \"jpg\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_M4V: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".m4v\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_MIDI: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".midi\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_MOV: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".mov\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_MP3: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".mp3\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_MP4: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".mp4\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_M2V_MPEG_MPG: {\n                inputStream = getCorrectBinaryTypeStream(renditionContentResource, \"m2v\", \"mpeg\", \"mpg\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_OGG: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".ogg\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_OGV: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".ogv\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_PDF: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".pdf\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_PNG: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".png\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_PPT: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".ppt\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_PPTX: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".pptx\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_PSD: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".psd\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_RAR: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".rar\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_RTF: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".rtf\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_SVG: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".svg\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_TAR: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".tar\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_TIF_TIFF: {\n                inputStream = getCorrectBinaryTypeStream(renditionContentResource, \"tif\", \"tiff\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_TXT: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".txt\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_WAV: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".wav\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_WEBM: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".webm\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_WMA: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".wma\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_WMV: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".wmv\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_XLS: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".xls\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_XLSX: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".xlsx\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_XML: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".xml\");\n                break;\n            }\n            case FileExtensionMimeTypeConstants.EXT_ZIP: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".zip\");\n                break;\n            }\n            default: {\n                inputStream = this.getClass().getClassLoader().getResourceAsStream(ASSET_FILE_PREFIX + \".jpeg\");\n                break;\n            }\n        }\n\n\n        return inputStream;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SwitchCase#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SwitchStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)SwitchStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the placeholder binary for a given rendition.", "call_func_name": ["org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.get", "java.lang.String.hashCode", "java.lang.String.equals", "java.lang.Object.getClass", "java.lang.Class.getClassLoader", "java.lang.ClassLoader.getResourceAsStream", "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.getCorrectBinaryTypeStream"], "call_func_parameter": [[""], ["java.lang.Object"], [""], ["java.lang.Object"], [""], [""], ["java.lang.String"], ["org.apache.sling.api.resource.Resource", "java.lang.String[]"]], "passed_comments": "/"}, {"index": "459", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsNodeSyncImpl.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncImpl.getCorrectBinaryTypeStream", "methodParameterType": "Resource#String#", "methodParameterName": "renditionContentResource#fileExtensions#", "methodBody": "private InputStream getCorrectBinaryTypeStream(final Resource renditionContentResource, String... fileExtensions) throws RepositoryException {\n        Resource renditionResource = renditionContentResource.getParent();\n        Asset assetResource = DamUtil.resolveToAsset(renditionResource);\n\n        String remoteAssetFileUri = ASSET_FILE_PREFIX + \".\" + fileExtensions[0];\n        String assetFileExtension = FilenameUtils.getExtension(assetResource.getName());\n        String renditionParentFileExtension = FilenameUtils.getExtension(renditionResource.getName());\n        for (String fileExtension : fileExtensions) {\n            if (DamConstants.ORIGINAL_FILE.equals(renditionResource.getName()) && fileExtension.equals(assetFileExtension)\n                    || !DamConstants.ORIGINAL_FILE.equals(renditionResource.getName()) && fileExtension.equals(renditionParentFileExtension)) {\n\n                remoteAssetFileUri = ASSET_FILE_PREFIX + \".\" + fileExtension;\n                break;\n            }\n        }\n\n        return this.getClass().getClassLoader().getResourceAsStream(remoteAssetFileUri);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#NumberLiteral#ArrayAccess#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#BreakStatement#Block#IfStatement#Block#EnhancedForStatement#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(InfixExpression(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the correct temporary binary (file type) based on the renditions file extension or the overall asset's file extension if it is the original rendition.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "460", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsNodeSyncTrigger.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsNodeSyncTrigger.syncAssetNodes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void syncAssetNodes() {\n        this.assetNodeSyncService.syncAssetNodes();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see RemoteAssetsNodeSyncTriggerMBean#syncAssetNodes().", "call_func_name": ["com.adobe.acs.commons.remoteassets.RemoteAssetsNodeSync.syncAssetNodes"], "call_func_parameter": [[""]], "passed_comments": [{"com.adobe.acs.commons.remoteassets.RemoteAssetsNodeSync.syncAssetNodes": "Sync remote asset nodes from remote server, excluding binaries."}]}, {"index": "461", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/remoteassets/impl/RemoteAssetsServiceException.java", "methodName": "com.adobe.acs.commons.remoteassets.impl.RemoteAssetsServiceException.RemoteAssetsServiceException", "methodParameterType": "Throwable#", "methodParameterName": "t#", "methodBody": "public RemoteAssetsServiceException(Throwable t) {\n        super(\"Remote assets service not configured correctly\", t);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#StringLiteral#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "462", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/twitter/TwitterClient.java", "methodName": "com.adobe.acs.commons.twitter.TwitterClient.getServiceConfiguration", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Configuration getServiceConfiguration();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the Cloud Service Configuration from which this client was created.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "463", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/twitter/TwitterClient.java", "methodName": "com.adobe.acs.commons.twitter.TwitterClient.getTwitter", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Twitter getTwitter();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the Twitter4j client.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "464", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/widgets/MultiFieldPanelFunctions.java", "methodName": "com.adobe.acs.commons.widgets.MultiFieldPanelFunctions.getMultiFieldPanelValues", "methodParameterType": "Resource#String#", "methodParameterName": "resource#name#", "methodBody": "public static List<Map<String, String>> getMultiFieldPanelValues(Resource resource, String name) {\n        Gson gson = new Gson();\n        ValueMap map = resource.adaptTo(ValueMap.class);\n        List<Map<String, String>> results = new ArrayList<>();\n        if (map != null && map.containsKey(name)) {\n            String[] values = map.get(name, new String[0]);\n            for (String value : values) {\n\n                try {\n                    results.add(gson.fromJson(value, Map.class));\n\n                } catch (JsonParseException e) {\n                    log.error(\n                            String.format(\"Unable to parse JSON in %s property of %s\", name, resource.getPath()),\n                            e);\n                }\n\n            }\n        }\n        return results;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extract the value of a MultiFieldPanel property into a list of maps. Will never return a null map, but may return an empty one. Invalid property values are logged and skipped.", "call_func_name": ["com.google.gson.Gson.<init>", "org.apache.sling.api.resource.Resource.adaptTo", "java.util.ArrayList.<init>", "org.apache.sling.api.resource.ValueMap.containsKey", "org.apache.sling.api.resource.ValueMap.get", "com.google.gson.Gson.fromJson", "java.util.List.add", "org.apache.sling.api.resource.Resource.getPath", "java.lang.String.format", "org.slf4j.Logger.error"], "call_func_parameter": [[""], ["java.lang.Class"], [""], ["java.lang.Object"], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.Class"], ["java.lang.Object"], [""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "465", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/EnsureOakIndexManager.java", "methodName": "com.adobe.acs.commons.oak.EnsureOakIndexManager.ensureAll", "methodParameterType": "boolean#", "methodParameterName": "force#", "methodBody": "@Description(\"Ensure all Ensure Oak Index Definitions\")\n    int ensureAll(@Name(value=\"force\") boolean force);", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Applies all un-applied Ensure Oak Index definitions.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "466", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/EnsureOakIndexManager.java", "methodName": "com.adobe.acs.commons.oak.EnsureOakIndexManager.ensure", "methodParameterType": "boolean#String#", "methodParameterName": "force#ensureDefinitionsPath#", "methodBody": "@Description(\"Ensure select Ensure Oak Index Definitions\")\n    int ensure(@Name(value=\"force\") boolean force,\n                @Name(value=\"ensureDefinitionsPath\") String ensureDefinitionsPath);", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Applies un-applied Ensure Oak Index definitions whose ensure-definition.path @Property is a parameter.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "467", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/impl/EnsureOakIndexManagerImpl.java", "methodName": "com.adobe.acs.commons.oak.impl.EnsureOakIndexManagerImpl.ensureAll", "methodParameterType": "boolean#", "methodParameterName": "force#", "methodBody": "@Override\n    public final int ensureAll(boolean force) {\n        log.info(\"Applying all un-applied ensure index definitions\");\n\n        int count = 0;\n        for (AppliableEnsureOakIndex index : this.ensureIndexes) {\n            if (!index.isApplied() || force) {\n                index.apply(force);\n                count++;\n                log.debug(\"Started applying index definition on [ {} ]\", index);\n            } else {\n                log.debug(\"Skipping... [ {} ] is already applied.\", index);\n            }\n        }\n\n        return count;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.slf4j.Logger.info", "java.util.concurrent.CopyOnWriteArrayList.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.isApplied", "com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.apply", "org.slf4j.Logger.debug"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], [""], ["boolean"], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.isApplied": "Determines if the index definition has been applied to the system. This does not necessarily mean, that the index has already been created."}, {"com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.apply": "Apply this Ensure Oak Index."}]}, {"index": "468", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/impl/EnsureOakIndexManagerImpl.java", "methodName": "com.adobe.acs.commons.oak.impl.EnsureOakIndexManagerImpl.ensure", "methodParameterType": "boolean#String#", "methodParameterName": "force#ensureDefinitionPath#", "methodBody": "@Override\n    public final int ensure(final boolean force,\n                            final String ensureDefinitionPath) {\n        int count = 0;\n        for (AppliableEnsureOakIndex index : this.ensureIndexes) {\n            if ((!index.isApplied() || force)\n                    && StringUtils.equals(ensureDefinitionPath, index.getEnsureDefinitionsPath())) {\n                index.apply(force);\n                count++;\n                log.debug(\"Started async job applying index definition for {}\", index);\n            } else {\n                log.debug(\"Skipping... [ {} ] is already applied.\", index);\n            }\n        }\n        return count;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.util.concurrent.CopyOnWriteArrayList.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.isApplied", "com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.getEnsureDefinitionsPath", "org.apache.commons.lang.StringUtils.equals", "com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.apply", "org.slf4j.Logger.debug"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.lang.String", "java.lang.String"], ["boolean"], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.isApplied": "Determines if the index definition has been applied to the system. This does not necessarily mean, that the index has already been created."}, {"com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.getEnsureDefinitionsPath": "@return the ensure definition path for this Ensure Oak Index path for this Ensure Oak Index component."}, {"com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.apply": "Apply this Ensure Oak Index."}]}, {"index": "469", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/impl/EnsureOakIndexManagerImpl.java", "methodName": "com.adobe.acs.commons.oak.impl.EnsureOakIndexManagerImpl.getEnsureOakIndexes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    @SuppressWarnings(\"squid:S1192\")\n    public final TabularData getEnsureOakIndexes() throws OpenDataException {\n\n        final CompositeType configType = new CompositeType(\n                \"Ensure Oak Index Configurations\",\n                \"Ensure Oak Index Configurations\",\n                new String[]{\"Ensure Definitions Path\", \"Oak Indexes Path\", \"Applied\", \"Immediate\"},\n                new String[]{\"Ensure Definitions Path\", \"Oak Indexes Path\", \"Applied\", \"Immediate\"},\n                new OpenType[]{SimpleType.STRING, SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN});\n\n        final TabularDataSupport tabularData = new TabularDataSupport(new TabularType(\n                \"Ensure Oak Index Configuration\",\n                \"Ensure Oak Index Configuration\",\n                configType,\n                new String[]{\"Ensure Definitions Path\", \"Oak Indexes Path\"}));\n\n\n        for (final AppliableEnsureOakIndex index : this.ensureIndexes) {\n            final Map<String, Object> data = new HashMap<String, Object>();\n\n            data.put(\"Ensure Definitions Path\", index.getEnsureDefinitionsPath());\n            data.put(\"Oak Indexes Path\", index.getOakIndexesPath());\n            data.put(\"Applied\", index.isApplied());\n            data.put(\"Immediate\", index.isImmediate());\n\n            tabularData.put(new CompositeDataSupport(configType, data));\n        }\n\n        return tabularData;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#StringLiteral#SimpleName#SimpleType#Dimension#ArrayType#StringLiteral#StringLiteral#StringLiteral#StringLiteral#ArrayInitializer#ArrayCreation#SimpleName#SimpleType#Dimension#ArrayType#StringLiteral#StringLiteral#StringLiteral#StringLiteral#ArrayInitializer#ArrayCreation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#ArrayInitializer#ArrayCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#StringLiteral#StringLiteral#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#StringLiteral#StringLiteral#ArrayInitializer#ArrayCreation#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(StringLiteral)StringLiteral(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)ArrayCreation(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)ArrayCreation(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayInitializer)ArrayCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(StringLiteral)StringLiteral(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)ArrayCreation)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Method for displaying Ensure Oak Index state in in the MBean", "call_func_name": ["javax.management.openmbean.CompositeType.<init>", "javax.management.openmbean.TabularType.<init>", "javax.management.openmbean.TabularDataSupport.<init>", "java.util.concurrent.CopyOnWriteArrayList.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.HashMap.<init>", "com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.getEnsureDefinitionsPath", "java.util.Map.put", "com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.getOakIndexesPath", "com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.isApplied", "java.lang.Boolean.valueOf", "com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.isImmediate", "javax.management.openmbean.CompositeDataSupport.<init>", "javax.management.openmbean.TabularDataSupport.put"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String[]", "java.lang.String[]", "javax.management.openmbean.OpenType[]"], ["java.lang.String", "java.lang.String", "javax.management.openmbean.CompositeType", "java.lang.String[]"], ["javax.management.openmbean.TabularType"], [""], [""], [""], [""], [""], ["java.lang.Object", "java.lang.Object"], [""], [""], ["boolean"], [""], ["javax.management.openmbean.CompositeType", "java.util.Map"], ["javax.management.openmbean.CompositeData"]], "passed_comments": [{"com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.getEnsureDefinitionsPath": "@return the ensure definition path for this Ensure Oak Index path for this Ensure Oak Index component."}, {"com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.getOakIndexesPath": "@return the oak path to ensure."}, {"com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.isApplied": "Determines if the index definition has been applied to the system. This does not necessarily mean, that the index has already been created."}, {"com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.isImmediate": "@return true is Ensure Oak Index is immediate."}]}, {"index": "470", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/impl/EnsureOakIndex.java", "methodName": "com.adobe.acs.commons.oak.impl.EnsureOakIndex.apply", "methodParameterType": "boolean#", "methodParameterName": "force#", "methodBody": "@Override\n    public final void apply(boolean force) {\n\n        if (!force && this.applied) {\n            return;\n        }\n\n        log.info(\"Ensuring Oak Indexes [ {} ~> {} ]\", ensureDefinitionsPath, oakIndexesPath);\n\n        // Start the indexing process asynchronously, so the activate won't get blocked\n        // by rebuilding a synchronous index\n\n        EnsureOakIndexJobHandler jobHandler =\n                new EnsureOakIndexJobHandler(this, oakIndexesPath, ensureDefinitionsPath);\n        ScheduleOptions options = scheduler.NOW();\n        options.name(toString());\n        options.canRunConcurrently(false);\n        scheduler.schedule(jobHandler, options);\n\n        applied = true;\n\n        log.info(\"Job scheduled for ensuring Oak Indexes [ {} ~> {} ]\", ensureDefinitionsPath, oakIndexesPath);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#PrefixExpression#ThisExpression#SimpleName#FieldAccess#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.slf4j.Logger.info", "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.<init>", "org.apache.sling.commons.scheduler.Scheduler.NOW", "com.adobe.acs.commons.oak.impl.EnsureOakIndex.toString", "org.apache.sling.commons.scheduler.ScheduleOptions.name", "org.apache.sling.commons.scheduler.ScheduleOptions.canRunConcurrently", "org.apache.sling.commons.scheduler.Scheduler.schedule"], "call_func_parameter": [["java.lang.String", "java.lang.Object", "java.lang.Object"], ["com.adobe.acs.commons.oak.impl.EnsureOakIndex", "java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String"], ["boolean"], ["java.lang.Object", "org.apache.sling.commons.scheduler.ScheduleOptions"]], "passed_comments": "/"}, {"index": "471", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/impl/EnsureOakIndexJobHandler.java", "methodName": "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.ensure", "methodParameterType": "ResourceResolver#String#String#", "methodParameterName": "resourceResolver#ensureDefinitionsPath#oakIndexesPath#", "methodBody": "private void ensure(final ResourceResolver resourceResolver, final String ensureDefinitionsPath,\n                        final String oakIndexesPath)\n            throws RepositoryException, IOException {\n\n        final Resource ensureDefinitions = resourceResolver.getResource(ensureDefinitionsPath);\n        final Resource oakIndexes = resourceResolver.getResource(oakIndexesPath);\n\n        if (ensureDefinitions == null) {\n            throw new IllegalArgumentException(\"Unable to find Ensure Definitions resource at [ \"\n                    + ensureDefinitionsPath + \" ]\");\n        } else if (oakIndexes == null) {\n            throw new IllegalArgumentException(\"Unable to find Oak Indexes resource at [ \"\n                    + oakIndexesPath + \" ]\");\n        }\n\n        final Iterator<Resource> ensureDefinitionsIterator = ensureDefinitions.listChildren();\n        if (!ensureDefinitionsIterator.hasNext()) {\n            log.info(\"Ensure Definitions path [ {} ] does NOT have children to process\", ensureDefinitions.getPath());\n        }\n\n        final List<Resource> delayedProcessing = new ArrayList<>();\n\n        // First, handle all things that may not result in a a collective re-indexing\n        // Includes: IGNORES, DELETES, DISABLED ensure definitions\n\n        while (ensureDefinitionsIterator.hasNext()) {\n            final Resource ensureDefinition = ensureDefinitionsIterator.next();\n            final Resource oakIndex = oakIndexes.getChild(ensureDefinition.getName());\n\n            log.debug(\"Ensuring Oak Index [ {} ] ~> [ {}/{} ]\",\n                    ensureDefinition.getPath(), oakIndexesPath, ensureDefinition.getName());\n\n            if (!handleLightWeightIndexOperations(\n                    ensureDefinition, oakIndex)) {\n                delayedProcessing.add(ensureDefinition);\n            }\n        }\n\n        if (resourceResolver.hasChanges()) {\n            log.info(\"Saving all DELETES, IGNORES, and DISABLES to [ {} ]\", oakIndexesPath);\n            resourceResolver.commit();\n            log.debug(\"Commit succeeded\");\n        }\n\n        // Combine the index updates which will potentially result in a repository traversal into a single commit.\n        // second iteration: handle CREATE, UPDATE and REINDEXING\n        Iterator<Resource> delayedProcessingEnsureDefinitions = delayedProcessing.iterator();\n\n        while (delayedProcessingEnsureDefinitions.hasNext()) {\n            final Resource ensureDefinition = delayedProcessingEnsureDefinitions.next();\n            final Resource oakIndex = oakIndexes.getChild(ensureDefinition.getName());\n\n            handleHeavyWeightIndexOperations(oakIndexes, ensureDefinition,\n                    oakIndex);\n        }\n\n        if (resourceResolver.hasChanges()) {\n            log.info(\"Saving all CREATE, UPDATES, and RE-INDEXES, re-indexing may start now.\");\n            resourceResolver.commit();\n            log.debug(\"Commit succeeded\");\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#WhileStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)WhileStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Main work method. Responsible for ensuring the ensure definitions under srcPath are reflected in the real oak index under oakIndexesPath. <p/> The handling is split, so that all re-indexings can be combined into a single commit; this ensures, that a single repository traversal can be used to reindex all affected indexes.", "call_func_name": ["org.apache.sling.api.resource.ResourceResolver.getResource", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "org.apache.sling.api.resource.Resource.listChildren", "java.util.Iterator.hasNext", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.info", "java.util.ArrayList.<init>", "java.util.Iterator.next", "org.apache.sling.api.resource.Resource.getName", "org.apache.sling.api.resource.Resource.getChild", "org.slf4j.Logger.debug", "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.handleLightWeightIndexOperations", "java.util.List.add", "org.apache.sling.api.resource.ResourceResolver.hasChanges", "org.apache.sling.api.resource.ResourceResolver.commit", "org.slf4j.Logger.debug", "java.util.List.iterator", "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.handleHeavyWeightIndexOperations", "org.slf4j.Logger.info"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.String", "java.lang.Object"], [""], [""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Object[]"], ["org.apache.sling.api.resource.Resource", "org.apache.sling.api.resource.Resource"], ["java.lang.Object"], [""], [""], ["java.lang.String"], [""], ["org.apache.sling.api.resource.Resource", "org.apache.sling.api.resource.Resource", "org.apache.sling.api.resource.Resource"], ["java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.handleLightWeightIndexOperations": "handle the operations IGNORE, DELETE and DISABLE"}, {"com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.handleHeavyWeightIndexOperations": "Handle CREATE and UPDATE operations."}]}, {"index": "472", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/impl/EnsureOakIndexJobHandler.java", "methodName": "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.handleHeavyWeightIndexOperations", "methodParameterType": "Resource#Resource#Resource#", "methodParameterName": "oakIndexes#ensureDefinition#oakIndex#", "methodBody": "void handleHeavyWeightIndexOperations(final Resource oakIndexes,\n                                          final @Nonnull Resource ensureDefinition, final @Nullable Resource oakIndex)\n            throws RepositoryException, IOException {\n        final ValueMap ensureDefinitionProperties = ensureDefinition.getValueMap();\n\n        try {\n            Resource ensuredOakIndex = null;\n            validateEnsureDefinition(ensureDefinition);\n            if (oakIndex == null) {\n                // CREATE\n                ensuredOakIndex = this.create(ensureDefinition, oakIndexes);\n\n                // Force re-index\n                if (ensureDefinitionProperties.get(PN_FORCE_REINDEX, false)) {\n                    this.forceRefresh(ensuredOakIndex);\n                }\n            } else {\n                // UPDATE\n                boolean forceReindex = ensureDefinitionProperties.get(PN_FORCE_REINDEX, false);\n\n                if (ensureDefinitionProperties.get(PN_RECREATE_ON_UPDATE, false)) {\n                    // Recreate on Update, refresh not required (is implicit)\n                    this.delete(oakIndex);\n                    this.create(ensureDefinition, oakIndexes);\n                } else {\n                    // Normal Update\n                    this.update(ensureDefinition, oakIndexes, forceReindex);\n                }\n            }\n        } catch (OakIndexDefinitionException e) {\n            log.error(\"Skipping processing of {}\", ensureDefinition.getPath(), e);\n        }\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Handle CREATE and UPDATE operations.", "call_func_name": ["org.apache.sling.api.resource.Resource.getValueMap", "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.validateEnsureDefinition", "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.create", "java.lang.Boolean.valueOf", "org.apache.sling.api.resource.ValueMap.get", "java.lang.Boolean.booleanValue", "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.forceRefresh", "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.delete", "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.update", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.error"], "call_func_parameter": [[""], ["org.apache.sling.api.resource.Resource"], ["org.apache.sling.api.resource.Resource", "org.apache.sling.api.resource.Resource"], ["boolean"], ["java.lang.String", "java.lang.Object"], [""], ["org.apache.sling.api.resource.Resource"], ["org.apache.sling.api.resource.Resource"], ["org.apache.sling.api.resource.Resource", "org.apache.sling.api.resource.Resource", "boolean"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.validateEnsureDefinition": "Validate that the ensure definition is in a valid format; uses for create and updates."}, {"com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.create": "Create the oak index based on the ensure definition."}, {"com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.forceRefresh": "Forces index refresh for create or updates (that require updating)."}, {"com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.delete": "Delete the oak index node."}, {"com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.update": "Update the oak index with the ensure definition."}]}, {"index": "473", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/impl/EnsureOakIndexJobHandler.java", "methodName": "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.handleLightWeightIndexOperations", "methodParameterType": "Resource#Resource#", "methodParameterName": "ensureDefinition#oakIndex#", "methodBody": "boolean handleLightWeightIndexOperations(\n            final @Nonnull Resource ensureDefinition, final @Nullable Resource oakIndex)\n            throws RepositoryException, PersistenceException {\n\n        final ValueMap ensureDefinitionProperties = ensureDefinition.getValueMap();\n        boolean result = true;\n\n\n        if (ensureDefinitionProperties.get(PN_IGNORE, false)) {\n            // IGNORE\n            log.debug(\"Ignoring index definition at [ {} ]\", ensureDefinition.getPath());\n        } else if (ensureDefinitionProperties.get(PN_DELETE, false)) {\n            // DELETE\n            if (oakIndex != null) {\n                this.delete(oakIndex);\n            } else {\n                // Oak index does not exist\n                log.info(\"Requesting deletion of a non-existent Oak Index at [ {}/{} ].\\nConsider removing the Ensure Definition at [ {} ] if it is no longer needed.\",\n                        oakIndexesPath, ensureDefinition.getName(),\n                        ensureDefinition.getPath());\n            }\n        } else if (ensureDefinitionProperties.get(PN_DISABLE, false)) {\n            // DISABLE index\n            if (oakIndex != null) {\n                this.disableIndex(oakIndex);\n            } else {\n                // Oak index does not exist\n                log.info(\"Requesting disable of a non-existent Oak Index at [ {}/{} ].\\nConsider removing the Ensure Definition at [ {} ] if it is no longer needed.\",\n                        oakIndexesPath, ensureDefinition.getName(), ensureDefinition.getPath());\n            }\n        } else {\n            // handle updates, creates and all reindexing stuff in the second round\n            result = false;\n        }\n        return result;\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#Modifier#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#NullLiteral#InfixExpression#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#NullLiteral#InfixExpression#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)IfStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "handle the operations IGNORE, DELETE and DISABLE", "call_func_name": ["org.apache.sling.api.resource.Resource.getValueMap", "java.lang.Boolean.valueOf", "org.apache.sling.api.resource.ValueMap.get", "java.lang.Boolean.booleanValue", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.debug", "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.delete", "org.apache.sling.api.resource.Resource.getName", "org.slf4j.Logger.info", "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.disableIndex"], "call_func_parameter": [[""], ["boolean"], ["java.lang.String", "java.lang.Object"], [""], [""], ["java.lang.String", "java.lang.Object"], ["org.apache.sling.api.resource.Resource"], [""], ["java.lang.String", "java.lang.Object[]"], ["org.apache.sling.api.resource.Resource"]], "passed_comments": [{"com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.delete": "Delete the oak index node."}, {"com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.disableIndex": "Disables an index, so it's no longer updated by Oak."}]}, {"index": "474", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/impl/EnsureOakIndexJobHandler.java", "methodName": "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.forceRefresh", "methodParameterType": "Resource#", "methodParameterName": "oakIndex#", "methodBody": "public void forceRefresh(final @Nonnull Resource oakIndex) throws PersistenceException {\n\n        final ModifiableValueMap mvm = oakIndex.adaptTo(ModifiableValueMap.class);\n        if (mvm == null ) {\n            String msg = String.format(\"Cannot adapt %s to a ModifiableValueMap (permissions?)\", oakIndex.getPath());\n            throw new PersistenceException(msg);\n        }\n        mvm.put(PN_REINDEX, true);\n\n        log.info(\"Forcing re-index of [ {} ]\", oakIndex.getPath());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Forces index refresh for create or updates (that require updating).", "call_func_name": ["org.apache.sling.api.resource.Resource.adaptTo", "org.apache.sling.api.resource.Resource.getPath", "java.lang.String.format", "org.apache.sling.api.resource.PersistenceException.<init>", "java.lang.Boolean.valueOf", "org.apache.sling.api.resource.ModifiableValueMap.put", "org.slf4j.Logger.info"], "call_func_parameter": [["java.lang.Class"], [""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String"], ["boolean"], ["java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.Object"]], "passed_comments": "/"}, {"index": "475", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/impl/EnsureOakIndexJobHandler.java", "methodName": "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.create", "methodParameterType": "Resource#Resource#", "methodParameterName": "ensuredDefinition#oakIndexes#", "methodBody": "public Resource create(final @Nonnull Resource ensuredDefinition, final @Nonnull Resource oakIndexes) throws\n            RepositoryException {\n\n        final Node oakIndex = JcrUtil.copy(\n                ensuredDefinition.adaptTo(Node.class),\n                oakIndexes.adaptTo(Node.class),\n                ensuredDefinition.getName());\n\n        oakIndex.setPrimaryType(NT_OAK_QUERY_INDEX_DEFINITION);\n        oakIndex.setProperty(JcrConstants.JCR_CREATED, Calendar.getInstance());\n        oakIndex.setProperty(JcrConstants.JCR_CREATED_BY, ENSURE_OAK_INDEX_USER_NAME);\n\n        log.info(\"Created Oak Index at [ {} ] with Ensure Definition [ {} ]\", oakIndex.getPath(),\n                ensuredDefinition.getPath());\n\n        return ensuredDefinition.getResourceResolver().getResource(oakIndex.getPath());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create the oak index based on the ensure definition.", "call_func_name": ["org.apache.sling.api.resource.Resource.adaptTo", "org.apache.sling.api.resource.Resource.getName", "com.day.cq.commons.jcr.JcrUtil.copy", "javax.jcr.Node.setPrimaryType", "java.util.Calendar.getInstance", "javax.jcr.Node.setProperty", "javax.jcr.Node.setProperty", "javax.jcr.Node.getPath", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.info", "org.apache.sling.api.resource.Resource.getResourceResolver", "org.apache.sling.api.resource.ResourceResolver.getResource"], "call_func_parameter": [["java.lang.Class"], [""], ["javax.jcr.Node", "javax.jcr.Node", "java.lang.String"], ["java.lang.String"], [""], ["java.lang.String", "java.util.Calendar"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "476", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/impl/EnsureOakIndexJobHandler.java", "methodName": "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.update", "methodParameterType": "Resource#Resource#boolean#", "methodParameterName": "ensureDefinition#oakIndexes#forceReindex#", "methodBody": "@SuppressWarnings(\"squid:S3776\")\n    public Resource update(final @Nonnull Resource ensureDefinition, final @Nonnull Resource oakIndexes, boolean forceReindex)\n            throws RepositoryException, IOException {\n\n        final ValueMap ensureDefinitionProperties = ensureDefinition.getValueMap();\n        final Resource oakIndex = oakIndexes.getChild(ensureDefinition.getName());\n\n        final Node oakIndexNode = oakIndex.adaptTo(Node.class);\n        final Node ensureDefinitionNode = ensureDefinition.adaptTo(Node.class);\n\n        if (!this.needsUpdate(ensureDefinition, oakIndex)) {\n            if (ensureDefinitionProperties.get(PN_FORCE_REINDEX, false)) {\n                log.info(\"Skipping update... Oak Index at [ {} ] is the same as [ {} ] and forceIndex flag is ignored\",\n                        oakIndex.getPath(), ensureDefinition.getPath());\n            } else {\n                log.info(\"Skipping update... Oak Index at [ {} ] is the same as [ {} ]\",\n                        oakIndex.getPath(), ensureDefinition.getPath());\n            }\n\n            return null;\n        }\n\n        // Handle oak:QueryIndexDefinition node\n        // Do NOT delete it as this will delete the existing index below it\n\n        // Clear out existing properties\n        final Iterator<Property> existingOakIndexProperties = copyIterator(oakIndexNode.getProperties());\n        while(existingOakIndexProperties.hasNext()) {\n            final Property property = existingOakIndexProperties.next();\n            final String propertyName = property.getName();\n\n            if (this.ignoreProperties.contains(propertyName)) {\n                continue;\n            }\n\n            JcrUtil.setProperty(oakIndexNode, propertyName, null);\n        }\n\n\n        // Add new properties\n        final Iterator<Property> addProperties = copyIterator(ensureDefinitionNode.getProperties());\n        while (addProperties.hasNext()) {\n            final Property property = addProperties.next();\n\n            if (this.ignoreProperties.contains(property.getName())) {\n                // Skip ignored properties\n                continue;\n            }\n\n            if (ArrayUtils.contains(NAME_PROPERTIES, property.getName()) && property.getType() != PropertyType.NAME) {\n                log.warn(\"{}@{} property should be of type: Name[]\", oakIndex.getPath(), property.getName());\n            }\n\n            JcrUtil.copy(property, oakIndexNode, property.getName());\n        }\n\n        JcrUtil.setProperty(oakIndexNode, JcrConstants.JCR_LAST_MODIFIED_BY, ENSURE_OAK_INDEX_USER_NAME);\n        JcrUtil.setProperty(oakIndexNode, JcrConstants.JCR_LASTMODIFIED, Calendar.getInstance());\n\n        // Handle all sub-nodes (ex. Lucene Property Indexes)\n\n        // Delete child nodes\n        Iterator<Resource> children = oakIndex.listChildren();\n        while (children.hasNext()) {\n            children.next().adaptTo(Node.class).remove();\n        }\n\n        // Deep copy over child nodes\n        children = ensureDefinition.listChildren();\n        while (children.hasNext()) {\n            final Resource child = children.next();\n            JcrUtil.copy(child.adaptTo(Node.class), oakIndex.adaptTo(Node.class), child.getName());\n        }\n\n        if (forceReindex) {\n            log.info(\"Updated Oak Index at [ {} ] with configuration [ {} ], triggering reindex\",\n                    oakIndex.getPath(), ensureDefinition.getPath());\n            forceRefresh(oakIndex);\n        } else {\n            // A reindexing should be required to make this change effective, so WARN if not present\n            log.warn(\"Updated Oak Index at [ {} ] with configuration [ {} ], but no reindex requested!\",\n                    oakIndex.getPath(), ensureDefinition.getPath());\n        }\n\n        return oakIndex;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#WhileStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ContinueStatement)ContinueStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)WhileStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)WhileStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)WhileStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Update the oak index with the ensure definition.", "call_func_name": ["org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.Resource.getName", "org.apache.sling.api.resource.Resource.getChild", "org.apache.sling.api.resource.Resource.adaptTo", "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.needsUpdate", "java.lang.Boolean.valueOf", "org.apache.sling.api.resource.ValueMap.get", "java.lang.Boolean.booleanValue", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.info", "javax.jcr.Node.getProperties", "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.copyIterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "javax.jcr.Property.getName", "java.util.List.contains", "com.day.cq.commons.jcr.JcrUtil.setProperty", "org.apache.commons.lang.ArrayUtils.contains", "javax.jcr.Property.getType", "org.slf4j.Logger.warn", "com.day.cq.commons.jcr.JcrUtil.copy", "java.util.Calendar.getInstance", "org.apache.sling.api.resource.Resource.listChildren", "javax.jcr.Node.remove", "com.day.cq.commons.jcr.JcrUtil.copy", "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.forceRefresh"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["java.lang.Class"], ["org.apache.sling.api.resource.Resource", "org.apache.sling.api.resource.Resource"], ["boolean"], ["java.lang.String", "java.lang.Object"], [""], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], ["java.util.Iterator"], [""], [""], [""], ["java.lang.Object"], ["javax.jcr.Node", "java.lang.String", "java.lang.Object"], ["java.lang.Object[]", "java.lang.Object"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["javax.jcr.Property", "javax.jcr.Node", "java.lang.String"], [""], [""], [""], ["javax.jcr.Node", "javax.jcr.Node", "java.lang.String"], ["org.apache.sling.api.resource.Resource"]], "passed_comments": [{"com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.needsUpdate": "Determines if the ensure definition is the same as the the same-named oak:index definition."}, {"com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.copyIterator": "Creates a copy of an iterator. This allows us to safely change the underlying structure of the src iterator, without disturbing the wrapping iteration;"}, {"com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.forceRefresh": "Forces index refresh for create or updates (that require updating)."}]}, {"index": "477", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/impl/EnsureOakIndexJobHandler.java", "methodName": "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.disableIndex", "methodParameterType": "Resource#", "methodParameterName": "oakIndex#", "methodBody": "public void disableIndex(@Nonnull Resource oakIndex) throws PersistenceException {\n        final ModifiableValueMap oakIndexProperties = oakIndex.adaptTo(ModifiableValueMap.class);\n        oakIndexProperties.put(PN_TYPE, DISABLED);\n\n        log.info(\"Disabled index at {}\", oakIndex.getPath());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Disables an index, so it's no longer updated by Oak.", "call_func_name": ["org.apache.sling.api.resource.Resource.adaptTo", "org.apache.sling.api.resource.ModifiableValueMap.put", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.info"], "call_func_parameter": [["java.lang.Class"], ["java.lang.Object", "java.lang.Object"], [""], ["java.lang.String", "java.lang.Object"]], "passed_comments": "/"}, {"index": "478", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/impl/EnsureOakIndexJobHandler.java", "methodName": "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.needsUpdate", "methodParameterType": "Resource#Resource#", "methodParameterName": "ensureDefinition#oakIndex#", "methodBody": "boolean needsUpdate(@Nonnull Resource ensureDefinition, @Nonnull Resource oakIndex) throws IOException, RepositoryException {\n        final Session session = ensureDefinition.getResourceResolver().adaptTo(Session.class);\n        final ChecksumGenerator checksumGenerator = this.ensureOakIndex.getChecksumGenerator();\n\n        // Compile checksum for the ensureDefinition node system\n        final CustomChecksumGeneratorOptions ensureDefinitionOptions = new CustomChecksumGeneratorOptions();\n        ensureDefinitionOptions.addIncludedNodeTypes(new String[]{NT_OAK_UNSTRUCTURED});\n        ensureDefinitionOptions.addExcludedProperties(this.ignoreProperties);\n        ensureDefinitionOptions.addExcludedSubTrees(this.excludeSubTrees);\n        ensureDefinitionOptions.addExcludedNodeNames(this.excludeNodeNames);\n\n        final Map<String, String> srcChecksum =\n                checksumGenerator.generateChecksums(session, ensureDefinition.getPath(), ensureDefinitionOptions);\n\n        // Compile checksum for the oakIndex node system\n        final CustomChecksumGeneratorOptions oakIndexOptions = new CustomChecksumGeneratorOptions();\n        oakIndexOptions.addIncludedNodeTypes(new String[]{NT_OAK_QUERY_INDEX_DEFINITION});\n        oakIndexOptions.addExcludedProperties(this.ignoreProperties);\n        oakIndexOptions.addExcludedSubTrees(this.excludeSubTrees);\n        oakIndexOptions.addExcludedNodeNames(this.excludeNodeNames);\n\n        final Map<String, String> destChecksum =\n                checksumGenerator.generateChecksums(session, oakIndex.getPath(), oakIndexOptions);\n\n        // Compare checksums\n        return !StringUtils.equals(srcChecksum.get(ensureDefinition.getPath()), destChecksum.get(oakIndex.getPath()));\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayInitializer#ArrayCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayInitializer#ArrayCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#PrefixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName)ArrayInitializer)ArrayCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName)ArrayInitializer)ArrayCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)PrefixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines if the ensure definition is the same as the the same-named oak:index definition.", "call_func_name": ["org.apache.sling.api.resource.Resource.getResourceResolver", "org.apache.sling.api.resource.ResourceResolver.adaptTo", "com.adobe.acs.commons.oak.impl.EnsureOakIndex.getChecksumGenerator", "com.adobe.acs.commons.analysis.jcrchecksum.impl.options.CustomChecksumGeneratorOptions.<init>", "com.adobe.acs.commons.analysis.jcrchecksum.impl.options.CustomChecksumGeneratorOptions.addIncludedNodeTypes", "com.adobe.acs.commons.analysis.jcrchecksum.impl.options.CustomChecksumGeneratorOptions.addExcludedProperties", "com.adobe.acs.commons.analysis.jcrchecksum.impl.options.CustomChecksumGeneratorOptions.addExcludedSubTrees", "com.adobe.acs.commons.analysis.jcrchecksum.impl.options.CustomChecksumGeneratorOptions.addExcludedNodeNames", "org.apache.sling.api.resource.Resource.getPath", "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGenerator.generateChecksums", "java.util.Map.get", "org.apache.commons.lang.StringUtils.equals"], "call_func_parameter": [[""], ["java.lang.Class"], [""], [""], ["java.lang.String[]"], ["java.util.Collection"], ["java.util.Collection"], ["java.util.Collection"], [""], ["javax.jcr.Session", "java.lang.String", "com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGeneratorOptions"], ["java.lang.Object"], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.analysis.jcrchecksum.impl.options.CustomChecksumGeneratorOptions.addIncludedNodeTypes": "TODO: Please clarifiy the purpose of this class ... we should make the AbstractChecksumGeneratorOptions a non-abstract class and use it."}, {"com.adobe.acs.commons.analysis.jcrchecksum.ChecksumGenerator.generateChecksums": "Traverses the content tree whose root is defined by the path param, respecting the  {@link ChecksumGeneratorOptions}. Generates map of checksum hashes in the format [ ABSOLUTE PATH ] : [ CHECKSUM OF NODE SYSTEM ]"}]}, {"index": "479", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/impl/EnsureOakIndexJobHandler.java", "methodName": "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.delete", "methodParameterType": "Resource#", "methodParameterName": "oakIndex#", "methodBody": "public void delete(final @Nonnull Resource oakIndex) throws RepositoryException {\n\n        if (oakIndex.adaptTo(Node.class) != null) {\n            // Remove the node and its descendants\n            oakIndex.adaptTo(Node.class).remove();\n        } else {\n            log.warn(\"Oak Index at [ {} ] could not be adapted to a Node for removal.\", oakIndex.getPath());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Delete the oak index node.", "call_func_name": ["org.apache.sling.api.resource.Resource.adaptTo", "javax.jcr.Node.remove", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.warn"], "call_func_parameter": [["java.lang.Class"], [""], [""], ["java.lang.String", "java.lang.Object"]], "passed_comments": "/"}, {"index": "480", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/impl/EnsureOakIndexJobHandler.java", "methodName": "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.validateEnsureDefinition", "methodParameterType": "Resource#", "methodParameterName": "ensureDefinition#", "methodBody": "public void validateEnsureDefinition(@Nonnull Resource ensureDefinition)\n            throws RepositoryException, OakIndexDefinitionException {\n\n        Node node = ensureDefinition.adaptTo(Node.class);\n\n        if (node == null) {\n            throw new EnsureOakIndex.OakIndexDefinitionException(\"Resource \" + ensureDefinition.getPath()\n                    + \" cannot be adapted to a Node\");\n        } else if (!node.isNodeType(NT_OAK_UNSTRUCTURED)) {\n            throw new EnsureOakIndex.OakIndexDefinitionException(\"Resource \" + ensureDefinition.getPath()\n                    + \" is not of jcr:primaryType \" + NT_OAK_UNSTRUCTURED);\n        }\n\n        final ValueMap properties = ensureDefinition.getValueMap();\n        if (StringUtils.isBlank(properties.get(PN_TYPE, String.class))) {\n            throw new EnsureOakIndex.OakIndexDefinitionException(\n                    \"Ensure Definition at \"\n                            + ensureDefinition.getPath()\n                            + \" missing required property 'type'\");\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#QualifiedName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Validate that the ensure definition is in a valid format; uses for create and updates.", "call_func_name": ["org.apache.sling.api.resource.Resource.adaptTo", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.apache.sling.api.resource.Resource.getPath", "java.lang.StringBuilder.toString", "javax.jcr.Node.isNodeType", "org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.get", "org.apache.commons.lang.StringUtils.isBlank"], "call_func_parameter": [["java.lang.Class"], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Class"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "481", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/impl/EnsureOakIndexJobHandler.java", "methodName": "com.adobe.acs.commons.oak.impl.EnsureOakIndexJobHandler.copyIterator", "methodParameterType": "Iterator<Property>#", "methodParameterName": "src#", "methodBody": "private Iterator<Property> copyIterator(Iterator<Property> src) {\n        List<Property> dest = new ArrayList<Property>();\n        while (src.hasNext()) {\n            dest.add(src.next());\n        }\n\n        return dest.iterator();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)WhileStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a copy of an iterator. This allows us to safely change the underlying structure of the src iterator, without disturbing the wrapping iteration;", "call_func_name": ["java.util.ArrayList.<init>", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.List.add", "java.util.List.iterator"], "call_func_parameter": [[""], [""], [""], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "482", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/impl/AppliableEnsureOakIndex.java", "methodName": "com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.apply", "methodParameterType": "boolean#", "methodParameterName": "force#", "methodBody": "void apply(boolean force);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Apply this Ensure Oak Index.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "483", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/impl/AppliableEnsureOakIndex.java", "methodName": "com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.getEnsureDefinitionsPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getEnsureDefinitionsPath();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the ensure definition path for this Ensure Oak Index path for this Ensure Oak Index component.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "484", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/impl/AppliableEnsureOakIndex.java", "methodName": "com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.getOakIndexesPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getOakIndexesPath();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the oak path to ensure.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "485", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/impl/AppliableEnsureOakIndex.java", "methodName": "com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.isApplied", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isApplied();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Determines if the index definition has been applied to the system. This does not necessarily mean, that the index has already been created.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "486", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/impl/AppliableEnsureOakIndex.java", "methodName": "com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.isImmediate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isImmediate();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return true is Ensure Oak Index is immediate.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "487", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/oak/impl/AppliableEnsureOakIndex.java", "methodName": "com.adobe.acs.commons.oak.impl.AppliableEnsureOakIndex.getIgnoreProperties", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<String> getIgnoreProperties();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the list of additional properties to ignore", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "488", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/components/FormComponent.java", "methodName": "com.adobe.acs.commons.forms.components.FormComponent.getFormName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFormName();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "489", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/components/FormComponent.java", "methodName": "com.adobe.acs.commons.forms.components.FormComponent.getForm", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "public Form getForm(SlingHttpServletRequest request);", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Get the data from the HTTP Request and move into the Map-based Form abstraction", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "490", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/components/FormComponent.java", "methodName": "com.adobe.acs.commons.forms.components.FormComponent.validate", "methodParameterType": "Form#", "methodParameterName": "form#", "methodBody": "public Form validate(Form form);", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Validate the provided form data. Create any Error records on the form itself.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "491", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/components/FormComponent.java", "methodName": "com.adobe.acs.commons.forms.components.FormComponent.save", "methodParameterType": "Form#", "methodParameterName": "form#", "methodBody": "public boolean save(Form form);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Save the data to the underlying data store; implementation specific. This could be CRX or external data store.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "492", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/components/FormComponent.java", "methodName": "com.adobe.acs.commons.forms.components.FormComponent.onSuccess", "methodParameterType": "Form#SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "form#request#response#", "methodBody": "public void onSuccess(Form form, SlingHttpServletRequest request, SlingHttpServletResponse response) throws Exception;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Handle successful form submission. Typically includes a 302 redirect to a Success page.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "493", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/components/FormComponent.java", "methodName": "com.adobe.acs.commons.forms.components.FormComponent.onFailure", "methodParameterType": "Form#SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "form#request#response#", "methodBody": "public void onFailure(Form form, SlingHttpServletRequest request, SlingHttpServletResponse response) throws Exception;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Handle unsuccessful form submission. Typically includes a 302 redirect back to self.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "494", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/components/MultiStepFormComponent.java", "methodName": "com.adobe.acs.commons.forms.components.MultiStepFormComponent.getForm", "methodParameterType": "SlingHttpServletRequest#String#", "methodParameterName": "request#step#", "methodBody": "Form getForm(SlingHttpServletRequest request, String step);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Get the data from the HTTP Request and move into the Map-based Form abstraction", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "495", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/components/MultiStepFormComponent.java", "methodName": "com.adobe.acs.commons.forms.components.MultiStepFormComponent.validate", "methodParameterType": "Form#String#", "methodParameterName": "form#step#", "methodBody": "Form validate(Form form, String step);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Validate the provided form data. Create any Error records on the form itself.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "496", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/components/MultiStepFormComponent.java", "methodName": "com.adobe.acs.commons.forms.components.MultiStepFormComponent.save", "methodParameterType": "Form#String#", "methodParameterName": "form#step#", "methodBody": "boolean save(Form form, String step);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Save the data to the underlying data store; implementation specific. This could be CRX or external data store.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "497", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/components/MultiStepFormComponent.java", "methodName": "com.adobe.acs.commons.forms.components.MultiStepFormComponent.onSuccess", "methodParameterType": "Form#String#SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "form#step#request#response#", "methodBody": "void onSuccess(Form form, String step,\n                          SlingHttpServletRequest request, SlingHttpServletResponse response)\n            throws Exception;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Handle successful form submission. Typically includes a 302 redirect to a Success page.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "498", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/components/MultiStepFormComponent.java", "methodName": "com.adobe.acs.commons.forms.components.MultiStepFormComponent.onFailure", "methodParameterType": "Form#String#SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "form#step#request#response#", "methodBody": "void onFailure(Form form, String step, SlingHttpServletRequest request,\n                          SlingHttpServletResponse response) throws Exception;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Handle unsuccessful form submission. Typically includes a 302 redirect back to self.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "499", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/FormsRouter.java", "methodName": "com.adobe.acs.commons.forms.FormsRouter.getFormSelector", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "slingRequest#", "methodBody": "String getFormSelector(final SlingHttpServletRequest slingRequest);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Gets the Form Selector for the form POST request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "500", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/FormsRouter.java", "methodName": "com.adobe.acs.commons.forms.FormsRouter.getSuffix", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getSuffix();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets the suffix to look for to identify ACS AEM Commons form submissions.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "501", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/FormsRouter.java", "methodName": "com.adobe.acs.commons.forms.FormsRouter.hasValidSuffix", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "slingRequest#", "methodBody": "boolean hasValidSuffix(SlingHttpServletRequest slingRequest);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Checks if the Request has a suffix that matches  the suffix registered to identify ACS AEM Commons form submissions (and returned by .getSuffix()).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "502", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/Form.java", "methodName": "com.adobe.acs.commons.forms.Form.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the Form's name <p> This should uniquely identify a Form on a Page", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "503", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/Form.java", "methodName": "com.adobe.acs.commons.forms.Form.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "void setName(String name);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets the Form name <p> Typically this setter is not used and Form names are set in constructor. <p> This can be helpful for changing the flow or using Form X to populate Form Y", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "504", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/Form.java", "methodName": "com.adobe.acs.commons.forms.Form.getResourcePath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getResourcePath();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the Form's resource path", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "505", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/Form.java", "methodName": "com.adobe.acs.commons.forms.Form.setResourcePath", "methodParameterType": "String#", "methodParameterName": "resourcePath#", "methodBody": "void setResourcePath(String resourcePath);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets the Form's resource path", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "506", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/Form.java", "methodName": "com.adobe.acs.commons.forms.Form.getData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Map<String, String> getData();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets a Map of the Form data", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "507", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/Form.java", "methodName": "com.adobe.acs.commons.forms.Form.getErrors", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Map<String, String> getErrors();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets a Map of the error data", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "508", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/Form.java", "methodName": "com.adobe.acs.commons.forms.Form.has", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "boolean has(String key);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Determines if a Form data key exists and has non-blank data", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "509", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/Form.java", "methodName": "com.adobe.acs.commons.forms.Form.get", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "String get(String key);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Gets the data associated with a Form data key", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "510", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/Form.java", "methodName": "com.adobe.acs.commons.forms.Form.set", "methodParameterType": "String#String#", "methodParameterName": "key#value#", "methodBody": "void set(String key, String value);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets Form data", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "511", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/Form.java", "methodName": "com.adobe.acs.commons.forms.Form.hasData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean hasData();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Determines if any Form Data exists; atleast 1 key w non-blank data must exist in the data map.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "512", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/Form.java", "methodName": "com.adobe.acs.commons.forms.Form.hasError", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "boolean hasError(String key);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Determines if an error exists", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "513", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/Form.java", "methodName": "com.adobe.acs.commons.forms.Form.getError", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "String getError(String key);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Gets the error message", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "514", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/Form.java", "methodName": "com.adobe.acs.commons.forms.Form.setError", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "void setError(String key);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets an error <p> This is used if no corresponding error message/data is required to be associated; and the only information required is that an error occurred against key X.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "515", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/Form.java", "methodName": "com.adobe.acs.commons.forms.Form.setError", "methodParameterType": "String#String#", "methodParameterName": "key#value#", "methodBody": "void setError(String key, String value);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets an error for key with corresponding error message/data", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "516", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/Form.java", "methodName": "com.adobe.acs.commons.forms.Form.hasErrors", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean hasErrors();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Checks if has data", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "517", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/Form.java", "methodName": "com.adobe.acs.commons.forms.Form.getValueMap", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "ValueMap getValueMap();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get data as ValueMap", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "518", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/Form.java", "methodName": "com.adobe.acs.commons.forms.Form.getErrorsValueMap", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "ValueMap getErrorsValueMap();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get Errors as ValueMap", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "519", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/ForwardAsGetFormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.ForwardAsGetFormHelper.getAction", "methodParameterType": "Page#", "methodParameterName": "page#", "methodBody": "public String getAction(Page page);", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Creates the action URL when posting to a Page (non AJAX call)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "520", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/ForwardAsGetFormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.ForwardAsGetFormHelper.forwardAsGet", "methodParameterType": "Form#Resource#SlingHttpServletRequest#SlingHttpServletResponse#RequestDispatcherOptions#", "methodParameterName": "form#resource#request#response#options#", "methodBody": "public void forwardAsGet(Form form, Resource resource,\n                             SlingHttpServletRequest request,\n                             SlingHttpServletResponse response,\n                             RequestDispatcherOptions options) throws ServletException, IOException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Creates a synthetic GET request that can be used in the context of a real POST request to retrieve GET renditions of resources. This method is best used for AJAX-based forms, as the result on error is only the markup associated with the error-ing form (not the whole page)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "521", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/ForwardAsGetFormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.ForwardAsGetFormHelper.forwardAsGet", "methodParameterType": "Form#Resource#SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "form#resource#request#response#", "methodBody": "public void forwardAsGet(Form form, Resource resource,\n                             SlingHttpServletRequest request,\n                             SlingHttpServletResponse response) throws ServletException, IOException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Creates a synthetic GET request that can be used in the context of a real POST request to retrieve GET renditions of resources. This method is best used for AJAX-based forms, as the result on error is only the markup associated with the error-ing form (not the whole page) Same as above, but uses empty RequestDispatcherOptions.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "522", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/ForwardAsGetFormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.ForwardAsGetFormHelper.forwardAsGet", "methodParameterType": "Form#Page#SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "form#page#request#response#", "methodBody": "public void forwardAsGet(Form form, Page page,\n                             SlingHttpServletRequest request,\n                             SlingHttpServletResponse response) throws ServletException, IOException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Creates a synthetic GET request that can be used in the context of a real POST request to retrieve GET renditions of resources. This method is best used for full POST-back forms that perform a full synchronous POST on submission. Forces resourceType to \"cq/Page\" and removes all selectors.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "523", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/ForwardAsGetFormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.ForwardAsGetFormHelper.forwardAsGet", "methodParameterType": "Form#Page#SlingHttpServletRequest#SlingHttpServletResponse#RequestDispatcherOptions#", "methodParameterName": "form#page#request#response#options#", "methodBody": "public void forwardAsGet(Form form, Page page,\n                             SlingHttpServletRequest request,\n                             SlingHttpServletResponse response,\n                             RequestDispatcherOptions options) throws ServletException, IOException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Same as forwardAsGet(Form form, Page pae, SlingHttpServletRequest request, SlingHttpServletResponse) except allows RequestDispatcherOptions to be passed in. Note; this WILL force a resourceType of \"cq/Page\" even if a previous \"setForceResourceType\" as been set on the options.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "524", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/ForwardAsGetFormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.ForwardAsGetFormHelper.forwardAsGet", "methodParameterType": "Form#String#SlingHttpServletRequest#SlingHttpServletResponse#RequestDispatcherOptions#", "methodParameterName": "form#path#request#response#options#", "methodBody": "public void forwardAsGet(Form form, String path,\n                             SlingHttpServletRequest request,\n                             SlingHttpServletResponse response,\n                             RequestDispatcherOptions options) throws ServletException, IOException;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "/ Creates a synthetic GET request that can be used in the context of a real POST request to retrieve GET renditions of resources. This method is best used for a customized scenarios where the current resource or currentPage do not suffice. Note: BrowserMap JS may auto-redirect the result is a CQ Page that loads BrowserMap.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "525", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/FormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.FormHelper.getForm", "methodParameterType": "String#SlingHttpServletRequest#", "methodParameterName": "formName#request#", "methodBody": "Form getForm(String formName, SlingHttpServletRequest request);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Gets the From from either the POST Requests parameters or the GET request's (synthetic) attributes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "526", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/FormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.FormHelper.getForm", "methodParameterType": "String#SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "formName#request#response#", "methodBody": "Form getForm(final String formName, final SlingHttpServletRequest request, final SlingHttpServletResponse response);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Gets the From from either the POST Requests parameters or the GET request's (synthetic) attributes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "527", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/FormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.FormHelper.getFormInputsHTML", "methodParameterType": "Form#String#", "methodParameterName": "form#keys#", "methodBody": "String getFormInputsHTML(Form form, String... keys);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns a series of hidden fields used to persist multi-page form data between forms.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "528", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/FormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.FormHelper.getFormSelector", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "slingRequest#", "methodBody": "String getFormSelector(final SlingHttpServletRequest slingRequest);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Gets the Form Selector for the form POST request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "529", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/FormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.FormHelper.getAction", "methodParameterType": "Resource#", "methodParameterName": "resource#", "methodBody": "String getAction(final Resource resource);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Builds the form's action URI based on the provided resource's path <p> Appends \".post.html\" to the resource's path.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "530", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/FormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.FormHelper.getAction", "methodParameterType": "Resource#String#", "methodParameterName": "resource#formSelector#", "methodBody": "String getAction(final Resource resource, String formSelector);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Builds the form's action URI based on the provided resource's path <p> Appends \".html/<suffix>\" to the resource's path.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "531", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/FormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.FormHelper.getAction", "methodParameterType": "Page#", "methodParameterName": "page#", "methodBody": "String getAction(final Page page);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Builds the form's action URI based on the provided page's path <p> Appends \".html/<suffix>/<formSelector>\" to the page's path.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "532", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/FormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.FormHelper.getAction", "methodParameterType": "Page#String#", "methodParameterName": "page#formSelector#", "methodBody": "String getAction(final Page page, String formSelector);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Builds the form's action URI based on the provided page's path <p> Appends \".html/<suffix>/<formSelector>\" to the page's path.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "533", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/FormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.FormHelper.getAction", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "String getAction(final String path);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Builds the form's action URI based on the provided path <p> Appends \".html/<suffix>\" to the path.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "534", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/FormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.FormHelper.getAction", "methodParameterType": "String#String#", "methodParameterName": "path#formSelector#", "methodBody": "String getAction(final String path, final String formSelector);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Builds the form's action URI based on the provided path <p> Appends \".html/<suffix>/<formSelector>\" to the path.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "535", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/FormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.FormHelper.renderForm", "methodParameterType": "Form#String#SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "form#path#request#response#", "methodBody": "void renderForm(Form form, String path, SlingHttpServletRequest request, SlingHttpServletResponse response)\n            throws IOException, ServletException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Wrapped method to create a interface from FormHelper to normalize APIs that are commonly used. <p> - Wraps implementing FormHelper's `render(..)` method (sendRedirect or forwardAsGet) in the implementing FormHelper", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "536", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/FormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.FormHelper.renderForm", "methodParameterType": "Form#Page#SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "form#page#request#response#", "methodBody": "void renderForm(Form form, Page page, SlingHttpServletRequest request, SlingHttpServletResponse response)\n            throws IOException, ServletException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Wrapped method to create a interface from FormHelper to normalize APIs that are commonly used. <p> - Wraps implementing FormHelper's `render(..)` method (sendRedirect or forwardAsGet) in the implementing FormHelper", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "537", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/FormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.FormHelper.renderForm", "methodParameterType": "Form#Resource#SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "form#resource#request#response#", "methodBody": "void renderForm(Form form, Resource resource, SlingHttpServletRequest request, SlingHttpServletResponse response)\n            throws IOException, ServletException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Wrapped method to create a interface from FormHelper to normalize APIs that are commonly used. <p> - Wraps implementing `.renderForm(..)` method (sendRedirect or forwardAsGet) in the implementing FormHelper", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "538", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/FormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.FormHelper.renderOtherForm", "methodParameterType": "Form#String#String#SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "form#path#selectors#request#response#", "methodBody": "void renderOtherForm(Form form, String path, String selectors, SlingHttpServletRequest request,\n                         SlingHttpServletResponse response)\n            throws IOException, ServletException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Wrapped method to create a interface from FormHelper to normalize APIs that are commonly used. <p> - Wraps implementing FormHelper's `render(..)` method (sendRedirect or forwardAsGet) in the implementing FormHelper", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "539", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/FormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.FormHelper.renderOtherForm", "methodParameterType": "Form#Page#String#SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "form#page#selectors#request#response#", "methodBody": "void renderOtherForm(Form form, Page page, String selectors, SlingHttpServletRequest request,\n                         SlingHttpServletResponse response)\n            throws IOException, ServletException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Wrapped method to create a interface from FormHelper to normalize APIs that are commonly used. <p> - Wraps implementing FormHelper's `render(..)` method (sendRedirect or forwardAsGet) in the implementing FormHelper", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "540", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/FormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.FormHelper.renderOtherForm", "methodParameterType": "Form#Resource#String#SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "form#resource#selectors#request#response#", "methodBody": "void renderOtherForm(Form form, Resource resource, String selectors, SlingHttpServletRequest request,\n                         SlingHttpServletResponse response)\n            throws IOException, ServletException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Wrapped method to create a interface from FormHelper to normalize APIs that are commonly used. <p> - Wraps implementing FormHelper's `render(..)` method (sendRedirect or forwardAsGet) in the implementing FormHelper", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "541", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/AbstractFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.AbstractFormHelperImpl.doHandlePost", "methodParameterType": "String#SlingHttpServletRequest#", "methodParameterName": "formName#request#", "methodBody": "protected final boolean doHandlePost(final String formName, final SlingHttpServletRequest request) {\n        if (StringUtils.equalsIgnoreCase(\"POST\", request.getMethod())) {\n            // Form should have a hidden input with the name this.getLookupKey(..) and value formName\n            return StringUtils.equals(formName, request.getParameter(this.getPostLookupKey(formName)));\n        } else {\n            return false;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ReturnStatement#Block#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Determines of this FormHelper should handle the POST request.", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getMethod", "org.apache.commons.lang.StringUtils.equalsIgnoreCase", "com.adobe.acs.commons.forms.helpers.impl.AbstractFormHelperImpl.getPostLookupKey", "org.apache.sling.api.SlingHttpServletRequest.getParameter", "org.apache.commons.lang.StringUtils.equals"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.forms.helpers.impl.AbstractFormHelperImpl.getPostLookupKey": "Gets the Key used to look up the form during handling of POST requests."}]}, {"index": "542", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/AbstractFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.AbstractFormHelperImpl.getPostForm", "methodParameterType": "String#SlingHttpServletRequest#", "methodParameterName": "formName#request#", "methodBody": "protected final Form getPostForm(final String formName,\n                               final SlingHttpServletRequest request) {\n        final Map<String, String> map = new HashMap<String, String>();\n\n\n        final RequestParameterMap requestMap = request.getRequestParameterMap();\n\n        for (final String key : requestMap.keySet()) {\n            // POST LookupKey formName param does not matter\n            if (StringUtils.equals(key, this.getPostLookupKey(null))) {\n                continue;\n            }\n\n            final RequestParameter[] values = requestMap.getValues(key);\n\n            if (values == null || values.length == 0) {\n                log.debug(\"Value did not exist for key: {}\", key);\n            } else if (values.length == 1) {\n                log.debug(\"Adding to form data: {} ~> {}\", key, values[0].toString());\n                map.put(key, values[0].getString());\n            } else {\n                // Requires support for transporting them and re-writing them back into HTML Form on error\n                for (final RequestParameter value : values) {\n                    // Use the first non-blank value, or use the last value (which will be blank or not-blank)\n                    final String tmp = value.toString();\n                    map.put(key, tmp);\n\n                    if (StringUtils.isNotBlank(tmp)) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        return this.clean(new FormImpl(formName, request.getResource().getPath(), map));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#NullLiteral#MethodInvocation#MethodInvocation#ContinueStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#NumberLiteral#ArrayAccess#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#BreakStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#IfStatement#Block#EnhancedForStatement#ThisExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)MethodInvocation(Block(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(BreakStatement)BreakStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement)IfStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the Form from POST requests.", "call_func_name": ["java.util.HashMap.<init>", "org.apache.sling.api.SlingHttpServletRequest.getRequestParameterMap", "org.apache.sling.api.request.RequestParameterMap.keySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.adobe.acs.commons.forms.helpers.impl.AbstractFormHelperImpl.getPostLookupKey", "org.apache.commons.lang.StringUtils.equals", "org.apache.sling.api.request.RequestParameterMap.getValues", "org.slf4j.Logger.debug", "java.lang.Object.toString", "org.slf4j.Logger.debug", "org.apache.sling.api.request.RequestParameter.getString", "java.util.Map.put", "org.apache.commons.lang.StringUtils.isNotBlank", "org.apache.sling.api.SlingHttpServletRequest.getResource", "org.apache.sling.api.resource.Resource.getPath", "com.adobe.acs.commons.forms.impl.FormImpl.<init>", "com.adobe.acs.commons.forms.helpers.impl.AbstractFormHelperImpl.clean"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], ["java.lang.Object", "java.lang.Object"], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String", "java.util.Map"], ["com.adobe.acs.commons.forms.Form"]], "passed_comments": [{"com.adobe.acs.commons.forms.helpers.impl.AbstractFormHelperImpl.getPostLookupKey": "Gets the Key used to look up the form during handling of POST requests."}, {"com.adobe.acs.commons.forms.helpers.impl.AbstractFormHelperImpl.clean": "Removes unused Map entries from the provided map."}]}, {"index": "543", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/AbstractFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.AbstractFormHelperImpl.getPostLookupKey", "methodParameterType": "String#", "methodParameterName": "formName#", "methodBody": "@SuppressWarnings(\"squid:S1172\")\n    protected final String getPostLookupKey(final String formName) {\n        // This may change; keeping as method call to ease future refactoring\n        return FormHelper.FORM_NAME_INPUT;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the Key used to look up the form during handling of POST requests.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "544", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/AbstractFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.AbstractFormHelperImpl.clean", "methodParameterType": "Form#", "methodParameterName": "form#", "methodBody": "protected final Form clean(final Form form) {\n        final Map<String, String> map = form.getData();\n        final Map<String, String> cleanedMap = new HashMap<String, String>();\n\n        for (final Map.Entry<String, String> entry : map.entrySet()) {\n            if (!ArrayUtils.contains(FORM_INPUTS, entry.getKey()) && StringUtils.isNotBlank(entry.getValue())) {\n                cleanedMap.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return new FormImpl(form.getName(), form.getResourcePath(), cleanedMap, form.getErrors());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Removes unused Map entries from the provided map.", "call_func_name": ["com.adobe.acs.commons.forms.Form.getData", "java.util.HashMap.<init>", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.commons.lang.ArrayUtils.contains", "org.apache.commons.lang.StringUtils.isNotBlank", "java.util.Map.put", "com.adobe.acs.commons.forms.Form.getName", "com.adobe.acs.commons.forms.Form.getResourcePath", "com.adobe.acs.commons.forms.Form.getErrors", "com.adobe.acs.commons.forms.impl.FormImpl.<init>"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["java.lang.Object[]", "java.lang.Object"], ["java.lang.String"], ["java.lang.Object", "java.lang.Object"], [""], [""], [""], ["java.lang.String", "java.lang.String", "java.util.Map", "java.util.Map"]], "passed_comments": [{"com.adobe.acs.commons.forms.Form.getData": "Gets a Map of the Form data"}, {"com.adobe.acs.commons.forms.Form.getName": "Get the Form's name <p> This should uniquely identify a Form on a Page"}, {"com.adobe.acs.commons.forms.Form.getResourcePath": "Get the Form's resource path"}, {"com.adobe.acs.commons.forms.Form.getErrors": "Gets a Map of the error data"}]}, {"index": "545", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/AbstractFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.AbstractFormHelperImpl.getProtectedForm", "methodParameterType": "Form#", "methodParameterName": "form#", "methodBody": "protected final Form getProtectedForm(final Form form) {\n        return new FormImpl(form.getName(),\n                form.getResourcePath(),\n                this.getProtectedData(form.getData()),\n                this.getProtectedErrors(form.getErrors()));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Protect a Form in is entirety (data and errors).", "call_func_name": ["com.adobe.acs.commons.forms.Form.getName", "com.adobe.acs.commons.forms.Form.getResourcePath", "com.adobe.acs.commons.forms.Form.getData", "com.adobe.acs.commons.forms.helpers.impl.AbstractFormHelperImpl.getProtectedData", "com.adobe.acs.commons.forms.Form.getErrors", "com.adobe.acs.commons.forms.helpers.impl.AbstractFormHelperImpl.getProtectedErrors", "com.adobe.acs.commons.forms.impl.FormImpl.<init>"], "call_func_parameter": [[""], [""], [""], ["java.util.Map"], [""], ["java.util.Map"], ["java.lang.String", "java.lang.String", "java.util.Map", "java.util.Map"]], "passed_comments": [{"com.adobe.acs.commons.forms.Form.getName": "Get the Form's name <p> This should uniquely identify a Form on a Page"}, {"com.adobe.acs.commons.forms.Form.getResourcePath": "Get the Form's resource path"}, {"com.adobe.acs.commons.forms.Form.getData": "Gets a Map of the Form data"}, {"com.adobe.acs.commons.forms.helpers.impl.AbstractFormHelperImpl.getProtectedData": "Protect a Map representing Form Data."}, {"com.adobe.acs.commons.forms.Form.getErrors": "Gets a Map of the error data"}, {"com.adobe.acs.commons.forms.helpers.impl.AbstractFormHelperImpl.getProtectedErrors": "Protect a Map representing Form Errors."}]}, {"index": "546", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/AbstractFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.AbstractFormHelperImpl.getProtectedData", "methodParameterType": "Map<String,String>#", "methodParameterName": "data#", "methodBody": "protected final Map<String, String> getProtectedData(final Map<String, String> data) {\n        final Map<String, String> protectedData = new HashMap<String, String>();\n\n        // Protect data for HTML Attributes\n        for (final Map.Entry<String, String> entry : data.entrySet()) {\n            protectedData.put(entry.getKey(), xss.encodeForHTMLAttr(entry.getValue()));\n        }\n\n        return protectedData;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Protect a Map representing Form Data.", "call_func_name": ["java.util.HashMap.<init>", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.sling.xss.XSSAPI.encodeForHTMLAttr", "java.util.Map.put"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "547", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/AbstractFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.AbstractFormHelperImpl.getProtectedErrors", "methodParameterType": "Map<String,String>#", "methodParameterName": "errors#", "methodBody": "protected final Map<String, String> getProtectedErrors(final Map<String, String> errors) {\n        final Map<String, String> protectedErrors = new HashMap<String, String>();\n\n        // Protect data for HTML\n        for (final Map.Entry<String, String> entry : errors.entrySet()) {\n            protectedErrors.put(entry.getKey(), xss.encodeForHTML(entry.getValue()));\n        }\n\n        return protectedErrors;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Protect a Map representing Form Errors.", "call_func_name": ["java.util.HashMap.<init>", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.sling.xss.XSSAPI.encodeForHTML", "java.util.Map.put"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "548", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/AbstractFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.AbstractFormHelperImpl.getFormSelector", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "slingRequest#", "methodBody": "public final String getFormSelector(final SlingHttpServletRequest slingRequest) {\n        return formsRouter.getFormSelector(slingRequest);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the Form Selector for the form POST request.", "call_func_name": ["com.adobe.acs.commons.forms.FormsRouter.getFormSelector"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest"]], "passed_comments": [{"com.adobe.acs.commons.forms.FormsRouter.getFormSelector": "Gets the Form Selector for the form POST request."}]}, {"index": "549", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/AbstractFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.AbstractFormHelperImpl.encode", "methodParameterType": "String#", "methodParameterName": "unencoded#", "methodBody": "protected String encode(String unencoded) {\n        if (StringUtils.isBlank(unencoded)) {\n            return \"\";\n        }\n\n        try {\n            return java.net.URLEncoder.encode(unencoded, \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n            return unencoded;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)IfStatement(TryStatement(Block(ReturnStatement(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Encodes URL data.", "call_func_name": ["org.apache.commons.lang.StringUtils.isBlank", "java.net.URLEncoder.encode"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "550", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/AbstractFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.AbstractFormHelperImpl.decode", "methodParameterType": "String#", "methodParameterName": "encoded#", "methodBody": "protected String decode(String encoded) {\n        if (StringUtils.isBlank(encoded)) {\n            return \"\";\n        }\n\n        try {\n            return java.net.URLDecoder.decode((encoded), \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n            return encoded;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#ParenthesizedExpression#StringLiteral#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)IfStatement(TryStatement(Block(ReturnStatement(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Decodes URL data.", "call_func_name": ["org.apache.commons.lang.StringUtils.isBlank", "java.net.URLDecoder.decode"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "551", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/PostRedirectGetFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.doHandle", "methodParameterType": "String#SlingHttpServletRequest#", "methodParameterName": "formName#request#", "methodBody": "protected final boolean doHandle(final String formName, final SlingHttpServletRequest request) {\n        return this.doHandleGet(formName, request) || this.doHandlePost(formName, request);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines if this Form Manager should handle this request.", "call_func_name": ["com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.doHandleGet", "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.doHandlePost"], "call_func_parameter": [["java.lang.String", "org.apache.sling.api.SlingHttpServletRequest"], ["java.lang.String", "org.apache.sling.api.SlingHttpServletRequest"]], "passed_comments": [{"com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.doHandleGet": "Checks if this Form Manager should handle this request as a GET request."}]}, {"index": "552", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/PostRedirectGetFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.doHandleGet", "methodParameterType": "String#SlingHttpServletRequest#", "methodParameterName": "formName#request#", "methodBody": "protected boolean doHandleGet(final String formName, final SlingHttpServletRequest request) {\n        //noinspection SimplifiableIfStatement\n        if (StringUtils.equalsIgnoreCase(\"GET\", request.getMethod())) {\n            return (StringUtils.isNotBlank(request.getParameter(this.getGetLookupKey(formName))));\n        } else {\n            return false;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ParenthesizedExpression#ReturnStatement#Block#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ReturnStatement(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ParenthesizedExpression)ReturnStatement)Block(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Checks if this Form Manager should handle this request as a GET request.", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getMethod", "org.apache.commons.lang.StringUtils.equalsIgnoreCase", "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.getGetLookupKey", "org.apache.sling.api.SlingHttpServletRequest.getParameter", "org.apache.commons.lang.StringUtils.isNotBlank"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.getGetLookupKey": "Returns the Query Parameter name for this form."}]}, {"index": "553", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/PostRedirectGetFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.getGetForm", "methodParameterType": "String#SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "formName#request#response#", "methodBody": "protected Form getGetForm(final String formName, final SlingHttpServletRequest request, final SlingHttpServletResponse response) {\n        Map<String, String> data = Collections.EMPTY_MAP;\n        Map<String, String> errors = Collections.EMPTY_MAP;\n        final String requestData = getRawFormData(formName, request, response);\n\n        if (StringUtils.isBlank(requestData)) {\n            return new FormImpl(formName, request.getResource().getPath());\n        }\n\n        try {\n            Gson gson = new Gson();\n            final JsonObject jsonData = JsonObjectUtil.toJsonObject(requestData);\n\n            final String incomingFormName = getString(jsonData, KEY_FORM_NAME);\n\n            // Double-check the form names; only inject matching forms\n            if (StringUtils.equals(incomingFormName, formName)) {\n                data = getOptionalObject(jsonData, KEY_FORM)\n                        .map(incomingJsonForm -> gson.fromJson(incomingJsonForm, Map.class))\n                        .orElse(Collections.EMPTY_MAP);\n                if (data.size() > 0) {\n                    log.debug(\"Form data: {}\", data);\n                }\n\n                errors = getOptionalObject(jsonData, KEY_ERRORS)\n                        .map(incomingJsonForm -> gson.fromJson(incomingJsonForm, Map.class))\n                        .orElse(Collections.EMPTY_MAP);\n                if (errors.size() > 0) {\n                    log.debug(\"Form errors: {}\", data);\n                }\n            }\n        } catch (JsonParseException e) {\n            log.warn(\"Cannot parse query parameters for request: {}\", requestData);\n            return new FormImpl(formName, request.getResource().getPath());\n        }\n\n        return new FormImpl(formName,\n                request.getResource().getPath(),\n                this.getProtectedData(data),\n                this.getProtectedErrors(errors));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ThisExpression#SimpleName#SimpleName#MethodInvocation#ThisExpression#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)IfStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)CatchClause)TryStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Derives the form from the request's Query Parameters as best it can <p> Falls back to an empty form if it runs into problems. Fallback is due to ease of (inadvertent) tampering with query params", "call_func_name": ["com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.getRawFormData", "org.apache.commons.lang.StringUtils.isBlank", "org.apache.sling.api.SlingHttpServletRequest.getResource", "org.apache.sling.api.resource.Resource.getPath", "com.adobe.acs.commons.forms.impl.FormImpl.<init>", "com.google.gson.Gson.<init>", "com.adobe.acs.commons.json.JsonObjectUtil.toJsonObject", "com.adobe.acs.commons.json.JsonObjectUtil.getString", "org.apache.commons.lang.StringUtils.equals", "com.adobe.acs.commons.json.JsonObjectUtil.getOptionalObject", "java.util.function.Function.apply", "java.util.Optional.map", "java.util.Optional.orElse", "java.util.Map.size", "org.slf4j.Logger.debug", "org.slf4j.Logger.warn", "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.getProtectedData", "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.getProtectedErrors", "com.adobe.acs.commons.forms.impl.FormImpl.<init>"], "call_func_parameter": [["java.lang.String", "org.apache.sling.api.SlingHttpServletRequest", "org.apache.sling.api.SlingHttpServletResponse"], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String"], ["com.google.gson.JsonObject", "java.lang.String"], ["java.lang.String", "java.lang.String"], ["com.google.gson.JsonObject", "java.lang.String"], ["com.google.gson.Gson"], ["java.util.function.Function"], ["java.lang.Object"], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.Object"], ["java.util.Map"], ["java.util.Map"], ["java.lang.String", "java.lang.String", "java.util.Map", "java.util.Map"]], "passed_comments": "/"}, {"index": "554", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/PostRedirectGetFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.getGetLookupKey", "methodParameterType": "String#", "methodParameterName": "formName#", "methodBody": "protected final String getGetLookupKey(final String formName) {\n        return KEY_PREFIX_FORM_NAME + formName;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Query Parameter name for this form.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "555", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/PostRedirectGetFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.getRedirectPath", "methodParameterType": "Form#Page#String#", "methodParameterName": "form#page#formSelector#", "methodBody": "protected final String getRedirectPath(final Form form, final Page page, final String formSelector) throws\n            UnsupportedEncodingException {\n        return getRedirectPath(form, page.adaptTo(Resource.class), formSelector);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Created the URL to the failure page with re-population info and error info.", "call_func_name": ["com.day.cq.wcm.api.Page.adaptTo", "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.getRedirectPath"], "call_func_parameter": [["java.lang.Class"], ["com.adobe.acs.commons.forms.Form", "org.apache.sling.api.resource.Resource", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.getRedirectPath": "Created the URL to the failure page with re-population info and error info."}]}, {"index": "556", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/PostRedirectGetFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.getRedirectPath", "methodParameterType": "Form#Resource#String#", "methodParameterName": "form#resource#formSelector#", "methodBody": "protected final String getRedirectPath(final Form form, final Resource resource, final String formSelector) throws\n            UnsupportedEncodingException {\n        return getRedirectPath(form, resource.getPath() + FormHelper.EXTENSION, formSelector);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Created the URL to the failure page with re-population info and error info.", "call_func_name": ["java.lang.StringBuilder.<init>", "org.apache.sling.api.resource.Resource.getPath", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.getRedirectPath"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["com.adobe.acs.commons.forms.Form", "java.lang.String", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.getRedirectPath": "Created the URL to the failure page with re-population info and error info."}]}, {"index": "557", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/PostRedirectGetFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.getRedirectPath", "methodParameterType": "Form#String#String#", "methodParameterName": "form#path#formSelector#", "methodBody": "protected String getRedirectPath(final Form form, final String path, final String formSelector) {\n        String redirectPath = path;\n        redirectPath += this.getSuffix();\n        if (StringUtils.isNotBlank(formSelector)) {\n            redirectPath += \"/\" + formSelector;\n        }\n        redirectPath += \"?\";\n        redirectPath += this.getQueryParameters(form);\n        return redirectPath;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ThisExpression#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#StringLiteral#Assignment#ExpressionStatement#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Created the URL to the failure page with re-population info and error info.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.getSuffix", "java.lang.StringBuilder.toString", "org.apache.commons.lang.StringUtils.isNotBlank", "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.getQueryParameters"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["java.lang.String"], ["com.adobe.acs.commons.forms.Form"]], "passed_comments": [{"com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.getQueryParameters": ""}]}, {"index": "558", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/PostRedirectGetFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.getQueryParameters", "methodParameterType": "Form#", "methodParameterName": "form#", "methodBody": "protected final String getQueryParameters(Form form) {\n        String params = \"\";\n        form = this.clean(form);\n\n        if (form.hasData() || form.hasErrors()) {\n            params = this.getGetLookupKey(form.getName());\n            params += \"=\";\n            params += getQueryParameterValue(form);\n        }\n\n        return params;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#StringLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "", "call_func_name": ["com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.clean", "com.adobe.acs.commons.forms.Form.hasData", "com.adobe.acs.commons.forms.Form.hasErrors", "com.adobe.acs.commons.forms.Form.getName", "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.getGetLookupKey", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.getQueryParameterValue"], "call_func_parameter": [["com.adobe.acs.commons.forms.Form"], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["com.adobe.acs.commons.forms.Form"]], "passed_comments": [{"com.adobe.acs.commons.forms.Form.hasData": "Determines if any Form Data exists; atleast 1 key w non-blank data must exist in the data map."}, {"com.adobe.acs.commons.forms.Form.hasErrors": "Checks if has data"}, {"com.adobe.acs.commons.forms.Form.getName": "Get the Form's name <p> This should uniquely identify a Form on a Page"}, {"com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetFormHelperImpl.getGetLookupKey": "Returns the Query Parameter name for this form."}]}, {"index": "559", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/ForwardAsGetFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.ForwardAsGetFormHelperImpl.getLookupKey", "methodParameterType": "String#", "methodParameterName": "formName#", "methodBody": "protected final String getLookupKey(final String formName) {\n        return REQUEST_ATTR_FORM_KEY + formName;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the Key used to look up the Form from the Request Attributes used to transport Forward-as-GET Forms.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "560", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/ForwardAsGetFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.ForwardAsGetFormHelperImpl.setRequestAttrForm", "methodParameterType": "SlingHttpServletRequest#Form#", "methodParameterName": "request#form#", "methodBody": "protected final void setRequestAttrForm(final SlingHttpServletRequest request,\n                                      final Form form) {\n        final String key = this.getLookupKey(form.getName());\n        request.setAttribute(key, form);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Persists the Form obj to the Request via Request Attribute.", "call_func_name": ["com.adobe.acs.commons.forms.Form.getName", "com.adobe.acs.commons.forms.helpers.impl.ForwardAsGetFormHelperImpl.getLookupKey", "org.apache.sling.api.SlingHttpServletRequest.setAttribute"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.forms.Form.getName": "Get the Form's name <p> This should uniquely identify a Form on a Page"}, {"com.adobe.acs.commons.forms.helpers.impl.ForwardAsGetFormHelperImpl.getLookupKey": "Gets the Key used to look up the Form from the Request Attributes used to transport Forward-as-GET Forms."}]}, {"index": "561", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/PostRedirectGetWithCookiesFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetWithCookiesFormHelperImpl.encode", "methodParameterType": "String#", "methodParameterName": "unencoded#", "methodBody": "@Override\n    protected final String encode(String unencoded) {\n        try {\n            return StringUtils.isBlank(unencoded) ? \"\" : URLEncoder.encode(unencoded, \"UTF-8\");\n        } catch (UnsupportedEncodingException ex) {\n            log.error(\"Cannot encode '{}' to UTF-8\", unencoded, ex);\n            return unencoded;\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ConditionalExpression#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ConditionalExpression)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Encodes URL data, escaping characters such as \"+\" and \"=\"", "call_func_name": ["org.apache.commons.lang.StringUtils.isBlank", "java.net.URLEncoder.encode", "org.slf4j.Logger.error"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "562", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/PostRedirectGetWithCookiesFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetWithCookiesFormHelperImpl.decode", "methodParameterType": "String#", "methodParameterName": "encoded#", "methodBody": "@Override\n    protected final String decode(String encoded) {\n        try {\n            return StringUtils.isBlank(encoded) ? \"\" : URLDecoder.decode(encoded, \"UTF-8\");\n        } catch (UnsupportedEncodingException ex) {\n            log.error(\"Cannot decode '{}'\", ex);\n            return encoded;\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ConditionalExpression#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ConditionalExpression)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Decodes URL data.", "call_func_name": ["org.apache.commons.lang.StringUtils.isBlank", "java.net.URLDecoder.decode", "org.slf4j.Logger.error"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "563", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/impl/PostRedirectGetWithCookiesFormHelperImpl.java", "methodName": "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetWithCookiesFormHelperImpl.addFlashCookie", "methodParameterType": "SlingHttpServletResponse#Form#", "methodParameterName": "response#form#", "methodBody": "protected void addFlashCookie(SlingHttpServletResponse response, Form form) {\n        final String name = this.getGetLookupKey(form.getName());\n        final String value = getQueryParameterValue(form);\n        final Cookie cookie = new Cookie(name, value);\n        cookie.setMaxAge(COOKIE_MAX_AGE);\n        CookieUtil.addCookie(cookie, response);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a cookie containing the serialised contents of the form to a cookie named after the GET lookup key", "call_func_name": ["com.adobe.acs.commons.forms.Form.getName", "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetWithCookiesFormHelperImpl.getGetLookupKey", "com.adobe.acs.commons.forms.helpers.impl.PostRedirectGetWithCookiesFormHelperImpl.getQueryParameterValue", "javax.servlet.http.Cookie.<init>", "javax.servlet.http.Cookie.setMaxAge", "com.adobe.acs.commons.util.CookieUtil.addCookie"], "call_func_parameter": [[""], ["java.lang.String"], ["com.adobe.acs.commons.forms.Form"], ["java.lang.String", "java.lang.String"], ["int"], ["javax.servlet.http.Cookie", "javax.servlet.http.HttpServletResponse"]], "passed_comments": [{"com.adobe.acs.commons.forms.Form.getName": "Get the Form's name <p> This should uniquely identify a Form on a Page"}, {"com.adobe.acs.commons.util.CookieUtil.addCookie": "Add the provided HTTP Cookie to the Response"}]}, {"index": "564", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/PostRedirectGetFormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.PostRedirectGetFormHelper.sendRedirect", "methodParameterType": "Form#String#SlingHttpServletResponse#", "methodParameterName": "form#path#response#", "methodBody": "void sendRedirect(Form form, String path, SlingHttpServletResponse response) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Issues a 302 redirect with the form serialized into a JSON object that can be read out by the PostRedirectGetFormHelper on the \"other side\". Allows 302 redirect to target the specified path.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "565", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/PostRedirectGetFormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.PostRedirectGetFormHelper.sendRedirect", "methodParameterType": "Form#Page#SlingHttpServletResponse#", "methodParameterName": "form#page#response#", "methodBody": "void sendRedirect(Form form, Page page, SlingHttpServletResponse response) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Issues a 302 redirect with the form serialized into a JSON object that can be read out by the PostRedirectGetFormHelper on the \"other side\". Allows 302 redirect to target the specified CQ Page.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "566", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/PostRedirectGetFormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.PostRedirectGetFormHelper.sendRedirect", "methodParameterType": "Form#Resource#SlingHttpServletResponse#", "methodParameterName": "form#resource#response#", "methodBody": "void sendRedirect(Form form, Resource resource, SlingHttpServletResponse response) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "/ Issues a 302 redirect with the form serialized into a JSON object that can be read out by the PostRedirectGetFormHelper on the \"other side\". Allows 302 redirect to target the specified resource with provided .html extension.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "567", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/PostRedirectGetFormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.PostRedirectGetFormHelper.sendRedirect", "methodParameterType": "Form#String#String#SlingHttpServletResponse#", "methodParameterName": "form#path#formSelector#response#", "methodBody": "void sendRedirect(Form form, String path, String formSelector, SlingHttpServletResponse response) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Same as: sendRedirect(Form form, String path, SlingHttpServletResponse response) but adds the Form selector query parameter to redirect request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "568", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/PostRedirectGetFormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.PostRedirectGetFormHelper.sendRedirect", "methodParameterType": "Form#Page#String#SlingHttpServletResponse#", "methodParameterName": "form#page#formSelector#response#", "methodBody": "void sendRedirect(Form form, Page page, String formSelector, SlingHttpServletResponse response) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Same as: sendRedirect(Form form, Page page, SlingHttpServletResponse response) but adds the Form selector query parameter to redirect request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "569", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/helpers/PostRedirectGetFormHelper.java", "methodName": "com.adobe.acs.commons.forms.helpers.PostRedirectGetFormHelper.sendRedirect", "methodParameterType": "Form#Resource#String#SlingHttpServletResponse#", "methodParameterName": "form#resource#formSelector#response#", "methodBody": "void sendRedirect(Form form, Resource resource, String formSelector, SlingHttpServletResponse response) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Same as: sendRedirect(Form form, Resource resource, SlingHttpServletResponse response) but adds the Form selector query parameter to redirect request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "570", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/forms/impl/FormsRouterImpl.java", "methodName": "com.adobe.acs.commons.forms.impl.FormsRouterImpl.getFormSelector", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "slingRequest#", "methodBody": "@Override\n    public final String getFormSelector(final SlingHttpServletRequest slingRequest) {\n        final String requestSuffix = slingRequest.getRequestPathInfo().getSuffix();\n        if (StringUtils.equals(requestSuffix, this.getSuffix())\n                || !StringUtils.startsWith(requestSuffix, this.getSuffix() + \"/\")) {\n            return null;\n        }\n\n        final int segments = StringUtils.split(this.getSuffix(), '/').length;\n        if (segments < 1) {\n            return null;\n        }\n\n        final String formSelector = PathInfoUtil.getSuffixSegment(slingRequest, segments);\n        return StringUtils.stripToNull(formSelector);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#PrefixExpression#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#CharacterLiteral#MethodInvocation#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(CharacterLiteral)CharacterLiteral)MethodInvocation(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the Form Selector for the form POST request.", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getRequestPathInfo", "org.apache.sling.api.request.RequestPathInfo.getSuffix", "com.adobe.acs.commons.forms.impl.FormsRouterImpl.getSuffix", "org.apache.commons.lang.StringUtils.equals", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.commons.lang.StringUtils.startsWith", "org.apache.commons.lang.StringUtils.split", "com.adobe.acs.commons.util.PathInfoUtil.getSuffixSegment", "org.apache.commons.lang.StringUtils.stripToNull"], "call_func_parameter": [[""], [""], [""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String"], ["java.lang.String", "char"], ["org.apache.sling.api.SlingHttpServletRequest", "int"], ["java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.util.PathInfoUtil.getSuffixSegment": "<p> Gets the suffix segment at the supplied index. </p><p> Given: /content/page.html/suffixA/suffixB <br/> getSuffixSegment(request, 0) // --> \"suffixA\" <br/> getSuffixSegment(request, 1) // --> \"suffixB\" </p>"}]}, {"index": "571", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/reports/api/ReportCellCSVExporter.java", "methodName": "com.adobe.acs.commons.reports.api.ReportCellCSVExporter.getValue", "methodParameterType": "Object#", "methodParameterName": "result#", "methodBody": "public String getValue(Object result);", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Gets the CSV value from the specified result based on the column configuration of the current cell.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "572", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/reports/api/ReportExecutor.java", "methodName": "com.adobe.acs.commons.reports.api.ReportExecutor.getDetails", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getDetails() throws ReportException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Gets the details for this report executor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "573", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/reports/api/ReportExecutor.java", "methodName": "com.adobe.acs.commons.reports.api.ReportExecutor.getParameters", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getParameters() throws ReportException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "The parameters used to execute the report.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "574", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/reports/api/ReportExecutor.java", "methodName": "com.adobe.acs.commons.reports.api.ReportExecutor.getAllResults", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "ResultsPage getAllResults() throws ReportException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Return all of the results based on the request parameters and supplied configuration settings in the configuration resource.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "575", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/reports/api/ReportExecutor.java", "methodName": "com.adobe.acs.commons.reports.api.ReportExecutor.getResults", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "ResultsPage getResults() throws ReportException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Return the page of results based on the request parameters and supplied configuration settings in the configuration resource.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "576", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/reports/api/ReportExecutor.java", "methodName": "com.adobe.acs.commons.reports.api.ReportExecutor.setConfiguration", "methodParameterType": "Resource#", "methodParameterName": "config#", "methodBody": "void setConfiguration(Resource config);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set the resource used to configure this report executor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "577", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/reports/api/ReportExecutor.java", "methodName": "com.adobe.acs.commons.reports.api.ReportExecutor.setPage", "methodParameterType": "int#", "methodParameterName": "page#", "methodBody": "void setPage(int page);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "This method will be called by the ReportRunner to set the current results page.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "578", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/reports/api/ReportException.java", "methodName": "com.adobe.acs.commons.reports.api.ReportException.ReportException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public ReportException(String message) {\n    super(message);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs a new exception with the specified detail message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "579", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/reports/api/ReportException.java", "methodName": "com.adobe.acs.commons.reports.api.ReportException.ReportException", "methodParameterType": "String#Throwable#", "methodParameterName": "message#cause#", "methodBody": "public ReportException(String message, Throwable cause) {\n        super(message, cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs a new exception with the specified detail message and cause.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "580", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/reports/models/ReportRunner.java", "methodName": "com.adobe.acs.commons.reports.models.ReportRunner.ReportRunner", "methodParameterType": "SlingHttpServletRequest#DynamicClassLoaderManager#", "methodParameterName": "request#dynamicClassLoaderManager#", "methodBody": "ReportRunner(SlingHttpServletRequest request, DynamicClassLoaderManager dynamicClassLoaderManager) {\n    this(request);\n    this.dynamicClassLoaderManager = dynamicClassLoaderManager;\n  }", "AST": "Javadoc#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName)ConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Used only for testing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "581", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/reports/models/ReportRunner.java", "methodName": "com.adobe.acs.commons.reports.models.ReportRunner.getReportExecutor", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ReportExecutor getReportExecutor() {\n    return reportExecutor;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the ReportExecutor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "582", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/ondeploy/OnDeployExecutor.java", "methodName": "com.adobe.acs.commons.ondeploy.OnDeployExecutor.executeScript", "methodParameterType": "String#boolean#", "methodParameterName": "scriptName#force#", "methodBody": "boolean executeScript(String scriptName, boolean force);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Execute scripts", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "583", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/ondeploy/OnDeployScriptProvider.java", "methodName": "com.adobe.acs.commons.ondeploy.OnDeployScriptProvider.getScripts", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<OnDeployScript> getScripts();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the list of scripts to run. Ideally, all scripts will remain in the list indefinitely, so that a new AEM server can run all scripts from the first to the last to be completely up to date w/no manual intervention.  As a reminder, scripts will run only once, so it is safe to preserve the entire list of scripts.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "584", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/ondeploy/impl/OnDeployExecutorImpl.java", "methodName": "com.adobe.acs.commons.ondeploy.impl.OnDeployExecutorImpl.bindScriptProvider", "methodParameterType": "OnDeployScriptProvider#", "methodParameterName": "scriptProvider#", "methodBody": "protected void bindScriptProvider(OnDeployScriptProvider scriptProvider) {\n        logger.info(\"Executing on-deploy scripts from scriptProvider: {}\", scriptProvider.getClass().getName());\n        scriptProviders.add(scriptProvider);\n\n        List<OnDeployScript> scripts = scriptProvider.getScripts();\n        if (scripts.size() == 0) {\n            logger.debug(\"No on-deploy scripts found.\");\n            return;\n        }\n        \n        try (ResourceResolver resourceResolver = logIn()) {\n            runScripts(resourceResolver, scripts);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Executes all on-deploy scripts on bind of a script provider.", "call_func_name": ["java.lang.Object.getClass", "java.lang.Class.getName", "org.slf4j.Logger.info", "java.util.List.add", "com.adobe.acs.commons.ondeploy.OnDeployScriptProvider.getScripts", "java.util.List.size", "org.slf4j.Logger.debug", "com.adobe.acs.commons.ondeploy.impl.OnDeployExecutorImpl.logIn", "com.adobe.acs.commons.ondeploy.impl.OnDeployExecutorImpl.runScripts", "org.apache.sling.api.resource.ResourceResolver.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.Object"], [""], [""], ["java.lang.String"], [""], ["org.apache.sling.api.resource.ResourceResolver", "java.util.List"], [""], ["java.lang.Throwable"]], "passed_comments": [{"com.adobe.acs.commons.ondeploy.OnDeployScriptProvider.getScripts": "Get the list of scripts to run. Ideally, all scripts will remain in the list indefinitely, so that a new AEM server can run all scripts from the first to the last to be completely up to date w/no manual intervention.  As a reminder, scripts will run only once, so it is safe to preserve the entire list of scripts."}]}, {"index": "585", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/ondeploy/impl/OnDeployExecutorImpl.java", "methodName": "com.adobe.acs.commons.ondeploy.impl.OnDeployExecutorImpl.runScript", "methodParameterType": "ResourceResolver#OnDeployScript#", "methodParameterName": "resourceResolver#script#", "methodBody": "protected boolean runScript(ResourceResolver resourceResolver, OnDeployScript script) {\n        Resource statusResource = getOrCreateStatusTrackingResource(resourceResolver, script.getClass());\n        String status = getScriptStatus(statusResource);\n        if (status == null || status.equals(SCRIPT_STATUS_FAIL)) {\n            trackScriptStart(statusResource);\n            try {\n                script.execute(resourceResolver);\n                logger.info(\"On-deploy script completed successfully: {}\", statusResource.getPath());\n                trackScriptEnd(statusResource, SCRIPT_STATUS_SUCCESS, \"\");\n                return true;\n            } catch (Exception e) {\n                String errMsg = \"On-deploy script failed: \" + statusResource.getPath();\n                logger.error(errMsg, e);\n                // The script may have made changes to the resolver before failing - make sure to get rid of them,\n                // since they most likely represent an inconsistent state.\n                resourceResolver.revert();\n                trackScriptEnd(statusResource, SCRIPT_STATUS_FAIL, ExceptionUtils.getStackTrace(e.getCause()));\n                throw new OnDeployEarlyTerminationException(new RuntimeException(errMsg));\n            }\n        } else if (!status.equals(SCRIPT_STATUS_SUCCESS)) {\n            String errMsg = \"On-deploy script is already running or in an otherwise unknown state: \" + statusResource.getPath() + \" - status: \" + status;\n            logger.error(errMsg);\n            throw new OnDeployEarlyTerminationException(new RuntimeException(errMsg));\n        } else {\n            logger.debug(\"Skipping on-deploy script, as it is already complete: {}\", statusResource.getPath());\n        }\n\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#ThrowStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)ThrowStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Run the  {@link OnDeployScript}, if it has not previously been run successfully.", "call_func_name": ["java.lang.Object.getClass", "com.adobe.acs.commons.ondeploy.impl.OnDeployExecutorImpl.getOrCreateStatusTrackingResource", "com.adobe.acs.commons.ondeploy.impl.OnDeployExecutorImpl.getScriptStatus", "java.lang.String.equals", "com.adobe.acs.commons.ondeploy.impl.OnDeployExecutorImpl.trackScriptStart", "com.adobe.acs.commons.ondeploy.scripts.OnDeployScript.execute", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.info", "com.adobe.acs.commons.ondeploy.impl.OnDeployExecutorImpl.trackScriptEnd", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.slf4j.Logger.error", "org.apache.sling.api.resource.ResourceResolver.revert", "java.lang.Exception.getCause", "org.apache.commons.lang3.exception.ExceptionUtils.getStackTrace", "java.lang.RuntimeException.<init>", "com.adobe.acs.commons.ondeploy.impl.OnDeployEarlyTerminationException.<init>", "org.slf4j.Logger.error", "org.slf4j.Logger.debug"], "call_func_parameter": [[""], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.Class"], ["org.apache.sling.api.resource.Resource"], ["java.lang.Object"], ["org.apache.sling.api.resource.Resource"], ["org.apache.sling.api.resource.ResourceResolver"], [""], ["java.lang.String", "java.lang.Object"], ["org.apache.sling.api.resource.Resource", "java.lang.String", "java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Throwable"], [""], [""], ["java.lang.Throwable"], ["java.lang.String"], ["java.lang.Throwable"], ["java.lang.String"], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.ondeploy.scripts.OnDeployScript.execute": "Execute the script, passing in a resourceResolver instance."}]}, {"index": "586", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/ondeploy/scripts/OnDeployScript.java", "methodName": "com.adobe.acs.commons.ondeploy.scripts.OnDeployScript.execute", "methodParameterType": "ResourceResolver#", "methodParameterName": "resourceResolver#", "methodBody": "void execute(ResourceResolver resourceResolver);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Execute the script, passing in a resourceResolver instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "587", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/ondeploy/scripts/OnDeployScriptBase.java", "methodName": "com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptBase.execute", "methodParameterType": "ResourceResolver#", "methodParameterName": "resourceResolver#", "methodBody": "public final void execute(ResourceResolver resourceResolver) {\n        this.resourceResolver = resourceResolver;\n\n        this.pageManager = resourceResolver.adaptTo(PageManager.class);\n        this.session = resourceResolver.adaptTo(Session.class);\n        if (session != null) {\n            this.workspace = session.getWorkspace();\n        }\n        try {\n            execute();\n            resourceResolver.commit();\n        } catch (Exception e) {\n            throw new OnDeployScriptException(e);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@see OnDeployScript#execute(ResourceResolver)", "call_func_name": ["org.apache.sling.api.resource.ResourceResolver.adaptTo", "javax.jcr.Session.getWorkspace", "com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptBase.execute", "org.apache.sling.api.resource.ResourceResolver.commit", "com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptException.<init>"], "call_func_parameter": [["java.lang.Class"], [""], [""], [""], ["java.lang.Throwable"]], "passed_comments": [{"com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptBase.execute": "@see OnDeployScript#execute(ResourceResolver)"}, {"com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptBase.execute": "Execute the script. This function must be implemented by all scripts."}]}, {"index": "588", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/ondeploy/scripts/OnDeployScriptBase.java", "methodName": "com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptBase.execute", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected abstract void execute() throws Exception;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Execute the script. This function must be implemented by all scripts.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "589", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/ondeploy/scripts/OnDeployScriptBase.java", "methodName": "com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptBase.getOrCreateNode", "methodParameterType": "String#", "methodParameterName": "absolutePath#", "methodBody": "protected final Node getOrCreateNode(String absolutePath) throws RepositoryException {\n        return getOrCreateNode(absolutePath, JcrConstants.NT_UNSTRUCTURED, JcrConstants.NT_UNSTRUCTURED);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve a node, or create it if not present. The node, as well as non-existent parent nodes, are created as type nt:unstructured.", "call_func_name": ["com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptBase.getOrCreateNode"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptBase.getOrCreateNode": "Retrieve a node, or create it if not present. If the node does not exist, it is created as the specified nodeType. Non-existent parent nodes are created as the type specified by intermediateNodeType."}]}, {"index": "590", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/ondeploy/scripts/OnDeployScriptBase.java", "methodName": "com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptBase.getOrCreateNode", "methodParameterType": "String#String#", "methodParameterName": "absolutePath#nodeType#", "methodBody": "protected final Node getOrCreateNode(String absolutePath, String nodeType) throws RepositoryException {\n        return getOrCreateNode(absolutePath, JcrConstants.NT_UNSTRUCTURED, nodeType);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve a node, or create it if not present. If the node does not exist, it is created as the specified nodeType. Non-existent parent nodes are created as type nt:unstructured.", "call_func_name": ["com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptBase.getOrCreateNode"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptBase.getOrCreateNode": "Retrieve a node, or create it if not present. If the node does not exist, it is created as the specified nodeType. Non-existent parent nodes are created as the type specified by intermediateNodeType."}]}, {"index": "591", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/ondeploy/scripts/OnDeployScriptBase.java", "methodName": "com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptBase.getOrCreateNode", "methodParameterType": "String#String#String#", "methodParameterName": "absolutePath#intermediateNodeType#nodeType#", "methodBody": "protected final Node getOrCreateNode(String absolutePath, String intermediateNodeType, String nodeType) throws RepositoryException {\n        try {\n            return session.getNode(absolutePath);\n        } catch (PathNotFoundException e) {\n            logger.info(\"Creating node (and missing parents): {}\", absolutePath);\n            return JcrUtil.createPath(absolutePath, intermediateNodeType, nodeType, session, false);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve a node, or create it if not present. If the node does not exist, it is created as the specified nodeType. Non-existent parent nodes are created as the type specified by intermediateNodeType.", "call_func_name": ["javax.jcr.Session.getNode", "org.slf4j.Logger.info", "com.day.cq.commons.jcr.JcrUtil.createPath"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String", "java.lang.String", "javax.jcr.Session", "boolean"]], "passed_comments": "/"}, {"index": "592", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/ondeploy/scripts/OnDeployScriptBase.java", "methodName": "com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptBase.renameProperty", "methodParameterType": "Node#String#String#", "methodParameterName": "node#oldPropertyName#newPropertyName#", "methodBody": "protected final void renameProperty(Node node, String oldPropertyName, String newPropertyName) throws RepositoryException {\n        Resource resource = resourceResolver.getResource(node.getPath());\n        renameProperty(resource, oldPropertyName, newPropertyName);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Rename a property on a node.", "call_func_name": ["javax.jcr.Node.getPath", "org.apache.sling.api.resource.ResourceResolver.getResource", "com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptBase.renameProperty"], "call_func_parameter": [[""], ["java.lang.String"], ["org.apache.sling.api.resource.Resource", "java.lang.String", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptBase.renameProperty": "Rename a property on a resource."}]}, {"index": "593", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/ondeploy/scripts/OnDeployScriptBase.java", "methodName": "com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptBase.renameProperty", "methodParameterType": "Resource#String#String#", "methodParameterName": "resource#oldPropertyName#newPropertyName#", "methodBody": "protected final void renameProperty(Resource resource, String oldPropertyName, String newPropertyName) {\n        ModifiableValueMap properties = resource.adaptTo(ModifiableValueMap.class);\n        if (properties.containsKey(oldPropertyName)) {\n            logger.info(\"Renaming property '{}' to '{}' on resource: {}\", oldPropertyName, newPropertyName, resource.getPath());\n            properties.put(newPropertyName, properties.get(oldPropertyName));\n            properties.remove(oldPropertyName);\n        } else {\n            logger.debug(\"Property '{}' does not exist on resource: {}\", oldPropertyName, resource.getPath());\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Rename a property on a resource.", "call_func_name": ["org.apache.sling.api.resource.Resource.adaptTo", "org.apache.sling.api.resource.ModifiableValueMap.containsKey", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.info", "org.apache.sling.api.resource.ModifiableValueMap.get", "org.apache.sling.api.resource.ModifiableValueMap.put", "org.apache.sling.api.resource.ModifiableValueMap.remove", "org.slf4j.Logger.debug"], "call_func_parameter": [["java.lang.Class"], ["java.lang.Object"], [""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.Object"], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "594", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/ondeploy/scripts/OnDeployScriptBase.java", "methodName": "com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptBase.removeResource", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "protected final void removeResource(String path) throws RepositoryException {\n        Resource resource = resourceResolver.getResource(path);\n        if (resource != null) {\n            logger.info(\"Deleting node at {}\", path);\n            session.removeItem(path);\n        } else {\n            logger.info(\"Node at {} has already been removed\", path);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Remove node at a given path.", "call_func_name": ["org.apache.sling.api.resource.ResourceResolver.getResource", "org.slf4j.Logger.info", "javax.jcr.Session.removeItem"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.Object"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "595", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/ondeploy/scripts/OnDeployScriptBase.java", "methodName": "com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptBase.searchAndUpdateResourceType", "methodParameterType": "String#String#", "methodParameterName": "oldResourceType#newResourceType#", "methodBody": "protected final void searchAndUpdateResourceType(String oldResourceType, String newResourceType) throws RepositoryException {\n        Map<String, String> map = new HashMap<>();\n        map.put(\"p.limit\", \"-1\");\n        map.put(\"path\", \"/content\");\n        map.put(\"1_property\", SLING_RESOURCE_TYPE);\n        map.put(\"1_property.value\", oldResourceType);\n\n        logger.info(\"Finding all nodes under /content with resource type: {}\", oldResourceType);\n\n        final CloseableQueryBuilder queryBuilder = resourceResolver.adaptTo(CloseableQueryBuilder.class);\n        if (queryBuilder != null) {\n            try (CloseableQuery query = queryBuilder.createQuery(PredicateGroup.create(map), session)) {\n                SearchResult result = query.getResult();\n                Iterator<Node> nodeItr = result.getNodes();\n                if (nodeItr.hasNext()) {\n                    while (nodeItr.hasNext()) {\n                        Node node = nodeItr.next();\n                        updateResourceType(node, newResourceType);\n                    }\n                } else {\n                    logger.info(\"No nodes found with resource type: {}\", oldResourceType);\n                }\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#TryStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)TryStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Searches for the current sling:resourceType under /content and replaces any nodes it finds with the newResourceType.", "call_func_name": ["java.util.HashMap.<init>", "java.util.Map.put", "org.slf4j.Logger.info", "org.apache.sling.api.resource.ResourceResolver.adaptTo", "com.day.cq.search.PredicateGroup.create", "com.adobe.acs.commons.search.CloseableQueryBuilder.createQuery", "com.adobe.acs.commons.search.CloseableQuery.getResult", "com.day.cq.search.result.SearchResult.getNodes", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptBase.updateResourceType", "com.adobe.acs.commons.search.CloseableQuery.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.Object"], ["java.lang.Class"], ["java.util.Map"], ["com.day.cq.search.PredicateGroup", "javax.jcr.Session"], [""], [""], [""], [""], ["javax.jcr.Node", "java.lang.String"], [""], ["java.lang.Throwable"]], "passed_comments": [{"com.adobe.acs.commons.search.CloseableQueryBuilder.createQuery": "Create a closeable query around the provided predicate group."}, {"com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptBase.updateResourceType": "Update the sling:resourceType of a node."}]}, {"index": "596", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/ondeploy/scripts/OnDeployScriptBase.java", "methodName": "com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptBase.updateResourceType", "methodParameterType": "Node#String#", "methodParameterName": "node#resourceType#", "methodBody": "protected final void updateResourceType(Node node, String resourceType) throws RepositoryException {\n        boolean hasResourceType = node.hasProperty(SLING_RESOURCE_TYPE);\n        if (!hasResourceType || !resourceType.equals(node.getProperty(SLING_RESOURCE_TYPE).getString())) {\n            logger.info(\"Updating node at {} to resource type: {}\", node.getPath(), resourceType);\n            node.setProperty(SLING_RESOURCE_TYPE, resourceType);\n        } else {\n            logger.info(\"Node at {} is already resource type: {}\", node.getPath(), resourceType);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Update the sling:resourceType of a node.", "call_func_name": ["javax.jcr.Node.hasProperty", "javax.jcr.Node.getProperty", "javax.jcr.Property.getString", "java.lang.String.equals", "javax.jcr.Node.getPath", "org.slf4j.Logger.info", "javax.jcr.Node.setProperty"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], [""], ["java.lang.Object"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "597", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/redirectmaps/models/RedirectMapModel.java", "methodName": "com.adobe.acs.commons.redirectmaps.models.RedirectMapModel.getInvalidEntries", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<MapEntry> getInvalidEntries() throws IOException {\n    log.trace(\"getInvalidEntries\");\n    List<MapEntry> invalidEntries = new ArrayList<>();\n    if (redirects != null) {\n      List<MapEntry> entries = getEntries();\n\n      invalidEntries.addAll(entries.stream().filter(e -> !e.isValid()).collect(Collectors.toList()));\n      log.debug(\"Found {} invalid entries\", invalidEntries.size());\n    }\n    return invalidEntries;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#PrefixExpression#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get all of the entries from the cq:Pages and dam:Assets which contain whitespace in their vanity URL.", "call_func_name": ["org.slf4j.Logger.trace", "java.util.ArrayList.<init>", "com.adobe.acs.commons.redirectmaps.models.RedirectMapModel.getEntries", "java.util.List.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect", "java.util.List.addAll", "java.util.List.size", "java.lang.Integer.valueOf", "org.slf4j.Logger.debug"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], [""], ["java.util.function.Predicate"], [""], ["java.util.stream.Collector"], ["java.util.Collection"], [""], ["int"], ["java.lang.String", "java.lang.Object"]], "passed_comments": "/"}, {"index": "598", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/redirectmaps/models/RedirectMapModel.java", "methodName": "com.adobe.acs.commons.redirectmaps.models.RedirectMapModel.getRedirectMap", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRedirectMap() throws IOException {\n    log.debug(\"Retrieving redirect map from {}\", redirectMap);\n\n    StringBuilder sb = new StringBuilder();\n\n    if (redirectMap != null) {\n      log.debug(\"Loading RedirectMap file from {}\", redirectMap);\n      InputStream is = redirectMap.adaptTo(InputStream.class);\n      if (is != null) {\n        sb.append(\"# Redirect Map File\\n\");\n        sb.append(IOUtils.toString(is, StandardCharsets.UTF_8));\n      } else {\n        log.debug(\"Unable to get input stream from redirect file: {}\", redirectMap);\n      }\n    } else {\n      log.debug(\"No redirect map specified\");\n    }\n\n    if (redirects != null) {\n      for (RedirectConfigModel config : redirects) {\n        writeEntries(config, sb);\n      }\n    } else {\n      log.debug(\"No redirect configurations specified\");\n    }\n    return sb.toString();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the contents of the RedirectMap as a String", "call_func_name": ["org.slf4j.Logger.debug", "java.lang.StringBuilder.<init>", "org.apache.sling.api.resource.Resource.adaptTo", "java.lang.StringBuilder.append", "org.apache.commons.io.IOUtils.toString", "org.slf4j.Logger.debug", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.adobe.acs.commons.redirectmaps.models.RedirectMapModel.writeEntries", "java.lang.StringBuilder.toString"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], [""], ["java.lang.Class"], ["java.lang.String"], ["java.io.InputStream", "java.nio.charset.Charset"], ["java.lang.String"], [""], [""], [""], ["com.adobe.acs.commons.redirectmaps.models.RedirectConfigModel", "java.lang.StringBuilder"], [""]], "passed_comments": "/"}, {"index": "599", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/redirectmaps/models/RedirectConfigModel.java", "methodName": "com.adobe.acs.commons.redirectmaps.models.RedirectConfigModel.getDomain", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Inject\n    String getDomain();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets the domain for mapping the request", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "600", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/redirectmaps/models/RedirectConfigModel.java", "methodName": "com.adobe.acs.commons.redirectmaps.models.RedirectConfigModel.getPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Inject\n    String getPath();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets the path under which to search for items to check for the vanity property", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "601", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/redirectmaps/models/RedirectConfigModel.java", "methodName": "com.adobe.acs.commons.redirectmaps.models.RedirectConfigModel.getProperty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Inject\n    String getProperty();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets the property to use for the vanity paths", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "602", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/redirectmaps/models/RedirectConfigModel.java", "methodName": "com.adobe.acs.commons.redirectmaps.models.RedirectConfigModel.getProtocol", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Inject\n    String getProtocol();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets the protocol (http or https) for mapping the request", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "603", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/redirectmaps/models/RedirectConfigModel.java", "methodName": "com.adobe.acs.commons.redirectmaps.models.RedirectConfigModel.getResource", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Self\n    Resource getResource();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The resource for this configurations", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "604", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/redirectmaps/impl/FakeSlingHttpServletRequest.java", "methodName": "com.adobe.acs.commons.redirectmaps.impl.FakeSlingHttpServletRequest.isRequestedSessionIdFromUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    @Deprecated    \n    public boolean isRequestedSessionIdFromUrl() {\n        return false;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "605", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/redirectmaps/impl/FakeSlingHttpServletRequest.java", "methodName": "com.adobe.acs.commons.redirectmaps.impl.FakeSlingHttpServletRequest.getRealPath", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "@Override\n    @Deprecated\n    public String getRealPath(String path) {\n        return null;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "606", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManagerFactory.java", "methodName": "com.adobe.acs.commons.fam.ActionManagerFactory.createTaskManager", "methodParameterType": "String#ResourceResolver#int#", "methodParameterName": "name#resourceResolver#saveInterval#", "methodBody": "public ActionManager createTaskManager(String name, ResourceResolver resourceResolver, int saveInterval) throws LoginException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Creates an ActionManager instead with the provided name and JCR context provided bu the resourceResolver.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "607", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManagerFactory.java", "methodName": "com.adobe.acs.commons.fam.ActionManagerFactory.createTaskManager", "methodParameterType": "String#ResourceResolver#int#int#", "methodParameterName": "name#resourceResolver#saveInterval#priority#", "methodBody": "public ActionManager createTaskManager(String name, ResourceResolver resourceResolver, int saveInterval, int priority) throws LoginException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Creates an ActionManager instead with the provided name and JCR context provided bu the resourceResolver.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "608", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManagerFactory.java", "methodName": "com.adobe.acs.commons.fam.ActionManagerFactory.getActionManager", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public ActionManager getActionManager(String name);", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Gets the named ActionManager from the ActionManagerFactory. The name corresponds to the name provided in ActionManagerFactory.createTaskManager(..)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "609", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManagerFactory.java", "methodName": "com.adobe.acs.commons.fam.ActionManagerFactory.hasActionManager", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public boolean hasActionManager(String name);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Checks if the ActionManagerFactory has a registered ActionManager with the provided name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "610", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManagerFactory.java", "methodName": "com.adobe.acs.commons.fam.ActionManagerFactory.purge", "methodParameterType": "ActionManager#", "methodParameterName": "manager#", "methodBody": "public void purge(ActionManager manager);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Remove a specific manager by its object reference", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "611", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManager.java", "methodName": "com.adobe.acs.commons.fam.ActionManager.withQueryResults", "methodParameterType": "String#String#CheckedBiConsumer<ResourceResolver,String>#CheckedBiFunction<ResourceResolver,String,Boolean>#", "methodParameterName": "queryStatement#language#callback#filters#", "methodBody": "int withQueryResults(final String queryStatement, final String language, final CheckedBiConsumer<ResourceResolver, String> callback, final CheckedBiFunction<ResourceResolver, String, Boolean>... filters) throws RepositoryException, PersistenceException, Exception;", "AST": "Javadoc#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Schedule an activity to occur for every node found by a given query. Optionally, programmatic filters can be used to ignore query results that are not of interest to the activity.  These filters can usually take on more complex logic perform faster than having the query engine do the same.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "612", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManager.java", "methodName": "com.adobe.acs.commons.fam.ActionManager.deferredWithResolver", "methodParameterType": "CheckedConsumer<ResourceResolver>#", "methodParameterName": "action#", "methodBody": "void deferredWithResolver(final CheckedConsumer<ResourceResolver> action);", "AST": "Javadoc#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Perform action at some later time using a provided pooled resolver", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "613", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManager.java", "methodName": "com.adobe.acs.commons.fam.ActionManager.withResolver", "methodParameterType": "CheckedConsumer<ResourceResolver>#", "methodParameterName": "action#", "methodBody": "void withResolver(CheckedConsumer<ResourceResolver> action) throws Exception;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Perform action right now using a provided pooled resolver", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "614", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManager.java", "methodName": "com.adobe.acs.commons.fam.ActionManager.cancel", "methodParameterType": "boolean#", "methodParameterName": "useForce#", "methodBody": "void cancel(boolean useForce);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Cancel all work scheduled using this action manager.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "615", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManager.java", "methodName": "com.adobe.acs.commons.fam.ActionManager.onSuccess", "methodParameterType": "CheckedConsumer<ResourceResolver>#", "methodParameterName": "successTask#", "methodBody": "void onSuccess(CheckedConsumer<ResourceResolver> successTask);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Register a handler to be fired when the work has completed with no errors.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "616", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManager.java", "methodName": "com.adobe.acs.commons.fam.ActionManager.onFailure", "methodParameterType": "CheckedBiConsumer<List<Failure>,ResourceResolver>#", "methodParameterName": "failureTask#", "methodBody": "void onFailure(CheckedBiConsumer<List<Failure>, ResourceResolver> failureTask);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Register a handler to be fired when the work has completed and there was at least one error.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "617", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManager.java", "methodName": "com.adobe.acs.commons.fam.ActionManager.onFinish", "methodParameterType": "Runnable#", "methodParameterName": "finishHandler#", "methodBody": "void onFinish(Runnable finishHandler);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Register a handler to be fired when the work is completed, successfully or not.   Note: These handlers are called after the success/fail handlers.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "618", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManager.java", "methodName": "com.adobe.acs.commons.fam.ActionManager.isComplete", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isComplete();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Have all actions completed?", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "619", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManager.java", "methodName": "com.adobe.acs.commons.fam.ActionManager.closeAllResolvers", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void closeAllResolvers();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Forcefully terminate open resolvers, should only be performed by the factory If using withQueryResults or deferredWithResolvers, use addCleanupTask instead.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "620", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManager.java", "methodName": "com.adobe.acs.commons.fam.ActionManager.getFailureList", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<Failure> getFailureList();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "List all failed actions", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "621", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManager.java", "methodName": "com.adobe.acs.commons.fam.ActionManager.getFailures", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<CompositeData> getFailures() throws OpenDataException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "List all failed actions for mbean reporting", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "622", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManager.java", "methodName": "com.adobe.acs.commons.fam.ActionManager.getStatistics", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "CompositeData getStatistics() throws OpenDataException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Provide statistics row for mbean reporting", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "623", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManager.java", "methodName": "com.adobe.acs.commons.fam.ActionManager.setCurrentItem", "methodParameterType": "String#", "methodParameterName": "item#", "methodBody": "void setCurrentItem(String item);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Note the name or path of the item currently being processed This is particularly useful for error reporting", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "624", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManager.java", "methodName": "com.adobe.acs.commons.fam.ActionManager.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return The name set on this action manager at the time of its creation", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "625", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManager.java", "methodName": "com.adobe.acs.commons.fam.ActionManager.getAddedCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getAddedCount();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return The number of items of work added for processing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "626", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManager.java", "methodName": "com.adobe.acs.commons.fam.ActionManager.getSuccessCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getSuccessCount();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return The number of items of work that were successfully processed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "627", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManager.java", "methodName": "com.adobe.acs.commons.fam.ActionManager.getErrorCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getErrorCount();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return The number of items of work that were unsuccessfully processed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "628", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManager.java", "methodName": "com.adobe.acs.commons.fam.ActionManager.getCompletedCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getCompletedCount();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return The number of items of work that were processed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "629", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ActionManager.java", "methodName": "com.adobe.acs.commons.fam.ActionManager.getRemainingCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getRemainingCount();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return The number of items of work that have been added but have not yet been processed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "630", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ThrottledTaskRunner.java", "methodName": "com.adobe.acs.commons.fam.ThrottledTaskRunner.waitForLowCpuAndLowMemory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void waitForLowCpuAndLowMemory() throws InterruptedException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Waits for CPU and Memory usage to fall below an acceptable threshold. NEVER call this inside a critical section as it will result in sluggish lock contention. Only call this BEFORE starting a critical section.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "631", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ThrottledTaskRunner.java", "methodName": "com.adobe.acs.commons.fam.ThrottledTaskRunner.scheduleWork", "methodParameterType": "Runnable#", "methodParameterName": "work#", "methodBody": "void scheduleWork(Runnable work);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Schedule some kind of work to run in the future using the internal thread pool. The work will be throttled according to the CPU/Memory settings", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "632", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ThrottledTaskRunner.java", "methodName": "com.adobe.acs.commons.fam.ThrottledTaskRunner.scheduleWork", "methodParameterType": "Runnable#CancelHandler#", "methodParameterName": "work#cancelHandler#", "methodBody": "void scheduleWork(Runnable work, CancelHandler cancelHandler);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Schedule some kind of work to run in the future using the internal thread pool. The work will be throttled according to the CPU/Memory settings.  This action can be canceled at any time.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "633", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ThrottledTaskRunner.java", "methodName": "com.adobe.acs.commons.fam.ThrottledTaskRunner.scheduleWork", "methodParameterType": "Runnable#int#", "methodParameterName": "work#priority#", "methodBody": "void scheduleWork(Runnable work, int priority);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Schedule some kind of work to run in the future using the internal thread pool. The work will be throttled according to the CPU/Memory settings", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "634", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ThrottledTaskRunner.java", "methodName": "com.adobe.acs.commons.fam.ThrottledTaskRunner.scheduleWork", "methodParameterType": "Runnable#CancelHandler#int#", "methodParameterName": "work#cancelHandler#priority#", "methodBody": "void scheduleWork(Runnable work, CancelHandler cancelHandler, int priority);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Schedule some kind of work to run in the future using the internal thread pool. The work will be throttled according to the CPU/Memory settings.  This action can be canceled at any time.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "635", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ThrottledTaskRunner.java", "methodName": "com.adobe.acs.commons.fam.ThrottledTaskRunner.logCompletion", "methodParameterType": "long#long#long#long#boolean#Throwable#", "methodParameterName": "created#started#executed#finished#successful#error#", "methodBody": "void logCompletion(long created, long started, long executed, long finished, boolean successful, Throwable error);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Record statistics", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "636", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/ThrottledTaskRunner.java", "methodName": "com.adobe.acs.commons.fam.ThrottledTaskRunner.getMaxThreads", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getMaxThreads();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get number of maximum threads supported by this thread manager", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "637", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/actions/Filters.java", "methodName": "com.adobe.acs.commons.fam.actions.Filters.filterMatching", "methodParameterType": "String#", "methodParameterName": "glob#", "methodBody": "public static final CheckedBiFunction<ResourceResolver, String, Boolean> filterMatching(final String glob) {\n        return (ResourceResolver r, String path) -> path.matches(glob);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true of glob matches provided path", "call_func_name": ["com.adobe.acs.commons.functions.CheckedBiFunction.apply"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "638", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/actions/Filters.java", "methodName": "com.adobe.acs.commons.fam.actions.Filters.filterNotMatching", "methodParameterType": "String#", "methodParameterName": "glob#", "methodBody": "public static final CheckedBiFunction<ResourceResolver, String, Boolean> filterNotMatching(final String glob) {\n        return filterMatching(glob).andThen(NOT);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns false if glob matches provided path Useful for things like filterOutSubassets", "call_func_name": ["com.adobe.acs.commons.fam.actions.Filters.filterMatching", "com.adobe.acs.commons.functions.CheckedBiFunction.andThen"], "call_func_parameter": [["java.lang.String"], ["com.adobe.acs.commons.functions.CheckedFunction"]], "passed_comments": [{"com.adobe.acs.commons.fam.actions.Filters.filterMatching": "Returns true of glob matches provided path"}, {"com.adobe.acs.commons.functions.CheckedBiFunction.andThen": "Returns a composed function that first applies this function to its input, and then applies the  {@code after} function to the result.If evaluation of either function throws an exception, it is relayed to the caller of the composed function."}]}, {"index": "639", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/actions/ReplicationActions.java", "methodName": "com.adobe.acs.commons.fam.actions.ReplicationActions.activateAll", "methodParameterType": "Replicator#", "methodParameterName": "replicator#", "methodBody": "public static final CheckedBiConsumer<ResourceResolver, String> activateAll(Replicator replicator) {\n        return (ResourceResolver r, String path) -> {\n            nameThread(PREFIX_ACTIVATE + path);\n            replicator.replicate(r.adaptTo(Session.class), ReplicationActionType.ACTIVATE, path);\n        };\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Activate all nodes using default replicators", "call_func_name": ["com.adobe.acs.commons.functions.CheckedBiConsumer.accept"], "call_func_parameter": [["com.day.cq.replication.Replicator"]], "passed_comments": "/"}, {"index": "640", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/actions/ReplicationActions.java", "methodName": "com.adobe.acs.commons.fam.actions.ReplicationActions.activateAllWithOptions", "methodParameterType": "Replicator#ReplicationOptions#", "methodParameterName": "replicator#options#", "methodBody": "public static final CheckedBiConsumer<ResourceResolver, String> activateAllWithOptions(Replicator replicator, final ReplicationOptions options) {\n        return (ResourceResolver r, String path) -> {\n            nameThread(PREFIX_ACTIVATE + path);\n            replicator.replicate(r.adaptTo(Session.class), ReplicationActionType.ACTIVATE, path, options);\n        };\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Activate all nodes using provided options NOTE: If using large batch publishing it is highly recommended to set synchronous to true on the replication options", "call_func_name": ["com.adobe.acs.commons.functions.CheckedBiConsumer.accept"], "call_func_parameter": [["com.day.cq.replication.Replicator", "com.day.cq.replication.ReplicationOptions"]], "passed_comments": "/"}, {"index": "641", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/actions/ReplicationActions.java", "methodName": "com.adobe.acs.commons.fam.actions.ReplicationActions.activateAllWithRoundRobin", "methodParameterType": "Replicator#ReplicationOptions#", "methodParameterName": "replicator#options#", "methodBody": "public static final CheckedBiConsumer<ResourceResolver, String> activateAllWithRoundRobin(final Replicator replicator, final ReplicationOptions... options) {\n        final List<ReplicationOptions> allTheOptions = Arrays.asList(options);\n        final Iterator<ReplicationOptions> roundRobin = new RoundRobin(allTheOptions).iterator();\n        return (ResourceResolver r, String path) -> {\n            nameThread(PREFIX_ACTIVATE + path);\n            replicator.replicate(r.adaptTo(Session.class), ReplicationActionType.ACTIVATE, path, roundRobin.next());\n        };\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(LambdaExpression(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Activate all nodes using provided options NOTE: If using large batch publishing it is highly recommended to set synchronous to true on the replication options", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "642", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/actions/ReplicationActions.java", "methodName": "com.adobe.acs.commons.fam.actions.ReplicationActions.deactivateAll", "methodParameterType": "Replicator#", "methodParameterName": "replicator#", "methodBody": "public static final CheckedBiConsumer<ResourceResolver, String> deactivateAll(final Replicator replicator) {\n        return (ResourceResolver r, String path) -> {\n            nameThread(PREFIX_DEACTIVATE + path);\n            replicator.replicate(r.adaptTo(Session.class), ReplicationActionType.DEACTIVATE, path);\n        };\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deactivate all nodes using default replicators", "call_func_name": ["com.adobe.acs.commons.functions.CheckedBiConsumer.accept"], "call_func_parameter": [["com.day.cq.replication.Replicator"]], "passed_comments": "/"}, {"index": "643", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/actions/ReplicationActions.java", "methodName": "com.adobe.acs.commons.fam.actions.ReplicationActions.deactivateAllWithOptions", "methodParameterType": "Replicator#ReplicationOptions#", "methodParameterName": "replicator#options#", "methodBody": "public static final CheckedBiConsumer<ResourceResolver, String> deactivateAllWithOptions(final Replicator replicator, final ReplicationOptions options) {\n        return (ResourceResolver r, String path) -> {\n            nameThread(PREFIX_DEACTIVATE + path);\n            replicator.replicate(r.adaptTo(Session.class), ReplicationActionType.DEACTIVATE, path, options);\n        };\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deactivate all nodes using provided options", "call_func_name": ["com.adobe.acs.commons.functions.CheckedBiConsumer.accept"], "call_func_parameter": [["com.day.cq.replication.Replicator", "com.day.cq.replication.ReplicationOptions"]], "passed_comments": "/"}, {"index": "644", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/actions/ReplicationActions.java", "methodName": "com.adobe.acs.commons.fam.actions.ReplicationActions.activate", "methodParameterType": "Replicator#String#", "methodParameterName": "replicator#path#", "methodBody": "public static final CheckedConsumer<ResourceResolver> activate(final Replicator replicator, String path) {\n        return res -> activateAll(replicator).accept(res, path);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Activate a single node.", "call_func_name": ["com.adobe.acs.commons.functions.CheckedConsumer.accept"], "call_func_parameter": [["com.day.cq.replication.Replicator", "java.lang.String"]], "passed_comments": "/"}, {"index": "645", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/actions/ReplicationActions.java", "methodName": "com.adobe.acs.commons.fam.actions.ReplicationActions.activateWithOptions", "methodParameterType": "Replicator#String#ReplicationOptions#", "methodParameterName": "replicator#path#options#", "methodBody": "public static final CheckedConsumer<ResourceResolver> activateWithOptions(final Replicator replicator, String path, ReplicationOptions options) {\n        return res -> activateAllWithOptions(replicator, options).accept(res, path);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Activate a single node using provided replication options.", "call_func_name": ["com.adobe.acs.commons.functions.CheckedConsumer.accept"], "call_func_parameter": [["com.day.cq.replication.Replicator", "com.day.cq.replication.ReplicationOptions", "java.lang.String"]], "passed_comments": "/"}, {"index": "646", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/actions/ReplicationActions.java", "methodName": "com.adobe.acs.commons.fam.actions.ReplicationActions.deactivate", "methodParameterType": "Replicator#String#", "methodParameterName": "replicator#path#", "methodBody": "public static final CheckedConsumer<ResourceResolver> deactivate(final Replicator replicator, String path) {\n        return res -> deactivateAll(replicator).accept(res, path);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deactivate a single node.", "call_func_name": ["com.adobe.acs.commons.functions.CheckedConsumer.accept"], "call_func_parameter": [["com.day.cq.replication.Replicator", "java.lang.String"]], "passed_comments": "/"}, {"index": "647", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/actions/ReplicationActions.java", "methodName": "com.adobe.acs.commons.fam.actions.ReplicationActions.deactivateWithOptions", "methodParameterType": "Replicator#String#ReplicationOptions#", "methodParameterName": "replicator#path#options#", "methodBody": "public static final CheckedConsumer<ResourceResolver> deactivateWithOptions(final Replicator replicator, String path, ReplicationOptions options) {\n        return res -> deactivateAllWithOptions(replicator, options).accept(res, path);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deactivate a single node using provided replication options.", "call_func_name": ["com.adobe.acs.commons.functions.CheckedConsumer.accept"], "call_func_parameter": [["com.day.cq.replication.Replicator", "com.day.cq.replication.ReplicationOptions", "java.lang.String"]], "passed_comments": "/"}, {"index": "648", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/actions/Actions.java", "methodName": "com.adobe.acs.commons.fam.actions.Actions.getCurrentActionManager", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static ActionManager getCurrentActionManager() {\n        return currentActionManager.get();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Obtain the current action manager -- this is necessary for additional tracking such as current item", "call_func_name": ["java.lang.ThreadLocal.get"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "649", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/actions/Actions.java", "methodName": "com.adobe.acs.commons.fam.actions.Actions.retryAll", "methodParameterType": "int#long#CheckedBiConsumer<ResourceResolver,String>#", "methodParameterName": "retries#pausePerRetry#action#", "methodBody": "public static final CheckedBiConsumer<ResourceResolver, String> retryAll(final int retries, final long pausePerRetry, final CheckedBiConsumer<ResourceResolver, String> action) {\n        return (ResourceResolver r, String s) -> {\n            int remaining = retries;\n            while (remaining > 0) {\n                try {\n                    action.accept(r, s);\n                    return;\n                } catch (InterruptedException e) {\n                    r.revert();\n                    r.refresh();\n                    LOG.info(\"Timeout reached, aborting work\", e);\n                    throw e;\n                } catch (Throwable e) {\n                    r.revert();\n                    r.refresh();\n                    if (remaining-- <= 0) {\n                        throw e;\n                    } else {\n                        Thread.sleep(pausePerRetry);\n                    }\n                }\n            }\n        };\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#NumberLiteral#InfixExpression#SimpleName#ThrowStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#CatchClause#TryStatement#Block#WhileStatement#Block#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)CatchClause)TryStatement)Block)WhileStatement)Block)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retry provided action a given number of times before giving up and throwing an error. Before each retry attempt, the resource resolver is reverted so when using this it is a good idea to commit from your action directly.", "call_func_name": ["com.adobe.acs.commons.functions.CheckedBiConsumer.accept"], "call_func_parameter": [["int", "com.adobe.acs.commons.functions.CheckedBiConsumer", "long"]], "passed_comments": "/"}, {"index": "650", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/actions/Actions.java", "methodName": "com.adobe.acs.commons.fam.actions.Actions.startSyntheticWorkflows", "methodParameterType": "SyntheticWorkflowModel#SyntheticWorkflowRunner#", "methodParameterName": "model#workflowRunner#", "methodBody": "public static final CheckedBiConsumer<ResourceResolver, String> startSyntheticWorkflows(final SyntheticWorkflowModel model, SyntheticWorkflowRunner workflowRunner) {\n        return (ResourceResolver r, String path) -> {\n            r.adaptTo(Session.class).getWorkspace().getObservationManager().setUserData(\"changedByWorkflowProcess\");\n            nameThread(\"synWf-\" + path);\n            workflowRunner.execute(r,\n                    path,\n                    model,\n                    false,\n                    false);\n        };\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Run nodes through synthetic workflow", "call_func_name": ["com.adobe.acs.commons.functions.CheckedBiConsumer.accept"], "call_func_parameter": [["com.adobe.acs.commons.workflow.synthetic.SyntheticWorkflowRunner", "com.adobe.acs.commons.workflow.synthetic.SyntheticWorkflowModel"]], "passed_comments": "/"}, {"index": "651", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/actions/Actions.java", "methodName": "com.adobe.acs.commons.fam.actions.Actions.retry", "methodParameterType": "int#long#CheckedConsumer<ResourceResolver>#", "methodParameterName": "retries#pausePerRetry#action#", "methodBody": "@SuppressWarnings(\"squid:S3776\")\n    public static final CheckedConsumer<ResourceResolver> retry(final int retries, final long pausePerRetry, final CheckedConsumer<ResourceResolver> action) {\n        return (ResourceResolver r) -> {\n            int remaining = retries;\n            while (remaining > 0) {\n                try {\n                    action.accept(r);\n                    return;\n                } catch (InterruptedException e) {\n                    r.revert();\n                    r.refresh();\n                    LOG.info(\"Timeout reached, aborting work\", e);\n                    throw e;\n                } catch (Error e) {\n                    LOG.info(\"Critical runtime exception \" + e.getMessage(), e);\n                    throw e;                    \n                } catch (Throwable e) {\n                    LOG.info(\"Error commit, retry count is {}. Switch to DEBUG logging to get the full stacktrace\",\n                            remaining);\n                    LOG.debug(\"Error commit, retry count is \" + remaining, e);\n                    r.revert();\n                    r.refresh();\n                    if (--remaining <= 0) {\n                        throw e;\n                    } else {\n                        Thread.sleep(pausePerRetry);\n                    }\n                }\n            }\n        };\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#ThrowStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#CatchClause#TryStatement#Block#WhileStatement#Block#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)CatchClause)TryStatement)Block)WhileStatement)Block)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retry a single action", "call_func_name": ["com.adobe.acs.commons.functions.CheckedConsumer.accept"], "call_func_parameter": [["int", "com.adobe.acs.commons.functions.CheckedConsumer", "long"]], "passed_comments": "/"}, {"index": "652", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/actions/Actions.java", "methodName": "com.adobe.acs.commons.fam.actions.Actions.startSyntheticWorkflow", "methodParameterType": "SyntheticWorkflowModel#String#SyntheticWorkflowRunner#", "methodParameterName": "model#path#workflowRunner#", "methodBody": "public static final CheckedConsumer<ResourceResolver> startSyntheticWorkflow(SyntheticWorkflowModel model, String path, SyntheticWorkflowRunner workflowRunner) {\n        return res -> startSyntheticWorkflows(model, workflowRunner).accept(res, path);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Run a synthetic workflow on a single node", "call_func_name": ["com.adobe.acs.commons.functions.CheckedConsumer.accept"], "call_func_parameter": [["com.adobe.acs.commons.workflow.synthetic.SyntheticWorkflowModel", "com.adobe.acs.commons.workflow.synthetic.SyntheticWorkflowRunner", "java.lang.String"]], "passed_comments": "/"}, {"index": "653", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/actions/AssetActions.java", "methodName": "com.adobe.acs.commons.fam.actions.AssetActions.removeAllRenditionsNamed", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public static final CheckedBiConsumer<ResourceResolver, String> removeAllRenditionsNamed(final String name) {\n        return (ResourceResolver r, String path) -> {\n            nameThread(\"removeRenditions-\" + path);\n            AssetManager assetManager = r.adaptTo(AssetManager.class);\n            Asset asset = assetManager.getAsset(path);\n            for (Iterator<? extends Rendition> renditions = asset.listRenditions(); renditions.hasNext();) {\n                Rendition rendition = renditions.next();\n                if (rendition.getName().equalsIgnoreCase(name)) {\n                    asset.removeRendition(rendition.getName());\n                }\n            }\n        };\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#ForStatement#Block#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)ForStatement)Block)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Remove all renditions with a given name", "call_func_name": ["com.adobe.acs.commons.functions.CheckedBiConsumer.accept"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "654", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/actions/AssetActions.java", "methodName": "com.adobe.acs.commons.fam.actions.AssetActions.removeRenditions", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "public static final CheckedConsumer<ResourceResolver> removeRenditions(String path) {\n        return res -> REMOVE_ALL_RENDITIONS.accept(res, path);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Remove all non-original renditions from an asset.", "call_func_name": ["com.adobe.acs.commons.functions.CheckedConsumer.accept"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "655", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/actions/AssetActions.java", "methodName": "com.adobe.acs.commons.fam.actions.AssetActions.removeRenditionsNamed", "methodParameterType": "String#String#", "methodParameterName": "path#name#", "methodBody": "public static final CheckedConsumer<ResourceResolver> removeRenditionsNamed(String path, String name) {\n        return res -> removeAllRenditionsNamed(name).accept(res, path);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Remove all renditions with a given name", "call_func_name": ["com.adobe.acs.commons.functions.CheckedConsumer.accept"], "call_func_parameter": [["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "656", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/impl/TimedRunnableFuture.java", "methodName": "com.adobe.acs.commons.fam.impl.TimedRunnableFuture.TimedRunnableFuture", "methodParameterType": "Callable#", "methodParameterName": "callable#", "methodBody": "public TimedRunnableFuture(Callable callable) {\n        super(callable);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "657", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/impl/TimedRunnableFuture.java", "methodName": "com.adobe.acs.commons.fam.impl.TimedRunnableFuture.TimedRunnableFuture", "methodParameterType": "Runnable#Object#", "methodParameterName": "runnable#result#", "methodBody": "public TimedRunnableFuture(Runnable runnable, Object result) {\n        super(runnable, result);\n        if (runnable instanceof TimedRunnable) {\n            timedRunnable = (TimedRunnable) runnable;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "658", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/impl/PriorityThreadPoolExecutor.java", "methodName": "com.adobe.acs.commons.fam.impl.PriorityThreadPoolExecutor.PriorityThreadPoolExecutor", "methodParameterType": "int#int#long#TimeUnit#BlockingQueue<Runnable>#", "methodParameterName": "corePoolSize#maximumPoolSize#keepAliveTime#unit#workQueue#", "methodBody": "public PriorityThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,\n            BlockingQueue<Runnable> workQueue) {\n        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "659", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/impl/PriorityThreadPoolExecutor.java", "methodName": "com.adobe.acs.commons.fam.impl.PriorityThreadPoolExecutor.PriorityThreadPoolExecutor", "methodParameterType": "int#int#long#TimeUnit#BlockingQueue<Runnable>#ThreadFactory#", "methodParameterName": "corePoolSize#maximumPoolSize#keepAliveTime#unit#workQueue#threadFactory#", "methodBody": "public PriorityThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,\n            BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory) {\n        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory);\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "660", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/impl/PriorityThreadPoolExecutor.java", "methodName": "com.adobe.acs.commons.fam.impl.PriorityThreadPoolExecutor.PriorityThreadPoolExecutor", "methodParameterType": "int#int#long#TimeUnit#BlockingQueue<Runnable>#RejectedExecutionHandler#", "methodParameterName": "corePoolSize#maximumPoolSize#keepAliveTime#unit#workQueue#handler#", "methodBody": "public PriorityThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,\n            BlockingQueue<Runnable> workQueue, RejectedExecutionHandler handler) {\n        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, handler);\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "661", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/impl/PriorityThreadPoolExecutor.java", "methodName": "com.adobe.acs.commons.fam.impl.PriorityThreadPoolExecutor.PriorityThreadPoolExecutor", "methodParameterType": "int#int#long#TimeUnit#BlockingQueue<Runnable>#ThreadFactory#RejectedExecutionHandler#", "methodParameterName": "corePoolSize#maximumPoolSize#keepAliveTime#unit#workQueue#threadFactory#handler#", "methodBody": "public PriorityThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,\n            BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) {\n        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "662", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/impl/ThrottledTaskRunnerStats.java", "methodName": "com.adobe.acs.commons.fam.impl.ThrottledTaskRunnerStats.getCpuLevel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "double getCpuLevel() throws InstanceNotFoundException, ReflectionException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "@return the % of CPU being utilized.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "663", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/impl/ThrottledTaskRunnerStats.java", "methodName": "com.adobe.acs.commons.fam.impl.ThrottledTaskRunnerStats.getMemoryUsage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "double getMemoryUsage();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The % of memory being utilized.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "664", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/impl/ThrottledTaskRunnerStats.java", "methodName": "com.adobe.acs.commons.fam.impl.ThrottledTaskRunnerStats.getMaxCpu", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "double getMaxCpu();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the OSGi configured max allowed CPU utilization.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "665", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/impl/ThrottledTaskRunnerStats.java", "methodName": "com.adobe.acs.commons.fam.impl.ThrottledTaskRunnerStats.getMaxHeap", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "double getMaxHeap();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the OSGi configured max allowed Memory (heap) utilization.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "666", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/impl/ThrottledTaskRunnerStats.java", "methodName": "com.adobe.acs.commons.fam.impl.ThrottledTaskRunnerStats.getMaxThreads", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getMaxThreads();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the max number of threads ThrottledTaskRunner will use to execute the work.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "667", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/impl/TimedRunnable.java", "methodName": "com.adobe.acs.commons.fam.impl.TimedRunnable.run", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    @SuppressWarnings(\"squid:S1181\")\n    public void run() {\n        if (cancelHandler.isPresent() && cancelHandler.get().isCancelled()) {\n            return;\n        }\n        final Thread thisThread = Thread.currentThread();\n        final Semaphore timerSemaphore = new Semaphore(0);\n\n        Thread watchDog = new Thread(watchThread(thisThread, timerSemaphore));\n\n        boolean successful = false;\n        Throwable error = null;\n        try {\n            started = System.currentTimeMillis();\n            runner.waitForLowCpuAndLowMemory();\n            executed = System.currentTimeMillis();\n            if (timeout > 0) {\n                watchDog.start();\n            }\n            cancelHandler.ifPresent(h->h.trackActiveWork(thisThread));\n            work.run();\n            finished = System.currentTimeMillis();\n            cancelHandler.ifPresent(h->h.untrackActiveWork(thisThread));\n            timerSemaphore.release();\n            successful = true;\n        } catch (Throwable ex) {\n            finished = System.currentTimeMillis();\n            cancelHandler.ifPresent(h->h.untrackActiveWork(thisThread));\n            LOG.error(\"Task encountered an uncaught exception\", ex);\n        }\n        runner.logCompletion(created, started, executed, finished, successful, error);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Run the underlying runnable but only give it a fixed duration before throwing an interruption", "call_func_name": ["java.util.Optional.isPresent", "java.util.Optional.get", "com.adobe.acs.commons.fam.CancelHandler.isCancelled", "java.lang.Thread.currentThread", "java.util.concurrent.Semaphore.<init>", "com.adobe.acs.commons.fam.impl.TimedRunnable.watchThread", "java.lang.Thread.<init>", "java.lang.System.currentTimeMillis", "com.adobe.acs.commons.fam.ThrottledTaskRunner.waitForLowCpuAndLowMemory", "java.lang.Thread.start", "java.util.function.Consumer.accept", "java.util.Optional.ifPresent", "java.lang.Runnable.run", "java.util.concurrent.Semaphore.release", "org.slf4j.Logger.error", "com.adobe.acs.commons.fam.ThrottledTaskRunner.logCompletion"], "call_func_parameter": [[""], [""], [""], [""], ["int"], ["java.lang.Thread", "java.util.concurrent.Semaphore"], ["java.lang.Runnable"], [""], [""], [""], ["java.lang.Thread"], ["java.util.function.Consumer"], [""], [""], ["java.lang.String", "java.lang.Throwable"], ["long", "long", "long", "long", "boolean", "java.lang.Throwable"]], "passed_comments": [{"com.adobe.acs.commons.fam.ThrottledTaskRunner.waitForLowCpuAndLowMemory": "Waits for CPU and Memory usage to fall below an acceptable threshold. NEVER call this inside a critical section as it will result in sluggish lock contention. Only call this BEFORE starting a critical section."}, {"com.adobe.acs.commons.fam.ThrottledTaskRunner.logCompletion": "Record statistics"}]}, {"index": "668", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/impl/ReusableResolver.java", "methodName": "com.adobe.acs.commons.fam.impl.ReusableResolver.getResolver", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ResourceResolver getResolver() {\n        return resolver;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the resolver", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "669", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/Failure.java", "methodName": "com.adobe.acs.commons.fam.Failure.getNodePath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getNodePath() {\n        return nodePath;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the nodePath", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "670", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/Failure.java", "methodName": "com.adobe.acs.commons.fam.Failure.setNodePath", "methodParameterType": "String#", "methodParameterName": "nodePath#", "methodBody": "public void setNodePath(String nodePath) {\n        this.nodePath = nodePath;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param nodePath the nodePath to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "671", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/Failure.java", "methodName": "com.adobe.acs.commons.fam.Failure.getException", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Exception getException() {\n        return exception;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the exception", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "672", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/Failure.java", "methodName": "com.adobe.acs.commons.fam.Failure.setException", "methodParameterType": "Exception#", "methodParameterName": "exception#", "methodBody": "public void setException(Exception exception) {\n        this.exception = exception;\n        if (exception != null) {\n            this.error = exception.getMessage();\n            this.stackTrace = ExceptionUtils.getStackTrace(exception);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@param exception the exception to set", "call_func_name": ["java.lang.Exception.getMessage", "org.apache.commons.lang3.exception.ExceptionUtils.getStackTrace"], "call_func_parameter": [[""], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "673", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/fam/Failure.java", "methodName": "com.adobe.acs.commons.fam.Failure.getTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Calendar getTime() {\n        return failedAt;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the time the failure occurred.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "674", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/models/injectors/impl/InjectorUtils.java", "methodName": "com.adobe.acs.commons.models.injectors.impl.InjectorUtils.getComponentContext", "methodParameterType": "Object#", "methodParameterName": "adaptable#", "methodBody": "public static ComponentContext getComponentContext(Object adaptable) {\n        if (adaptable instanceof SlingHttpServletRequest) {\n            SlingHttpServletRequest request = ((SlingHttpServletRequest) adaptable);\n\n            return WCMUtils.getComponentContext(request);\n        }\n        // ComponentContext is not reachable from Resource\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the current component context.", "call_func_name": ["com.day.cq.wcm.commons.WCMUtils.getComponentContext"], "call_func_parameter": [["javax.servlet.ServletRequest"]], "passed_comments": "/"}, {"index": "675", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/models/injectors/impl/InjectorUtils.java", "methodName": "com.adobe.acs.commons.models.injectors.impl.InjectorUtils.getCurrentPage", "methodParameterType": "Object#", "methodParameterName": "adaptable#", "methodBody": "public static Page getCurrentPage(Object adaptable) {\n        ComponentContext context = getComponentContext(adaptable);\n\n        return (context != null) ? context.getPage() : null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the current page.", "call_func_name": ["com.adobe.acs.commons.models.injectors.impl.InjectorUtils.getComponentContext", "com.day.cq.wcm.api.components.ComponentContext.getPage"], "call_func_parameter": [["java.lang.Object"], [""]], "passed_comments": [{"com.adobe.acs.commons.models.injectors.impl.InjectorUtils.getComponentContext": "Get the current component context."}]}, {"index": "676", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/models/injectors/impl/InjectorUtils.java", "methodName": "com.adobe.acs.commons.models.injectors.impl.InjectorUtils.getCurrentDesign", "methodParameterType": "Object#", "methodParameterName": "adaptable#", "methodBody": "public static Design getCurrentDesign(Object adaptable) {\n        Page currentPage = getCurrentPage(adaptable);\n        Designer designer = getDesigner(adaptable);\n\n        if (currentPage != null && designer != null) {\n            return designer.getDesign(currentPage);\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the current design.", "call_func_name": ["com.adobe.acs.commons.models.injectors.impl.InjectorUtils.getCurrentPage", "com.adobe.acs.commons.models.injectors.impl.InjectorUtils.getDesigner", "com.day.cq.wcm.api.designer.Designer.getDesign"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"], ["com.day.cq.wcm.api.Page"]], "passed_comments": [{"com.adobe.acs.commons.models.injectors.impl.InjectorUtils.getCurrentPage": "Get the current page."}]}, {"index": "677", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/models/injectors/impl/InjectorUtils.java", "methodName": "com.adobe.acs.commons.models.injectors.impl.InjectorUtils.getCurrentStyle", "methodParameterType": "Object#", "methodParameterName": "adaptable#", "methodBody": "public static Style getCurrentStyle(Object adaptable) {\n        Design currentDesign = getCurrentDesign(adaptable);\n        ComponentContext componentContext = getComponentContext(adaptable);\n\n        if (currentDesign != null && componentContext != null) {\n            return currentDesign.getStyle(componentContext.getCell());\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the current style.", "call_func_name": ["com.adobe.acs.commons.models.injectors.impl.InjectorUtils.getCurrentDesign", "com.adobe.acs.commons.models.injectors.impl.InjectorUtils.getComponentContext", "com.day.cq.wcm.api.components.ComponentContext.getCell", "com.day.cq.wcm.api.designer.Design.getStyle"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"], [""], ["com.day.cq.wcm.api.designer.Cell"]], "passed_comments": [{"com.adobe.acs.commons.models.injectors.impl.InjectorUtils.getCurrentDesign": "Get the current design."}, {"com.adobe.acs.commons.models.injectors.impl.InjectorUtils.getComponentContext": "Get the current component context."}]}, {"index": "678", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/models/injectors/impl/InjectorUtils.java", "methodName": "com.adobe.acs.commons.models.injectors.impl.InjectorUtils.getSession", "methodParameterType": "Object#", "methodParameterName": "adaptable#", "methodBody": "public static Session getSession(Object adaptable) {\n        ResourceResolver resolver = getResourceResolver(adaptable);\n\n        return resolver != null ? resolver.adaptTo(Session.class) : null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#NullLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the session.", "call_func_name": ["com.adobe.acs.commons.models.injectors.impl.InjectorUtils.getResourceResolver", "org.apache.sling.api.resource.ResourceResolver.adaptTo"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Class"]], "passed_comments": "/"}, {"index": "679", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/models/injectors/impl/InjectorUtils.java", "methodName": "com.adobe.acs.commons.models.injectors.impl.InjectorUtils.getXssApi", "methodParameterType": "Object#", "methodParameterName": "adaptable#", "methodBody": "public static XSSAPI getXssApi(Object adaptable) {\n        if (adaptable instanceof SlingHttpServletRequest) {\n            SlingHttpServletRequest request = (SlingHttpServletRequest) adaptable;\n\n            return request.adaptTo(XSSAPI.class);\n        }\n        // otherwise will fetch generic XSSAPI from OSGiServiceInjector\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the XSS API.", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.adaptTo"], "call_func_parameter": [["java.lang.Class"]], "passed_comments": "/"}, {"index": "680", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/models/injectors/impl/SharedValueMapValueInjector.java", "methodName": "com.adobe.acs.commons.models.injectors.impl.SharedValueMapValueInjector.getSharedProperties", "methodParameterType": "Page#Resource#", "methodParameterName": "pageRoot#resource#", "methodBody": "protected ValueMap getSharedProperties(Page pageRoot, Resource resource) {\n        String sharedPropsPath = pageRoot.getPath() + \"/\" + JcrConstants.JCR_CONTENT + \"/\" + SharedComponentProperties.NN_SHARED_COMPONENT_PROPERTIES + \"/\" + resource.getResourceType();\n        Resource sharedPropsResource = resource.getResourceResolver().getResource(sharedPropsPath);\n        return sharedPropsResource != null ? sharedPropsResource.getValueMap() : ValueMapDecorator.EMPTY;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get shared properties ValueMap the current resource.", "call_func_name": ["java.lang.StringBuilder.<init>", "com.day.cq.wcm.api.Page.getPath", "java.lang.StringBuilder.append", "org.apache.sling.api.resource.Resource.getResourceType", "java.lang.StringBuilder.toString", "org.apache.sling.api.resource.Resource.getResourceResolver", "org.apache.sling.api.resource.ResourceResolver.getResource", "org.apache.sling.api.resource.Resource.getValueMap"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "681", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/models/injectors/impl/SharedValueMapValueInjector.java", "methodName": "com.adobe.acs.commons.models.injectors.impl.SharedValueMapValueInjector.getGlobalProperties", "methodParameterType": "Page#Resource#", "methodParameterName": "pageRoot#resource#", "methodBody": "protected ValueMap getGlobalProperties(Page pageRoot, Resource resource) {\n        String globalPropsPath = pageRoot.getPath() + \"/\" + JcrConstants.JCR_CONTENT + \"/\" + SharedComponentProperties.NN_GLOBAL_COMPONENT_PROPERTIES;\n        Resource globalPropsResource = resource.getResourceResolver().getResource(globalPropsPath);\n        return globalPropsResource != null ? globalPropsResource.getValueMap() : ValueMapDecorator.EMPTY;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#QualifiedName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get global properties ValueMap for the current resource.", "call_func_name": ["java.lang.StringBuilder.<init>", "com.day.cq.wcm.api.Page.getPath", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.sling.api.resource.Resource.getResourceResolver", "org.apache.sling.api.resource.ResourceResolver.getResource", "org.apache.sling.api.resource.Resource.getValueMap"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "682", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/models/injectors/impl/SharedValueMapValueInjector.java", "methodName": "com.adobe.acs.commons.models.injectors.impl.SharedValueMapValueInjector.getMergedProperties", "methodParameterType": "Page#Resource#", "methodParameterName": "pageRoot#resource#", "methodBody": "protected ValueMap getMergedProperties(Page pageRoot, Resource resource) {\n        Map<String, Object> mergedProperties = new HashMap<String, Object>();\n\n        mergedProperties.putAll(getGlobalProperties(pageRoot, resource));\n        mergedProperties.putAll(getSharedProperties(pageRoot, resource));\n        mergedProperties.putAll(resource.getValueMap());\n\n        return new ValueMapDecorator(mergedProperties);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get merged properties ValueMap for the current resource.", "call_func_name": ["java.util.HashMap.<init>", "com.adobe.acs.commons.models.injectors.impl.SharedValueMapValueInjector.getGlobalProperties", "java.util.Map.putAll", "com.adobe.acs.commons.models.injectors.impl.SharedValueMapValueInjector.getSharedProperties", "org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.wrappers.ValueMapDecorator.<init>"], "call_func_parameter": [[""], ["com.day.cq.wcm.api.Page", "org.apache.sling.api.resource.Resource"], ["java.util.Map"], ["com.day.cq.wcm.api.Page", "org.apache.sling.api.resource.Resource"], [""], ["java.util.Map"]], "passed_comments": [{"com.adobe.acs.commons.models.injectors.impl.SharedValueMapValueInjector.getGlobalProperties": "Get global properties ValueMap for the current resource."}, {"com.adobe.acs.commons.models.injectors.impl.SharedValueMapValueInjector.getSharedProperties": "Get shared properties ValueMap the current resource."}]}, {"index": "683", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/hc/impl/HealthCheckStatusEmailer.java", "methodName": "com.adobe.acs.commons.hc.impl.HealthCheckStatusEmailer.sendEmail", "methodParameterType": "List<HealthCheckExecutionResult>#List<HealthCheckExecutionResult>#long#", "methodParameterName": "success#failure#timeTaken#", "methodBody": "@SuppressWarnings(\"squid:S1192\")\n    protected final void sendEmail(final List<HealthCheckExecutionResult> success, final List<HealthCheckExecutionResult> failure, final long timeTaken) {\n        final ProductInfo[] productInfos = productInfoService.getInfos();\n        final String hostname = getHostname();\n\n        final Map<String, String> emailParams = new HashMap<>();\n        emailParams.put(\"subject\", String.format(\"%s [ %d Failures ] [ %d Success ] [ %s ]\", emailSubject, failure.size(), success.size(), hostname));\n        emailParams.put(\"failure\", resultToPlainText(\"Failing Health Checks\", failure));\n        emailParams.put(\"success\", resultToPlainText(\"Successful Health Checks\", success));\n        emailParams.put(\"executedAt\", Calendar.getInstance().getTime().toString());\n        emailParams.put(\"runModes\", StringUtils.join(slingSettingsService.getRunModes(), \", \"));\n        emailParams.put(\"mode\", ModeUtil.isAuthor() ? \"Author\" : \"Publish\");\n        emailParams.put(\"hostname\", hostname);\n        emailParams.put(\"timeTaken\", String.valueOf(timeTaken));\n\n        if (productInfos.length == 1) {\n            emailParams.put(\"productName\", productInfos[0].getShortName());\n            emailParams.put(\"productVersion\", productInfos[0].getShortVersion());\n        }\n\n        emailParams.put(\"successCount\", String.valueOf(success.size()));\n        emailParams.put(\"failureCount\", String.valueOf(failure.size()));\n        emailParams.put(\"totalCount\", String.valueOf(failure.size() + success.size()));\n\n        if (ArrayUtils.isNotEmpty(recipientEmailAddresses)) {\n            final List<String> failureList = emailService.sendEmail(emailTemplatePath, emailParams, recipientEmailAddresses);\n\n            if (failureList.size() > 0) {\n                log.warn(\"Could not send health status check e-mails to recipients [ {} ]\", StringUtils.join(failureList, \", \"));\n            } else {\n                log.info(\"Successfully sent Health Check email to [ {} ] recipients\", recipientEmailAddresses.length - failureList.size());\n            }\n        } else {\n            log.warn(\"No e-mail addresses provided to e-mail results of health checks. Either add the appropriate e-mail recipients or remove the health check status e-mail configuration entirely.\");\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#StringLiteral#ConditionalExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#NumberLiteral#ArrayAccess#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#NumberLiteral#ArrayAccess#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ConditionalExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates the e-mail template parameter map and invokes the OSGi E-Mail Service.", "call_func_name": ["com.adobe.granite.license.ProductInfoService.getInfos", "com.adobe.acs.commons.hc.impl.HealthCheckStatusEmailer.getHostname", "java.util.HashMap.<init>", "java.util.List.size", "java.lang.Integer.valueOf", "java.lang.String.format", "java.util.Map.put", "com.adobe.acs.commons.hc.impl.HealthCheckStatusEmailer.resultToPlainText", "java.util.Calendar.getInstance", "java.util.Calendar.getTime", "java.util.Date.toString", "org.apache.sling.settings.SlingSettingsService.getRunModes", "org.apache.commons.lang3.StringUtils.join", "com.adobe.acs.commons.util.ModeUtil.isAuthor", "java.lang.String.valueOf", "com.adobe.granite.license.ProductInfo.getShortName", "com.adobe.granite.license.ProductInfo.getShortVersion", "java.lang.String.valueOf", "org.apache.commons.lang3.ArrayUtils.isNotEmpty", "com.adobe.acs.commons.email.EmailService.sendEmail", "org.slf4j.Logger.warn", "org.slf4j.Logger.info", "org.slf4j.Logger.warn"], "call_func_parameter": [[""], [""], [""], [""], ["int"], ["java.lang.String", "java.lang.Object[]"], ["java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.util.List"], [""], [""], [""], [""], ["java.lang.Iterable", "java.lang.String"], [""], ["long"], [""], [""], ["int"], ["java.lang.Object[]"], ["java.lang.String", "java.util.Map", "java.lang.String[]"], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.Object"], ["java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.hc.impl.HealthCheckStatusEmailer.getHostname": "Hostname retrieval code borrowed from Malt on StackOverflow > https://stackoverflow.com/questions/7348711/recommended-way-to-get-hostname-in-java / / Attempts to get the hostname of running AEM instance. Uses the OSGi configured fallback if unavailable."}, {"com.adobe.acs.commons.hc.impl.HealthCheckStatusEmailer.resultToPlainText": "Gererates the plain-text email sections for sets of Health Check Execution Results."}, {"com.adobe.acs.commons.util.ModeUtil.isAuthor": "Is AEM runmode author."}]}, {"index": "684", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/hc/impl/HealthCheckStatusEmailer.java", "methodName": "com.adobe.acs.commons.hc.impl.HealthCheckStatusEmailer.resultToPlainText", "methodParameterType": "String#List<HealthCheckExecutionResult>#", "methodParameterName": "title#results#", "methodBody": "protected String resultToPlainText(final String title, final List<HealthCheckExecutionResult> results) {\n        final StringBuilder sb = new StringBuilder();\n\n        sb.append(title);\n        sb.append(System.lineSeparator());\n\n        if (results.size() == 0) {\n            sb.append(\"No \" + StringUtils.lowerCase(title) + \" could be found!\");\n            sb.append(System.lineSeparator());\n        } else {\n            sb.append(StringUtils.repeat(\"-\", NUM_DASHES));\n            sb.append(System.lineSeparator());\n\n            for (final HealthCheckExecutionResult result : results) {\n                sb.append(StringUtils.rightPad(\"[ \" + result.getHealthCheckResult().getStatus().name() + \" ]\", HEALTH_CHECK_STATUS_PADDING));\n                sb.append(\"  \");\n                sb.append(result.getHealthCheckMetadata().getTitle());\n                sb.append(System.lineSeparator());\n            }\n        }\n\n        return sb.toString();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gererates the plain-text email sections for sets of Health Check Execution Results.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.System.lineSeparator", "java.util.List.size", "org.apache.commons.lang3.StringUtils.lowerCase", "java.lang.StringBuilder.toString", "org.apache.commons.lang3.StringUtils.repeat", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.sling.hc.api.execution.HealthCheckExecutionResult.getHealthCheckResult", "org.apache.sling.hc.api.Result.getStatus", "org.apache.commons.lang3.StringUtils.rightPad", "org.apache.sling.hc.api.execution.HealthCheckExecutionResult.getHealthCheckMetadata", "org.apache.sling.hc.util.HealthCheckMetadata.getTitle"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], ["java.lang.String", "int"], [""], [""], [""], [""], [""], ["java.lang.String", "int"], [""], [""]], "passed_comments": "/"}, {"index": "685", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/hc/impl/HealthCheckStatusEmailer.java", "methodName": "com.adobe.acs.commons.hc.impl.HealthCheckStatusEmailer.activate", "methodParameterType": "Map<String,Object>#", "methodParameterName": "config#", "methodBody": "@Activate\n    protected final void activate(final Map<String, Object> config) {\n        emailTemplatePath = PropertiesUtil.toString(config.get(PROP_TEMPLATE_PATH), DEFAULT_EMAIL_TEMPLATE_PATH);\n        emailSubject = PropertiesUtil.toString(config.get(PROP_EMAIL_SUBJECT), DEFAULT_EMAIL_SUBJECT_PREFIX);\n        fallbackHostname = PropertiesUtil.toString(config.get(PROP_FALLBACK_HOSTNAME), DEFAULT_FALLBACK_HOSTNAME);\n        recipientEmailAddresses = PropertiesUtil.toStringArray(config.get(PROP_RECIPIENTS_EMAIL_ADDRESSES), DEFAULT_RECIPIENT_EMAIL_ADDRESSES);\n        healthCheckTags = PropertiesUtil.toStringArray(config.get(PROP_HEALTH_CHECK_TAGS), DEFAULT_HEALTH_CHECK_TAGS);\n        healthCheckTagsOptionsOr = PropertiesUtil.toBoolean(config.get(PROP_HEALTH_CHECK_TAGS_OPTIONS_OR), DEFAULT_HEALTH_CHECK_TAGS_OPTIONS_OR);\n        sendEmailOnlyOnFailure = PropertiesUtil.toBoolean(config.get(PROP_SEND_EMAIL_ONLY_ON_FAILURE), DEFAULT_SEND_EMAIL_ONLY_ON_FAILURE);\n        throttleInMins = PropertiesUtil.toInteger(config.get(PROP_THROTTLE), DEFAULT_THROTTLE_IN_MINS);\n        if (throttleInMins < 0) {\n            throttleInMins = DEFAULT_THROTTLE_IN_MINS;\n        }\n        healthCheckTimeoutOverride = PropertiesUtil.toInteger(config.get(PROP_HEALTH_CHECK_TIMEOUT_OVERRIDE), DEFAULT_HEALTH_CHECK_TIMEOUT_OVERRIDE);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "OSGi Activate method.", "call_func_name": ["java.util.Map.get", "org.apache.sling.commons.osgi.PropertiesUtil.toString", "org.apache.sling.commons.osgi.PropertiesUtil.toStringArray", "org.apache.sling.commons.osgi.PropertiesUtil.toBoolean", "org.apache.sling.commons.osgi.PropertiesUtil.toInteger"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object", "java.lang.String"], ["java.lang.Object", "java.lang.String[]"], ["java.lang.Object", "boolean"], ["java.lang.Object", "int"]], "passed_comments": "/"}, {"index": "686", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/hc/impl/HealthCheckStatusEmailer.java", "methodName": "com.adobe.acs.commons.hc.impl.HealthCheckStatusEmailer.getHostname", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@SuppressWarnings({\"squid:S3776\", \"squid:S1192\"})\n    private String getHostname() {\n        String hostname = null;\n        final String os = System.getProperty(\"os.name\").toLowerCase();\n\n        // Unpleasant 'if structure' to avoid making unnecessary Runtime calls; only call Runtime.\n\n        if (os.indexOf(\"win\") >= 0) {\n            hostname = System.getenv(\"COMPUTERNAME\");\n            if (StringUtils.isBlank(hostname)) {\n                try {\n                    hostname = execReadToString(\"hostname\");\n                } catch (IOException ex) {\n                    log.warn(\"Unable to collect hostname from Windows via 'hostname' command.\", ex);\n                }\n            }\n        } else if (os.indexOf(\"nix\") >= 0 || os.indexOf(\"nux\") >= 0 || os.indexOf(\"mac\") >= 0) {\n            hostname = System.getenv(\"HOSTNAME\");\n\n            if (StringUtils.isBlank(hostname)) {\n                try {\n                    hostname = execReadToString(\"hostname\");\n                } catch (IOException ex) {\n                    log.warn(\"Unable to collect hostname from *nix via 'hostname' command.\", ex);\n                }\n            }\n\n            if (StringUtils.isBlank(hostname)) {\n                try {\n                    execReadToString(\"cat /etc/hostname\");\n                } catch (IOException ex) {\n                    log.warn(\"Unable to collect hostname from *nix via 'cat /etc/hostname' command.\", ex);\n                }\n            }\n        } else {\n            log.warn(\"Unidentifiable OS [ {} ]. Could not collect hostname.\", os);\n        }\n\n        hostname = StringUtils.trimToNull(hostname);\n\n        if (StringUtils.isBlank(hostname)) {\n            log.debug(\"Unable to derive hostname from OS; defaulting to OSGi Configured value [ {} ]\", fallbackHostname);\n            return fallbackHostname;\n        } else {\n            log.debug(\"Derived hostname from OS: [ {} ]\", hostname);\n            return hostname;\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#StringLiteral#ArrayInitializer#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Hostname retrieval code borrowed from Malt on StackOverflow > https://stackoverflow.com/questions/7348711/recommended-way-to-get-hostname-in-java / / Attempts to get the hostname of running AEM instance. Uses the OSGi configured fallback if unavailable.", "call_func_name": ["java.lang.System.getProperty", "java.lang.String.toLowerCase", "java.lang.String.indexOf", "java.lang.System.getenv", "org.apache.commons.lang3.StringUtils.isBlank", "com.adobe.acs.commons.hc.impl.HealthCheckStatusEmailer.execReadToString", "org.slf4j.Logger.warn", "org.slf4j.Logger.warn", "org.apache.commons.lang3.StringUtils.trimToNull", "org.slf4j.Logger.debug"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.CharSequence"], ["java.lang.String"], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String", "java.lang.Object"], ["java.lang.String"], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.hc.impl.HealthCheckStatusEmailer.execReadToString": "Execute a command in the system's runtime."}]}, {"index": "687", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/hc/impl/HealthCheckStatusEmailer.java", "methodName": "com.adobe.acs.commons.hc.impl.HealthCheckStatusEmailer.execReadToString", "methodParameterType": "String#", "methodParameterName": "execCommand#", "methodBody": "@SuppressWarnings(\"squid:S2076\") // execCommand comes from a trusted source\n    private String execReadToString(String execCommand) throws IOException {\n        Process proc = Runtime.getRuntime().exec(execCommand);\n        try (InputStream stream = proc.getInputStream()) {\n            try (Scanner s = new Scanner(stream).useDelimiter(\"\\\\A\")) {\n                return s.hasNext() ? s.next() : \"\";\n            }\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#StringLiteral#ConditionalExpression#ReturnStatement#Block#TryStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ReturnStatement(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)ConditionalExpression)ReturnStatement)Block)TryStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Execute a command in the system's runtime.", "call_func_name": ["java.lang.Runtime.getRuntime", "java.lang.Runtime.exec", "java.lang.Process.getInputStream", "java.util.Scanner.<init>", "java.util.Scanner.useDelimiter", "java.util.Scanner.hasNext", "java.util.Scanner.next", "java.util.Scanner.close", "java.lang.Throwable.addSuppressed", "java.io.InputStream.close"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.io.InputStream"], ["java.lang.String"], [""], [""], [""], ["java.lang.Throwable"], [""]], "passed_comments": "/"}, {"index": "688", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/GenericReport.java", "methodName": "com.adobe.acs.commons.mcp.model.GenericReport.getColumns", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<String> getColumns() {\n        if (columns == null) {\n            columns = new ArrayList<>();\n        }\n        return columns;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the columns", "call_func_name": ["java.util.ArrayList.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "689", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/GenericReport.java", "methodName": "com.adobe.acs.commons.mcp.model.GenericReport.getRows", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<ValueMap> getRows() {\n        if (rows == null) {\n            rows = new ArrayList<>();\n        }\n        return rows;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the rows", "call_func_name": ["java.util.ArrayList.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "690", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/GenericReport.java", "methodName": "com.adobe.acs.commons.mcp.model.GenericReport.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name) {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "691", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/Result.java", "methodName": "com.adobe.acs.commons.mcp.model.Result.getRuntime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getRuntime() {\n        return runtime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the runtime", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "692", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/Result.java", "methodName": "com.adobe.acs.commons.mcp.model.Result.setRuntime", "methodParameterType": "Long#", "methodParameterName": "runtime#", "methodBody": "public void setRuntime(Long runtime) {\n        this.runtime = runtime;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param runtime the runtime to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "693", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/Result.java", "methodName": "com.adobe.acs.commons.mcp.model.Result.getReport", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Resource getReport() {\n        return report;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the report", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "694", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/Result.java", "methodName": "com.adobe.acs.commons.mcp.model.Result.setReport", "methodParameterType": "Resource#", "methodParameterName": "report#", "methodBody": "public void setReport(Resource report) {\n        this.report = report;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param report the report to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "695", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/Result.java", "methodName": "com.adobe.acs.commons.mcp.model.Result.getTasksCompleted", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getTasksCompleted() {\n        return tasksCompleted;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the tasksCompleted", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "696", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/Result.java", "methodName": "com.adobe.acs.commons.mcp.model.Result.setTasksCompleted", "methodParameterType": "int#", "methodParameterName": "tasksCompleted#", "methodBody": "public void setTasksCompleted(int tasksCompleted) {\n        this.tasksCompleted = tasksCompleted;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param tasksCompleted the tasksCompleted to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "697", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.getReportedErrors", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getReportedErrors() {\n        return reportedErrors;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the reportedErrors", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "698", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.getReportedErrorsList", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Collection<ArchivedProcessFailure> getReportedErrorsList() {\n        if (reportedErrorsList == null) {\n            return Collections.EMPTY_LIST;\n        } else {\n            return reportedErrorsList;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@return the reportedErrorsList", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "699", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.setReportedErrors", "methodParameterType": "List<ArchivedProcessFailure>#", "methodParameterName": "reportedErrors#", "methodBody": "public void setReportedErrors(List<ArchivedProcessFailure> reportedErrors) {\n        this.reportedErrorsList = Collections.unmodifiableList(reportedErrors);\n        this.reportedErrors = reportedErrorsList.size();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param reportedErrors the reportedErrors to set", "call_func_name": ["java.util.Collections.unmodifiableList", "java.util.Collection.size"], "call_func_parameter": [["java.util.List"], [""]], "passed_comments": "/"}, {"index": "700", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.getRequester", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRequester() {\n        return requester;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the requester", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "701", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.setRequester", "methodParameterType": "String#", "methodParameterName": "requester#", "methodBody": "public void setRequester(String requester) {\n        this.requester = requester;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param requester the requester to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "702", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.getRequestInputs", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ValueMap getRequestInputs() {\n        return requestInputs;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the requestInputs", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "703", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.setRequestInputs", "methodParameterType": "ValueMap#", "methodParameterName": "requestInputs#", "methodBody": "public void setRequestInputs(ValueMap requestInputs) {\n        this.requestInputs = requestInputs;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param requestInputs the requestInputs to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "704", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.getStartTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getStartTime() {\n        return startTime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the startTime", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "705", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.setStartTime", "methodParameterType": "Long#", "methodParameterName": "startTime#", "methodBody": "public void setStartTime(Long startTime) {\n        this.startTime = startTime;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param startTime the startTime to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "706", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.getStopTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Long getStopTime() {\n        return stopTime;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the stopTime", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "707", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.setStopTime", "methodParameterType": "Long#", "methodParameterName": "stopTime#", "methodBody": "public void setStopTime(Long stopTime) {\n        this.stopTime = stopTime;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param stopTime the stopTime to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "708", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the description", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "709", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.setDescription", "methodParameterType": "String#", "methodParameterName": "description#", "methodBody": "public void setDescription(String description) {\n        this.description = description;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param description the description to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "710", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.isIsRunning", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isIsRunning() {\n        return isRunning;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the isRunning", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "711", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.setIsRunning", "methodParameterType": "boolean#", "methodParameterName": "isRunning#", "methodBody": "public void setIsRunning(boolean isRunning) {\n        this.isRunning = isRunning;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param isRunning the isRunning to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "712", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getStatus() {\n        return status;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the status", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "713", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.setStatus", "methodParameterType": "String#", "methodParameterName": "status#", "methodBody": "public void setStatus(String status) {\n        this.status = status;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param status the status to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "714", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.getResult", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Result getResult() {\n        return result;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the result", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "715", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.setResult", "methodParameterType": "Result#", "methodParameterName": "result#", "methodBody": "public void setResult(Result result) {\n        this.result = result;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param result the result to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "716", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.getProgress", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public double getProgress() {\n        return progress;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the progress", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "717", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.setProgress", "methodParameterType": "double#", "methodParameterName": "progress#", "methodBody": "public void setProgress(double progress) {\n        this.progress = progress;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param progress the progress to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "718", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "719", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/model/ManagedProcess.java", "methodName": "com.adobe.acs.commons.mcp.model.ManagedProcess.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public void setName(String name) {\n        this.name = name;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "720", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/util/AccessibleObjectUtil.java", "methodName": "com.adobe.acs.commons.mcp.util.AccessibleObjectUtil.getType", "methodParameterType": "AccessibleObject#", "methodParameterName": "accessibleObject#", "methodBody": "public static Class<?> getType(AccessibleObject accessibleObject) {\n        return processDualFunction(accessibleObject, Method::getReturnType, Field::getType);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the property type (assuming it's either a field or a getter method)", "call_func_name": ["java.util.function.Function.apply", "com.adobe.acs.commons.mcp.util.AccessibleObjectUtil.processDualFunction"], "call_func_parameter": [[""], ["java.lang.reflect.AccessibleObject", "java.util.function.Function", "java.util.function.Function"]], "passed_comments": "/"}, {"index": "721", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/util/AccessibleObjectUtil.java", "methodName": "com.adobe.acs.commons.mcp.util.AccessibleObjectUtil.getGenericType", "methodParameterType": "AccessibleObject#", "methodParameterName": "accessibleObject#", "methodBody": "public static Type getGenericType(AccessibleObject accessibleObject) {\n        return processDualFunction(accessibleObject, Method::getGenericReturnType, Field::getGenericType);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the genericproperty type (assuming it's either a field or a getter method)", "call_func_name": ["java.util.function.Function.apply", "com.adobe.acs.commons.mcp.util.AccessibleObjectUtil.processDualFunction"], "call_func_parameter": [[""], ["java.lang.reflect.AccessibleObject", "java.util.function.Function", "java.util.function.Function"]], "passed_comments": "/"}, {"index": "722", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/util/AccessibleObjectUtil.java", "methodName": "com.adobe.acs.commons.mcp.util.AccessibleObjectUtil.getFieldName", "methodParameterType": "AccessibleObject#", "methodParameterName": "o#", "methodBody": "public static String getFieldName(AccessibleObject o) {\n        if (o == null) {\n            return null;\n        }\n        Named named = o.getAnnotation(Named.class);\n        if (named != null) {\n            return named.value();\n        } else if (o instanceof Field) {\n            Field f = (Field) o;\n            return f.getName();\n        } else if (o instanceof Method) {\n            Method m = (Method) o;\n            String name = m.getName();\n            if (name.startsWith(\"get\")) {\n                return StringUtils.uncapitalize(name.substring(3));\n            } else if (name.startsWith(\"is\")) {\n                return StringUtils.uncapitalize(name.substring(2));\n            } else {\n                return name;\n            }\n        } else {\n            return null;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#IfStatement#Block#NullLiteral#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)IfStatement)Block(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Return field name or extract property name from getter method name if needed", "call_func_name": ["java.lang.reflect.AccessibleObject.getAnnotation", "javax.inject.Named.value", "java.lang.reflect.Field.getName", "java.lang.reflect.Method.getName", "java.lang.String.startsWith", "java.lang.String.substring", "org.apache.commons.lang3.StringUtils.uncapitalize"], "call_func_parameter": [["java.lang.Class"], [""], [""], [""], ["java.lang.String"], ["int"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "723", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/util/IntrospectionUtil.java", "methodName": "com.adobe.acs.commons.mcp.util.IntrospectionUtil.hasMultipleValues", "methodParameterType": "Class#", "methodParameterName": "clazz#", "methodBody": "public static boolean hasMultipleValues(Class clazz) {\n        return clazz.isArray() || Collection.class.isAssignableFrom(clazz);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Figure out if field represents multiple values", "call_func_name": ["java.lang.Class.isArray", "java.lang.Class.isAssignableFrom"], "call_func_parameter": [[""], ["java.lang.Class"]], "passed_comments": "/"}, {"index": "724", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/util/IntrospectionUtil.java", "methodName": "com.adobe.acs.commons.mcp.util.IntrospectionUtil.getCollectionComponentType", "methodParameterType": "Field#", "methodParameterName": "field#", "methodBody": "public static Class<?> getCollectionComponentType(Field field) {\n        if (Collection.class.isAssignableFrom(field.getType())) {\n            Type genericType = field.getGenericType();\n            if (genericType instanceof ParameterizedType) {\n                ParameterizedType t = (ParameterizedType) genericType;\n                if (t.getActualTypeArguments().length == 1) {\n                    return (Class) t.getActualTypeArguments()[0];\n                } else {\n                    return null;\n                }\n            } else {\n                return Object.class;\n            }\n        } else if (field.getType().isArray()) {\n            return field.getType().getComponentType();\n        } else {\n            return field.getType();\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#CastExpression#ReturnStatement#Block#NullLiteral#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleType#TypeLiteral#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)CastExpression)ReturnStatement)Block(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)Block(Block(ReturnStatement(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ReturnStatement)Block)IfStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Determine if the field is a list or array and return its component type if so.", "call_func_name": ["java.lang.reflect.Field.getType", "java.lang.Class.isAssignableFrom", "java.lang.reflect.Field.getGenericType", "java.lang.reflect.ParameterizedType.getActualTypeArguments", "java.lang.Class.isArray", "java.lang.Class.getComponentType"], "call_func_parameter": [[""], ["java.lang.Class"], [""], [""], [""], [""]], "passed_comments": "/"}, {"index": "725", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/util/IntrospectionUtil.java", "methodName": "com.adobe.acs.commons.mcp.util.IntrospectionUtil.isPrimitive", "methodParameterType": "Field#", "methodParameterName": "field#", "methodBody": "public static boolean isPrimitive(Field field) {\n        Class basicType = getCollectionComponentType(field);\n        return basicType != null && (basicType.isPrimitive() || Number.class.isAssignableFrom(basicType) || basicType == String.class);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#InfixExpression#InfixExpression#ParenthesizedExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)InfixExpression)InfixExpression)ParenthesizedExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "A primitive field is one which is a single or array/list of primitive values.", "call_func_name": ["com.adobe.acs.commons.mcp.util.IntrospectionUtil.getCollectionComponentType", "java.lang.Class.isPrimitive", "java.lang.Class.isAssignableFrom"], "call_func_parameter": [["java.lang.reflect.Field"], [""], ["java.lang.Class"]], "passed_comments": [{"com.adobe.acs.commons.mcp.util.IntrospectionUtil.getCollectionComponentType": "Determine if the field is a list or array and return its component type if so."}]}, {"index": "726", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/util/IntrospectionUtil.java", "methodName": "com.adobe.acs.commons.mcp.util.IntrospectionUtil.isSimple", "methodParameterType": "Field#", "methodParameterName": "field#", "methodBody": "public static boolean isSimple(Field field) {\n        Class basicType = getCollectionComponentType(field);\n        return basicType != null && (isPrimitive(field) || basicType.isEnum() || basicType == String.class);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#InfixExpression#InfixExpression#ParenthesizedExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)InfixExpression)InfixExpression)ParenthesizedExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "A simple field is either primitive, an enumeration, or a string.", "call_func_name": ["com.adobe.acs.commons.mcp.util.IntrospectionUtil.getCollectionComponentType", "com.adobe.acs.commons.mcp.util.IntrospectionUtil.isPrimitive", "java.lang.Class.isEnum"], "call_func_parameter": [["java.lang.reflect.Field"], ["java.lang.reflect.Field"], [""]], "passed_comments": [{"com.adobe.acs.commons.mcp.util.IntrospectionUtil.getCollectionComponentType": "Determine if the field is a list or array and return its component type if so."}, {"com.adobe.acs.commons.mcp.util.IntrospectionUtil.isPrimitive": "A primitive field is one which is a single or array/list of primitive values."}]}, {"index": "727", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/util/IntrospectionUtil.java", "methodName": "com.adobe.acs.commons.mcp.util.IntrospectionUtil.createObject", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "public static Optional<Object> createObject(Class c) {\n        for (Constructor constructor : c.getConstructors()) {\n            try {\n                Object obj = constructor.newInstance(new Object[constructor.getParameterCount()]);\n                return Optional.of(obj);\n            } catch (NullPointerException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {\n                // Do nothing, just move on to the next constructor if any.\n            }\n        }\n        return Optional.empty();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Try any available public constructors to create an object.  Return the first successful attempt.", "call_func_name": ["java.lang.Class.getConstructors", "java.lang.reflect.Constructor.getParameterCount", "java.lang.reflect.Constructor.newInstance", "java.util.Optional.of", "java.util.Optional.empty"], "call_func_parameter": [[""], [""], ["java.lang.Object[]"], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "728", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/util/IntrospectionUtil.java", "methodName": "com.adobe.acs.commons.mcp.util.IntrospectionUtil.getDeclaredValue", "methodParameterType": "AccessibleObject#", "methodParameterName": "field#", "methodBody": "public static Optional<Object> getDeclaredValue(AccessibleObject field) {\n        if (field instanceof Field) {\n            Field f = (Field) field;\n            Optional<Object> o = createObject(f.getDeclaringClass());\n            if (o.isPresent()) {\n                try {\n                    return Optional.ofNullable(FieldUtils.readField(f, o.get(), true));\n                } catch (Exception e) {\n                    // Don't throw any errors, just don't report any results\n                }\n            }\n        }\n        return Optional.empty();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine the declared (default) value of a field; if a method is provided then an Empty optional is returned Note: This assumes that there is a public no-parameter constructor for the declaring object, otherwise this will return an empty optional.", "call_func_name": ["java.lang.reflect.Field.getDeclaringClass", "com.adobe.acs.commons.mcp.util.IntrospectionUtil.createObject", "java.util.Optional.isPresent", "java.util.Optional.get", "org.apache.commons.lang3.reflect.FieldUtils.readField", "java.util.Optional.ofNullable", "java.util.Optional.empty"], "call_func_parameter": [[""], ["java.lang.Class"], [""], [""], ["java.lang.reflect.Field", "java.lang.Object", "boolean"], ["java.lang.Object"], [""]], "passed_comments": [{"com.adobe.acs.commons.mcp.util.IntrospectionUtil.createObject": "Try any available public constructors to create an object.  Return the first successful attempt."}]}, {"index": "729", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/util/SyntheticResourceBuilder.java", "methodName": "com.adobe.acs.commons.mcp.util.SyntheticResourceBuilder.withChild", "methodParameterType": "Resource#", "methodParameterName": "child#", "methodBody": "public SyntheticResourceBuilder withChild(Resource child) {\n        currentResource.addChild(child);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Note: this doesn't navigate to the child, it just adds it to the current resource", "call_func_name": ["com.adobe.acs.commons.mcp.form.AbstractResourceImpl.addChild"], "call_func_parameter": [["org.apache.sling.api.resource.Resource"]], "passed_comments": "/"}, {"index": "730", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.correctNameAttribute", "methodParameterType": "Resource#", "methodParameterName": "res#", "methodBody": "private void correctNameAttribute(Resource res) {\n        String name = res.getValueMap().get(\"name\", String.class);\n        // If we replace all name attibutes it causes issues with stuff like the RTE configration\n        boolean hasResourceType = StringUtils.isNotBlank(res.getResourceType());\n        if (name != null && !name.startsWith(\"./\") && hasResourceType) {\n            res.getValueMap().put(\"name\", \"./\" + name);\n        }\n        res.getChildren().forEach(this::correctNameAttribute);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression)InfixExpression(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "In order to keep the sling post handler happy, form field names have to start with \"./\" otherwise the values don't go to the right places.", "call_func_name": ["org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.get", "org.apache.sling.api.resource.Resource.getResourceType", "org.apache.commons.lang.StringUtils.isNotBlank", "java.lang.String.startsWith", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.sling.api.resource.ValueMap.put", "org.apache.sling.api.resource.Resource.getChildren", "java.util.function.Consumer.accept", "java.lang.Iterable.forEach"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Class"], [""], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Object", "java.lang.Object"], [""], ["com.adobe.acs.commons.mcp.form.FormComponent"], ["java.util.function.Consumer"]], "passed_comments": "/"}, {"index": "731", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.getMethod", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMethod() {\n        return method;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the method", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "732", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.setMethod", "methodParameterType": "String#", "methodParameterName": "method#", "methodBody": "public final void setMethod(String method) {\n        this.method = method;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param method the method to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "733", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.getAction", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAction() {\n        return action;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the action", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "734", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.setAction", "methodParameterType": "String#", "methodParameterName": "action#", "methodBody": "public final void setAction(String action) {\n        this.action = action;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param action the action to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "735", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.getEnctype", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEnctype() {\n        return enctype;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the enctype", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "736", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.setEnctype", "methodParameterType": "String#", "methodParameterName": "enctype#", "methodBody": "public final void setEnctype(String enctype) {\n        this.enctype = enctype;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param enctype the enctype to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "737", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.getTarget", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTarget() {\n        return target;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the target", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "738", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.setTarget", "methodParameterType": "String#", "methodParameterName": "target#", "methodBody": "public final void setTarget(String target) {\n        this.target = target;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param target the target to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "739", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.getAutocomplete", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAutocomplete() {\n        return autocomplete;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the autocomplete", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "740", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.setAutocomplete", "methodParameterType": "String#", "methodParameterName": "autocomplete#", "methodBody": "public final void setAutocomplete(String autocomplete) {\n        this.autocomplete = autocomplete;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param autocomplete the autocomplete to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "741", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.isNovalidate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isNovalidate() {\n        return novalidate;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the novalidate", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "742", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.setNovalidate", "methodParameterType": "boolean#", "methodParameterName": "novalidate#", "methodBody": "public final void setNovalidate(boolean novalidate) {\n        this.novalidate = novalidate;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param novalidate the novalidate to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "743", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.getDataPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDataPath() {\n        return dataPath;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the dataPath", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "744", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.setDataPath", "methodParameterType": "String#", "methodParameterName": "dataPath#", "methodBody": "public final void setDataPath(String dataPath) {\n        this.dataPath = dataPath;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param dataPath the dataPath to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "745", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.getNameNotFoundMode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getNameNotFoundMode() {\n        return nameNotFoundMode;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the nameNotFoundMode", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "746", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.setNameNotFoundMode", "methodParameterType": "String#", "methodParameterName": "nameNotFoundMode#", "methodBody": "public final void setNameNotFoundMode(String nameNotFoundMode) {\n        this.nameNotFoundMode = nameNotFoundMode;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param nameNotFoundMode the nameNotFoundMode to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "747", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.isAutosubmitForm", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isAutosubmitForm() {\n        return autosubmitForm;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the autosubmitForm", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "748", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.setAutosubmitForm", "methodParameterType": "boolean#", "methodParameterName": "autosubmitForm#", "methodBody": "public final void setAutosubmitForm(boolean autosubmitForm) {\n        this.autosubmitForm = autosubmitForm;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param autosubmitForm the autosubmitForm to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "749", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.isMargin", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isMargin() {\n        return margin;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the margin", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "750", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.setMargin", "methodParameterType": "boolean#", "methodParameterName": "margin#", "methodBody": "public final void setMargin(boolean margin) {\n        this.margin = margin;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param margin the margin to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "751", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.isMaximized", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isMaximized() {\n        return maximized;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the maximized", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "752", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.setMaximized", "methodParameterType": "boolean#", "methodParameterName": "maximized#", "methodBody": "public final void setMaximized(boolean maximized) {\n        this.maximized = maximized;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param maximized the maximized to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "753", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.isFoundationForm", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isFoundationForm() {\n        return foundationForm;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the foundationForm", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "754", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.setFoundationForm", "methodParameterType": "boolean#", "methodParameterName": "foundationForm#", "methodBody": "public final void setFoundationForm(boolean foundationForm) {\n        this.foundationForm = foundationForm;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param foundationForm the foundationForm to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "755", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.isAsync", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isAsync() {\n        return async;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the async", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "756", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.setAsync", "methodParameterType": "boolean#", "methodParameterName": "async#", "methodBody": "public final void setAsync(boolean async) {\n        this.async = async;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param async the async to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "757", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.isLoadingMask", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isLoadingMask() {\n        return loadingMask;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the loadingMask", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "758", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.setLoadingMask", "methodParameterType": "boolean#", "methodParameterName": "loadingMask#", "methodBody": "public final void setLoadingMask(boolean loadingMask) {\n        this.loadingMask = loadingMask;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param loadingMask the loadingMask to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "759", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.getUi", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUi() {\n        return ui;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the ui", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "760", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.setUi", "methodParameterType": "String#", "methodParameterName": "ui#", "methodBody": "public final void setUi(String ui) {\n        this.ui = ui;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param ui the ui to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "761", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.isSuccessresponse", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isSuccessresponse() {\n        return successresponse;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the successresponse", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "762", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.setSuccessresponse", "methodParameterType": "boolean#", "methodParameterName": "successresponse#", "methodBody": "public final void setSuccessresponse(boolean successresponse) {\n        this.successresponse = successresponse;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param successresponse the successresponse to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "763", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.getStyle", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getStyle() {\n        return style;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the style", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "764", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FormComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FormComponent.setStyle", "methodParameterType": "String#", "methodParameterName": "style#", "methodBody": "public void setStyle(String style) {\n        this.style = style;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param style the style to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "765", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ContainerComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ContainerComponent.getTitle", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTitle() {\n        return title;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the jcrTitle", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "766", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ContainerComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ContainerComponent.setTitle", "methodParameterType": "String#", "methodParameterName": "title#", "methodBody": "public void setTitle(String title) {\n        this.title = title;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param title the jcrTitle to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "767", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AutocompleteComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AutocompleteComponent.isDisabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isDisabled() {\n        return disabled;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the disabled", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "768", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AutocompleteComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AutocompleteComponent.setDisabled", "methodParameterType": "boolean#", "methodParameterName": "disabled#", "methodBody": "public void setDisabled(boolean disabled) {\n        this.disabled = disabled;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param disabled the disabled to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "769", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AutocompleteComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AutocompleteComponent.isMultiple", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isMultiple() {\n        return multiple;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the multiple", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "770", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AutocompleteComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AutocompleteComponent.setMultiple", "methodParameterType": "boolean#", "methodParameterName": "multiple#", "methodBody": "public void setMultiple(boolean multiple) {\n        this.multiple = multiple;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param multiple the multiple to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "771", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AutocompleteComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AutocompleteComponent.isForceSelection", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isForceSelection() {\n        return forceSelection;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the forceSelection", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "772", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AutocompleteComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AutocompleteComponent.setForceSelection", "methodParameterType": "boolean#", "methodParameterName": "forceSelection#", "methodBody": "public void setForceSelection(boolean forceSelection) {\n        this.forceSelection = forceSelection;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param forceSelection the forceSelection to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "773", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AutocompleteComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AutocompleteComponent.getIcon", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getIcon() {\n        return icon;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the icon", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "774", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AutocompleteComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AutocompleteComponent.setIcon", "methodParameterType": "String#", "methodParameterName": "icon#", "methodBody": "public void setIcon(String icon) {\n        this.icon = icon;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param icon the icon to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "775", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AutocompleteComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AutocompleteComponent.getDatasource", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDatasource() {\n        return datasource;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the datasource", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "776", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AutocompleteComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AutocompleteComponent.setDatasource", "methodParameterType": "String#", "methodParameterName": "datasource#", "methodBody": "public void setDatasource(String datasource) {\n        this.datasource = datasource;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param datasource the datasource to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "777", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AutocompleteComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AutocompleteComponent.getValues", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getValues() {\n        return values;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the values", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "778", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AutocompleteComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AutocompleteComponent.setValues", "methodParameterType": "String#", "methodParameterName": "values#", "methodBody": "public void setValues(String values) {\n        this.values = values;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param values the values to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "779", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AutocompleteComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AutocompleteComponent.getOptions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getOptions() {\n        return options;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the options", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "780", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AutocompleteComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AutocompleteComponent.setOptions", "methodParameterType": "String#", "methodParameterName": "options#", "methodBody": "public void setOptions(String options) {\n        this.options = options;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param options the options to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "781", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AutocompleteComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AutocompleteComponent.getOptionsQuery", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getOptionsQuery() {\n        return optionsQuery;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the optionsQuery", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "782", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AutocompleteComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AutocompleteComponent.setOptionsQuery", "methodParameterType": "String#", "methodParameterName": "optionsQuery#", "methodBody": "public void setOptionsQuery(String optionsQuery) {\n        this.optionsQuery = optionsQuery;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param optionsQuery the optionsQuery to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "783", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AutocompleteComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AutocompleteComponent.getDisplayProperty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDisplayProperty() {\n        return displayProperty;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the displayProperty", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "784", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AutocompleteComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AutocompleteComponent.setDisplayProperty", "methodParameterType": "String#", "methodParameterName": "displayProperty#", "methodBody": "public void setDisplayProperty(String displayProperty) {\n        this.displayProperty = displayProperty;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param displayProperty the displayProperty to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "785", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AutocompleteComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AutocompleteComponent.getPredicates", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String[] getPredicates() {\n        return predicates == null ? null : Arrays.copyOf(predicates, predicates.length);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#NullLiteral#InfixExpression#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the predicates", "call_func_name": ["java.util.Arrays.copyOf"], "call_func_parameter": [["java.lang.Object[]", "int"]], "passed_comments": "/"}, {"index": "786", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AutocompleteComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AutocompleteComponent.setPredicates", "methodParameterType": "String[]#", "methodParameterName": "predicates#", "methodBody": "public void setPredicates(String[] predicates) {\n        this.predicates = predicates == null ? null : Arrays.copyOf(predicates, predicates.length);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#NullLiteral#InfixExpression#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ConditionalExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ConditionalExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param predicates the predicate to set", "call_func_name": ["java.util.Arrays.copyOf"], "call_func_parameter": [["java.lang.Object[]", "int"]], "passed_comments": "/"}, {"index": "787", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FieldComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FieldComponent.getField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public final Field getField() {\n        if (accessibleObject instanceof Field) {\n            return (Field) accessibleObject;\n        } else {\n            return null;\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ReturnStatement#Block#NullLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ReturnStatement)Block(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Get form field if possible", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "788", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FieldComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FieldComponent.buildComponentResource", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Resource buildComponentResource() {\n        purgeEmptyMetadata();\n        AbstractResourceImpl res = new AbstractResourceImpl(path, resourceType, resourceSuperType, componentMetadata);\n        if (sling != null) {\n            res.setResourceResolver(sling.getRequest().getResourceResolver());\n        }\n        return res;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If your component needs child nodes then override this method, call the superclass implementation, and then use addChildren to add additional nodes to it.", "call_func_name": ["com.adobe.acs.commons.mcp.form.FieldComponent.purgeEmptyMetadata", "com.adobe.acs.commons.mcp.form.AbstractResourceImpl.<init>", "org.apache.sling.api.scripting.SlingScriptHelper.getRequest", "org.apache.sling.api.SlingHttpServletRequest.getResourceResolver", "com.adobe.acs.commons.mcp.form.AbstractResourceImpl.setResourceResolver"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "org.apache.sling.api.resource.ResourceMetadata"], [""], [""], ["org.apache.sling.api.resource.ResourceResolver"]], "passed_comments": "/"}, {"index": "789", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FieldComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FieldComponent.getComponentMetadata", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final ResourceMetadata getComponentMetadata() {\n        return componentMetadata;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the componentMetadata", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "790", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FieldComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FieldComponent.getResourceType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final String getResourceType() {\n        return resourceType;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the resourceType", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "791", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FieldComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FieldComponent.setResourceType", "methodParameterType": "String#", "methodParameterName": "resourceType#", "methodBody": "public final void setResourceType(String resourceType) {\n        this.resourceType = resourceType;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param resourceType the resourceType to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "792", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FieldComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FieldComponent.getResourceSuperType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final String getResourceSuperType() {\n        return resourceSuperType;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the resourceSuperType", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "793", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FieldComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FieldComponent.setResourceSuperType", "methodParameterType": "String#", "methodParameterName": "resourceSuperType#", "methodBody": "public final void setResourceSuperType(String resourceSuperType) {\n        this.resourceSuperType = resourceSuperType;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param resourceSuperType the resourceSuperType to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "794", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FieldComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FieldComponent.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final String getName() {\n        return name;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "795", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FieldComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FieldComponent.getCategory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final String getCategory() {\n        return category;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the category", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "796", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FieldComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FieldComponent.setCategory", "methodParameterType": "String#", "methodParameterName": "category#", "methodBody": "public final void setCategory(String category) {\n        this.category = category;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param category the category to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "797", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AbstractContainerComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AbstractContainerComponent.setComposite", "methodParameterType": "boolean#", "methodParameterName": "val#", "methodBody": "public void setComposite(boolean val) {\n        composite = val;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the composite flag (generally you don't need to but in case you have to override the behavior for some reason)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "798", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AbstractContainerComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AbstractContainerComponent.isComposite", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isComposite() {\n        return composite;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the composite", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "799", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AbstractContainerComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AbstractContainerComponent.setDefaultChildComponent", "methodParameterType": "Class<? extends FieldComponent>#", "methodParameterName": "defaultChildComponent#", "methodBody": "public void setDefaultChildComponent(Class<? extends FieldComponent> defaultChildComponent) {\n        this.defaultChildComponent = defaultChildComponent;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param defaultChildComponent the defaultChildComponent to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "800", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AbstractContainerComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AbstractContainerComponent.getDialogStyle", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public DialogProvider.DialogStyle getDialogStyle() {\n        return dialogStyle;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the dialogStyle", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "801", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AbstractContainerComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AbstractContainerComponent.setDialogStyle", "methodParameterType": "DialogProvider.DialogStyle#", "methodParameterName": "dialogStyle#", "methodBody": "public void setDialogStyle(DialogProvider.DialogStyle dialogStyle) {\n        this.dialogStyle = dialogStyle;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param dialogStyle the dialogStyle to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "802", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AbstractContainerComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AbstractContainerComponent.getPropertiesTabName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPropertiesTabName() {\n        return propertiesTabName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the propertiesTabName", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "803", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AbstractContainerComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AbstractContainerComponent.setPropertiesTabName", "methodParameterType": "String#", "methodParameterName": "propertiesTabName#", "methodBody": "public void setPropertiesTabName(String propertiesTabName) {\n        this.propertiesTabName = propertiesTabName;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param propertiesTabName the propertiesTabName to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "804", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AbstractContainerComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AbstractContainerComponent.isForceDotSlashPrefix", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isForceDotSlashPrefix() {\n        return forceDotSlashPrefix;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the forceDotSlashPrefix", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "805", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AbstractContainerComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AbstractContainerComponent.setForceDotSlashPrefix", "methodParameterType": "boolean#", "methodParameterName": "forceDotSlashPrefix#", "methodBody": "public void setForceDotSlashPrefix(boolean forceDotSlashPrefix) {\n        this.forceDotSlashPrefix = forceDotSlashPrefix;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param forceDotSlashPrefix the forceDotSlashPrefix to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "806", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/GeneratedDialog.java", "methodName": "com.adobe.acs.commons.mcp.form.GeneratedDialog.getResource", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@JsonIgnore\n    public Resource getResource() {\n        return resource;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the resource", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "807", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/GeneratedDialog.java", "methodName": "com.adobe.acs.commons.mcp.form.GeneratedDialog.getRequest", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@JsonIgnore\n    public SlingHttpServletRequest getRequest() {\n        return request;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the request", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "808", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/GeneratedDialog.java", "methodName": "com.adobe.acs.commons.mcp.form.GeneratedDialog.getSlingHelper", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@JsonIgnore\n    public SlingScriptHelper getSlingHelper() {\n        return sling;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the sling helper", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "809", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/GeneratedDialog.java", "methodName": "com.adobe.acs.commons.mcp.form.GeneratedDialog.getFormTitle", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFormTitle() {\n        return formTitle;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the formTitle", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "810", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/GeneratedDialog.java", "methodName": "com.adobe.acs.commons.mcp.form.GeneratedDialog.setFormTitle", "methodParameterType": "String#", "methodParameterName": "formTitle#", "methodBody": "public void setFormTitle(String formTitle) {\n        this.formTitle = formTitle;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param formTitle the formTitle to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "811", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.getActionConfigName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getActionConfigName() {\n        return actionConfigName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the actionConfigName", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "812", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.setActionConfigName", "methodParameterType": "String#", "methodParameterName": "actionConfigName#", "methodBody": "public void setActionConfigName(String actionConfigName) {\n        this.actionConfigName = actionConfigName;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param actionConfigName the actionConfigName to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "813", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.isActive", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isActive() {\n        return active;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the active", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "814", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.setActive", "methodParameterType": "boolean#", "methodParameterName": "active#", "methodBody": "public void setActive(boolean active) {\n        this.active = active;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param active the active to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "815", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.getAutocomplete", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAutocomplete() {\n        return autocomplete;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the autocomplete", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "816", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.setAutocomplete", "methodParameterType": "String#", "methodParameterName": "autocomplete#", "methodBody": "public void setAutocomplete(String autocomplete) {\n        this.autocomplete = autocomplete;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param autocomplete the autocomplete to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "817", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.isBlock", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isBlock() {\n        return block;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the block", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "818", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.setBlock", "methodParameterType": "boolean#", "methodParameterName": "block#", "methodBody": "public void setBlock(boolean block) {\n        this.block = block;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param block the block to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "819", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.getCommand", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCommand() {\n        return command;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the command", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "820", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.setCommand", "methodParameterType": "String#", "methodParameterName": "command#", "methodBody": "public void setCommand(String command) {\n        this.command = command;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param command the command to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "821", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.getComment", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getComment() {\n        return comment;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the comment", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "822", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.setComment", "methodParameterType": "String#", "methodParameterName": "comment#", "methodBody": "public void setComment(String comment) {\n        this.comment = comment;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param comment the comment to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "823", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.isDisabled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isDisabled() {\n        return disabled;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the disabled", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "824", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.setDisabled", "methodParameterType": "boolean#", "methodParameterName": "disabled#", "methodBody": "public void setDisabled(boolean disabled) {\n        this.disabled = disabled;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param disabled the disabled to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "825", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.getFormId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFormId() {\n        return formId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the formId", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "826", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.setFormId", "methodParameterType": "String#", "methodParameterName": "formId#", "methodBody": "public void setFormId(String formId) {\n        this.formId = formId;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param formId the formId to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "827", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.isHideText", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isHideText() {\n        return hideText;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the hideText", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "828", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.setHideText", "methodParameterType": "boolean#", "methodParameterName": "hideText#", "methodBody": "public void setHideText(boolean hideText) {\n        this.hideText = hideText;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param hideText the hideText to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "829", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.getIcon", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getIcon() {\n        return icon;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the icon", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "830", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.setIcon", "methodParameterType": "String#", "methodParameterName": "icon#", "methodBody": "public void setIcon(String icon) {\n        this.icon = icon;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param icon the icon to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "831", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.getIconSize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getIconSize() {\n        return iconSize;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the iconSize", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "832", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.setIconSize", "methodParameterType": "String#", "methodParameterName": "iconSize#", "methodBody": "public void setIconSize(String iconSize) {\n        this.iconSize = iconSize;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param iconSize the iconSize to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "833", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.getText", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getText() {\n        return text;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the text", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "834", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.setText", "methodParameterType": "String#", "methodParameterName": "text#", "methodBody": "public void setText(String text) {\n        this.text = text;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param text the text to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "835", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.getTrackingFeature", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTrackingFeature() {\n        return trackingFeature;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the trackingFeature", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "836", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.setTrackingFeature", "methodParameterType": "String#", "methodParameterName": "trackingFeature#", "methodBody": "public void setTrackingFeature(String trackingFeature) {\n        this.trackingFeature = trackingFeature;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param trackingFeature the trackingFeature to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "837", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.getTrackingElement", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTrackingElement() {\n        return trackingElement;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the trackingElement", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "838", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.setTrackingElement", "methodParameterType": "String#", "methodParameterName": "trackingElement#", "methodBody": "public void setTrackingElement(String trackingElement) {\n        this.trackingElement = trackingElement;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param trackingElement the trackingElement to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "839", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getType() {\n        return type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "840", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.setType", "methodParameterType": "String#", "methodParameterName": "type#", "methodBody": "public void setType(String type) {\n        this.type = type;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param type the type to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "841", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.getVariant", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getVariant() {\n        return variant;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the variant", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "842", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/ButtonComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.ButtonComponent.setVariant", "methodParameterType": "String#", "methodParameterName": "variant#", "methodBody": "public void setVariant(String variant) {\n        this.variant = variant;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param variant the variant to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "843", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AbstractGroupingContainerComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AbstractGroupingContainerComponent.getLayout", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getLayout() {\n        return layout;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the layout", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "844", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AbstractGroupingContainerComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AbstractGroupingContainerComponent.setLayout", "methodParameterType": "String#", "methodParameterName": "layout#", "methodBody": "public void setLayout(String layout) {\n        this.layout = layout;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param layout the layout to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "845", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AbstractGroupingContainerComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AbstractGroupingContainerComponent.isMargin", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isMargin() {\n        return margin;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the margin", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "846", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/AbstractGroupingContainerComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.AbstractGroupingContainerComponent.setMargin", "methodParameterType": "boolean#", "methodParameterName": "margin#", "methodBody": "public void setMargin(boolean margin) {\n        this.margin = margin;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param margin the margin to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "847", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FieldsetComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FieldsetComponent.getCssClass", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCssClass() {\n        return cssClass;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the cssClass", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "848", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/form/FieldsetComponent.java", "methodName": "com.adobe.acs.commons.mcp.form.FieldsetComponent.setCssClass", "methodParameterType": "String#", "methodParameterName": "cssClass#", "methodBody": "public void setCssClass(String cssClass) {\n        this.cssClass = cssClass;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param cssClass the cssClass to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "849", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/WorkflowRemover.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.WorkflowRemover.performCleanupActivity", "methodParameterType": "ActionManager#", "methodParameterName": "manager#", "methodBody": "void performCleanupActivity(ActionManager manager) throws Exception {\n        manager.withResolver(rr -> {\n\n            parseParameters();\n\n            workflowInstanceRemover.removeWorkflowInstances(rr, modelIds, statuses, payloads, olderThan, BATCH_SIZE,\n                    MAX_DURATION_MINS);\n\n            WorkflowRemovalStatus status = workflowInstanceRemover.getStatus();\n            EnumMap<ReportColumns, Object> reportRow = report(status);\n            reportRows.add(reportRow);\n        });\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Cleanup the old workflows.  Package scoped for unit test purposes.", "call_func_name": ["com.adobe.acs.commons.functions.CheckedConsumer.accept", "com.adobe.acs.commons.fam.ActionManager.withResolver"], "call_func_parameter": [["com.adobe.acs.commons.mcp.impl.processes.WorkflowRemover"], ["com.adobe.acs.commons.functions.CheckedConsumer"]], "passed_comments": [{"com.adobe.acs.commons.fam.ActionManager.withResolver": "Perform action right now using a provided pooled resolver"}]}, {"index": "850", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/WorkflowRemover.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.WorkflowRemover.report", "methodParameterType": "WorkflowRemovalStatus#", "methodParameterName": "status#", "methodBody": "EnumMap<ReportColumns, Object> report(WorkflowRemovalStatus status) {\n        final EnumMap<ReportColumns, Object> row = new EnumMap<>(ReportColumns.class);\n\n        row.put(ReportColumns.STARTED, status.getStartedAt());\n        row.put(ReportColumns.CHECKED, status.getChecked());\n        row.put(ReportColumns.REMOVED, status.getRemoved());\n\n        row.put(ReportColumns.COMPLETED, status.getCompletedAt());\n        row.put(ReportColumns.ERRED, status.getErredAt());\n        row.put(ReportColumns.INITIATED_BY, status.getInitiatedBy());\n\n        return row;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#TypeLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Collect and return a report row for the workflow status.  Method is package scope for unit tests.", "call_func_name": ["java.util.EnumMap.<init>", "com.adobe.acs.commons.workflow.bulk.removal.WorkflowRemovalStatus.getStartedAt", "java.util.EnumMap.put", "com.adobe.acs.commons.workflow.bulk.removal.WorkflowRemovalStatus.getChecked", "java.lang.Integer.valueOf", "com.adobe.acs.commons.workflow.bulk.removal.WorkflowRemovalStatus.getRemoved", "com.adobe.acs.commons.workflow.bulk.removal.WorkflowRemovalStatus.getCompletedAt", "com.adobe.acs.commons.workflow.bulk.removal.WorkflowRemovalStatus.getErredAt", "com.adobe.acs.commons.workflow.bulk.removal.WorkflowRemovalStatus.getInitiatedBy"], "call_func_parameter": [["java.lang.Class"], [""], ["java.lang.Enum", "java.lang.Object"], [""], ["int"], [""], [""], [""], [""]], "passed_comments": "/"}, {"index": "851", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/WorkflowRemover.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.WorkflowRemover.parseParameters", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void parseParameters() throws ParseException {\n        if (payloadPaths != null) {\n            payloads = payloadPaths.stream().map(Pattern::compile).collect(Collectors.toList());\n        }\n\n        if (StringUtils.isNotEmpty(olderThanVal)) {\n            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            Date d = sdf.parse(olderThanVal);\n            olderThan = Calendar.getInstance();\n            olderThan.setTime(d);\n        }\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Parse the input parameters into the form needed to call workflowInstanceRemover. The results are set into instance variables.  Method is package scope for unit testing.", "call_func_name": ["java.util.List.stream", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect", "org.apache.commons.lang.StringUtils.isNotEmpty", "java.text.SimpleDateFormat.<init>", "java.text.SimpleDateFormat.parse", "java.util.Calendar.getInstance", "java.util.Calendar.setTime"], "call_func_parameter": [[""], [""], ["java.util.function.Function"], [""], ["java.util.stream.Collector"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""], ["java.util.Date"]], "passed_comments": "/"}, {"index": "852", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/renovator/RenovatorFactory.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.renovator.RenovatorFactory.setPageManagerFactory", "methodParameterType": "PageManagerFactory#", "methodParameterName": "factory#", "methodBody": "public void setPageManagerFactory(PageManagerFactory factory) {\n        pageManagerFactory = factory;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Used to inject mock services", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "853", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/renovator/RenovatorFactory.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.renovator.RenovatorFactory.setReplicator", "methodParameterType": "Replicator#", "methodParameterName": "replicator#", "methodBody": "public void setReplicator(Replicator replicator) {\n        this.replicator = replicator;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Used to inject mock services", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "854", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/renovator/ReplicatorQueue.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.renovator.ReplicatorQueue.createContentFilterChain", "methodParameterType": "ReplicationAction#", "methodParameterName": "action#", "methodBody": "@Override\n    @Deprecated\n    public List<ReplicationContentFilter> createContentFilterChain(ReplicationAction action) {\n        throw new UnsupportedOperationException(\"ReplicatorQueue.createContentFilterChain not supported and is deprecated.\");\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "@deprecated", "call_func_name": ["java.lang.UnsupportedOperationException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "855", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/renovator/ReplicatorQueue.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.renovator.ReplicatorQueue.getDeactivateOperations", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, ReplicationOptions> getDeactivateOperations() {\n        return deactivateOperations;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the deactivateOperations", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "856", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/renovator/ReplicatorQueue.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.renovator.ReplicatorQueue.getActivateOperations", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, ReplicationOptions> getActivateOperations() {\n        return activateOperations;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the activateOperations", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "857", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/renovator/MovingNode.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.getSourcePath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getSourcePath() {\n        return sourcePath;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the sourcePath", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "858", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/renovator/MovingNode.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.setSourcePath", "methodParameterType": "String#", "methodParameterName": "sourcePath#", "methodBody": "public void setSourcePath(String sourcePath) {\n        this.sourcePath = sourcePath;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param sourcePath the sourcePath to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "859", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/renovator/MovingNode.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.getDestinationPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDestinationPath() {\n        return destinationPath;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destinationPath", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "860", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/renovator/MovingNode.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.setDestinationPath", "methodParameterType": "String#", "methodParameterName": "destinationPath#", "methodBody": "public void setDestinationPath(String destinationPath) {\n        this.destinationPath = destinationPath;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destinationPath the destinationPath to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "861", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/renovator/MovingNode.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.getParent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public MovingNode getParent() {\n        return parent;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the parent", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "862", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/renovator/MovingNode.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.setParent", "methodParameterType": "MovingNode#", "methodParameterName": "parent#", "methodBody": "public void setParent(MovingNode parent) {\n        this.parent = parent;\n        if (parent != null && parent != this) {\n            setDestinationPath(sourcePath.replaceFirst(Pattern.quote(parent.getSourcePath()), parent.getDestinationPath()));\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ThisExpression#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(ThisExpression)ThisExpression)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@param parent the parent to set", "call_func_name": ["com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.getSourcePath", "java.util.regex.Pattern.quote", "com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.getDestinationPath", "java.lang.String.replaceFirst", "com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.setDestinationPath"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String"], ["java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.getSourcePath": "@return the sourcePath"}, {"com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.getDestinationPath": "@return the destinationPath"}, {"com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.setDestinationPath": "@param destinationPath the destinationPath to set"}]}, {"index": "863", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/renovator/MovingNode.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.getChildren", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<MovingNode> getChildren() {\n        return children;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the children", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "864", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/renovator/MovingNode.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.setChildren", "methodParameterType": "List<MovingNode>#", "methodParameterName": "children#", "methodBody": "public void setChildren(List<MovingNode> children) {\n        this.children = children;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param children the children to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "865", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/renovator/MovingNode.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.getAllReferences", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<String> getAllReferences() {\n        return allReferences;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the references", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "866", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/renovator/MovingNode.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.getPublishedReferences", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<String> getPublishedReferences() {\n        return publishedReferences;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the references", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "867", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/renovator/MovingNode.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.isDestinationAlreadyExists", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isDestinationAlreadyExists() {\n        return destinationAlreadyExists;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the destinationAlreadyExists", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "868", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/renovator/MovingNode.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.setDestinationAlreadyExists", "methodParameterType": "boolean#", "methodParameterName": "destinationAlreadyExists#", "methodBody": "public void setDestinationAlreadyExists(boolean destinationAlreadyExists) {\n        this.destinationAlreadyExists = destinationAlreadyExists;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param destinationAlreadyExists the destinationAlreadyExists to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "869", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/renovator/MovingNode.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.visit", "methodParameterType": "Consumer<MovingNode>#", "methodParameterName": "consumer#", "methodBody": "public void visit(Consumer<MovingNode> consumer) {\n        visit(consumer, consumer, null);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Depth-first visitor, provide consumer function every node in the tree", "call_func_name": ["com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.visit"], "call_func_parameter": [["java.util.function.Consumer", "java.util.function.Consumer", "java.util.function.Function"]], "passed_comments": [{"com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.visit": "Depth-first visitor"}]}, {"index": "870", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/renovator/MovingNode.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.visit", "methodParameterType": "Consumer<MovingNode>#Consumer<MovingNode>#Function<MovingNode,Boolean>#", "methodParameterName": "consumer#leafConsumer#traversalFilter#", "methodBody": "public void visit(Consumer<MovingNode> consumer, Consumer<MovingNode> leafConsumer, Function<MovingNode, Boolean> traversalFilter) {\n        LinkedList<MovingNode> stack = new LinkedList<>();\n        stack.clear();\n        stack.add(this);\n\n        while (!stack.isEmpty()) {\n            MovingNode node = stack.poll();\n            if (traversalFilter == null || traversalFilter.apply(node)) {\n                stack.addAll(toList(node.getChildren()));\n                consumer.accept(node);\n            } else if (leafConsumer != null) {\n                leafConsumer.accept(node);\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#WhileStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(WhileStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)WhileStatement)Block)MethodDeclaration", "methodDoc": "Depth-first visitor", "call_func_name": ["java.util.LinkedList.<init>", "java.util.LinkedList.clear", "java.util.LinkedList.add", "java.util.LinkedList.isEmpty", "java.util.LinkedList.poll", "java.util.function.Function.apply", "java.lang.Boolean.booleanValue", "com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.getChildren", "com.adobe.acs.commons.util.visitors.SimpleFilteringResourceVisitor.toList", "java.util.LinkedList.addAll", "java.util.function.Consumer.accept"], "call_func_parameter": [[""], [""], ["java.lang.Object"], [""], [""], ["java.lang.Object"], [""], [""], ["java.lang.Iterable"], ["java.util.Collection"], ["java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.mcp.impl.processes.renovator.MovingNode.getChildren": "@return the children"}]}, {"index": "871", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/TagCreator.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.TagCreator.parseTags", "methodParameterType": "ActionManager#", "methodParameterName": "manager#", "methodBody": "@SuppressWarnings({\"squid:S3776\", \"squid:S1141\"})\n    public void parseTags(ActionManager manager) throws Exception {\n        manager.withResolver(rr -> {\n            final XSSFWorkbook workbook = new XSSFWorkbook(excelFile);\n            final XSSFSheet sheet = workbook.getSheetAt(0);\n            final Iterator<Row> rows = sheet.rowIterator();\n            final String tagsRootPath = new TagRootResolver(rr).getTagsLocationPath();\n\n            if (tagsRootPath == null) {\n                record(ReportRowSatus.FAILED_TO_PARSE,\n                        \"Abandoning Tag parsing. Unable to determine AEM Tags root (/content/cq:tags vs /etc/tags). Please ensure the path exists and is accessible by the user running Tag Creator.\", \"N/A\", \"N/A\");\n                return;\n            }\n\n            while(rows.hasNext()) {\n                final Row row = rows.next();\n                final Iterator<Cell> cells = row.cellIterator();\n\n                int cellIndex = 0;\n                // The previousTagId is reset on each new row.\n                String previousTagId = null;\n\n                while (cells.hasNext()) {\n                    final Cell cell = cells.next();\n\n                    final String cellValue = StringUtils.trimToNull(cell.getStringCellValue());\n                    if (StringUtils.isBlank(cellValue)) {\n                        // Hitting a blank cell means its the end of this row; don't process anything past this\n                        break;\n                    }\n\n                    // Generate a tag definition that will in turn be used to drive the tag creation\n                    TagDefinition tagDefinition = getTagDefinition(primary, cellIndex, cellValue, previousTagId, tagsRootPath);\n\n                    if (tagDefinition == null) {\n                        tagDefinition = getTagDefinition(fallback, cellIndex, cellValue, previousTagId, tagsRootPath);\n                    }\n\n                    if (tagDefinition == null) {\n                        log.warn(\"Could not find a Tag Data Converter that accepts value [ {} ]; skipping...\", cellValue);\n                        // Record parse failure\n                        record(ReportRowSatus.FAILED_TO_PARSE, cellValue, \"\", \"\");\n                        // Break to next Row\n                        break;\n                    } else {\n                        /* Prepare for next Cell */\n                        cellIndex++;\n                        previousTagId = tagDefinition.getId();\n\n                        if (tagDefinitions.get(tagDefinition.getId()) == null) {\n                            tagDefinitions.put(tagDefinition.getId(), tagDefinition);\n                        }\n                    }\n                }\n            }\n            log.info(\"Finished Parsing and collected [ {} ] tags for import.\", tagDefinitions.size());\n        });\n    }", "AST": "Javadoc#SimpleName#StringLiteral#StringLiteral#ArrayInitializer#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#BreakStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#BreakStatement#Block#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#WhileStatement#Block#WhileStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(BreakStatement)BreakStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement)Block(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)WhileStatement)Block)WhileStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Parses the input Excel file and creates a list of TagDefinition objects to process.", "call_func_name": ["com.adobe.acs.commons.functions.CheckedConsumer.accept", "com.adobe.acs.commons.fam.ActionManager.withResolver"], "call_func_parameter": [["com.adobe.acs.commons.mcp.impl.processes.TagCreator"], ["com.adobe.acs.commons.functions.CheckedConsumer"]], "passed_comments": [{"com.adobe.acs.commons.fam.ActionManager.withResolver": "Perform action right now using a provided pooled resolver"}]}, {"index": "872", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/TagCreator.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.TagCreator.importTags", "methodParameterType": "ActionManager#", "methodParameterName": "manager#", "methodBody": "public void importTags(ActionManager manager) {\n        tagDefinitions.values().stream().forEach(tagDefinition -> {\n            try {\n                manager.withResolver(rr -> {\n                    final TagManager tagManager = rr.adaptTo(TagManager.class);\n                    ReportRowSatus status;\n\n                    createTag(tagDefinition, tagManager);\n                });\n            } catch (Exception e) {\n                log.error(\"Unable to import tags via ACS Commons MCP - Tag Creator\", e);\n            }\n        });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Perform the tag creation based on the successfully parsed values in parseTags(..).", "call_func_name": ["java.util.HashMap.values", "java.util.Collection.stream", "java.util.function.Consumer.accept", "java.util.stream.Stream.forEach"], "call_func_parameter": [[""], [""], ["com.adobe.acs.commons.mcp.impl.processes.TagCreator", "com.adobe.acs.commons.fam.ActionManager"], ["java.util.function.Consumer"]], "passed_comments": "/"}, {"index": "873", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/TagCreator.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.TagCreator.getTagDefinition", "methodParameterType": "TagBuilder#int#String#String#String#", "methodParameterName": "tagBuilder#index#value#previousTagId#tagsRootPath#", "methodBody": "private TagDefinition getTagDefinition(final TagBuilder tagBuilder, final int index, final String value, final String previousTagId, final String tagsRootPath) {\n        final ResourceDefinitionBuilder resourceDefinitionBuilder = resourceDefinitionBuilders.get(tagBuilder.name());\n\n        if (resourceDefinitionBuilder != null && resourceDefinitionBuilder.accepts(value)) {\n            final TagDefinition tagDefinition = new TagDefinition(resourceDefinitionBuilder.convert(value), tagsRootPath);\n\n            switch (index) {\n                case 0: tagDefinition.setId(tagDefinition.getName() + TagConstants.NAMESPACE_DELIMITER);\n                        break;\n                case 1: tagDefinition.setId(previousTagId + tagDefinition.getName());\n                        break;\n                default: tagDefinition.setId(previousTagId + \"/\" + tagDefinition.getName());\n            }\n\n            return tagDefinition;\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#MethodInvocation#ExpressionStatement#BreakStatement#NumberLiteral#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#BreakStatement#SwitchCase#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SwitchStatement#SimpleName#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)SwitchStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the Tag Definition.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "874", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/DataImporter.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.DataImporter.createMissingNode", "methodParameterType": "String#ResourceResolver#Map<String,CompositeVariant>#", "methodParameterName": "path#rr#row#", "methodBody": "private void createMissingNode(String path, ResourceResolver rr, Map<String, CompositeVariant> row) throws PersistenceException {\n        LOG.debug(\"Start of createMissingNode for node {}\", path);\n\n        String parentPath = StringUtils.substringBeforeLast(path, SLASH);\n        Map<String, Object> resourceProperties = new HashMap<>();\n        resourceProperties.put(JcrConstants.JCR_PRIMARYTYPE, defaultNodeType);\n        Resource parent = ResourceUtil.getOrCreateResource(rr, parentPath, resourceProperties, defaultNodeType, true);\n\n        String nodeName = StringUtils.substringAfterLast(path, SLASH);\n        if (!row.containsKey(JCR_PRIMARY_TYPE) && !row.containsKey(JcrConstants.JCR_PRIMARYTYPE)) {\n            row.put(JcrConstants.JCR_PRIMARYTYPE, new CompositeVariant(defaultNodeType));\n        }\n        Map<String, Object> nodeProps = createPropertyMap(row);\n        rr.refresh();\n        Resource main = rr.create(parent, nodeName, nodeProps);\n\n        if (includeJcrContent) {\n            if (!row.containsKey(JcrConstants.JCR_CONTENT + SLASH + JcrConstants.JCR_PRIMARYTYPE)) {\n                row.put(JcrConstants.JCR_CONTENT + SLASH + JcrConstants.JCR_PRIMARYTYPE, new CompositeVariant(defaultJcrContentType));\n            }\n            Map<String, Object> jcrContentProps = createJcrContentPropertyMap(row);\n            if (!jcrContentProps.isEmpty()) {\n                rr.create(main, JcrConstants.JCR_CONTENT, jcrContentProps);\n            }\n        }\n\n        LOG.debug(\"End of createMissingNode for node {}\", path);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create missing node at the given path with the properties from the passed row. If properties are pre-appended with \"jcr:content/\", create jcr:content node.", "call_func_name": ["org.slf4j.Logger.debug", "org.apache.commons.lang3.StringUtils.substringBeforeLast", "java.util.HashMap.<init>", "java.util.Map.put", "org.apache.sling.api.resource.ResourceUtil.getOrCreateResource", "org.apache.commons.lang3.StringUtils.substringAfterLast", "java.util.Map.containsKey", "com.adobe.acs.commons.data.CompositeVariant.<init>", "com.adobe.acs.commons.mcp.impl.processes.DataImporter.createPropertyMap", "org.apache.sling.api.resource.ResourceResolver.refresh", "org.apache.sling.api.resource.ResourceResolver.create", "com.adobe.acs.commons.mcp.impl.processes.DataImporter.createJcrContentPropertyMap", "java.util.Map.isEmpty"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], ["java.lang.Object", "java.lang.Object"], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String", "java.util.Map", "java.lang.String", "boolean"], ["java.lang.String", "java.lang.String"], ["java.lang.Object"], ["java.lang.Object"], ["java.util.Map"], [""], ["org.apache.sling.api.resource.Resource", "java.lang.String", "java.util.Map"], ["java.util.Map"], [""]], "passed_comments": [{"com.adobe.acs.commons.mcp.impl.processes.DataImporter.createPropertyMap": "Create map of properties for node."}, {"com.adobe.acs.commons.mcp.impl.processes.DataImporter.createJcrContentPropertyMap": "Create map of properties for jcr:content node."}]}, {"index": "875", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/DataImporter.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.DataImporter.updateMetadata", "methodParameterType": "String#ResourceResolver#Map<String,CompositeVariant>#", "methodParameterName": "path#rr#nodeInfo#", "methodBody": "private void updateMetadata(String path, ResourceResolver rr, Map<String, CompositeVariant> nodeInfo) throws PersistenceException {\n        LOG.debug(\"Start of updateMetaData\");\n\n        Resource node = rr.getResource(path);\n        ModifiableValueMap resourceProperties = node.adaptTo(ModifiableValueMap.class);\n        populateMetadataFromRow(resourceProperties, createPropertyMap(nodeInfo));\n\n        if (includeJcrContent) {\n            Map<String, Object> jcrContentProps = createJcrContentPropertyMap(nodeInfo);\n            Resource jcrContent = node.getChild(JcrConstants.JCR_CONTENT);\n            if (jcrContent == null) {\n                if (!jcrContentProps.containsKey(JcrConstants.JCR_CONTENT + SLASH + JcrConstants.JCR_PRIMARYTYPE)) {\n                    jcrContentProps.put(JcrConstants.JCR_PRIMARYTYPE, defaultJcrContentType);\n                }\n                rr.create(node, JcrConstants.JCR_CONTENT, jcrContentProps);\n            } else {\n                ModifiableValueMap contentResourceProperties = jcrContent.adaptTo(ModifiableValueMap.class);\n                populateMetadataFromRow(contentResourceProperties, jcrContentProps);\n            }\n        }\n\n        if (rr.hasChanges()) {\n            incrementCount(updatedNodes, 1);\n            if (detailedReport) {\n                trackActivity(path, \"Updated Properties\", null);\n            }\n            if (!dryRunMode) {\n                rr.commit();\n            }\n            rr.refresh();\n        } else {\n            if (detailedReport) {\n                trackActivity(path, \"No Change\", null);\n            }\n            incrementCount(noChangeNodes, 1);\n        }\n\n        LOG.debug(\"End of updateMetadata\");\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#NullLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#StringLiteral#NullLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Get the ModifiableValueMap of the resource and update with the properties from the row. If jcr:content/jcr:primaryType is provided, get the jcr:content resource and update.", "call_func_name": ["org.slf4j.Logger.debug", "org.apache.sling.api.resource.ResourceResolver.getResource", "org.apache.sling.api.resource.Resource.adaptTo", "com.adobe.acs.commons.mcp.impl.processes.DataImporter.createPropertyMap", "com.adobe.acs.commons.mcp.impl.processes.DataImporter.populateMetadataFromRow", "com.adobe.acs.commons.mcp.impl.processes.DataImporter.createJcrContentPropertyMap", "org.apache.sling.api.resource.Resource.getChild", "java.util.Map.containsKey", "java.util.Map.put", "org.apache.sling.api.resource.ResourceResolver.create", "org.apache.sling.api.resource.ResourceResolver.hasChanges", "com.adobe.acs.commons.mcp.impl.processes.DataImporter.incrementCount", "com.adobe.acs.commons.mcp.impl.processes.DataImporter.trackActivity", "org.apache.sling.api.resource.ResourceResolver.commit", "org.apache.sling.api.resource.ResourceResolver.refresh"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.lang.Class"], ["java.util.Map"], ["org.apache.sling.api.resource.ModifiableValueMap", "java.util.Map"], ["java.util.Map"], ["java.lang.String"], ["java.lang.Object"], ["java.lang.Object", "java.lang.Object"], ["org.apache.sling.api.resource.Resource", "java.lang.String", "java.util.Map"], [""], ["java.util.EnumMap", "int"], ["java.lang.String", "java.lang.String", "java.lang.Integer"], [""], [""]], "passed_comments": [{"com.adobe.acs.commons.mcp.impl.processes.DataImporter.createPropertyMap": "Create map of properties for node."}, {"com.adobe.acs.commons.mcp.impl.processes.DataImporter.populateMetadataFromRow": "Update the resourceProperties with the properties from the row."}, {"com.adobe.acs.commons.mcp.impl.processes.DataImporter.createJcrContentPropertyMap": "Create map of properties for jcr:content node."}]}, {"index": "876", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/DataImporter.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.DataImporter.populateMetadataFromRow", "methodParameterType": "ModifiableValueMap#Map<String,Object>#", "methodParameterName": "resourceProperties#nodeInfo#", "methodBody": "private void populateMetadataFromRow(ModifiableValueMap resourceProperties, Map<String, Object> nodeInfo) {\n        LOG.debug(\"Start of populateMetadataFromRow\");\n\n        for (Map.Entry entry : nodeInfo.entrySet()) {\n            String key = (String)entry.getKey();\n            if (key != null\n                    && (mergeMode.overwriteProps || !resourceProperties.containsKey(key))) {\n                Object value = entry.getValue();\n                if (value != null) {\n                    resourceProperties.put(key, value);\n                }\n            }\n        }\n\n        LOG.debug(\"End of populateMetadataFromRow\");\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ParenthesizedExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression)ParenthesizedExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Update the resourceProperties with the properties from the row.", "call_func_name": ["org.slf4j.Logger.debug", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.sling.api.resource.ModifiableValueMap.containsKey", "org.apache.sling.api.resource.ModifiableValueMap.put"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], [""], ["java.lang.Object"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "877", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/DataImporter.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.DataImporter.createPropertyMap", "methodParameterType": "Map<String,CompositeVariant>#", "methodParameterName": "row#", "methodBody": "private Map<String, Object> createPropertyMap(Map<String, CompositeVariant> row) {\n        return row.entrySet().stream()\n                .filter(e -> !e.getKey().equals(ROW_NUMBER) && !e.getKey().equals(PATH) && e.getValue() != null && !e.getKey().contains(SLASH))\n                .collect(\n                        Collectors.toMap(\n                                e -> e.getKey(),\n                                e -> e.getValue().toPropertyValue()\n                        )\n                );\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#LambdaExpression#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(InfixExpression(InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create map of properties for node.", "call_func_name": ["java.util.Map.entrySet", "java.util.Set.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.function.Function.apply", "java.util.stream.Collectors.toMap", "java.util.stream.Stream.collect"], "call_func_parameter": [[""], [""], [""], ["java.util.function.Predicate"], [""], ["java.util.function.Function", "java.util.function.Function"], ["java.util.stream.Collector"]], "passed_comments": "/"}, {"index": "878", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/DataImporter.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.DataImporter.createJcrContentPropertyMap", "methodParameterType": "Map<String,CompositeVariant>#", "methodParameterName": "row#", "methodBody": "private Map<String, Object> createJcrContentPropertyMap(Map<String, CompositeVariant> row) {\n        return row.entrySet().stream()\n                .filter(e -> e.getKey().startsWith(JcrConstants.JCR_CONTENT))\n                .collect(\n                        Collectors.toMap(\n                                e -> e.getKey().replace(JcrConstants.JCR_CONTENT + SLASH, \"\"),\n                                e -> e.getValue().toPropertyValue()\n                        )\n                );\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#StringLiteral#MethodInvocation#LambdaExpression#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression(StringLiteral)StringLiteral)MethodInvocation)LambdaExpression(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create map of properties for jcr:content node.", "call_func_name": ["java.util.Map.entrySet", "java.util.Set.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.function.Function.apply", "java.util.stream.Collectors.toMap", "java.util.stream.Stream.collect"], "call_func_parameter": [[""], [""], [""], ["java.util.function.Predicate"], [""], ["java.util.function.Function", "java.util.function.Function"], ["java.util.stream.Collector"]], "passed_comments": "/"}, {"index": "879", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/AssetFolderCreator.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.AssetFolderCreator.parseAssetFolderDefinitions", "methodParameterType": "ActionManager#", "methodParameterName": "manager#", "methodBody": "public void parseAssetFolderDefinitions(ActionManager manager) throws Exception {\n        manager.withResolver(rr -> {\n            final XSSFWorkbook workbook = new XSSFWorkbook(excelFile);\n            // Close the InputStream to prevent resource leaks.\n            excelFile.close();\n\n            final XSSFSheet sheet = workbook.getSheetAt(0);\n            final Iterator<Row> rows = sheet.rowIterator();\n\n            while(rows.hasNext()) {\n                parseAssetFolderRow(rows.next());\n            }\n            log.info(\"Finished Parsing and collected [ {} ] asset folders for creation.\", assetFolderDefinitions.size());\n        });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)WhileStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Parses the input Excel file and creates a list of AssetFolderDefinition objects to process.", "call_func_name": ["com.adobe.acs.commons.functions.CheckedConsumer.accept", "com.adobe.acs.commons.fam.ActionManager.withResolver"], "call_func_parameter": [["com.adobe.acs.commons.mcp.impl.processes.AssetFolderCreator"], ["com.adobe.acs.commons.functions.CheckedConsumer"]], "passed_comments": [{"com.adobe.acs.commons.fam.ActionManager.withResolver": "Perform action right now using a provided pooled resolver"}]}, {"index": "880", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/AssetFolderCreator.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.AssetFolderCreator.parseAssetFolderRow", "methodParameterType": "Row#", "methodParameterName": "row#", "methodBody": "private void parseAssetFolderRow(final Row row) {\n        final Iterator<Cell> cells = row.cellIterator();\n\n        // The previousAssetFolderPath is reset on each new row.\n        String previousAssetFolderPath = null;\n\n        while (cells.hasNext()) {\n            try {\n                previousAssetFolderPath = parseAssetFolderCell(cells.next(), previousAssetFolderPath);\n            } catch (IllegalArgumentException e) {\n                // Error logged in throwing method parseAssetFolderCell.\n                // Skip rest of row to avoid creating undesired structures with bad data.\n                break;\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#BreakStatement#Block#CatchClause#TryStatement#Block#WhileStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(BreakStatement)BreakStatement)Block)CatchClause)TryStatement)Block)WhileStatement)Block)MethodDeclaration", "methodDoc": "Parse a row in the Excel that represents an asset folder and ancestors.", "call_func_name": ["org.apache.poi.ss.usermodel.Row.cellIterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.adobe.acs.commons.mcp.impl.processes.AssetFolderCreator.parseAssetFolderCell"], "call_func_parameter": [[""], [""], [""], ["org.apache.poi.ss.usermodel.Cell", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.mcp.impl.processes.AssetFolderCreator.parseAssetFolderCell": "Parse a single cell from an Excel row."}]}, {"index": "881", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/AssetFolderCreator.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.AssetFolderCreator.parseAssetFolderCell", "methodParameterType": "Cell#String#", "methodParameterName": "cell#previousAssetFolderPath#", "methodBody": "private String parseAssetFolderCell(final Cell cell, final String previousAssetFolderPath) throws IllegalArgumentException {\n        // #1791 - Cannot read from non-String type fields.\n        cell.setCellType(Cell.CELL_TYPE_STRING);\n\n        final String cellValue = StringUtils.trimToNull(cell.getStringCellValue());\n\n        if (StringUtils.isNotBlank(cellValue)) {\n\n            // Generate a asset folder definition that will in turn be used to drive the asset folder definition creation\n            AssetFolderDefinition assetFolderDefinition = getAssetFolderDefinition(primary, cellValue, previousAssetFolderPath);\n\n            // Try using the fallback converter if the primary convert could not resolve to a valid definition.\n            if (assetFolderDefinition == null) {\n                assetFolderDefinition = getAssetFolderDefinition(fallback, cellValue, previousAssetFolderPath);\n            }\n\n            if (assetFolderDefinition == null) {\n                log.warn(\"Could not find a Asset Folder Converter that accepts value [ {} ]; skipping...\", cellValue);\n                // Record parse failure\n                record(ReportRowStatus.FAILED_TO_PARSE, \"\", cellValue);\n                throw new IllegalArgumentException(String.format(\"Unable to parse value [ %s ]. Skipping rest of row to prevent undesired structured from being created.\", cellValue));\n            } else {\n                /* Prepare for next Cell */\n                if (assetFolderDefinitions.get(assetFolderDefinition.getId()) == null) {\n                    assetFolderDefinitions.put(assetFolderDefinition.getId(), assetFolderDefinition);\n                }\n\n                return assetFolderDefinition.getPath();\n            }\n        } else {\n            // If cell is blank then treat as it it is empty.\n            return previousAssetFolderPath;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Parse a single cell from an Excel row.", "call_func_name": ["org.apache.poi.ss.usermodel.Cell.setCellType", "org.apache.poi.ss.usermodel.Cell.getStringCellValue", "org.apache.commons.lang3.StringUtils.trimToNull", "org.apache.commons.lang3.StringUtils.isNotBlank", "org.slf4j.Logger.warn", "java.lang.String.format", "java.lang.IllegalArgumentException.<init>", "java.util.HashMap.get", "java.util.HashMap.put"], "call_func_parameter": [["int"], [""], ["java.lang.String"], ["java.lang.CharSequence"], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String"], ["java.lang.Object"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "882", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/AssetFolderCreator.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.AssetFolderCreator.createAssetFolder", "methodParameterType": "AssetFolderDefinition#ResourceResolver#", "methodParameterName": "assetFolderDefinition#resourceResolver#", "methodBody": "protected void createAssetFolder(final AssetFolderDefinition assetFolderDefinition, final ResourceResolver resourceResolver) {\n        ReportRowStatus status;\n\n        Resource folder = resourceResolver.getResource(assetFolderDefinition.getPath());\n\n        try {\n            if (folder == null) {\n                final Map<String, Object> folderProperties = new HashMap<>();\n                folderProperties.put(JcrConstants.JCR_PRIMARYTYPE, assetFolderDefinition.getNodeType());\n                folder = resourceResolver.create(resourceResolver.getResource(assetFolderDefinition.getParentPath()),\n                        assetFolderDefinition.getName(),\n                        folderProperties);\n\n                status = ReportRowStatus.CREATED;\n            } else {\n                status = ReportRowStatus.UPDATED_FOLDER_TITLES;\n            }\n\n            final Resource jcrContent = folder.getChild(JcrConstants.JCR_CONTENT);\n\n            if (jcrContent == null) {\n                final Map<String, Object> jcrContentProperties = new HashMap<>();\n                jcrContentProperties.put(JcrConstants.JCR_PRIMARYTYPE, JcrConstants.NT_UNSTRUCTURED);\n                resourceResolver.create(folder, JcrConstants.JCR_CONTENT, jcrContentProperties);\n            }\n\n            setTitles(folder, assetFolderDefinition);\n            record(status, assetFolderDefinition.getPath(), assetFolderDefinition.getTitle());\n\n            log.debug(\"Created Asset Folder [ {} -> {} ]\", assetFolderDefinition.getPath(), assetFolderDefinition.getTitle());\n        } catch (Exception e) {\n            record(ReportRowStatus.FAILED_TO_CREATE, assetFolderDefinition.getPath(), assetFolderDefinition.getTitle());\n            log.error(\"Unable to create Asset Folder [ {} -> {} ]\", new String[]{assetFolderDefinition.getPath(), assetFolderDefinition.getTitle()}, e);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ArrayInitializer#ArrayCreation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayInitializer)ArrayCreation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Creates an Asset Folder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "883", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/AssetFolderCreator.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.AssetFolderCreator.getAssetFolderDefinition", "methodParameterType": "AssetFolderBuilder#String#String#", "methodParameterName": "assetFolderBuilder#value#previousAssetFolderPath#", "methodBody": "private AssetFolderDefinition getAssetFolderDefinition(final AssetFolderBuilder assetFolderBuilder, final String value, String previousAssetFolderPath) {\n        final ResourceDefinitionBuilder resourceDefinitionBuilder = resourceDefinitionBuilders.get(assetFolderBuilder.name());\n\n        if (resourceDefinitionBuilder != null && resourceDefinitionBuilder.accepts(value)) {\n            return new AssetFolderDefinition(resourceDefinitionBuilder.convert(value), previousAssetFolderPath, assetFolderType);\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the Asset Folder Definition.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "884", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/BrokenLinksReport.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.BrokenLinksReport.collectPaths", "methodParameterType": "Map.Entry<String,Object>#Set<String>#", "methodParameterName": "property#htmlFields#", "methodBody": "static Stream<String> collectPaths(Map.Entry<String, Object> property, Set<String> htmlFields) {\n        Object p = property.getValue();\n\n        Stream<String> stream;\n        if (p.getClass() == String[].class) {\n            stream = Arrays.stream((String[]) p);\n        } else if (p.getClass() == String.class){\n            stream = Stream.of((String) p);\n        } else {\n            stream = Stream.empty();\n        }\n        if (htmlFields.contains(property.getKey())) {\n            stream = stream.flatMap(val -> {\n                try {\n                    // parse html and extract links via underlying tagsoup library\n                    LinkContentHandler linkHandler = new LinkContentHandler();\n                    HtmlParser parser = new HtmlParser();\n                    parser.parse(new ByteArrayInputStream(val.getBytes(\"utf-8\")), linkHandler, new Metadata(), new ParseContext());\n                    return linkHandler.getLinks().stream().map(Link::getUri);\n                } catch (Exception e) {\n                    return Stream.empty();\n                }\n            });\n        }\n        return stream;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#Dimension#ArrayType#TypeLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#CastExpression#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#CatchClause#TryStatement#Block#LambdaExpression#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)TypeLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)CastExpression)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ClassInstanceCreation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)CatchClause)TryStatement)Block)LambdaExpression)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Collect references from a JCR property. A property can be one of: <ol> <li>A string containing a reference, e.g, fileReference=/content/dam/image.png. </li> <li>An array of strings, e.g, fileReference=[/content/dam/image1.png, /content/dam/image2.png]</li> <li>An html fragment containing links , e.g, <pre> &lt;p&gt; &lt;a href=\"/content/site/page.html\"&gt;hello&lt;/a&gt; &lt;img src=\"/content/dam/image1.png\"&gt;hello&lt;/a&gt; &lt;/p&gt; </pre> </li> </ol>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "885", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/BrokenLinksReport.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.BrokenLinksReport.collectBrokenReferences", "methodParameterType": "Resource#Pattern#Set<String>#Set<String>#", "methodParameterName": "resource#regex#skipList#htmlFields#", "methodBody": "static Map<String, List<String>> collectBrokenReferences(Resource resource, Pattern regex, Set<String> skipList, Set<String> htmlFields) {\n\n        return resource.getValueMap().entrySet().stream()\n                .filter(entry -> !skipList.contains(entry.getKey()))\n                .collect(Collectors.toMap(\n                        entry -> resource.getPath() + \"/\" + entry.getKey(),\n                        entry -> {\n                            List<String> brokenPaths =  collectPaths(entry, htmlFields)\n                                    .filter(href -> regex.matcher(href).matches())\n                                    .filter(path -> ResourceUtil.isNonExistingResource(resource.getResourceResolver().resolve(path)))\n                                    .collect(Collectors.toList());\n                            return brokenPaths;\n                        })).entrySet().stream().filter(e -> !e.getValue().isEmpty())\n                .collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()));\n     }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#LambdaExpression#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#LambdaExpression#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)LambdaExpression(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Collect broken references from properties of the given resource", "call_func_name": ["org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.entrySet", "java.util.Set.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.function.Function.apply", "java.util.function.Function.apply", "java.util.stream.Collectors.toMap", "java.util.stream.Stream.collect", "java.util.Map.entrySet", "java.util.function.Predicate.test", "java.util.function.Function.apply"], "call_func_parameter": [[""], [""], [""], ["java.util.Set"], ["java.util.function.Predicate"], ["org.apache.sling.api.resource.Resource"], ["java.util.Set", "java.util.regex.Pattern", "org.apache.sling.api.resource.Resource"], ["java.util.function.Function", "java.util.function.Function"], ["java.util.stream.Collector"], [""], [""], [""]], "passed_comments": "/"}, {"index": "886", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/asset/AssetIngestorException.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.asset.AssetIngestorException.AssetIngestorException", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AssetIngestorException() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "887", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/asset/AssetIngestorException.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.asset.AssetIngestorException.AssetIngestorException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public AssetIngestorException(String message) {\n        super(message);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor with an error message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "888", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/asset/AssetIngestorException.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.asset.AssetIngestorException.AssetIngestorException", "methodParameterType": "String#Throwable#", "methodParameterName": "message#cause#", "methodBody": "public AssetIngestorException(String message, Throwable cause) {\n        super(message, cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor with an error message and a cause.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "889", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/asset/AssetIngestorException.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.asset.AssetIngestorException.AssetIngestorException", "methodParameterType": "Throwable#", "methodParameterName": "cause#", "methodBody": "public AssetIngestorException(Throwable cause) {\n        super(cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor with a cause.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "890", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/asset/ClientProvider.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.asset.ClientProvider.getHttpClientSupplier", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Supplier<HttpClient> getHttpClientSupplier() {\n        return httpClientSupplier;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the httpClientSupplier", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "891", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/asset/ClientProvider.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.asset.ClientProvider.setHttpClientSupplier", "methodParameterType": "Supplier<HttpClient>#", "methodParameterName": "httpClientSupplier#", "methodBody": "public void setHttpClientSupplier(Supplier<HttpClient> httpClientSupplier) {\n        this.httpClientSupplier = httpClientSupplier;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param httpClientSupplier the httpClientSupplier to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "892", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/asset/ClientProvider.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.asset.ClientProvider.getUsername", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getUsername() {\n        return username;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the username", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "893", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/asset/ClientProvider.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.asset.ClientProvider.setUsername", "methodParameterType": "String#", "methodParameterName": "username#", "methodBody": "public void setUsername(String username) {\n        this.username = username;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param username the username to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "894", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/asset/ClientProvider.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.asset.ClientProvider.getPassword", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPassword() {\n        return password;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the password", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "895", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/asset/ClientProvider.java", "methodName": "com.adobe.acs.commons.mcp.impl.processes.asset.ClientProvider.setPassword", "methodParameterType": "String#", "methodParameterName": "password#", "methodBody": "public void setPassword(String password) {\n        this.password = password;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param password the password to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "896", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/util/AssetPackageUtil.java", "methodName": "com.adobe.acs.commons.packaging.util.AssetPackageUtil.getPackageFilterPaths", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<PathFilterSet> getPackageFilterPaths() {\n        final String pagePath = properties.get(PN_PAGE_PATH, String.class);\n        final Set<PathFilterSet> packageFilterPathSet;\n        if (StringUtils.isBlank(pagePath)) {\n            packageFilterPathSet = Collections.emptySet();\n        } else {\n            packageFilterPathSet = this.findAssetPaths(resourceResolver, pagePath);\n        }\n\n        // Add the page path as a filter unless it is explicitly excluded\n        this.addPagePath(packageFilterPathSet, pagePath, properties.get(PN_EXCLUDE_PAGES, false));\n\n        List<PathFilterSet> packageFilterPaths = new ArrayList<>(packageFilterPathSet);\n        // Reverse the new list to put the page inclusion at the top\n        Collections.reverse(packageFilterPaths);\n        return packageFilterPaths;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the filter paths by recursing through the content and returns the list.", "call_func_name": ["org.apache.sling.api.resource.ValueMap.get", "org.apache.commons.lang3.StringUtils.isBlank", "java.util.Collections.emptySet", "com.adobe.acs.commons.packaging.util.AssetPackageUtil.findAssetPaths", "java.lang.Boolean.valueOf", "org.apache.sling.api.resource.ValueMap.get", "java.lang.Boolean.booleanValue", "com.adobe.acs.commons.packaging.util.AssetPackageUtil.addPagePath", "java.util.ArrayList.<init>", "java.util.Collections.reverse"], "call_func_parameter": [["java.lang.String", "java.lang.Class"], ["java.lang.CharSequence"], [""], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String"], ["boolean"], ["java.lang.String", "java.lang.Object"], [""], ["java.util.Set", "java.lang.String", "boolean"], ["java.util.Collection"], ["java.util.List"]], "passed_comments": [{"com.adobe.acs.commons.packaging.util.AssetPackageUtil.findAssetPaths": "Recursively iterate over the parent path specified in the configuration to aggregate all the String or String Array property values that are referencing a path in the DAM."}, {"com.adobe.acs.commons.packaging.util.AssetPackageUtil.addPagePath": "Optionally adds a single page path to the list of package path filters. Also adds any exclusions generated when creating the list of asset paths."}]}, {"index": "897", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/util/AssetPackageUtil.java", "methodName": "com.adobe.acs.commons.packaging.util.AssetPackageUtil.generatePatterns", "methodParameterType": "String[]#", "methodParameterName": "input#", "methodBody": "private List<Pattern> generatePatterns(String[] input) {\n        final List<Pattern> patterns = new ArrayList<>();\n        for (String item : input) {\n            try {\n                if (StringUtils.isBlank(item)) {\n                    continue;\n                }\n                patterns.add(Pattern.compile(item));\n            } catch (PatternSyntaxException e) {\n                log.error(\"Pattern invalid, skipping. Pattern value: \" + item);\n            }\n        }\n        return patterns;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(TryStatement(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ContinueStatement)ContinueStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Takes a list of Strings that should be valid patterns. If they are not then the exception is logged and the pattern is not added to the list of checked patterns.", "call_func_name": ["java.util.ArrayList.<init>", "org.apache.commons.lang3.StringUtils.isBlank", "java.util.regex.Pattern.compile", "java.util.List.add", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.slf4j.Logger.error"], "call_func_parameter": [[""], ["java.lang.CharSequence"], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "898", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/util/AssetPackageUtil.java", "methodName": "com.adobe.acs.commons.packaging.util.AssetPackageUtil.findAssetPaths", "methodParameterType": "ResourceResolver#String#", "methodParameterName": "resourceResolver#pagePath#", "methodBody": "private Set<PathFilterSet> findAssetPaths(final ResourceResolver resourceResolver,\n                                               final String pagePath) {\n\n        final Set<PathFilterSet> filters = new LinkedHashSet<>();\n        final Resource parentResource = resourceResolver.resolve(pagePath);\n        if (isExcluded(this.pageExclusionPatterns, pagePath)) {\n            if (pagePath.endsWith(\"/\" + NameConstants.NN_CONTENT)) {\n                return filters;\n            }\n            final PageManager pageManager = resourceResolver.adaptTo(PageManager.class);\n            Page page = pageManager.getContainingPage(parentResource);\n            if (page != null) {\n                excludedPages.add(page.getPath());\n            } else {\n                excludedPages.add(parentResource.getPath());\n            }\n            return filters;\n        }\n        final ValueMap parentResourceProperties = parentResource.getValueMap();\n\n        // Iterate over property map for Strings and String arrays and optionally add a filter\n        for (String key : parentResourceProperties.keySet()) {\n            final Object value = parentResourceProperties.get(key);\n            if (value instanceof String) {\n                addFilter(filters, (String) value, resourceResolver);\n            } else if (value instanceof String[]) {\n                final String[] arrayValue = (String[]) value;\n                for (String stringValue : arrayValue) {\n                    addFilter(filters, stringValue, resourceResolver);\n                }\n            }\n        }\n\n        // Recurse over child nodes and add the asset references found there.\n        final Iterator<Resource> children = parentResource.listChildren();\n        while (children.hasNext()) {\n            final Resource child = children.next();\n            filters.addAll(findAssetPaths(resourceResolver, child.getPath()));\n        }\n\n        return filters;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#InfixExpression#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#InstanceofExpression#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#IfStatement#Block#EnhancedForStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement)IfStatement)Block)EnhancedForStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)WhileStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Recursively iterate over the parent path specified in the configuration to aggregate all the String or String Array property values that are referencing a path in the DAM.", "call_func_name": ["java.util.LinkedHashSet.<init>", "org.apache.sling.api.resource.ResourceResolver.resolve", "com.adobe.acs.commons.packaging.util.AssetPackageUtil.isExcluded", "java.lang.String.endsWith", "org.apache.sling.api.resource.ResourceResolver.adaptTo", "com.day.cq.wcm.api.PageManager.getContainingPage", "com.day.cq.wcm.api.Page.getPath", "java.util.Set.add", "org.apache.sling.api.resource.Resource.getPath", "org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.keySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.sling.api.resource.ValueMap.get", "com.adobe.acs.commons.packaging.util.AssetPackageUtil.addFilter", "org.apache.sling.api.resource.Resource.listChildren", "com.adobe.acs.commons.packaging.util.AssetPackageUtil.findAssetPaths", "java.util.Set.addAll"], "call_func_parameter": [[""], ["java.lang.String"], ["java.util.List", "java.lang.String"], ["java.lang.String"], ["java.lang.Class"], ["org.apache.sling.api.resource.Resource"], [""], ["java.lang.Object"], [""], [""], [""], [""], [""], [""], ["java.lang.Object"], ["java.util.Set", "java.lang.String", "org.apache.sling.api.resource.ResourceResolver"], [""], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String"], ["java.util.Collection"]], "passed_comments": [{"com.adobe.acs.commons.packaging.util.AssetPackageUtil.isExcluded": "Checks if the path should be excluded by checking it against the passed pattern list."}, {"com.adobe.acs.commons.packaging.util.AssetPackageUtil.addFilter": "Adds a property value to the filter set list if it is not empty, referencing the DAM, and is an actual DAM Asset."}, {"com.adobe.acs.commons.packaging.util.AssetPackageUtil.findAssetPaths": "Recursively iterate over the parent path specified in the configuration to aggregate all the String or String Array property values that are referencing a path in the DAM."}]}, {"index": "899", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/util/AssetPackageUtil.java", "methodName": "com.adobe.acs.commons.packaging.util.AssetPackageUtil.addPagePath", "methodParameterType": "Set<PathFilterSet>#String#boolean#", "methodParameterName": "currentPaths#pagePath#excludePages#", "methodBody": "private void addPagePath(Set<PathFilterSet> currentPaths, String pagePath, boolean excludePages) {\n        if (!excludePages && currentPaths.size() > 0) {\n            PathFilterSet pageFilter = new PathFilterSet(pagePath);\n            if (excludedPages.size() > 0) {\n                for (String excludedPath : excludedPages) {\n                    pageFilter.addExclude(new DefaultPathFilter(excludedPath));\n                }\n            }\n            currentPaths.add(pageFilter);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#PrefixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Optionally adds a single page path to the list of package path filters. Also adds any exclusions generated when creating the list of asset paths.", "call_func_name": ["java.util.Set.size", "org.apache.jackrabbit.vault.fs.api.PathFilterSet.<init>", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.jackrabbit.vault.fs.filter.DefaultPathFilter.<init>", "org.apache.jackrabbit.vault.fs.api.PathFilterSet.addExclude", "java.util.Set.add"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], [""], ["java.lang.String"], ["org.apache.jackrabbit.vault.fs.api.Filter"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "900", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/util/AssetPackageUtil.java", "methodName": "com.adobe.acs.commons.packaging.util.AssetPackageUtil.addFilter", "methodParameterType": "Set<PathFilterSet>#String#ResourceResolver#", "methodParameterName": "filters#value#resourceResolver#", "methodBody": "private void addFilter(final Set<PathFilterSet> filters, final String value,\n                           final ResourceResolver resourceResolver) {\n        if (StringUtils.isNotBlank(value) && DamUtil.isAsset(resourceResolver.getResource(value))\n                && fitsAssetPattern(value)) {\n            filters.add(new PathFilterSet(value));\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Adds a property value to the filter set list if it is not empty, referencing the DAM, and is an actual DAM Asset.", "call_func_name": ["org.apache.commons.lang3.StringUtils.isNotBlank", "org.apache.sling.api.resource.ResourceResolver.getResource", "com.day.cq.dam.commons.util.DamUtil.isAsset", "com.adobe.acs.commons.packaging.util.AssetPackageUtil.fitsAssetPattern", "org.apache.jackrabbit.vault.fs.api.PathFilterSet.<init>", "java.util.Set.add"], "call_func_parameter": [["java.lang.CharSequence"], ["java.lang.String"], ["org.apache.sling.api.resource.Resource"], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.packaging.util.AssetPackageUtil.fitsAssetPattern": "Checks to see if the passed asset path fits the patterns necessary. It checks the path prefix as well as seeing if the path is excluded from the aggregation."}]}, {"index": "901", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/util/AssetPackageUtil.java", "methodName": "com.adobe.acs.commons.packaging.util.AssetPackageUtil.fitsAssetPattern", "methodParameterType": "String#", "methodParameterName": "assetPath#", "methodBody": "private boolean fitsAssetPattern(final String assetPath) {\n        boolean startsWith = this.customPrefix != null\n                ? assetPath.startsWith(this.customPrefix)\n                : assetPath.startsWith(DamConstants.MOUNTPOINT_ASSETS);\n        boolean notExcluded = !isExcluded(this.assetExclusionPatterns, assetPath);\n        return startsWith && notExcluded;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#PrefixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(PrefixExpression(MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)PrefixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks to see if the passed asset path fits the patterns necessary. It checks the path prefix as well as seeing if the path is excluded from the aggregation.", "call_func_name": ["java.lang.String.startsWith", "com.adobe.acs.commons.packaging.util.AssetPackageUtil.isExcluded"], "call_func_parameter": [["java.lang.String"], ["java.util.List", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.packaging.util.AssetPackageUtil.isExcluded": "Checks if the path should be excluded by checking it against the passed pattern list."}]}, {"index": "902", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/util/AssetPackageUtil.java", "methodName": "com.adobe.acs.commons.packaging.util.AssetPackageUtil.isExcluded", "methodParameterType": "List<Pattern>#String#", "methodParameterName": "patterns#path#", "methodBody": "private boolean isExcluded(List<Pattern> patterns, String path) {\n        for (Pattern pattern : patterns) {\n\n            // Check the current path against the actual pattern (supporting regex)\n            if (pattern.matcher(path).matches()) {\n                return true;\n            }\n\n            // Check the current path against the literal string of the path (supporting folder\n            // exclusion without needing /.* at the end of a folder for assets)\n            String literalPattern = pattern.toString();\n            literalPattern = literalPattern.endsWith(\"/\") ? literalPattern : literalPattern + \"/\";\n            if (path.startsWith(literalPattern)) {\n                return true;\n            }\n        }\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#InfixExpression#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ConditionalExpression)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the path should be excluded by checking it against the passed pattern list.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "java.util.regex.Pattern.toString", "java.lang.String.endsWith", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.String.startsWith"], "call_func_parameter": [[""], [""], [""], ["java.lang.CharSequence"], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "903", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/QueryPackagerServletImpl.java", "methodName": "com.adobe.acs.commons.packaging.impl.QueryPackagerServletImpl.getProperties", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "private ValueMap getProperties(final SlingHttpServletRequest request) {\n        if (request.getResource().getChild(\"configuration\") == null) {\n            log.warn(\"Query Packager Configuration node could not be found for: {}\", request.getResource());\n            return new ValueMapDecorator(new HashMap<String, Object>());\n        } else {\n            return request.getResource().getChild(\"configuration\").adaptTo(ValueMap.class);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Gets the properties saved to the Query Packager Page's jcr:content node.", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getResource", "org.apache.sling.api.resource.Resource.getChild", "org.slf4j.Logger.warn", "java.util.HashMap.<init>", "org.apache.sling.api.wrappers.ValueMapDecorator.<init>", "org.apache.sling.api.resource.Resource.adaptTo"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String", "java.lang.Object"], [""], ["java.util.Map"], ["java.lang.Class"]], "passed_comments": "/"}, {"index": "904", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/InstantPackageImpl.java", "methodName": "com.adobe.acs.commons.packaging.impl.InstantPackageImpl.getImmediateChildren", "methodParameterType": "ResourceResolver#String[]#ArrayList<Resource>#", "methodParameterName": "resourceResolver#pathList#allPaths#", "methodBody": "private ArrayList<Resource> getImmediateChildren(ResourceResolver resourceResolver, String[] pathList,\n            ArrayList<Resource> allPaths) {\n\n        Iterator<Resource> childAssetRes;\n        Iterator<Page> childPageRes;\n        // iterate over all paths and create list with immediate children\n        for (String path : pathList) {\n\n            Resource currentPath = resourceResolver.getResource(path);\n            if (path.startsWith(\"/content/dam\")) {\n                childAssetRes = currentPath.listChildren();\n                getImmediateAssets(resourceResolver, childAssetRes, allPaths);\n\n            } else {\n                childPageRes = currentPath.adaptTo(Page.class).listChildren();\n                getImmediatePages(resourceResolver, currentPath, childPageRes, allPaths);\n\n            }\n\n        }\n\n        return allPaths;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the list of immediate children for the current selected path in sites console", "call_func_name": ["org.apache.sling.api.resource.ResourceResolver.getResource", "java.lang.String.startsWith", "org.apache.sling.api.resource.Resource.listChildren", "com.adobe.acs.commons.packaging.impl.InstantPackageImpl.getImmediateAssets", "org.apache.sling.api.resource.Resource.adaptTo", "com.day.cq.wcm.api.Page.listChildren", "com.adobe.acs.commons.packaging.impl.InstantPackageImpl.getImmediatePages"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], [""], ["org.apache.sling.api.resource.ResourceResolver", "java.util.Iterator", "java.util.ArrayList"], ["java.lang.Class"], [""], ["org.apache.sling.api.resource.ResourceResolver", "org.apache.sling.api.resource.Resource", "java.util.Iterator", "java.util.ArrayList"]], "passed_comments": [{"com.adobe.acs.commons.packaging.impl.InstantPackageImpl.getImmediateAssets": "Get the list of immediate assets"}, {"com.adobe.acs.commons.packaging.impl.InstantPackageImpl.getImmediatePages": "Get the list of immediate child pages"}]}, {"index": "905", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/InstantPackageImpl.java", "methodName": "com.adobe.acs.commons.packaging.impl.InstantPackageImpl.getImmediatePages", "methodParameterType": "ResourceResolver#Resource#Iterator<Page>#ArrayList<Resource>#", "methodParameterName": "resourceResolver#pagePath#childPageRes#allPaths#", "methodBody": "private ArrayList<Resource> getImmediatePages(ResourceResolver resourceResolver, Resource pagePath,\n            Iterator<Page> childPageRes, ArrayList<Resource> allPaths) {\n\n        allPaths.add(resourceResolver.getResource(pagePath.getPath() + JCR_CONTENT_APPEND));\n        while (childPageRes.hasNext()) {\n            Resource res = resourceResolver.getResource(childPageRes.next().getPath() + JCR_CONTENT_APPEND);\n\n            // ignore folder and add pages only\n            if (\"cq:PageContent\".equals(res.getValueMap().get(JcrConstants.JCR_PRIMARYTYPE, String.class))) {\n                allPaths.add(res);\n            }\n        }\n\n        return allPaths;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#WhileStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)WhileStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the list of immediate child pages", "call_func_name": ["java.lang.StringBuilder.<init>", "org.apache.sling.api.resource.Resource.getPath", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.sling.api.resource.ResourceResolver.getResource", "java.util.ArrayList.add", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.day.cq.wcm.api.Page.getPath", "org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.get", "java.lang.String.equals"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.Object"], [""], [""], [""], [""], ["java.lang.String", "java.lang.Class"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "906", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/InstantPackageImpl.java", "methodName": "com.adobe.acs.commons.packaging.impl.InstantPackageImpl.getImmediateAssets", "methodParameterType": "ResourceResolver#Iterator<Resource>#ArrayList<Resource>#", "methodParameterName": "resourceResolver#childRes#allPaths#", "methodBody": "private ArrayList<Resource> getImmediateAssets(ResourceResolver resourceResolver, Iterator<Resource> childRes,\n            ArrayList<Resource> allPaths) {\n\n        while (childRes.hasNext()) {\n            Resource res = resourceResolver.getResource(childRes.next().getPath());\n\n            // ignore folder and add assets only\n            if (DamConstants.NT_DAM_ASSET.equals(res.getValueMap().get(JcrConstants.JCR_PRIMARYTYPE, String.class))) {\n                allPaths.add(res);\n            }\n        }\n\n        return allPaths;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#WhileStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)WhileStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the list of immediate assets", "call_func_name": ["java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.sling.api.resource.Resource.getPath", "org.apache.sling.api.resource.ResourceResolver.getResource", "org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.get", "java.lang.String.equals", "java.util.ArrayList.add"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Class"], ["java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "907", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/InstantPackageImpl.java", "methodName": "com.adobe.acs.commons.packaging.impl.InstantPackageImpl.getSelectedPath", "methodParameterType": "ResourceResolver#String[]#ArrayList<Resource>#", "methodParameterName": "resourceResolver#pathList#allPaths#", "methodBody": "private ArrayList<Resource> getSelectedPath(ResourceResolver resourceResolver, String[] pathList,\n            ArrayList<Resource> allPaths) {\n\n        // only selected path by adding jcr:content at the end\n        for (String path : pathList) {\n            Resource currentPath = resourceResolver.getResource(path);\n            allPaths.add(resourceResolver.getResource(currentPath.getPath() + JCR_CONTENT_APPEND));\n\n        }\n\n        return allPaths;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get only selected path in sites console", "call_func_name": ["org.apache.sling.api.resource.ResourceResolver.getResource", "java.lang.StringBuilder.<init>", "org.apache.sling.api.resource.Resource.getPath", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.ArrayList.add"], "call_func_parameter": [["java.lang.String"], [""], [""], ["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "908", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/InstantPackageImpl.java", "methodName": "com.adobe.acs.commons.packaging.impl.InstantPackageImpl.getAllChildren", "methodParameterType": "ResourceResolver#String[]#ArrayList<Resource>#", "methodParameterName": "resourceResolver#pathList#allPaths#", "methodBody": "private ArrayList<Resource> getAllChildren(ResourceResolver resourceResolver, String[] pathList,\n            ArrayList<Resource> allPaths) {\n        // all selected path with jcr:content to include all children\n        for (String path : pathList) {\n            Resource currentPath = resourceResolver.getResource(path);\n            allPaths.add(resourceResolver.getResource(currentPath.getPath()));\n\n        }\n\n        return allPaths;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get all children of selected path in sites console", "call_func_name": ["org.apache.sling.api.resource.ResourceResolver.getResource", "org.apache.sling.api.resource.Resource.getPath", "java.util.ArrayList.add"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "909", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/PackageHelperImpl.java", "methodName": "com.adobe.acs.commons.packaging.impl.PackageHelperImpl.addThumbnail", "methodParameterType": "JcrPackage#Resource#", "methodParameterName": "jcrPackage#thumbnailResource#", "methodBody": "public void addThumbnail(final JcrPackage jcrPackage, Resource thumbnailResource) {\n        if (jcrPackage == null) {\n            log.error(\"JCR Package is null; no package thumbnail needed for null packages!\");\n            return;\n        }\n        Node thumbnailNode = null;\n        if (thumbnailResource != null) {\n            thumbnailNode = thumbnailResource.adaptTo(Node.class);\n        }\n\n        try {\n            boolean useDefault = thumbnailNode == null || !thumbnailNode.isNodeType(JcrConstants.NT_FILE);\n            final Node dstParentNode = jcrPackage.getDefinition().getNode();\n            final Session session = dstParentNode.getSession();\n            if (useDefault) {\n                log.debug(\"Using default ACS AEM Commons packager package icon.\");\n                if (session.nodeExists(DEFAULT_PACKAGE_THUMBNAIL_RESOURCE_PATH)) {\n                    thumbnailNode = session.getNode(DEFAULT_PACKAGE_THUMBNAIL_RESOURCE_PATH);\n                }\n            }\n\n            if (thumbnailNode == null || !thumbnailNode.isNodeType(JcrConstants.NT_FILE)) {\n                log.warn(\"Cannot find a specific OR a default package icon; no package icon will be used.\");\n            } else {\n                JcrUtil.copy(thumbnailNode, dstParentNode, NN_THUMBNAIL);\n                dstParentNode.getSession().save();\n            }\n        } catch (RepositoryException e) {\n            log.error(\"Could not add package thumbnail: {}\", e);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(TryStatement(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.slf4j.Logger.error", "org.apache.sling.api.resource.Resource.adaptTo", "javax.jcr.Node.isNodeType", "org.apache.jackrabbit.vault.packaging.JcrPackage.getDefinition", "org.apache.jackrabbit.vault.packaging.JcrPackageDefinition.getNode", "javax.jcr.Node.getSession", "org.slf4j.Logger.debug", "javax.jcr.Session.nodeExists", "javax.jcr.Session.getNode", "org.slf4j.Logger.warn", "com.day.cq.commons.jcr.JcrUtil.copy", "javax.jcr.Session.save", "org.slf4j.Logger.error"], "call_func_parameter": [["java.lang.String"], ["java.lang.Class"], ["java.lang.String"], [""], [""], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["javax.jcr.Node", "javax.jcr.Node", "java.lang.String"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "910", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/PackageHelperImpl.java", "methodName": "com.adobe.acs.commons.packaging.impl.PackageHelperImpl.removePackage", "methodParameterType": "JcrPackageManager#String#String#String#", "methodParameterName": "jcrPackageManager#groupName#name#version#", "methodBody": "public void removePackage(final JcrPackageManager jcrPackageManager,\n            final String groupName, final String name,\n            final String version) throws RepositoryException {\n        final PackageId packageId = new PackageId(groupName, name, version);\n        final JcrPackage jcrPackage = jcrPackageManager.open(packageId);\n\n        if (jcrPackage != null && jcrPackage.getNode() != null) {\n            jcrPackage.getNode().remove();\n            jcrPackage.getNode().getSession().save();\n        } else {\n            log.debug(\"Nothing to remove at: \", packageId.getInstallationPath());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.jackrabbit.vault.packaging.PackageId.<init>", "org.apache.jackrabbit.vault.packaging.JcrPackageManager.open", "org.apache.jackrabbit.vault.packaging.JcrPackage.getNode", "javax.jcr.Node.remove", "javax.jcr.Node.getSession", "javax.jcr.Session.save", "org.apache.jackrabbit.vault.packaging.PackageId.getInstallationPath", "org.slf4j.Logger.debug"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String"], ["org.apache.jackrabbit.vault.packaging.PackageId"], [""], [""], [""], [""], [""], ["java.lang.String", "java.lang.Object"]], "passed_comments": "/"}, {"index": "911", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/PackageHelperImpl.java", "methodName": "com.adobe.acs.commons.packaging.impl.PackageHelperImpl.createPackage", "methodParameterType": "Collection<Resource>#Session#String#String#String#ConflictResolution#Map<String,String>#", "methodParameterName": "resources#session#groupName#name#version#conflictResolution#packageDefinitionProperties#", "methodBody": "public JcrPackage createPackage(final Collection<Resource> resources, final Session session,\n            final String groupName, final String name, String version,\n            final ConflictResolution conflictResolution,\n            final Map<String, String> packageDefinitionProperties)\n            throws IOException, RepositoryException {\n\n        final List<PathFilterSet> pathFilterSets = new ArrayList<PathFilterSet>();\n\n        for (final Resource resource : resources) {\n            pathFilterSets.add(new PathFilterSet(resource.getPath()));\n        }\n\n        return this.createPackageFromPathFilterSets(pathFilterSets, session, groupName, name, version,\n                conflictResolution, packageDefinitionProperties);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "912", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/PackageHelperImpl.java", "methodName": "com.adobe.acs.commons.packaging.impl.PackageHelperImpl.createPackageForPaths", "methodParameterType": "Collection<String>#Session#String#String#String#ConflictResolution#Map<String,String>#", "methodParameterName": "paths#session#groupName#name#version#conflictResolution#packageDefinitionProperties#", "methodBody": "@Override\n    public JcrPackage createPackageForPaths(final Collection<String> paths, final Session session,\n            final String groupName, String name, final String version,\n            final ConflictResolution conflictResolution,\n            Map<String, String> packageDefinitionProperties)\n            throws IOException, RepositoryException {\n\n        final List<PathFilterSet> pathFilterSets = new ArrayList<PathFilterSet>();\n\n        for (final String path : paths) {\n            pathFilterSets.add(new PathFilterSet(path));\n        }\n\n        return this.createPackageFromPathFilterSets(pathFilterSets, session, groupName, name, version,\n                conflictResolution, packageDefinitionProperties);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "913", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/PackageHelperImpl.java", "methodName": "com.adobe.acs.commons.packaging.impl.PackageHelperImpl.createPackageFromPathFilterSets", "methodParameterType": "Collection<PathFilterSet>#Session#String#String#String#ConflictResolution#Map<String,String>#", "methodParameterName": "pathFilterSets#session#groupName#name#version#conflictResolution#packageDefinitionProperties#", "methodBody": "public JcrPackage createPackageFromPathFilterSets(final Collection<PathFilterSet> pathFilterSets,\n            final Session session,\n            final String groupName, final String name, String version,\n            final ConflictResolution conflictResolution,\n            final Map<String, String> packageDefinitionProperties)\n            throws IOException, RepositoryException {\n\n        final JcrPackageManager jcrPackageManager = packaging.getPackageManager(session);\n\n        if (ConflictResolution.Replace.equals(conflictResolution)) {\n            this.removePackage(jcrPackageManager, groupName, name, version);\n        } else if (ConflictResolution.IncrementVersion.equals(conflictResolution)) {\n            version = this.getNextVersion(jcrPackageManager, groupName, name, version).toString();\n        }\n\n        final JcrPackage jcrPackage = jcrPackageManager.create(groupName, name, version);\n        final JcrPackageDefinition jcrPackageDefinition = jcrPackage.getDefinition();\n        final DefaultWorkspaceFilter workspaceFilter = new DefaultWorkspaceFilter();\n\n        for (final PathFilterSet pathFilterSet : pathFilterSets) {\n            workspaceFilter.add(pathFilterSet);\n        }\n\n        jcrPackageDefinition.setFilter(workspaceFilter, true);\n\n        for (final Map.Entry<String, String> entry : packageDefinitionProperties.entrySet()) {\n            jcrPackageDefinition.set(entry.getKey(), entry.getValue(), false);\n        }\n\n        session.save();\n\n        return jcrPackage;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "914", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/PackageHelperImpl.java", "methodName": "com.adobe.acs.commons.packaging.impl.PackageHelperImpl.getContents", "methodParameterType": "JcrPackage#", "methodParameterName": "jcrPackage#", "methodBody": "public List<String> getContents(final JcrPackage jcrPackage) throws IOException,\n            RepositoryException, PackageException {\n\n        JcrPackageCoverageProgressListener jcrPackageCoverageProgressListener\n                = new JcrPackageCoverageProgressListener();\n\n        ImportOptions importOptions = new ImportOptions();\n        importOptions.setDryRun(true);\n        importOptions.setListener(jcrPackageCoverageProgressListener);\n\n        jcrPackage.extract(importOptions);\n\n        return jcrPackageCoverageProgressListener.getCoverage();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["com.adobe.acs.commons.packaging.impl.JcrPackageCoverageProgressListener.<init>", "org.apache.jackrabbit.vault.fs.io.ImportOptions.<init>", "org.apache.jackrabbit.vault.fs.io.ImportOptions.setDryRun", "org.apache.jackrabbit.vault.fs.io.ImportOptions.setListener", "org.apache.jackrabbit.vault.packaging.JcrPackage.extract", "com.adobe.acs.commons.packaging.impl.JcrPackageCoverageProgressListener.getCoverage"], "call_func_parameter": [[""], [""], ["boolean"], ["org.apache.jackrabbit.vault.fs.api.ProgressTrackerListener"], ["org.apache.jackrabbit.vault.fs.io.ImportOptions"], [""]], "passed_comments": "/"}, {"index": "915", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/PackageHelperImpl.java", "methodName": "com.adobe.acs.commons.packaging.impl.PackageHelperImpl.getSuccessJSON", "methodParameterType": "JcrPackage#", "methodParameterName": "jcrPackage#", "methodBody": "public String getSuccessJSON(final JcrPackage jcrPackage) throws RepositoryException {\n        final JsonObject json = new JsonObject();\n\n        json.addProperty(KEY_STATUS, \"success\");\n        json.addProperty(KEY_PATH, jcrPackage.getNode().getPath());\n        JsonArray filterSetsArray = new JsonArray();\n        json.add(KEY_FILTER_SETS, filterSetsArray);\n\n        final List<PathFilterSet> filterSets = jcrPackage.getDefinition().getMetaInf().getFilter().getFilterSets();\n        for (final PathFilterSet filterSet : filterSets) {\n            final JsonObject jsonFilterSet = new JsonObject();\n            jsonFilterSet.addProperty(KEY_IMPORT_MODE, filterSet.getImportMode().name());\n            jsonFilterSet.addProperty(KEY_ROOT_PATH, filterSet.getRoot());\n\n            filterSetsArray.add(jsonFilterSet);\n        }\n\n        return json.toString();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["com.google.gson.JsonObject.<init>", "com.google.gson.JsonObject.addProperty", "org.apache.jackrabbit.vault.packaging.JcrPackage.getNode", "javax.jcr.Node.getPath", "com.google.gson.JsonArray.<init>", "com.google.gson.JsonObject.add", "org.apache.jackrabbit.vault.packaging.JcrPackage.getDefinition", "org.apache.jackrabbit.vault.packaging.JcrPackageDefinition.getMetaInf", "org.apache.jackrabbit.vault.fs.config.MetaInf.getFilter", "org.apache.jackrabbit.vault.fs.api.WorkspaceFilter.getFilterSets", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.jackrabbit.vault.fs.api.PathFilterSet.getImportMode", "org.apache.jackrabbit.vault.fs.api.ImportMode.name", "org.apache.jackrabbit.vault.fs.api.PathFilterSet.getRoot", "com.google.gson.JsonArray.add", "com.google.gson.JsonObject.toString"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""], [""], [""], ["java.lang.String", "com.google.gson.JsonElement"], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], ["com.google.gson.JsonElement"], [""]], "passed_comments": "/"}, {"index": "916", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/PackageHelperImpl.java", "methodName": "com.adobe.acs.commons.packaging.impl.PackageHelperImpl.getPreviewJSON", "methodParameterType": "Collection<Resource>#", "methodParameterName": "resources#", "methodBody": "public String getPreviewJSON(final Collection<Resource> resources) {\n        final List<PathFilterSet> pathFilterSets = new ArrayList<PathFilterSet>();\n\n        for (final Resource resource : resources) {\n            pathFilterSets.add(new PathFilterSet(resource.getPath()));\n        }\n\n        return this.getPathFilterSetPreviewJSON(pathFilterSets);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#ThisExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.util.ArrayList.<init>", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.sling.api.resource.Resource.getPath", "org.apache.jackrabbit.vault.fs.api.PathFilterSet.<init>", "java.util.List.add", "com.adobe.acs.commons.packaging.impl.PackageHelperImpl.getPathFilterSetPreviewJSON"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.Object"], ["java.util.Collection"]], "passed_comments": [{"com.adobe.acs.commons.packaging.impl.PackageHelperImpl.getPathFilterSetPreviewJSON": "{@inheritDoc}"}]}, {"index": "917", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/PackageHelperImpl.java", "methodName": "com.adobe.acs.commons.packaging.impl.PackageHelperImpl.getPreviewJSONForPaths", "methodParameterType": "Collection<String>#", "methodParameterName": "paths#", "methodBody": "public String getPreviewJSONForPaths(Collection<String> paths) {\n        final List<PathFilterSet> pathFilterSets = new ArrayList<PathFilterSet>();\n\n        for (final String path : paths) {\n            pathFilterSets.add(new PathFilterSet(path));\n        }\n\n        return this.getPathFilterSetPreviewJSON(pathFilterSets);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#ThisExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.util.ArrayList.<init>", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.jackrabbit.vault.fs.api.PathFilterSet.<init>", "java.util.List.add", "com.adobe.acs.commons.packaging.impl.PackageHelperImpl.getPathFilterSetPreviewJSON"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String"], ["java.lang.Object"], ["java.util.Collection"]], "passed_comments": [{"com.adobe.acs.commons.packaging.impl.PackageHelperImpl.getPathFilterSetPreviewJSON": "{@inheritDoc}"}]}, {"index": "918", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/PackageHelperImpl.java", "methodName": "com.adobe.acs.commons.packaging.impl.PackageHelperImpl.getPathFilterSetPreviewJSON", "methodParameterType": "Collection<PathFilterSet>#", "methodParameterName": "pathFilterSets#", "methodBody": "public String getPathFilterSetPreviewJSON(final Collection<PathFilterSet> pathFilterSets) {\n        final JsonObject json = new JsonObject();\n\n        json.addProperty(KEY_STATUS, \"preview\");\n        json.addProperty(KEY_PATH, \"Not applicable (Preview)\");\n        JsonArray filterSets = new JsonArray();\n        json.add(KEY_FILTER_SETS, filterSets);\n\n        for (final PathFilterSet pathFilterSet : pathFilterSets) {\n            final JsonObject tmp = new JsonObject();\n            tmp.addProperty(KEY_IMPORT_MODE, \"Not applicable (Preview)\");\n            tmp.addProperty(KEY_ROOT_PATH, pathFilterSet.getRoot());\n\n            filterSets.add(tmp);\n        }\n\n        return json.toString();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["com.google.gson.JsonObject.<init>", "com.google.gson.JsonObject.addProperty", "com.google.gson.JsonArray.<init>", "com.google.gson.JsonObject.add", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.jackrabbit.vault.fs.api.PathFilterSet.getRoot", "com.google.gson.JsonArray.add", "com.google.gson.JsonObject.toString"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String", "com.google.gson.JsonElement"], [""], [""], [""], [""], ["com.google.gson.JsonElement"], [""]], "passed_comments": "/"}, {"index": "919", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/PackageHelperImpl.java", "methodName": "com.adobe.acs.commons.packaging.impl.PackageHelperImpl.getErrorJSON", "methodParameterType": "String#", "methodParameterName": "msg#", "methodBody": "public String getErrorJSON(final String msg) {\n        Gson gson = new Gson();\n        final JsonObject json = new JsonObject();\n        json.addProperty(KEY_STATUS, \"error\");\n        json.addProperty(KEY_MSG, msg);\n        return gson.toJson(json);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["com.google.gson.Gson.<init>", "com.google.gson.JsonObject.<init>", "com.google.gson.JsonObject.addProperty", "com.google.gson.Gson.toJson"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.String"], ["com.google.gson.JsonElement"]], "passed_comments": "/"}, {"index": "920", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/AbstractPackagerServlet.java", "methodName": "com.adobe.acs.commons.packaging.impl.AbstractPackagerServlet.getPackagerPageResource", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "protected PathFilterSet getPackagerPageResource(final SlingHttpServletRequest request) {\n        final ResourceResolver resourceResolver = request.getResourceResolver();\n        final PageManager pageManager = resourceResolver.adaptTo(PageManager.class);\n        final Page page = pageManager.getContainingPage(request.getResource());\n\n        if (page != null) {\n            return new PathFilterSet(page.getPath());\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the Packager Page resource.", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getResourceResolver", "org.apache.sling.api.resource.ResourceResolver.adaptTo", "org.apache.sling.api.SlingHttpServletRequest.getResource", "com.day.cq.wcm.api.PageManager.getContainingPage", "com.day.cq.wcm.api.Page.getPath", "org.apache.jackrabbit.vault.fs.api.PathFilterSet.<init>"], "call_func_parameter": [[""], ["java.lang.Class"], [""], ["org.apache.sling.api.resource.Resource"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "921", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/AbstractPackagerServlet.java", "methodName": "com.adobe.acs.commons.packaging.impl.AbstractPackagerServlet.getProperties", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "protected ValueMap getProperties(final SlingHttpServletRequest request) {\n        if (request.getResource().getChild(\"configuration\") == null) {\n            log.warn(\"Packager Configuration node could not be found for: {}\", request.getResource());\n            return new ValueMapDecorator(new HashMap<>());\n        } else {\n            return request.getResource().getChild(\"configuration\").getValueMap();\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Gets the properties saved to the Asset Packager Page's jcr:content node.", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getResource", "org.apache.sling.api.resource.Resource.getChild", "org.slf4j.Logger.warn", "java.util.HashMap.<init>", "org.apache.sling.api.wrappers.ValueMapDecorator.<init>", "org.apache.sling.api.resource.Resource.getValueMap"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String", "java.lang.Object"], [""], ["java.util.Map"], [""]], "passed_comments": "/"}, {"index": "922", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/ACLPackagerServletImpl.java", "methodName": "com.adobe.acs.commons.packaging.impl.ACLPackagerServletImpl.findResources", "methodParameterType": "ResourceResolver#List<String>#List<Pattern>#", "methodParameterName": "resourceResolver#principalNames#includePatterns#", "methodBody": "@SuppressWarnings(\"squid:S3776\")\n    private List<PathFilterSet> findResources(final ResourceResolver resourceResolver,\n                                              final List<String> principalNames,\n                                              final List<Pattern> includePatterns) {\n\n        final Set<Resource> resources = new TreeSet<Resource>(resourceComparator);\n        final List<PathFilterSet> pathFilterSets = new ArrayList<PathFilterSet>();\n\n        for (final String query : AEM6_QUERIES) {\n            final Iterator<Resource> hits = resourceResolver.findResources(query, QUERY_LANG);\n\n            while (hits.hasNext()) {\n                final Resource hit = hits.next();\n                Resource repPolicy = null;\n\n\n                // get the parent node since the query is for the Grant/Deny nodes\n                if (hit.getParent() != null) {\n                    repPolicy = hit.getParent();\n                }\n\n\n                if (this.isIncluded(repPolicy, includePatterns)) {\n                    log.debug(\"Included by pattern [ {} ]\", repPolicy.getPath());\n                } else {\n                    continue;\n                }\n\n                final Iterator<Resource> aces = repPolicy.listChildren();\n\n                while (aces.hasNext()) {\n                    final Resource ace = aces.next();\n                    final ValueMap props = ace.adaptTo(ValueMap.class);\n                    final String repPrincipalName = props.get(\"rep:principalName\", String.class);\n\n                    if (principalNames == null\n                            || principalNames.isEmpty()\n                            || principalNames.contains(repPrincipalName)) {\n\n                        resources.add(repPolicy);\n\n                        log.debug(\"Included by principal [ {} ]\", repPolicy.getPath());\n                        break;\n                    }\n                }\n            }\n        }\n\n        for (final Resource resource : resources) {\n            pathFilterSets.add(new PathFilterSet(resource.getPath()));\n        }\n\n        log.debug(\"Found {} matching rep:policy resources.\", pathFilterSets.size());\n        return pathFilterSets;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#ContinueStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#Block#IfStatement#Block#WhileStatement#Block#WhileStatement#Block#EnhancedForStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)WhileStatement)Block)WhileStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Search the JCR for all rep:ACE nodes to be further filtered by Grant/Deny ACE rep:principalNames.", "call_func_name": ["java.util.TreeSet.<init>", "java.util.ArrayList.<init>", "org.apache.sling.api.resource.ResourceResolver.findResources", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.sling.api.resource.Resource.getParent", "com.adobe.acs.commons.packaging.impl.ACLPackagerServletImpl.isIncluded", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.debug", "org.apache.sling.api.resource.Resource.listChildren", "org.apache.sling.api.resource.Resource.adaptTo", "org.apache.sling.api.resource.ValueMap.get", "java.util.List.isEmpty", "java.util.List.contains", "java.util.Set.add", "java.util.Set.iterator", "org.apache.jackrabbit.vault.fs.api.PathFilterSet.<init>", "java.util.List.add", "java.util.List.size", "java.lang.Integer.valueOf"], "call_func_parameter": [["java.util.Comparator"], [""], ["java.lang.String", "java.lang.String"], [""], [""], [""], ["org.apache.sling.api.resource.Resource", "java.util.List"], [""], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.Class"], ["java.lang.String", "java.lang.Class"], [""], ["java.lang.Object"], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["int"]], "passed_comments": [{"com.adobe.acs.commons.packaging.impl.ACLPackagerServletImpl.isIncluded": "Determines if the resource's path matches any of the include patterns <p> If includePatterns is null or empty all resources are expected to be included."}]}, {"index": "923", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/ACLPackagerServletImpl.java", "methodName": "com.adobe.acs.commons.packaging.impl.ACLPackagerServletImpl.getPrincipalResources", "methodParameterType": "ResourceResolver#String[]#", "methodParameterName": "resourceResolver#principalNames#", "methodBody": "private List<PathFilterSet> getPrincipalResources(final ResourceResolver resourceResolver,\n                                                      final String[] principalNames) throws RepositoryException {\n        final UserManager userManager = resourceResolver.adaptTo(UserManager.class);\n        final List<PathFilterSet> pathFilterSets = new ArrayList<PathFilterSet>();\n\n        for (final String principalName : principalNames) {\n            final Authorizable authorizable = userManager.getAuthorizable(principalName);\n            if (authorizable != null) {\n                final Resource resource = resourceResolver.getResource(authorizable.getPath());\n                if (resource != null) {\n                    final PathFilterSet principal = new PathFilterSet(resource.getPath());\n                    // Exclude tokens as they are not vlt installable in AEM6/Oak\n                    principal.addExclude(new DefaultPathFilter(resource.getPath() + \"/\\\\.tokens\"));\n                    pathFilterSets.add(principal);\n                }\n            }\n        }\n\n        return pathFilterSets;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the resources for the param principals.", "call_func_name": ["org.apache.sling.api.resource.ResourceResolver.adaptTo", "java.util.ArrayList.<init>", "org.apache.jackrabbit.api.security.user.UserManager.getAuthorizable", "org.apache.jackrabbit.api.security.user.Authorizable.getPath", "org.apache.sling.api.resource.ResourceResolver.getResource", "org.apache.sling.api.resource.Resource.getPath", "org.apache.jackrabbit.vault.fs.api.PathFilterSet.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.jackrabbit.vault.fs.filter.DefaultPathFilter.<init>", "org.apache.jackrabbit.vault.fs.api.PathFilterSet.addExclude", "java.util.List.add"], "call_func_parameter": [["java.lang.Class"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["org.apache.jackrabbit.vault.fs.api.Filter"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "924", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/ACLPackagerServletImpl.java", "methodName": "com.adobe.acs.commons.packaging.impl.ACLPackagerServletImpl.isIncluded", "methodParameterType": "Resource#List<Pattern>#", "methodParameterName": "resource#includePatterns#", "methodBody": "private boolean isIncluded(final Resource resource, final List<Pattern> includePatterns) {\n        if (resource == null // Resource is null; so dont accept this\n                || (!resource.isResourceType(\"rep:ACL\"))) { // ONLY accept the resource is a rep:ACL node\n            return false;\n        }\n\n        if (includePatterns == null || includePatterns.isEmpty()) {\n            // If patterns are empty then accept everything!\n            return true;\n        } else {\n            // Else check the patterns\n            for (final Pattern pattern : includePatterns) {\n                final Matcher matcher = pattern.matcher(resource.getPath());\n                if (matcher.matches()) {\n                    // Accept the resource on the first match\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#ParenthesizedExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#BooleanLiteral#ReturnStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ParenthesizedExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression)ParenthesizedExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines if the resource's path matches any of the include patterns <p> If includePatterns is null or empty all resources are expected to be included.", "call_func_name": ["org.apache.sling.api.resource.Resource.isResourceType", "java.util.List.isEmpty", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.sling.api.resource.Resource.getPath", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], [""], [""], ["java.lang.CharSequence"], [""]], "passed_comments": "/"}, {"index": "925", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/impl/ACLPackagerServletImpl.java", "methodName": "com.adobe.acs.commons.packaging.impl.ACLPackagerServletImpl.toPatterns", "methodParameterType": "List<String>#", "methodParameterName": "data#", "methodBody": "private List<Pattern> toPatterns(final List<String> data) {\n        final List<Pattern> patterns = new ArrayList<Pattern>();\n\n        for (final String item : data) {\n            patterns.add(Pattern.compile(item));\n        }\n\n        if (log.isDebugEnabled()) {\n            for (final Pattern pattern : patterns) {\n                log.debug(\"Compiled pattern: {}\", pattern.toString());\n            }\n        }\n\n        return patterns;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Compiles a list of string patterns into a list of Pattern objects.", "call_func_name": ["java.util.ArrayList.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.regex.Pattern.compile", "java.util.List.add", "org.slf4j.Logger.isDebugEnabled", "java.util.regex.Pattern.toString", "org.slf4j.Logger.debug"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String"], ["java.lang.Object"], [""], [""], ["java.lang.String", "java.lang.Object"]], "passed_comments": "/"}, {"index": "926", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/PackageHelper.java", "methodName": "com.adobe.acs.commons.packaging.PackageHelper.addThumbnail", "methodParameterType": "JcrPackage#Resource#", "methodParameterName": "jcrPackage#thumbnailResource#", "methodBody": "void addThumbnail(JcrPackage jcrPackage, Resource thumbnailResource);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Adds the thumbnail resource to the package as the package thumbnail. If the thumbnailResource is null or not a valid thumbnail resource, a default ACS Package thumbnail will be used.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "927", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/PackageHelper.java", "methodName": "com.adobe.acs.commons.packaging.PackageHelper.getNextVersion", "methodParameterType": "JcrPackageManager#String#String#String#", "methodParameterName": "jcrPackageManager#groupName#name#version#", "methodBody": "Version getNextVersion(JcrPackageManager jcrPackageManager, String groupName, String name,\n                           String version) throws RepositoryException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Derives the next package version to use based on the input params and the existing package versions matching the input Package group and name. Next version increments \"minor\" version only. Ex. 1.0.0 ~> 1.1.0 3.22.0 ~> 3.23.0 If the param version's major is greater than the largest existing package version in jcr, then the param version will be used. Ex. param ~> 2.0.0, largest in jcr ~>1.40.0; returned version will be 2.0.0", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "928", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/PackageHelper.java", "methodName": "com.adobe.acs.commons.packaging.PackageHelper.removePackage", "methodParameterType": "JcrPackageManager#String#String#String#", "methodParameterName": "jcrPackageManager#groupName#name#version#", "methodBody": "void removePackage(JcrPackageManager jcrPackageManager,\n                       String groupName, String name, String version) throws RepositoryException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Deletes the package node from the repository. This does NOT uninstall the package, rather deletes the package node under /etc/packages/[package-group]", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "929", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/PackageHelper.java", "methodName": "com.adobe.acs.commons.packaging.PackageHelper.createPackageFromPathFilterSets", "methodParameterType": "Collection<PathFilterSet>#Session#String#String#String#ConflictResolution#Map<String,String>#", "methodParameterName": "pathFilterSets#session#groupName#name#version#conflictResolution#packageDefinitionProperties#", "methodBody": "JcrPackage createPackageFromPathFilterSets(final Collection<PathFilterSet> pathFilterSets, final Session session,\n                                               final String groupName, final String name, String version,\n                                               final ConflictResolution conflictResolution,\n                                               final Map<String, String> packageDefinitionProperties)\n            throws IOException, RepositoryException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "@param pathFilterSets the pathFilterSets that define package", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "930", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/PackageHelper.java", "methodName": "com.adobe.acs.commons.packaging.PackageHelper.createPackage", "methodParameterType": "Collection<Resource>#Session#String#String#String#ConflictResolution#Map<String,String>#", "methodParameterName": "resources#session#groupName#name#version#conflictResolution#packageDefinitionProperties#", "methodBody": "JcrPackage createPackage(final Collection<Resource> resources, final Session session,\n                                     final String groupName, final String name, String version,\n                                     final ConflictResolution conflictResolution,\n                                     final Map<String, String> packageDefinitionProperties)\n            throws IOException, RepositoryException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "@param resources the resources to include in the package", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "931", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/PackageHelper.java", "methodName": "com.adobe.acs.commons.packaging.PackageHelper.getContents", "methodParameterType": "JcrPackage#", "methodParameterName": "jcrPackage#", "methodBody": "List<String> getContents(JcrPackage jcrPackage) throws IOException, RepositoryException, PackageException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "returns a list of the JCR resource paths includes in the built JcrPackage", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "932", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/PackageHelper.java", "methodName": "com.adobe.acs.commons.packaging.PackageHelper.getSuccessJSON", "methodParameterType": "JcrPackage#", "methodParameterName": "jcrPackage#", "methodBody": "String getSuccessJSON(JcrPackage jcrPackage) throws RepositoryException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Returns the JSON to return in the event of a successful packaging.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "933", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/PackageHelper.java", "methodName": "com.adobe.acs.commons.packaging.PackageHelper.getPreviewJSON", "methodParameterType": "Collection<Resource>#", "methodParameterName": "resources#", "methodBody": "String getPreviewJSON(final Collection<Resource> resources);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the JSON to return reporting what the packager definition will include for filterSet roots.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "934", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/PackageHelper.java", "methodName": "com.adobe.acs.commons.packaging.PackageHelper.getPathFilterSetPreviewJSON", "methodParameterType": "Collection<PathFilterSet>#", "methodParameterName": "pathFilterSets#", "methodBody": "String getPathFilterSetPreviewJSON(final Collection<PathFilterSet> pathFilterSets);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the JSON to return reporting what the packager definition will include for the filterSets.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "935", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/PackageHelper.java", "methodName": "com.adobe.acs.commons.packaging.PackageHelper.getErrorJSON", "methodParameterType": "String#", "methodParameterName": "msg#", "methodBody": "String getErrorJSON(String msg);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the JSON to return in the event of an unsuccessful packaging.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "936", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/PackageHelper.java", "methodName": "com.adobe.acs.commons.packaging.PackageHelper.getPreviewJSONForPaths", "methodParameterType": "Collection<String>#", "methodParameterName": "paths#", "methodBody": "String getPreviewJSONForPaths(Collection<String> paths);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the JSON to return reporting what the packager definition will include for filterSet roots.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "937", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/packaging/PackageHelper.java", "methodName": "com.adobe.acs.commons.packaging.PackageHelper.createPackageForPaths", "methodParameterType": "Collection<String>#Session#String#String#String#ConflictResolution#Map<String,String>#", "methodParameterName": "paths#session#groupName#name#version#conflictResolution#packageDefinitionProperties#", "methodBody": "JcrPackage createPackageForPaths(Collection<String> paths, Session session, String groupName, String name,\n            String version, ConflictResolution conflictResolution, Map<String, String> packageDefinitionProperties) throws IOException, RepositoryException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "@param paths the resources to include in the package", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "938", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wrap/jcr/BaseSessionIWrap.java", "methodName": "com.adobe.acs.commons.wrap.jcr.BaseSessionIWrap.unwrapSession", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "S unwrapSession();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the underlying session.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "939", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wrap/cqsearch/QueryIWrap.java", "methodName": "com.adobe.acs.commons.wrap.cqsearch.QueryIWrap.unwrapQuery", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Query unwrapQuery();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the underlying query. This must be implemented by concrete classes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "940", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/adobeio/service/IntegrationService.java", "methodName": "com.adobe.acs.commons.adobeio.service.IntegrationService.getApiKey", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getApiKey();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the api-key, can be used as the X-Api-Key header", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "941", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/adobeio/service/IntegrationService.java", "methodName": "com.adobe.acs.commons.adobeio.service.IntegrationService.getAccessToken", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getAccessToken();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the access-token used as the Authorization header. This is fetched once per hour via a scheduler.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "942", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/adobeio/service/IntegrationService.java", "methodName": "com.adobe.acs.commons.adobeio.service.IntegrationService.getTimeoutinMilliSeconds", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getTimeoutinMilliSeconds();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Timeout in milliseconds that is used in the various http-calls", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "943", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/adobeio/service/EndpointService.java", "methodName": "com.adobe.acs.commons.adobeio.service.EndpointService.getId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getId();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The id of the endpoint that is defined via the configuration", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "944", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/adobeio/service/EndpointService.java", "methodName": "com.adobe.acs.commons.adobeio.service.EndpointService.getMethod", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getMethod();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The method of the endpoint that is defined via the configuration", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "945", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/adobeio/service/EndpointService.java", "methodName": "com.adobe.acs.commons.adobeio.service.EndpointService.getUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getUrl();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The url of the endpoint that is defined via the configuration", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "946", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/adobeio/service/EndpointService.java", "methodName": "com.adobe.acs.commons.adobeio.service.EndpointService.performIO_Action", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "JsonObject performIO_Action();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Performs the action connected to the endpoint.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "947", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/adobeio/service/EndpointService.java", "methodName": "com.adobe.acs.commons.adobeio.service.EndpointService.performIO_Action", "methodParameterType": "String#String#String[]#JsonObject#", "methodParameterName": "url#method#headers#payload#", "methodBody": "JsonObject performIO_Action(String url, String method, String[] headers, JsonObject payload );", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Performs the action connected to the endpoint. With the parameters you can influence all the aspects of the api-call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "948", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/adobeio/service/EndpointService.java", "methodName": "com.adobe.acs.commons.adobeio.service.EndpointService.performIO_Action", "methodParameterType": "Map<String,String>#", "methodParameterName": "queryParameters#", "methodBody": "JsonObject performIO_Action(Map<String, String> queryParameters);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Performs the action connected to the endpoint, with the specified queryParameters.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "949", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/adobeio/service/EndpointService.java", "methodName": "com.adobe.acs.commons.adobeio.service.EndpointService.performIO_Action", "methodParameterType": "JsonObject#", "methodParameterName": "payload#", "methodBody": "JsonObject performIO_Action(JsonObject payload);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Performs the action connected to the endpoint with the specified payload.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "950", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/adobeio/service/EndpointService.java", "methodName": "com.adobe.acs.commons.adobeio.service.EndpointService.isConnected", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isConnected();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "This is a test for the connection to the endpoint. The test will be performed using the URL and the GET-method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "951", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/adobeio/service/EndpointService.java", "methodName": "com.adobe.acs.commons.adobeio.service.EndpointService.getConfigServiceSpecificHeaders", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String[] getConfigServiceSpecificHeaders();", "AST": "Javadoc#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets the headers that are set via the configuration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "952", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/adobeio/service/impl/EndpointServiceImpl.java", "methodName": "com.adobe.acs.commons.adobeio.service.impl.EndpointServiceImpl.handleAdobeIO_Action", "methodParameterType": "JsonObject#", "methodParameterName": "payload#", "methodBody": "private JsonObject handleAdobeIO_Action( @NotNull final JsonObject payload) {\n      // initialize jsonobject\n      JsonObject processResponse = new JsonObject();\n\n      // perform action, if the action is defined in the configuration\n      try {\n         LOGGER.debug(\"ActionUrl = {} . method = {}\", url, method);\n         // process the Adobe I/O action\n         processResponse = process(url, Collections.emptyMap(), method, null, payload);\n      } catch (Exception e) {\n         processResponse.addProperty(RESULT_ERROR, \"Problem processing\");\n         LOGGER.error(\"Problem processing action {} in handleAdobeIO_Action\", url);\n      }\n\n      return processResponse;\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This method performs the Adobe I/O action", "call_func_name": ["com.google.gson.JsonObject.<init>", "org.slf4j.Logger.debug", "java.util.Collections.emptyMap", "com.adobe.acs.commons.adobeio.service.impl.EndpointServiceImpl.process", "com.google.gson.JsonObject.addProperty", "org.slf4j.Logger.error"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], ["java.lang.String", "java.util.Map", "java.lang.String", "java.lang.String[]", "com.google.gson.JsonObject"], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.adobeio.service.impl.EndpointServiceImpl.process": "Process the Adobe I/O action"}]}, {"index": "953", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/adobeio/service/impl/EndpointServiceImpl.java", "methodName": "com.adobe.acs.commons.adobeio.service.impl.EndpointServiceImpl.process", "methodParameterType": "String#Map<String,String>#String#String[]#JsonObject#", "methodParameterName": "actionUrl#queryParameters#method#headers#payload#", "methodBody": "private JsonObject process(@NotNull final String actionUrl, \n                            @NotNull final Map<String, String> queryParameters,\n                              @NotNull final String method,\n                              final String[] headers,\n                              @NotNull final JsonObject payload) {\n      if (isBlank(actionUrl) || isBlank(method)) {\n            LOGGER.error(\"Method or url is null\");\n         return new JsonObject();\n      }\n\n      URI uri = null;\n\n      try {\n            URIBuilder builder = new URIBuilder(actionUrl);\n             queryParameters.forEach((k, v) -> builder.addParameter(k, v));\n             uri = builder.build();\n         \n      } catch(URISyntaxException uriexception) {\n            LOGGER.error(uriexception.getMessage());\n            return new JsonObject();\n      }\n\n      LOGGER.debug(\"Performing method = {}. queryParameters = {}. actionUrl = {}. payload = {}\", method, queryParameters, uri, payload);\n      \n      try {\n          if (StringUtils.equalsIgnoreCase(method, METHOD_POST)) {\n              return processPost(uri, payload, headers);\n           } else if (StringUtils.equalsIgnoreCase(method, METHOD_GET)) {\n              return processGet(uri, headers);\n           } else if (StringUtils.equalsIgnoreCase(method, \"PATCH\")) {\n              return processPatch(uri, payload, headers);\n           } else {\n              return new JsonObject();\n           }\n      }\n      catch (IOException ioexception) {\n         LOGGER.error(ioexception.getMessage());\n         return new JsonObject();\n         \n      }\n\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)IfStatement)IfStatement)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Process the Adobe I/O action", "call_func_name": ["org.apache.commons.lang3.StringUtils.isBlank", "org.slf4j.Logger.error", "com.google.gson.JsonObject.<init>", "org.apache.http.client.utils.URIBuilder.<init>", "java.util.function.BiConsumer.accept", "java.util.Map.forEach", "org.apache.http.client.utils.URIBuilder.build", "java.net.URISyntaxException.getMessage", "org.slf4j.Logger.debug", "org.apache.commons.lang3.StringUtils.equalsIgnoreCase", "com.adobe.acs.commons.adobeio.service.impl.EndpointServiceImpl.processPost", "com.adobe.acs.commons.adobeio.service.impl.EndpointServiceImpl.processGet", "com.adobe.acs.commons.adobeio.service.impl.EndpointServiceImpl.processPatch", "java.io.IOException.getMessage"], "call_func_parameter": [["java.lang.CharSequence"], ["java.lang.String"], [""], ["java.lang.String"], ["org.apache.http.client.utils.URIBuilder"], ["java.util.function.BiConsumer"], [""], [""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.CharSequence", "java.lang.CharSequence"], ["java.net.URI", "com.google.gson.JsonObject", "java.lang.String[]"], ["java.net.URI", "java.lang.String[]"], ["java.net.URI", "com.google.gson.JsonObject", "java.lang.String[]"], [""]], "passed_comments": "/"}, {"index": "954", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/data/CompositeVariant.java", "methodName": "com.adobe.acs.commons.data.CompositeVariant.CompositeVariant", "methodParameterType": "T#", "methodParameterName": "initial#", "methodBody": "public CompositeVariant(T initial) {\n        if (initial instanceof Class) {\n            this.type = (Class) initial;\n        } else {\n            if (initial instanceof Variant) {\n                this.type = ((Variant) initial).getBaseType();\n            } else {\n                this.type = initial.getClass();\n            }\n            addValue(initial);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#CastExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement)Block(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Create a variant either as a preferred type (set value later with addValue) or with an initial value and the preferred type is assumed by the value provided.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "955", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/data/Variant.java", "methodName": "com.adobe.acs.commons.data.Variant.isStringTruthy", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public boolean isStringTruthy(String s) {\n        if (s == null || s.trim().isEmpty()) {\n            return false;\n        } else if (StringUtils.isNumeric(s)) {\n            return Long.parseLong(s) != 0;\n        } else {\n            char c = s.trim().toLowerCase().charAt(0);\n            return (c == 't' || c == 'y' || c == 'x');\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ReturnStatement#Block#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#CharacterLiteral#InfixExpression#SimpleName#CharacterLiteral#InfixExpression#InfixExpression#SimpleName#CharacterLiteral#InfixExpression#InfixExpression#ParenthesizedExpression#ReturnStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ParenthesizedExpression(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)InfixExpression)ParenthesizedExpression)ReturnStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Truthiness is any non-empty string that looks like a non-zero number or looks like it is True, Yes, or X", "call_func_name": ["java.lang.String.trim", "java.lang.String.isEmpty", "org.apache.commons.lang.StringUtils.isNumeric", "java.lang.Long.parseLong", "java.lang.String.toLowerCase", "java.lang.String.charAt"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["java.lang.String"], [""], ["int"]], "passed_comments": "/"}, {"index": "956", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/data/Spreadsheet.java", "methodName": "com.adobe.acs.commons.data.Spreadsheet.Spreadsheet", "methodParameterType": "boolean#String#", "methodParameterName": "convertHeaderNames#headerArray#", "methodBody": "public Spreadsheet(boolean convertHeaderNames, String... headerArray) {\n        this.enableHeaderNameConversion = convertHeaderNames;\n        headerTypes = Arrays.stream(headerArray)\n                .collect(Collectors.toMap(this::convertHeaderName, this::detectTypeFromName));\n        headerRow = Arrays.asList(headerArray);\n        requiredColumns = Collections.EMPTY_LIST;\n        dataRows = new ArrayList<>();\n        delimiters = new HashMap<>();\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#ThisExpression#SimpleName#ExpressionMethodReference#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Simple constructor used for unit testing purposes", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "957", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/data/Spreadsheet.java", "methodName": "com.adobe.acs.commons.data.Spreadsheet.Spreadsheet", "methodParameterType": "boolean#List<String>#String#", "methodParameterName": "convertHeaderNames#caseInsensitiveHeaders#headerArray#", "methodBody": "public Spreadsheet(boolean convertHeaderNames, List<String> caseInsensitiveHeaders, String... headerArray) {\n        this(convertHeaderNames, headerArray);\n        this.caseInsensitiveHeaders = caseInsensitiveHeaders;\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Simple constructor used for unit testing purposes", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "958", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/data/Spreadsheet.java", "methodName": "com.adobe.acs.commons.data.Spreadsheet.buildSpreadsheet", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Spreadsheet buildSpreadsheet() throws IOException {\n        return buildSpreadsheet(Locale.getDefault());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Parse out the input file synchronously for easier unit test validation. This overload will implicitly use the default JVM locale for numeric and date/time conversions.", "call_func_name": ["java.util.Locale.getDefault", "com.adobe.acs.commons.data.Spreadsheet.buildSpreadsheet"], "call_func_parameter": [[""], ["java.util.Locale"]], "passed_comments": [{"com.adobe.acs.commons.data.Spreadsheet.buildSpreadsheet": "Parse out the input file synchronously for easier unit test validation"}]}, {"index": "959", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/data/Spreadsheet.java", "methodName": "com.adobe.acs.commons.data.Spreadsheet.buildSpreadsheet", "methodParameterType": "Locale#", "methodParameterName": "locale#", "methodBody": "public Spreadsheet buildSpreadsheet(Locale locale) throws IOException {\n\n        XSSFWorkbook workbook = new XSSFWorkbook(this.inputStream);\n\n        final XSSFSheet sheet = workbook.getSheetAt(0);\n        rowCount = sheet.getLastRowNum();\n        final Iterator<Row> rows = sheet.rowIterator();\n\n        Row firstRow = rows.next();\n        headerRow = readRow(firstRow, locale).stream()\n                .map(v -> v != null ? convertHeaderName(v.toString()) : null)\n                .collect(Collectors.toList());\n        headerTypes = readRow(firstRow, locale).stream()\n                .map(Variant::toString)\n                .collect(Collectors.toMap(\n                        this::convertHeaderName,\n                        this::detectTypeFromName,\n                        this::upgradeToArray\n                ));\n\n        Iterable<Row> remainingRows = () -> rows;\n        dataRows = StreamSupport.stream(remainingRows.spliterator(), false)\n                .map(row -> buildRow(row, locale))\n                .filter(Optional::isPresent)\n                .map(Optional::get)\n                .collect(Collectors.toList());\n\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#NullLiteral#ConditionalExpression#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#ThisExpression#SimpleName#ExpressionMethodReference#ThisExpression#SimpleName#ExpressionMethodReference#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#LambdaExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(LambdaExpression(SimpleName)SimpleName)LambdaExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Parse out the input file synchronously for easier unit test validation", "call_func_name": ["org.apache.poi.xssf.usermodel.XSSFWorkbook.<init>", "org.apache.poi.xssf.usermodel.XSSFWorkbook.getSheetAt", "org.apache.poi.xssf.usermodel.XSSFSheet.getLastRowNum", "org.apache.poi.xssf.usermodel.XSSFSheet.rowIterator", "java.util.Iterator.next", "com.adobe.acs.commons.data.Spreadsheet.readRow", "java.util.List.stream", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect", "java.util.function.Function.apply", "java.util.function.BinaryOperator.apply", "java.util.stream.Collectors.toMap", "java.lang.Iterable.iterator", "java.lang.Iterable.spliterator", "java.util.stream.StreamSupport.stream", "java.util.function.Function.apply", "java.util.function.Predicate.test", "java.util.stream.Stream.filter"], "call_func_parameter": [["java.io.InputStream"], ["int"], [""], [""], [""], ["org.apache.poi.ss.usermodel.Row", "java.util.Locale"], [""], ["com.adobe.acs.commons.data.Spreadsheet"], ["java.util.function.Function"], [""], ["java.util.stream.Collector"], [""], ["com.adobe.acs.commons.data.Spreadsheet"], ["java.util.function.Function", "java.util.function.Function", "java.util.function.BinaryOperator"], ["java.util.Iterator"], [""], ["java.util.Spliterator", "boolean"], ["com.adobe.acs.commons.data.Spreadsheet", "java.util.Locale"], [""], ["java.util.function.Predicate"]], "passed_comments": "/"}, {"index": "960", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/data/Spreadsheet.java", "methodName": "com.adobe.acs.commons.data.Spreadsheet.getFileName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFileName() {\n        return fileName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the fileName", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "961", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/data/Spreadsheet.java", "methodName": "com.adobe.acs.commons.data.Spreadsheet.getRowCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getRowCount() {\n        return rowCount;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the rowCount", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "962", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/data/Spreadsheet.java", "methodName": "com.adobe.acs.commons.data.Spreadsheet.getHeaderRow", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<String> getHeaderRow() {\n        return headerRow;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the headerRow", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "963", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/data/Spreadsheet.java", "methodName": "com.adobe.acs.commons.data.Spreadsheet.getDataRowsAsCompositeVariants", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<Map<String, CompositeVariant>> getDataRowsAsCompositeVariants() {\n        return dataRows;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the dataRows", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "964", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/data/Spreadsheet.java", "methodName": "com.adobe.acs.commons.data.Spreadsheet.getRequiredColumns", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<String> getRequiredColumns() {\n        return requiredColumns;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the requiredColumns", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "965", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/data/Spreadsheet.java", "methodName": "com.adobe.acs.commons.data.Spreadsheet.detectTypeFromName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "private Optional<Class> detectTypeFromName(String name) {\n        boolean isArray = false;\n        Class detectedClass = Object.class;\n        if (name.contains(\"@\")) {\n            String typeStr = StringUtils.substringAfter(name, \"@\");\n            if (typeStr.contains(\"[\")) {\n                typeStr = StringUtils.substringBefore(typeStr, \"[\");\n            }\n            detectedClass = getClassFromName(typeStr);\n        }\n        if (name.endsWith(\"]\")) {\n            isArray = true;\n            String delimiter = StringUtils.substringBetween(name, \"[\", \"]\");\n            if (!StringUtils.isEmpty(delimiter)) {\n                String colName = convertHeaderName(name);\n                delimiters.put(colName, delimiter);\n            }\n        }\n        if (isArray) {\n            return getArrayType(Optional.of(detectedClass));\n        } else {\n            return Optional.of(detectedClass);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#TypeLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Look for type hints in the name of a column to extract a usable type. Also look for array hints as well. <br> Possible formats: <ul> <li>column-name - A column named \"column-name\" </li> <li>col@int - An integer column named \"col\" </li> <li>col2@int[] - An integer array colum named \"col2\", assumes standard delimiter (,) </li> <li>col3@string[] or col3@[] - A String array named \"col3\", assumes standard delimiter (,)</li> <li>col4@string[||] - A string array where values are using a custom delimiter (||)</li> </ul>", "call_func_name": ["java.lang.String.contains", "org.apache.commons.lang3.StringUtils.substringAfter", "org.apache.commons.lang3.StringUtils.substringBefore", "com.adobe.acs.commons.data.Spreadsheet.getClassFromName", "java.lang.String.endsWith", "org.apache.commons.lang3.StringUtils.substringBetween", "org.apache.commons.lang3.StringUtils.isEmpty", "com.adobe.acs.commons.data.Spreadsheet.convertHeaderName", "java.util.Map.put", "java.util.Optional.of", "com.adobe.acs.commons.data.Spreadsheet.getArrayType"], "call_func_parameter": [["java.lang.CharSequence"], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.CharSequence"], ["java.lang.String"], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object"], ["java.util.Optional"]], "passed_comments": "/"}, {"index": "966", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/data/Spreadsheet.java", "methodName": "com.adobe.acs.commons.data.Spreadsheet.upgradeToArray", "methodParameterType": "Optional<Class>#Optional<Class>#", "methodParameterName": "a#b#", "methodBody": "private Optional<Class> upgradeToArray(Optional<Class> a, Optional<Class> b) {\n        if (!a.isPresent()) {\n            return b;\n        }\n        if (!b.isPresent()) {\n            return a;\n        }\n        if (a.get().equals(b.get()) || b.get() == Object.class) {\n            return getArrayType(a);\n        } else {\n            return getArrayType(b);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Consider if a column is seen twice then that column type should be considered an array. Because String is a default assumption when no type is specified, any redefinition of a column to a more specific type will be then assumed for that property altogether.", "call_func_name": ["java.util.Optional.isPresent", "java.util.Optional.get", "java.lang.Object.equals", "com.adobe.acs.commons.data.Spreadsheet.getArrayType"], "call_func_parameter": [[""], [""], ["java.lang.Object"], ["java.util.Optional"]], "passed_comments": "/"}, {"index": "967", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/AemPublishAgentFilter.java", "methodName": "com.adobe.acs.commons.replication.AemPublishAgentFilter.isIncluded", "methodParameterType": "Agent#", "methodParameterName": "agent#", "methodBody": "@Override\n    public final boolean isIncluded(final Agent agent) {\n        final AgentConfig agentConfig = agent.getConfiguration();\n\n        return agentConfig.isEnabled()\n                && !agentConfig.usedForReverseReplication()\n                && SERIALIZATION_TYPE.equalsIgnoreCase(agentConfig.getSerializationType())\n                && StringUtils.contains(agentConfig.getTransportURI(), TRANSPORT_PATH);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the @agent is considered an active AEM Publish Agent (Serialization Type ~> Default and is enabled).", "call_func_name": ["com.day.cq.replication.Agent.getConfiguration", "com.day.cq.replication.AgentConfig.isEnabled", "com.day.cq.replication.AgentConfig.usedForReverseReplication", "com.day.cq.replication.AgentConfig.getSerializationType", "java.lang.String.equalsIgnoreCase", "com.day.cq.replication.AgentConfig.getTransportURI", "org.apache.commons.lang3.StringUtils.contains"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.CharSequence", "java.lang.CharSequence"]], "passed_comments": "/"}, {"index": "968", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/status/ReplicationStatusManager.java", "methodName": "com.adobe.acs.commons.replication.status.ReplicationStatusManager.getReplicationStatusResource", "methodParameterType": "String#ResourceResolver#", "methodParameterName": "path#resourceResolver#", "methodBody": "Resource getReplicationStatusResource(String path, ResourceResolver resourceResolver);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the Resource responsible for tracking replication properties for a given path.  <p> Pages and Assets return their respective content resource while any other path returns itself", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "969", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/status/ReplicationStatusManager.java", "methodName": "com.adobe.acs.commons.replication.status.ReplicationStatusManager.setReplicationStatus", "methodParameterType": "ResourceResolver#String#Calendar#Status#String#", "methodParameterName": "resourceResolver#replicatedBy#replicatedAt#status#paths#", "methodBody": "void setReplicationStatus(ResourceResolver resourceResolver, String replicatedBy, Calendar replicatedAt,\n                              Status status, String... paths) throws RepositoryException, PersistenceException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Marks the resources at the provides paths with the parameterized replication status. <p> Only resources that are of the OSGi Property parameterized \"node-types\" are candidates for Replication Status updates. All other resources will be quietly skipped.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "970", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/status/ReplicationStatusManager.java", "methodName": "com.adobe.acs.commons.replication.status.ReplicationStatusManager.setReplicationStatus", "methodParameterType": "ResourceResolver#String#Calendar#Status#Resource#", "methodParameterName": "resourceResolver#replicatedBy#replicatedAt#status#resources#", "methodBody": "void setReplicationStatus(ResourceResolver resourceResolver, String replicatedBy, Calendar replicatedAt,\n                              Status status, Resource... resources) throws RepositoryException, PersistenceException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Marks the resources at the provides paths with the parameterized replication status. <p> Only resources that are of the OSGi Property parameterized \"node-types\" are candidates for Replication Status updates. All other resources will be quietly skipped.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "971", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/status/ReplicationStatusManager.java", "methodName": "com.adobe.acs.commons.replication.status.ReplicationStatusManager.clearReplicationStatus", "methodParameterType": "ResourceResolver#Resource#", "methodParameterName": "resourceResolver#resources#", "methodBody": "void clearReplicationStatus(ResourceResolver resourceResolver, final Resource... resources) throws\n            RepositoryException, PersistenceException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Clear the replication status from the provides resources Only resources that are of the OSGi Property parameterized \"node-types\" are candidates for Replication Status updates. All other resources will be quietly skipped.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "972", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/status/impl/JcrPackageReplicationStatusEventHandler.java", "methodName": "com.adobe.acs.commons.replication.status.impl.JcrPackageReplicationStatusEventHandler.logJobError", "methodParameterType": "Job#String#Exception#", "methodParameterName": "job#errorMessage#e#", "methodBody": "private void logJobError(Job job, String errorMessage, Exception e) {\n        if (job.getRetryCount() < job.getNumberOfRetries()) {\n            log.warn(\"Job failed with error '{}' in attempt '{}', retry later.\", errorMessage, job.getRetryCount(), e);\n        } else {\n            log.error(\"Job permanently failed with error '{}' in attempt '{}', no more retries\", errorMessage, job.getRetryCount(), e);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Emits the given error and exception either with level WARN or ERROR depending on whether the job is retried. This method can be removed once <a href=\"https://issues.apache.org/jira/browse/SLING-7756\">SLING-7756</a> is resolved.", "call_func_name": ["org.apache.sling.event.jobs.Job.getRetryCount", "org.apache.sling.event.jobs.Job.getNumberOfRetries", "java.lang.Integer.valueOf", "org.slf4j.Logger.warn", "org.slf4j.Logger.error"], "call_func_parameter": [[""], [""], ["int"], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "973", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/status/impl/JcrPackageReplicationStatusEventHandler.java", "methodName": "com.adobe.acs.commons.replication.status.impl.JcrPackageReplicationStatusEventHandler.getInfoFromEvent", "methodParameterType": "Event#", "methodParameterName": "event#", "methodBody": "protected final Map<String, Object> getInfoFromEvent(Event event) {\n        final Map<String, Object> eventConfig = new HashMap<>();\n\n        final ReplicationEvent replicationEvent = ReplicationEvent.fromEvent(event);\n        if (replicationEvent != null) {\n            // Granite event\n            final ReplicationAction replicationAction = replicationEvent.getReplicationAction();\n            eventConfig.put(PROPERTY_PATHS, replicationAction.getPaths());\n            eventConfig.put(PROPERTY_REPLICATED_BY, replicationAction.getUserId());\n        } else {\n            // CQ event\n            String[] paths = (String[]) event.getProperty(ReplicationAction.PROPERTY_PATHS);\n            if (paths == null) {\n                paths = ArrayUtils.EMPTY_STRING_ARRAY;\n            }\n\n            String userId = (String) event.getProperty(ReplicationAction.PROPERTY_USER_ID);\n            if (StringUtils.isBlank(userId)) {\n                userId = StringUtils.defaultIfEmpty(this.replicatedByOverride, FALLBACK_REPLICATION_USER_ID);\n            }\n\n            eventConfig.put(PROPERTY_PATHS, paths);\n            eventConfig.put(PROPERTY_REPLICATED_BY,userId);\n        }\n\n        return eventConfig;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extracts relevant event information from a Granite Replication Event OR a Day CQ Replication event.", "call_func_name": ["java.util.HashMap.<init>", "com.day.cq.replication.ReplicationEvent.fromEvent", "com.day.cq.replication.ReplicationEvent.getReplicationAction", "com.day.cq.replication.ReplicationAction.getPaths", "java.util.Map.put", "com.day.cq.replication.ReplicationAction.getUserId", "org.osgi.service.event.Event.getProperty", "org.apache.commons.lang.StringUtils.isBlank", "org.apache.commons.lang.StringUtils.defaultIfEmpty"], "call_func_parameter": [[""], ["org.osgi.service.event.Event"], [""], [""], ["java.lang.Object", "java.lang.Object"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "974", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/status/impl/JcrPackageReplicationStatusEventHandler.java", "methodName": "com.adobe.acs.commons.replication.status.impl.JcrPackageReplicationStatusEventHandler.containsJcrPackagePath", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "private boolean containsJcrPackagePath(final String path) {\n        if (StringUtils.startsWith(path, \"/etc/packages/\")\n                && StringUtils.endsWith(path, \".zip\")) {\n            // At least 1 entry looks like a package\n            return true;\n        }\n\n        // Nothing looks like a package...\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the given path looks like a Jcr Package path. Provides a very fast, String-based, in-memory check to weed out most false positives and avoid resolving the path to a Jcr Package and ensure it is valid.", "call_func_name": ["org.apache.commons.lang.StringUtils.startsWith", "org.apache.commons.lang.StringUtils.endsWith"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "975", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/status/impl/JcrPackageReplicationStatusEventHandler.java", "methodName": "com.adobe.acs.commons.replication.status.impl.JcrPackageReplicationStatusEventHandler.getJcrPackage", "methodParameterType": "ResourceResolver#String#", "methodParameterName": "resourceResolver#path#", "methodBody": "private JcrPackage getJcrPackage(final ResourceResolver resourceResolver, final String path) {\n\n        final Resource eventResource = resourceResolver.getResource(path);\n        if (eventResource == null) {\n            log.warn(\"Could not find resource at path [ {} ] with the mapped service user. Either the resource has been removed meanwhile or the service user does not have the necessary rights.\", path);\n            return null;\n        }\n        JcrPackage jcrPackage = null;\n\n        try {\n            jcrPackage = packaging.open(eventResource.adaptTo(Node.class), false);\n        } catch (RepositoryException e) {\n            log.warn(\"Error checking if the path [ {} ] is a JCR Package.\", path);\n        }\n        \n        return jcrPackage;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#BooleanLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(BooleanLiteral)BooleanLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Resolves path to Jcr Package.", "call_func_name": ["org.apache.sling.api.resource.ResourceResolver.getResource", "org.slf4j.Logger.warn", "org.apache.sling.api.resource.Resource.adaptTo", "org.apache.jackrabbit.vault.packaging.Packaging.open"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.Object"], ["java.lang.Class"], ["javax.jcr.Node", "boolean"]], "passed_comments": "/"}, {"index": "976", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/status/impl/JcrPackageReplicationStatusEventHandler.java", "methodName": "com.adobe.acs.commons.replication.status.impl.JcrPackageReplicationStatusEventHandler.accept", "methodParameterType": "Resource#", "methodParameterName": "resource#", "methodBody": "@SuppressWarnings(\"squid:S3776\")\n    private boolean accept(final Resource resource) throws RepositoryException {\n        if (resource == null || ResourceUtil.isNonExistingResource(resource)) {\n            return false;\n        }\n\n        for (final Map.Entry<String, Pattern> nodeTypeAndPathRestriction : this.pathRestrictionByNodeType.entrySet()) {\n            final String[] hierarchyNodeTypes = StringUtils.split(nodeTypeAndPathRestriction.getKey(), \"/\");\n\n            boolean match = true;\n            Resource walkingResource = resource;\n\n            for (int i = (hierarchyNodeTypes.length - 1); i >= 0; i--) {\n\n                if (walkingResource == null) {\n                    match = false;\n                    break;\n                } else {\n                    final Node node = walkingResource.adaptTo(Node.class);\n\n                    if (node == null || !node.isNodeType(hierarchyNodeTypes[i])) {\n                        match = false;\n                        break;\n                    }\n\n                    walkingResource = walkingResource.getParent();\n                }\n            }\n\n            if (match) {\n                // check path restrictions\n                Pattern pathRestriction = nodeTypeAndPathRestriction.getValue();\n                if (pathRestriction != null && !pathRestriction.matcher(resource.getPath()).matches()) {\n                    log.debug(\"Path restriction '{}' prevents the resource at '{}' from getting its replication status updated!\", pathRestriction, resource.getPath());\n                    return false;\n                }\n                return true;\n            }\n        }\n\n        return false;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#ParenthesizedExpression#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#PostfixExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#BreakStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#BreakStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#ForStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)ForStatement(IfStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the ReplicationStatusManager should make the provides resource w replication status.", "call_func_name": ["org.apache.sling.api.resource.ResourceUtil.isNonExistingResource", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.commons.lang.StringUtils.split", "org.apache.sling.api.resource.Resource.adaptTo", "javax.jcr.Node.isNodeType", "org.apache.sling.api.resource.Resource.getParent", "org.apache.sling.api.resource.Resource.getPath", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "org.slf4j.Logger.debug"], "call_func_parameter": [["org.apache.sling.api.resource.Resource"], [""], [""], [""], [""], ["java.lang.String", "java.lang.String"], ["java.lang.Class"], ["java.lang.String"], [""], [""], ["java.lang.CharSequence"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "977", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/status/impl/JcrPackageReplicationStatusEventHandler.java", "methodName": "com.adobe.acs.commons.replication.status.impl.JcrPackageReplicationStatusEventHandler.getJcrPackageLastModified", "methodParameterType": "JcrPackage#", "methodParameterName": "jcrPackage#", "methodBody": "private Calendar getJcrPackageLastModified(final JcrPackage jcrPackage) throws RepositoryException, IOException {\n        if (ReplicatedAt.CURRENT_TIME.equals(this.replicatedAt)) {\n            return Calendar.getInstance();\n        } else {\n            return jcrPackage.getPackage().getCreated();\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Gets the last build time of the package.", "call_func_name": ["java.util.Calendar.getInstance", "org.apache.jackrabbit.vault.packaging.JcrPackage.getPackage", "org.apache.jackrabbit.vault.packaging.VaultPackage.getCreated"], "call_func_parameter": [[""], [""], [""]], "passed_comments": "/"}, {"index": "978", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/status/impl/ReplicationStatusManagerImpl.java", "methodName": "com.adobe.acs.commons.replication.status.impl.ReplicationStatusManagerImpl.getReplicationStatusResource", "methodParameterType": "String#ResourceResolver#", "methodParameterName": "path#resourceResolver#", "methodBody": "@Override\n    public Resource getReplicationStatusResource(String path, ResourceResolver resourceResolver) {\n        final Page page = resourceResolver.adaptTo(PageManager.class).getContainingPage(path);\n        final Asset asset = DamUtil.resolveToAsset(resourceResolver.getResource(path));\n\n        Resource resource;\n        String type;\n\n        if (page != null) {\n            type = \"Page\";\n            resource = page.getContentResource();\n        } else if (asset != null) {\n            type = \"Asset\";\n            Resource assetResource = resourceResolver.getResource(asset.getPath());\n            resource = assetResource.getChild(JcrConstants.JCR_CONTENT);\n        } else {\n            type = \"Resource\";\n            resource = resourceResolver.getResource(path);\n        }\n\n        log.trace(type + \"'s resource that tracks replication status is \" + resource.getPath());\n        return resource;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#StringLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#StringLiteral#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#StringLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.sling.api.resource.ResourceResolver.adaptTo", "com.day.cq.wcm.api.PageManager.getContainingPage", "org.apache.sling.api.resource.ResourceResolver.getResource", "com.day.cq.dam.commons.util.DamUtil.resolveToAsset", "com.day.cq.wcm.api.Page.getContentResource", "com.day.cq.dam.api.Asset.getPath", "org.apache.sling.api.resource.Resource.getChild", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.apache.sling.api.resource.Resource.getPath", "java.lang.StringBuilder.toString", "org.slf4j.Logger.trace"], "call_func_parameter": [["java.lang.Class"], ["java.lang.String"], ["java.lang.String"], ["org.apache.sling.api.resource.Resource"], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "979", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/status/impl/ReplicationStatusManagerImpl.java", "methodName": "com.adobe.acs.commons.replication.status.impl.ReplicationStatusManagerImpl.setReplicationStatus", "methodParameterType": "ResourceResolver#String#Calendar#Status#String#", "methodParameterName": "resourceResolver#replicatedBy#replicatedAt#status#paths#", "methodBody": "public final void setReplicationStatus(final ResourceResolver resourceResolver,\n                                           final String replicatedBy,\n                                           final Calendar replicatedAt,\n                                           final Status status,\n                                           final String... paths) throws RepositoryException, PersistenceException {\n        for (final String path : paths) {\n            final Resource resource = resourceResolver.getResource(path);\n\n            if (resource == null) {\n                log.warn(\"Requesting a replication status update for a resource that does not exist: {}\", path);\n                continue;\n            }\n\n            this.setReplicationStatus(resourceResolver, replicatedBy, replicatedAt, status, resource);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ContinueStatement#Block#IfStatement#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "980", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/status/impl/ReplicationStatusManagerImpl.java", "methodName": "com.adobe.acs.commons.replication.status.impl.ReplicationStatusManagerImpl.setReplicationStatus", "methodParameterType": "ResourceResolver#String#Calendar#Status#Resource#", "methodParameterName": "resourceResolver#replicatedBy#replicatedAt#status#resources#", "methodBody": "@SuppressWarnings(\"squid:S3776\")\n    public final void setReplicationStatus(final ResourceResolver resourceResolver,\n                                           final String replicatedBy,\n                                           final Calendar replicatedAt,\n                                           final Status status,\n                                           final Resource... resources)\n            throws RepositoryException, PersistenceException {\n        final Session session = resourceResolver.adaptTo(Session.class);\n\n        // Issue #1265\n        Calendar replicatedAtClean = replicatedAt;\n        if (replicatedAtClean == null) {\n            replicatedAtClean = Calendar.getInstance();\n            log.warn(\"The provided [ replicatedAt ] parameter is null. Force setting the [ {} ] value to [ {} ]\",\n                    ReplicationStatus.NODE_PROPERTY_LAST_REPLICATED,\n                    new SimpleDateFormat( \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\").format(replicatedAtClean.getTime()));\n        }\n\n        String replicatedByClean = replicatedBy;\n        if (replicatedBy == null) {\n            replicatedByClean = DEFAULT_REPLICATED_BY;\n            log.warn(\"The provided [ replicatedBy ] parameter is null. Force setting the [ {} ] value to [ {} ]\",\n                    ReplicationStatus.NODE_PROPERTY_LAST_REPLICATED_BY, replicatedByClean);\n        }\n\n        int count = 0;\n        for (final Resource resource : resources) {\n\n            final Node node = resource.adaptTo(Node.class);\n\n            if (Status.CLEAR.equals(status)) {\n\n                /* Clear replication status; Set all to null to remove properties */\n\n                JcrUtil.setProperty(node, ReplicationStatus.NODE_PROPERTY_LAST_REPLICATED, null);\n                JcrUtil.setProperty(node, ReplicationStatus.NODE_PROPERTY_LAST_REPLICATED_BY, null);\n                JcrUtil.setProperty(node, ReplicationStatus.NODE_PROPERTY_LAST_REPLICATION_ACTION, null);\n\n                if (!node.isNodeType(ReplicationStatus.NODE_TYPE)) {\n                    // Remove Mixin if node is not a cq:ReplicationStatus nodeType\n                    this.removeReplicationStatusMixin(node);\n                }\n\n            } else {\n\n                /* Update status to activated or de-activated */\n\n                final String replicationStatus = Status.ACTIVATED.equals(status) ? REP_STATUS_ACTIVATE\n                        : REP_STATUS_DEACTIVATE;\n\n                if (!node.isNodeType(ReplicationStatus.NODE_TYPE)) {\n                    // Add mixin if node is not already a cq:ReplicationStatus nodeType\n                    this.addReplicationStatusMixin(node);\n                }\n\n                JcrUtil.setProperty(node, ReplicationStatus.NODE_PROPERTY_LAST_REPLICATED, replicatedAtClean);\n                JcrUtil.setProperty(node, ReplicationStatus.NODE_PROPERTY_LAST_REPLICATED_BY, replicatedByClean);\n                JcrUtil.setProperty(node, ReplicationStatus.NODE_PROPERTY_LAST_REPLICATION_ACTION, replicationStatus);\n            }\n\n            log.debug(\"Updated replication status for resource [ {} ] to [ {} ].\", resource.getPath(), status.name());\n\n            if (count++ > SAVE_THRESHOLD) {\n                session.save();\n                count = 0;\n            }\n        }\n\n        if (count > 0) {\n            session.save();\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "981", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/status/impl/ReplicationStatusManagerImpl.java", "methodName": "com.adobe.acs.commons.replication.status.impl.ReplicationStatusManagerImpl.clearReplicationStatus", "methodParameterType": "ResourceResolver#Resource#", "methodParameterName": "resourceResolver#resources#", "methodBody": "public final void clearReplicationStatus(final ResourceResolver resourceResolver,\n                                       final Resource... resources) throws RepositoryException, PersistenceException {\n        this.setReplicationStatus(resourceResolver, null, null, Status.CLEAR, resources);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#NullLiteral#NullLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "982", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/status/impl/ReplicationStatusManagerImpl.java", "methodName": "com.adobe.acs.commons.replication.status.impl.ReplicationStatusManagerImpl.addReplicationStatusMixin", "methodParameterType": "Node#", "methodParameterName": "node#", "methodBody": "private void addReplicationStatusMixin(final Node node) throws RepositoryException {\n        if (!this.hasMixin(node, ReplicationStatus.NODE_TYPE)\n                && node.canAddMixin(ReplicationStatus.NODE_TYPE)) {\n            node.addMixin(ReplicationStatus.NODE_TYPE);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Adds the cq:ReplicationStatus mixin if the node doesnt already have it or does have it as its jcr:supertype already.", "call_func_name": ["com.adobe.acs.commons.replication.status.impl.ReplicationStatusManagerImpl.hasMixin", "javax.jcr.Node.canAddMixin", "javax.jcr.Node.addMixin"], "call_func_parameter": [["javax.jcr.Node", "java.lang.String"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.replication.status.impl.ReplicationStatusManagerImpl.hasMixin": "Checks if the node has the mixin."}]}, {"index": "983", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/status/impl/ReplicationStatusManagerImpl.java", "methodName": "com.adobe.acs.commons.replication.status.impl.ReplicationStatusManagerImpl.removeReplicationStatusMixin", "methodParameterType": "Node#", "methodParameterName": "node#", "methodBody": "private void removeReplicationStatusMixin(final Node node) throws RepositoryException {\n        if (this.hasMixin(node, ReplicationStatus.NODE_TYPE)) {\n            node.removeMixin(ReplicationStatus.NODE_TYPE);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Removes the cq:ReplicationStatus mixin from the node if it has it.", "call_func_name": ["com.adobe.acs.commons.replication.status.impl.ReplicationStatusManagerImpl.hasMixin", "javax.jcr.Node.removeMixin"], "call_func_parameter": [["javax.jcr.Node", "java.lang.String"], ["java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.replication.status.impl.ReplicationStatusManagerImpl.hasMixin": "Checks if the node has the mixin."}]}, {"index": "984", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/status/impl/ReplicationStatusManagerImpl.java", "methodName": "com.adobe.acs.commons.replication.status.impl.ReplicationStatusManagerImpl.hasMixin", "methodParameterType": "Node#String#", "methodParameterName": "node#mixin#", "methodBody": "private boolean hasMixin(final Node node, final String mixin) throws RepositoryException {\n        if (StringUtils.isBlank(mixin)) {\n            return false;\n        }\n\n        for (final NodeType nodeType : node.getMixinNodeTypes()) {\n            if (StringUtils.equals(nodeType.getName(), mixin)) {\n                return true;\n            }\n        }\n\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the node has the mixin.", "call_func_name": ["org.apache.commons.lang.StringUtils.isBlank", "javax.jcr.Node.getMixinNodeTypes", "javax.jcr.nodetype.NodeType.getName", "org.apache.commons.lang.StringUtils.equals"], "call_func_parameter": [["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "985", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/ReplicateVersion.java", "methodName": "com.adobe.acs.commons.replication.ReplicateVersion.replicate", "methodParameterType": "ResourceResolver#String[]#String[]#Date#", "methodParameterName": "resolver#rootPaths#agents#date#", "methodBody": "List<ReplicationResult> replicate(\n            ResourceResolver resolver, String[] rootPaths, String[] agents,\n            Date date);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Identifies the latest version of the entire resource tree of the specified resources at the date specified and issue replication request to the  specified agents.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "986", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/packages/automatic/impl/ConfigurationUpdateListener.java", "methodName": "com.adobe.acs.commons.replication.packages.automatic.impl.ConfigurationUpdateListener.getResourceResolver", "methodParameterType": "ResourceResolverFactory#", "methodParameterName": "factory#", "methodBody": "static final ResourceResolver getResourceResolver(ResourceResolverFactory factory) {\n        ResourceResolver resolver = null;\n        try {\n            resolver = factory.getServiceResourceResolver(AUTH_INFO);\n\n        } catch (LoginException e) {\n            log.error(\"Exception allocating resource resolver\", e);\n        }\n        return resolver;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creating this as a separate method to make migrating to service users easier. Callers of this method must ensure the resource resolver is closed.", "call_func_name": ["com.adobe.acs.commons.replication.packages.automatic.impl.ConfigurationUpdateListener.getResourceResolver"], "call_func_parameter": [["org.apache.sling.api.resource.ResourceResolverFactory"]], "passed_comments": [{"com.adobe.acs.commons.replication.packages.automatic.impl.ConfigurationUpdateListener.getResourceResolver": "Creating this as a separate method to make migrating to service users easier. Callers of this method must ensure the resource resolver is closed."}]}, {"index": "987", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/DispatcherFlushFilter.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.DispatcherFlushFilter.DispatcherFlushFilter", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public DispatcherFlushFilter() {\n        this.flushType = FlushType.All;\n    }", "AST": "Javadoc#Modifier#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Default constructor; Same as: new DispatcherFlushFilter(FlushType.All);.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "988", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/DispatcherFlushFilter.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.DispatcherFlushFilter.DispatcherFlushFilter", "methodParameterType": "FlushType#", "methodParameterName": "flushType#", "methodBody": "public DispatcherFlushFilter(final FlushType flushType) {\n        this.flushType = flushType;\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Targets a set of Dispatcher Flush agents based on the parameter flushType.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "989", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/DispatcherFlushFilter.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.DispatcherFlushFilter.isIncluded", "methodParameterType": "Agent#", "methodParameterName": "agent#", "methodBody": "@Override\n    public final boolean isIncluded(final Agent agent) {\n        if (FlushType.All.equals(this.flushType)) {\n            return this.isIncludedCommon(agent);\n        } else if (FlushType.Hierarchical.equals(this.flushType)) {\n            return this.isIncludedHierarchical(agent);\n        } else if (FlushType.ResourceOnly.equals(this.flushType)) {\n            return this.isIncludedResourceOnly(agent);\n        }\n\n        return false;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ThisExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ThisExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ThisExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(Block(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(Block(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(Block(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)IfStatement)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the @agent is considered an active Flush agent (Serialization Type ~> Flush and is enabled).", "call_func_name": ["com.adobe.acs.commons.replication.dispatcher.DispatcherFlushFilter.isIncludedCommon", "com.adobe.acs.commons.replication.dispatcher.DispatcherFlushFilter.isIncludedHierarchical", "com.adobe.acs.commons.replication.dispatcher.DispatcherFlushFilter.isIncludedResourceOnly"], "call_func_parameter": [["com.day.cq.replication.Agent"], ["com.day.cq.replication.Agent"], ["com.day.cq.replication.Agent"]], "passed_comments": "/"}, {"index": "990", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/DispatcherFlushFilter.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.DispatcherFlushFilter.getFlushType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final FlushType getFlushType() {\n        return this.flushType;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Dispatcher FlushType this filter was created with.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "991", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/DispatcherFlushFilter.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.DispatcherFlushFilter.isEnabled", "methodParameterType": "Agent#", "methodParameterName": "agent#", "methodBody": "private boolean isEnabled(final Agent agent) {\n        return agent.isEnabled();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the agent is enabled.", "call_func_name": ["com.day.cq.replication.Agent.isEnabled"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "992", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/DispatcherFlushFilter.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.DispatcherFlushFilter.isFlushingAgent", "methodParameterType": "Agent#", "methodParameterName": "agent#", "methodBody": "private boolean isFlushingAgent(final Agent agent) {\n        return StringUtils.equals(SERIALIZATION_TYPE, agent.getConfiguration().getSerializationType());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the agent has a \"flush\" serialization type.", "call_func_name": ["com.day.cq.replication.Agent.getConfiguration", "com.day.cq.replication.AgentConfig.getSerializationType", "org.apache.commons.lang.StringUtils.equals"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "993", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/DispatcherFlushFilter.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.DispatcherFlushFilter.isDispatcherTransportURI", "methodParameterType": "Agent#", "methodParameterName": "agent#", "methodBody": "private boolean isDispatcherTransportURI(final Agent agent) {\n        final String transportURI = agent.getConfiguration().getTransportURI();\n\n        return (StringUtils.startsWith(transportURI, HTTP)\n                || StringUtils.startsWith(transportURI, HTTPS));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the agent has a valid transport URI set.", "call_func_name": ["com.day.cq.replication.Agent.getConfiguration", "com.day.cq.replication.AgentConfig.getTransportURI", "org.apache.commons.lang.StringUtils.startsWith"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "994", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/DispatcherFlushFilter.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.DispatcherFlushFilter.isDispatcherHeaders", "methodParameterType": "Agent#", "methodParameterName": "agent#", "methodBody": "private boolean isDispatcherHeaders(final Agent agent) {\n        final ValueMap properties = agent.getConfiguration().getProperties();\n        final String[] headers =  properties.get(AgentConfig.PROTOCOL_HTTP_HEADERS, new String[]{});\n\n        for (final String header : headers) {\n            if (StringUtils.startsWith(header, CQ_ACTION_HEADER)) {\n                return true;\n            }\n        }\n\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#Dimension#ArrayType#ArrayInitializer#ArrayCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer)ArrayInitializer)ArrayCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the agent has a valid dispatcher headers.", "call_func_name": ["com.day.cq.replication.Agent.getConfiguration", "com.day.cq.replication.AgentConfig.getProperties", "org.apache.sling.api.resource.ValueMap.get", "org.apache.commons.lang.StringUtils.startsWith"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "995", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/DispatcherFlushFilter.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.DispatcherFlushFilter.isResourceOnly", "methodParameterType": "Agent#", "methodParameterName": "agent#", "methodBody": "private boolean isResourceOnly(final Agent agent) {\n        final ValueMap properties = agent.getConfiguration().getProperties();\n        final String[] headers =  properties.get(AgentConfig.PROTOCOL_HTTP_HEADERS, new String[]{});\n\n        for (final String header : headers) {\n            if (StringUtils.equals(header, CQ_SCOPE_ACTION_HEADER)) {\n                return true;\n            }\n        }\n\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#Dimension#ArrayType#ArrayInitializer#ArrayCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer)ArrayInitializer)ArrayCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the agent has valid CQ-Action-Scope: ResourceOnly header.", "call_func_name": ["com.day.cq.replication.Agent.getConfiguration", "com.day.cq.replication.AgentConfig.getProperties", "org.apache.sling.api.resource.ValueMap.get", "org.apache.commons.lang.StringUtils.equals"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "996", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/DispatcherFlusher.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.DispatcherFlusher.flush", "methodParameterType": "ResourceResolver#String#", "methodParameterName": "resourceResolver#paths#", "methodBody": "Map<Agent, ReplicationResult> flush(ResourceResolver resourceResolver, String... paths)\n            throws ReplicationException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Issue flush replication request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "997", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/DispatcherFlusher.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.DispatcherFlusher.flush", "methodParameterType": "ResourceResolver#ReplicationActionType#boolean#String#", "methodParameterName": "resourceResolver#actionType#synchronous#paths#", "methodBody": "Map<Agent, ReplicationResult> flush(ResourceResolver resourceResolver, ReplicationActionType actionType,\n                                               boolean synchronous, String... paths) throws ReplicationException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Issue flush replication request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "998", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/DispatcherFlusher.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.DispatcherFlusher.flush", "methodParameterType": "ResourceResolver#ReplicationActionType#boolean#AgentFilter#String#", "methodParameterName": "resourceResolver#actionType#synchronous#agentFilter#paths#", "methodBody": "Map<Agent, ReplicationResult> flush(ResourceResolver resourceResolver, ReplicationActionType actionType,\n                                        boolean synchronous, AgentFilter agentFilter, String... paths) throws\n            ReplicationException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Issue flush replication request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "999", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/DispatcherFlusher.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.DispatcherFlusher.getFlushAgents", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Agent[] getFlushAgents();", "AST": "Javadoc#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get Replication Agents targeted by this service.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1000", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/DispatcherFlusher.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.DispatcherFlusher.getAgents", "methodParameterType": "AgentFilter#", "methodParameterName": "agentFilter#", "methodBody": "Agent[] getAgents(AgentFilter agentFilter);", "AST": "Javadoc#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Get Replication Agents targeted by the provided AgentFilter.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1001", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/impl/ReplicationResultListener.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.impl.ReplicationResultListener.getResults", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final Map<Agent, ReplicationResult> getResults() {\n        return this.results;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the results of the Replication operation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1002", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/impl/DispatcherFlushRulesImpl.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.impl.DispatcherFlushRulesImpl.preprocess", "methodParameterType": "ReplicationAction#ReplicationOptions#", "methodParameterName": "replicationAction#replicationOptions#", "methodBody": "@Override\n    @SuppressWarnings(\"squid:S3776\")\n    public final void preprocess(final ReplicationAction replicationAction,\n                                 final ReplicationOptions replicationOptions) throws ReplicationException {\n        if (!this.accepts(replicationAction, replicationOptions)) {\n            return;\n        }\n\n        // Path being replicated\n        final String path = replicationAction.getPath();\n\n        // Replication action type occurring\n        final ReplicationActionType flushActionType =\n                replicationActionType == null ? replicationAction.getType() : replicationActionType;\n\n        try (ResourceResolver resourceResolver = resourceResolverFactory.getServiceResourceResolver(AUTH_INFO)){\n\n            // Flush full content hierarchies\n            for (final Map.Entry<Pattern, String[]> entry : this.hierarchicalFlushRules.entrySet()) {\n                final Pattern pattern = entry.getKey();\n                final Matcher m = pattern.matcher(path);\n\n                if (m.matches()) {\n                    for (final String value : entry.getValue()) {\n                        final String flushPath = m.replaceAll(value);\n    \n                        log.debug(\"Requesting hierarchical flush of associated path: {} ~> {}\", path,\n                                flushPath);\n                        dispatcherFlusher.flush(resourceResolver, flushActionType, false,\n                                HIERARCHICAL_FILTER,\n                                flushPath);\n                    }\n                }\n            }\n\n            // Flush explicit resources using the CQ-Action-Scope ResourceOnly header\n            for (final Map.Entry<Pattern, String[]> entry : this.resourceOnlyFlushRules.entrySet()) {\n                final Pattern pattern = entry.getKey();\n                final Matcher m = pattern.matcher(path);\n\n                if (m.matches()) {\n                    for (final String value : entry.getValue()) {\n                        final String flushPath = m.replaceAll(value);\n    \n                        log.debug(\"Requesting ResourceOnly flush of associated path: {} ~> {}\", path, entry.getValue());\n                        dispatcherFlusher.flush(resourceResolver, flushActionType, false,\n                                RESOURCE_ONLY_FILTER,\n                                flushPath);\n                    }\n                }\n            }\n\n        } catch (ReplicationException e) {\n            // ReplicationException must be caught here, as otherwise this will prevent the replication at all\n            log.error(\"Error issuing dispatcher flush rules, some downstream replication exception occurred: {}\", e.getMessage(), e);\n        } catch (LoginException e) {\n            log.error(\"Error issuing dispatcher flush rules due to a repository login exception: {}\", e.getMessage(), e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#Dimension#ArrayType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#Block#EnhancedForStatement#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#Dimension#ArrayType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(PrefixExpression(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement)Block)EnhancedForStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["com.adobe.acs.commons.replication.dispatcher.impl.DispatcherFlushRulesImpl.accepts", "com.day.cq.replication.ReplicationAction.getPath", "com.day.cq.replication.ReplicationAction.getType", "org.apache.sling.api.resource.ResourceResolverFactory.getServiceResourceResolver", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "java.util.regex.Matcher.replaceAll", "org.slf4j.Logger.debug", "com.adobe.acs.commons.replication.dispatcher.DispatcherFlusher.flush", "org.apache.sling.api.resource.ResourceResolver.close", "java.lang.Throwable.addSuppressed", "com.day.cq.replication.ReplicationException.getMessage", "org.slf4j.Logger.error", "org.apache.sling.api.resource.LoginException.getMessage"], "call_func_parameter": [["com.day.cq.replication.ReplicationAction", "com.day.cq.replication.ReplicationOptions"], [""], [""], ["java.util.Map"], [""], [""], [""], [""], ["java.lang.CharSequence"], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["org.apache.sling.api.resource.ResourceResolver", "com.day.cq.replication.ReplicationActionType", "boolean", "com.day.cq.replication.AgentFilter", "java.lang.String[]"], [""], ["java.lang.Throwable"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""]], "passed_comments": [{"com.adobe.acs.commons.replication.dispatcher.impl.DispatcherFlushRulesImpl.accepts": "Checks if this service should react to or ignore this replication action."}]}, {"index": "1003", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/impl/DispatcherFlushRulesImpl.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.impl.DispatcherFlushRulesImpl.accepts", "methodParameterType": "ReplicationAction#ReplicationOptions#", "methodParameterName": "replicationAction#replicationOptions#", "methodBody": "private boolean accepts(final ReplicationAction replicationAction, final ReplicationOptions replicationOptions) {\n        if (replicationAction == null || replicationOptions == null)  {\n            log.debug(\"Replication Action or Options are null. Skipping this replication.\");\n            return false;\n        }\n\n        final String path = replicationAction.getPath();\n\n        if (replicationOptions.getFilter() instanceof DispatcherFlushRulesFilter) {\n            log.debug(\"Ignore applying dispatcher flush rules for [ {} ], as it originated from this \"\n                    + \"Service.\", path);\n            return false;\n        } else if ((this.hierarchicalFlushRules == null || this.hierarchicalFlushRules.size() < 1)\n                && (this.resourceOnlyFlushRules == null || this.resourceOnlyFlushRules.size() < 1)) {\n            log.warn(\"Ignored due no configured flush rules.\");\n            return false;\n        } else if (StringUtils.isBlank(path)) {\n            // Do nothing on blank paths\n            log.debug(\"Replication Action path is blank. Skipping this replication.\");\n            return false;\n        } else if (!ReplicationActionType.ACTIVATE.equals(replicationAction.getType())\n                && !ReplicationActionType.DEACTIVATE.equals(replicationAction.getType())\n                && !ReplicationActionType.DELETE.equals(replicationAction.getType())) {\n            // Ignoring non-modifying ReplicationActionTypes\n            return false;\n        }\n\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#ParenthesizedExpression#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if this service should react to or ignore this replication action.", "call_func_name": ["org.slf4j.Logger.debug", "com.day.cq.replication.ReplicationAction.getPath", "com.day.cq.replication.ReplicationOptions.getFilter", "org.slf4j.Logger.debug", "java.util.Map.size", "org.slf4j.Logger.warn", "org.apache.commons.lang.StringUtils.isBlank", "com.day.cq.replication.ReplicationAction.getType", "com.day.cq.replication.ReplicationActionType.equals"], "call_func_parameter": [["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "1004", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/impl/DispatcherFlushRulesImpl.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.impl.DispatcherFlushRulesImpl.configureFlushRules", "methodParameterType": "Map<String,String>#", "methodParameterName": "configuredRules#", "methodBody": "protected final Map<Pattern, String[]> configureFlushRules(final Map<String, String> configuredRules)\n             throws Exception {\n        final Map<Pattern, String[]> rules = new LinkedHashMap<Pattern, String[]>();\n\n        for (final Map.Entry<String, String> entry : configuredRules.entrySet()) {\n            final Pattern pattern = Pattern.compile(entry.getKey().trim());\n            rules.put(pattern, entry.getValue().trim().split(\"&\"));\n        }\n\n        return rules;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#Dimension#ArrayType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#Dimension#ArrayType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#Dimension#ArrayType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create Pattern-based flush rules map.", "call_func_name": ["java.util.LinkedHashMap.<init>", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.String.trim", "java.util.regex.Pattern.compile", "java.lang.String.split", "java.util.Map.put"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1005", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/impl/DispatcherFlushRulesImpl.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.impl.DispatcherFlushRulesImpl.configureReplicationActionType", "methodParameterType": "String#", "methodParameterName": "replicationActionTypeName#", "methodBody": "protected final ReplicationActionType configureReplicationActionType(final String replicationActionTypeName) {\n        try {\n            final ReplicationActionType repActionType =\n                    ReplicationActionType.valueOf(replicationActionTypeName);\n            log.debug(\"Using replication action type: {}\", repActionType.name());\n            return repActionType;\n        } catch (IllegalArgumentException ex) {\n            log.warn(\"Illegal action type configured: {}. Falling back to default: {}\", replicationActionTypeName, OPTION_INHERIT);\n            return null;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Derive the ReplicationActionType to be used for Flushes.", "call_func_name": ["com.day.cq.replication.ReplicationActionType.valueOf", "com.day.cq.replication.ReplicationActionType.name", "org.slf4j.Logger.debug", "org.slf4j.Logger.warn"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1006", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/impl/DispatcherFlusherImpl.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.impl.DispatcherFlusherImpl.flush", "methodParameterType": "ResourceResolver#String#", "methodParameterName": "resourceResolver#paths#", "methodBody": "@Override\n    public final Map<Agent, ReplicationResult> flush(final ResourceResolver resourceResolver, final String... paths)\n            throws ReplicationException {\n        return this.flush(resourceResolver, ReplicationActionType.ACTIVATE, false, paths);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1007", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/impl/DispatcherFlusherImpl.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.impl.DispatcherFlusherImpl.flush", "methodParameterType": "ResourceResolver#ReplicationActionType#boolean#String#", "methodParameterName": "resourceResolver#actionType#synchronous#paths#", "methodBody": "@Override\n    public final Map<Agent, ReplicationResult> flush(final ResourceResolver resourceResolver,\n                                                     final ReplicationActionType actionType,\n                                                     final boolean synchronous,\n                                                     final String... paths) throws ReplicationException {\n        return this.flush(resourceResolver, actionType, synchronous, DispatcherFlushFilter.HIERARCHICAL, paths);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1008", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/impl/DispatcherFlusherImpl.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.impl.DispatcherFlusherImpl.flush", "methodParameterType": "ResourceResolver#ReplicationActionType#boolean#AgentFilter#String#", "methodParameterName": "resourceResolver#actionType#synchronous#agentFilter#paths#", "methodBody": "@Override\n    public final Map<Agent, ReplicationResult> flush(final ResourceResolver resourceResolver,\n                                                     final ReplicationActionType actionType,\n                                                     final boolean synchronous,\n                                                     final AgentFilter agentFilter,\n                                                     final String... paths) throws ReplicationException {\n        final ReplicationOptions options = new ReplicationOptions();\n        final ReplicationResultListener listener = new ReplicationResultListener();\n\n        options.setFilter(agentFilter);\n        options.setSynchronous(synchronous);\n        options.setSuppressStatusUpdate(true);\n        options.setSuppressVersions(true);\n        options.setListener(listener);\n\n        for (final String path : paths) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"--------------------------------------------------------------------------------\");\n                log.debug(\"Issuing Dispatcher Flush (via AEM Replication API) request for: {}\", path);\n                log.debug(\" > Synchronous: {}\", options.isSynchronous());\n                log.debug(\" > Replication Action Type: {}\", actionType.name());\n            }\n\n            replicator.replicate(resourceResolver.adaptTo(Session.class),\n                    actionType, path, options);\n        }\n\n        return listener.getResults();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1009", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/impl/DispatcherFlusherImpl.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.impl.DispatcherFlusherImpl.getFlushAgents", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final Agent[] getFlushAgents() {\n        return this.getAgents(new DispatcherFlushFilter());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["com.adobe.acs.commons.replication.dispatcher.DispatcherFlushFilter.<init>", "com.adobe.acs.commons.replication.dispatcher.impl.DispatcherFlusherImpl.getAgents"], "call_func_parameter": [[""], ["com.day.cq.replication.AgentFilter"]], "passed_comments": [{"com.adobe.acs.commons.replication.dispatcher.impl.DispatcherFlusherImpl.getAgents": "{@inheritDoc}"}]}, {"index": "1010", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/replication/dispatcher/impl/DispatcherFlusherImpl.java", "methodName": "com.adobe.acs.commons.replication.dispatcher.impl.DispatcherFlusherImpl.getAgents", "methodParameterType": "AgentFilter#", "methodParameterName": "agentFilter#", "methodBody": "public final Agent[] getAgents(final AgentFilter agentFilter) {\n        final List<Agent> flushAgents = new ArrayList<Agent>();\n\n        for (final Agent agent : agentManager.getAgents().values()) {\n            if (agentFilter.isIncluded(agent)) {\n                flushAgents.add(agent);\n            }\n        }\n        return flushAgents.toArray(new Agent[flushAgents.size()]);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.util.ArrayList.<init>", "com.day.cq.replication.AgentManager.getAgents", "java.util.Map.values", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.day.cq.replication.AgentFilter.isIncluded", "java.util.List.add", "java.util.List.size", "java.util.List.toArray"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["com.day.cq.replication.Agent"], ["java.lang.Object"], [""], ["java.lang.Object[]"]], "passed_comments": "/"}, {"index": "1011", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/ContentFinderHitBuilder.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.buildGenericResult", "methodParameterType": "Hit#", "methodParameterName": "hit#", "methodBody": "public static Map<String, Object> buildGenericResult(final Hit hit) throws RepositoryException {\n        Map<String, Object> map = new LinkedHashMap<String, Object>();\n\n        final Resource resource = hit.getResource();\n\n        /**\n         * Apply custom properties based on the \"type\"\n         */\n\n        // Assets\n        final Asset asset = DamUtil.resolveToAsset(resource);\n        if (asset != null) {\n            return addAssetData(asset, hit, map);\n        }\n\n        // Pages\n        final Page page = getPage(resource);\n        if (page != null) {\n            return addPageData(page, hit, map);\n        }\n\n        // Other\n        return addOtherData(hit, map);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds the result object that will representing a CF view record for the provided hit. <p> This method will generate the result object data points based on if the hit is: 1) a Page 2) an Asset 3) Other", "call_func_name": ["java.util.LinkedHashMap.<init>", "com.day.cq.search.result.Hit.getResource", "com.day.cq.dam.commons.util.DamUtil.resolveToAsset", "com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.addAssetData", "com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.getPage", "com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.addPageData", "com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.addOtherData"], "call_func_parameter": [[""], [""], ["org.apache.sling.api.resource.Resource"], ["com.day.cq.dam.api.Asset", "com.day.cq.search.result.Hit", "java.util.Map"], ["org.apache.sling.api.resource.Resource"], ["com.day.cq.wcm.api.Page", "com.day.cq.search.result.Hit", "java.util.Map"], ["com.day.cq.search.result.Hit", "java.util.Map"]], "passed_comments": [{"com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.addAssetData": "Derives and adds Asset related information to the map representing the hit."}, {"com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.getPage": "Gets the Page object corresponding the with the resource. Will resolve to a Page if the result is a cq:Page or a cq:Page's jcr:content node."}, {"com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.addPageData": "Derives and adds Page related information to the map representing the hit."}, {"com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.addOtherData": "Derives and adds Other (non-Page, non-Asset) related information to the map representing the hit."}]}, {"index": "1012", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/ContentFinderHitBuilder.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.addPageData", "methodParameterType": "Page#Hit#Map<String,Object>#", "methodParameterName": "page#hit#map#", "methodBody": "private static Map<String, Object> addPageData(final Page page, final Hit hit, Map<String, Object> map)\n            throws RepositoryException {\n\n        // Title\n        String title = page.getName();\n\n        if (StringUtils.isNotBlank(page.getTitle())) {\n            title = page.getTitle();\n        } else if (StringUtils.isNotBlank(page.getPageTitle())) {\n            title = page.getPageTitle();\n        } else if (StringUtils.isNotBlank(page.getNavigationTitle())) {\n            title = page.getNavigationTitle();\n        }\n\n        // Excerpt\n        String excerpt = hit.getExcerpt();\n        if (StringUtils.isBlank(hit.getExcerpt())) {\n            excerpt = StringUtils.stripToEmpty(page.getDescription());\n            if (excerpt.length() > MAX_EXCERPT_LENGTH) {\n                excerpt = StringUtils.substring(excerpt, 0, (MAX_EXCERPT_LENGTH - ELLIPSE_LENGTH)) + \"...\";\n            }\n        }\n\n        map.put(CF_PATH, page.getPath());\n        map.put(CF_NAME, page.getName());\n        map.put(CF_TITLE, title);\n        map.put(CF_EXCERPT, excerpt);\n        map.put(CF_DD_GROUPS, \"page\");\n        map.put(CF_TYPE, \"Page\");\n        map.put(CF_LAST_MODIFIED, getLastModified(page));\n\n        return map;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#MethodInvocation#StringLiteral#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)IfStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Derives and adds Page related information to the map representing the hit.", "call_func_name": ["com.day.cq.wcm.api.Page.getName", "com.day.cq.wcm.api.Page.getTitle", "org.apache.commons.lang.StringUtils.isNotBlank", "com.day.cq.wcm.api.Page.getPageTitle", "com.day.cq.wcm.api.Page.getNavigationTitle", "com.day.cq.search.result.Hit.getExcerpt", "org.apache.commons.lang.StringUtils.isBlank", "com.day.cq.wcm.api.Page.getDescription", "org.apache.commons.lang.StringUtils.stripToEmpty", "java.lang.String.length", "java.lang.StringBuilder.<init>", "org.apache.commons.lang.StringUtils.substring", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.day.cq.wcm.api.Page.getPath", "java.util.Map.put", "com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.getLastModified", "java.lang.Long.valueOf"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], [""], ["java.lang.String", "int", "int"], ["java.lang.String"], [""], [""], ["java.lang.Object", "java.lang.Object"], ["com.day.cq.wcm.api.Page"], ["long"]], "passed_comments": [{"com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.getLastModified": "Get the last modified date for a Page."}]}, {"index": "1013", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/ContentFinderHitBuilder.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.addAssetData", "methodParameterType": "Asset#Hit#Map<String,Object>#", "methodParameterName": "asset#hit#map#", "methodBody": "private static Map<String, Object> addAssetData(final Asset asset, final Hit hit, Map<String, Object> map)\n            throws RepositoryException {\n\n        String title = asset.getName();\n\n        if (StringUtils.isNotBlank(asset.getMetadataValue(DamConstants.DC_TITLE))) {\n            title = asset.getMetadataValue(DamConstants.DC_TITLE);\n        }\n\n        // Excerpt\n        String excerpt = hit.getExcerpt();\n        if (StringUtils.isBlank(hit.getExcerpt())) {\n            excerpt = StringUtils.stripToEmpty(asset.getMetadataValue(DamConstants.DC_DESCRIPTION));\n            if (excerpt.length() > MAX_EXCERPT_LENGTH) {\n                excerpt = StringUtils.substring(excerpt, 0, (MAX_EXCERPT_LENGTH - ELLIPSE_LENGTH)) + \"...\";\n            }\n        }\n\n        map.put(CF_PATH, asset.getPath());\n        map.put(CF_NAME, asset.getName());\n        map.put(CF_TITLE, title);\n        map.put(CF_EXCERPT, excerpt);\n        map.put(CF_MIMETYPE, asset.getMimeType());\n        map.put(CF_SIZE, getSize(asset));\n        map.put(CF_CACHE_KILLER, getCacheKiller(asset));\n        map.put(CF_TYPE, \"Asset\");\n        map.put(CF_LAST_MODIFIED, getLastModified(asset));\n\n        return map;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#MethodInvocation#StringLiteral#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Derives and adds Asset related information to the map representing the hit.", "call_func_name": ["com.day.cq.dam.api.Asset.getName", "com.day.cq.dam.api.Asset.getMetadataValue", "org.apache.commons.lang.StringUtils.isNotBlank", "com.day.cq.search.result.Hit.getExcerpt", "org.apache.commons.lang.StringUtils.isBlank", "org.apache.commons.lang.StringUtils.stripToEmpty", "java.lang.String.length", "java.lang.StringBuilder.<init>", "org.apache.commons.lang.StringUtils.substring", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.day.cq.dam.api.Asset.getPath", "java.util.Map.put", "com.day.cq.dam.api.Asset.getMimeType", "com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.getSize", "java.lang.Long.valueOf", "com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.getCacheKiller", "com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.getLastModified"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], [""], [""], ["java.lang.String", "int", "int"], ["java.lang.String"], [""], [""], ["java.lang.Object", "java.lang.Object"], [""], ["com.day.cq.dam.api.Asset"], ["long"], ["com.day.cq.dam.api.Asset"], ["com.day.cq.dam.api.Asset"]], "passed_comments": [{"com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.getSize": "Get the size of the Asset (the original rendition)."}, {"com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.getCacheKiller": "Get the timestamp for the last change to the thumbnail."}, {"com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.getLastModified": "Get the last modified date for an Asset."}]}, {"index": "1014", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/ContentFinderHitBuilder.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.addOtherData", "methodParameterType": "Hit#Map<String,Object>#", "methodParameterName": "hit#map#", "methodBody": "private static Map<String, Object> addOtherData(final Hit hit, Map<String, Object> map)\n            throws RepositoryException {\n        final Resource resource = hit.getResource();\n        final ValueMap properties = resource.adaptTo(ValueMap.class);\n\n        map.put(CF_PATH, resource.getPath());\n        map.put(CF_NAME, resource.getName());\n        map.put(CF_TITLE, properties.get(\"jcr:title\", resource.getName()));\n        map.put(CF_EXCERPT, hit.getExcerpt());\n        map.put(CF_LAST_MODIFIED, getLastModified(resource));\n        map.put(CF_TYPE, \"Data\");\n\n        return map;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Derives and adds Other (non-Page, non-Asset) related information to the map representing the hit.", "call_func_name": ["com.day.cq.search.result.Hit.getResource", "org.apache.sling.api.resource.Resource.adaptTo", "org.apache.sling.api.resource.Resource.getPath", "java.util.Map.put", "org.apache.sling.api.resource.Resource.getName", "org.apache.sling.api.resource.ValueMap.get", "com.day.cq.search.result.Hit.getExcerpt", "com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.getLastModified", "java.lang.Long.valueOf"], "call_func_parameter": [[""], ["java.lang.Class"], [""], ["java.lang.Object", "java.lang.Object"], [""], ["java.lang.String", "java.lang.Object"], [""], ["org.apache.sling.api.resource.Resource"], ["long"]], "passed_comments": [{"com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.getLastModified": "Get the last modified date for a generic resource."}]}, {"index": "1015", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/ContentFinderHitBuilder.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.getLastModified", "methodParameterType": "Asset#", "methodParameterName": "asset#", "methodBody": "private static long getLastModified(final Asset asset) {\n        if (asset.getLastModified() > 0L) {\n            return asset.getLastModified();\n        } else {\n            final Object obj = asset.getMetadata().get(JcrConstants.JCR_LASTMODIFIED);\n\n            if (obj != null && obj instanceof Date) {\n                return ((Date) obj).getTime();\n            } else {\n                return 0L;\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#InfixExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ReturnStatement#Block#NumberLiteral#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Get the last modified date for an Asset.", "call_func_name": ["com.day.cq.dam.api.Asset.getLastModified", "com.day.cq.dam.api.Asset.getMetadata", "java.util.Map.get", "java.util.Date.getTime"], "call_func_parameter": [[""], [""], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "1016", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/ContentFinderHitBuilder.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.getLastModified", "methodParameterType": "Page#", "methodParameterName": "page#", "methodBody": "private static long getLastModified(final Page page) {\n        if (page.getLastModified() != null) {\n            return page.getLastModified().getTimeInMillis();\n        } else {\n            final ValueMap properties = page.getProperties();\n            Date lastModified = properties.get(NameConstants.PN_PAGE_LAST_MOD, Date.class);\n            if (lastModified != null) {\n                return lastModified.getTime();\n            } else {\n                return 0L;\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#NumberLiteral#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Get the last modified date for a Page.", "call_func_name": ["com.day.cq.wcm.api.Page.getLastModified", "java.util.Calendar.getTimeInMillis", "com.day.cq.wcm.api.Page.getProperties", "org.apache.sling.api.resource.ValueMap.get", "java.util.Date.getTime"], "call_func_parameter": [[""], [""], [""], ["java.lang.String", "java.lang.Class"], [""]], "passed_comments": "/"}, {"index": "1017", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/ContentFinderHitBuilder.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.getLastModified", "methodParameterType": "Resource#", "methodParameterName": "resource#", "methodBody": "private static long getLastModified(final Resource resource) {\n        final ValueMap properties = resource.adaptTo(ValueMap.class);\n\n        final Date cqLastModified = properties.get(NameConstants.PN_PAGE_LAST_MOD, Date.class);\n        if (cqLastModified != null) {\n            return cqLastModified.getTime();\n        }\n\n        final Date jcrLastModified = properties.get(JcrConstants.JCR_LASTMODIFIED, Date.class);\n        if (jcrLastModified != null) {\n            return jcrLastModified.getTime();\n        }\n\n        return 0L;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NumberLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the last modified date for a generic resource.", "call_func_name": ["org.apache.sling.api.resource.Resource.adaptTo", "org.apache.sling.api.resource.ValueMap.get", "java.util.Date.getTime"], "call_func_parameter": [["java.lang.Class"], ["java.lang.String", "java.lang.Class"], [""]], "passed_comments": "/"}, {"index": "1018", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/ContentFinderHitBuilder.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.getSize", "methodParameterType": "Asset#", "methodParameterName": "asset#", "methodBody": "private static long getSize(final Asset asset) {\n        final Rendition original = asset.getOriginal();\n        if (original == null) {\n            return 0;\n        }\n        return original.getSize();\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NumberLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the size of the Asset (the original rendition).", "call_func_name": ["com.day.cq.dam.api.Asset.getOriginal", "com.day.cq.dam.api.Rendition.getSize"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "1019", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/ContentFinderHitBuilder.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.getCacheKiller", "methodParameterType": "Asset#", "methodParameterName": "asset#", "methodBody": "private static long getCacheKiller(final Asset asset) {\n        try {\n            Resource resource = asset.getRendition(DAM_THUMBNAIL);\n            Resource contentResource = resource.getChild(JcrConstants.JCR_CONTENT);\n            ValueMap properties = contentResource.adaptTo(ValueMap.class);\n\n            return properties.get(JcrConstants.JCR_LASTMODIFIED, 0L) / ONE_MILLION;\n        } catch (Exception ex) {\n            return 0L;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#MethodInvocation#SimpleName#InfixExpression#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NumberLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Get the timestamp for the last change to the thumbnail.", "call_func_name": ["com.day.cq.dam.api.Asset.getRendition", "org.apache.sling.api.resource.Resource.getChild", "org.apache.sling.api.resource.Resource.adaptTo", "java.lang.Long.valueOf", "org.apache.sling.api.resource.ValueMap.get", "java.lang.Long.longValue"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.lang.Class"], ["long"], ["java.lang.String", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "1020", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/ContentFinderHitBuilder.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.getPage", "methodParameterType": "Resource#", "methodParameterName": "resource#", "methodBody": "private static Page getPage(final Resource resource) {\n        if (resource == null) {\n            return null;\n        }\n\n        // If resource is a cq:Page node; then return the Page\n        if (resource.adaptTo(Page.class) != null) {\n            return resource.adaptTo(Page.class);\n        }\n\n        // If the resource is a cq:Page/jcr:content node, then return the cq:Page page\n        if (StringUtils.equals(resource.getName(), JcrConstants.JCR_CONTENT)) {\n            final Resource parent = resource.getParent();\n            if (parent != null) {\n                return parent.adaptTo(Page.class);\n            }\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the Page object corresponding the with the resource. Will resolve to a Page if the result is a cq:Page or a cq:Page's jcr:content node.", "call_func_name": ["org.apache.sling.api.resource.Resource.adaptTo", "org.apache.sling.api.resource.Resource.getName", "org.apache.commons.lang.StringUtils.equals", "org.apache.sling.api.resource.Resource.getParent"], "call_func_parameter": [["java.lang.Class"], [""], ["java.lang.String", "java.lang.String"], [""]], "passed_comments": "/"}, {"index": "1021", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/viewhandler/GQLToQueryBuilderConverter.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.convertToQueryBuilder", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "public static boolean convertToQueryBuilder(final SlingHttpServletRequest request) {\n        return (has(request, ContentFinderConstants.CONVERT_TO_QUERYBUILDER_KEY) && ContentFinderConstants.CONVERT_TO_QUERYBUILDER_VALUE\n                .equals(get(request, ContentFinderConstants.CONVERT_TO_QUERYBUILDER_KEY)));\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#InfixExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)InfixExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if request forces QueryBuilder mode", "call_func_name": ["com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.has", "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.get", "java.lang.String.equals"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest", "java.lang.String"], ["org.apache.sling.api.SlingHttpServletRequest", "java.lang.String"], ["java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.has": "Checks if the provided key has ANY values (1 or more)"}, {"com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.get": "Returns a single value for a query parameter key"}]}, {"index": "1022", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/viewhandler/GQLToQueryBuilderConverter.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.hasMany", "methodParameterType": "SlingHttpServletRequest#String#", "methodParameterName": "request#key#", "methodBody": "public static boolean hasMany(SlingHttpServletRequest request, String key) {\n        final RequestParameter rp = request.getRequestParameter(key);\n        if (rp == null) {\n            return false;\n        }\n        return getAll(request, key).length > 1;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#NumberLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the provided key has more than 1 values (comma delimited)", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getRequestParameter", "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.getAll"], "call_func_parameter": [["java.lang.String"], ["org.apache.sling.api.SlingHttpServletRequest", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.getAll": "Returns a String array from a comma delimited list of values"}]}, {"index": "1023", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/viewhandler/GQLToQueryBuilderConverter.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.has", "methodParameterType": "SlingHttpServletRequest#String#", "methodParameterName": "request#key#", "methodBody": "public static boolean has(SlingHttpServletRequest request, String key) {\n        return request.getParameterValues(key) != null;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the provided key has ANY values (1 or more)", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getParameterValues"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "1024", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/viewhandler/GQLToQueryBuilderConverter.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.get", "methodParameterType": "SlingHttpServletRequest#String#", "methodParameterName": "request#key#", "methodBody": "public static String get(SlingHttpServletRequest request, String key) {\n        return StringUtils.trim(request.getRequestParameter(key).toString());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a single value for a query parameter key", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getRequestParameter", "java.lang.Object.toString", "org.apache.commons.lang.StringUtils.trim"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "1025", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/viewhandler/GQLToQueryBuilderConverter.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.getAll", "methodParameterType": "SlingHttpServletRequest#String#", "methodParameterName": "request#key#", "methodBody": "public static String[] getAll(SlingHttpServletRequest request, String key) {\n        final RequestParameter rp = request.getRequestParameter(key);\n        if (rp == null) {\n            return new String[0];\n        }\n        return StringUtils.split(rp.getString(), DELIMITER);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a String array from a comma delimited list of values", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getRequestParameter", "org.apache.sling.api.request.RequestParameter.getString", "org.apache.commons.lang.StringUtils.split"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "1026", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/viewhandler/GQLToQueryBuilderConverter.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.put", "methodParameterType": "SlingHttpServletRequest#Map<String,String>#String#int#boolean#", "methodParameterName": "request#map#predicate#group#or#", "methodBody": "public static Map<String, String> put(SlingHttpServletRequest request, Map<String, String> map,\n            String predicate, int group, boolean or) {\n        return putAll(map, predicate, getAll(request, predicate), group, or);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convenience wrapper", "call_func_name": ["com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.getAll", "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.putAll"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest", "java.lang.String"], ["java.util.Map", "java.lang.String", "java.lang.String[]", "int", "boolean"]], "passed_comments": [{"com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.getAll": "Returns a String array from a comma delimited list of values"}, {"com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.putAll": "Helper method for adding comma delimited values into a Query Builder predicate"}]}, {"index": "1027", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/viewhandler/GQLToQueryBuilderConverter.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.putProperty", "methodParameterType": "SlingHttpServletRequest#Map<String,String>#String#String#int#boolean#", "methodParameterName": "request#map#requestKey#predicate#group#or#", "methodBody": "public static Map<String, String> putProperty(SlingHttpServletRequest request, Map<String, String> map,\n            String requestKey, String predicate, int group, boolean or) {\n        // putAll(map, \"property\", \"jcr:titke\", \"value\", [x,y,z], 10, true)\n        return putAll(map, predicate, requestKey, JcrPropertyPredicateEvaluator.VALUE,\n                getAll(request, requestKey), group, or);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Used when the request key is different from the Predicate", "call_func_name": ["com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.getAll", "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.putAll"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest", "java.lang.String"], ["java.util.Map", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String[]", "int", "boolean"]], "passed_comments": [{"com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.getAll": "Returns a String array from a comma delimited list of values"}, {"com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.putAll": "@param map"}]}, {"index": "1028", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/viewhandler/GQLToQueryBuilderConverter.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.putAll", "methodParameterType": "Map<String,String>#String#String[]#int#boolean#", "methodParameterName": "map#predicate#values#group#or#", "methodBody": "public static Map<String, String> putAll(Map<String, String> map, String predicate, String[] values,\n            int group, boolean or) {\n        final String groupId = String.valueOf(group) + SUFFIX_GROUP;\n        int count = 1;\n\n        for (final String value : values) {\n            final String predicateId = count + \"_\" + predicate;\n\n            map.put(groupId + \".\" + predicateId, StringUtils.trim(value));\n            count++;\n        }\n\n        map.put(groupId + SUFFIX_P_OR, String.valueOf(or));\n\n        return map;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Helper method for adding comma delimited values into a Query Builder predicate", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.String.valueOf", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.StringBuilder.append", "org.apache.commons.lang.StringUtils.trim", "java.util.Map.put", "java.lang.String.valueOf"], "call_func_parameter": [[""], ["int"], ["java.lang.String"], [""], ["int"], ["java.lang.String"], ["java.lang.Object", "java.lang.Object"], ["boolean"]], "passed_comments": "/"}, {"index": "1029", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/viewhandler/GQLToQueryBuilderConverter.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.putAll", "methodParameterType": "Map<String,String>#String#String#String#String[]#int#boolean#", "methodParameterName": "map#predicate#predicateValue#predicateSuffix#values#group#or#", "methodBody": "public static Map<String, String> putAll(Map<String, String> map, String predicate, String predicateValue,\n            String predicateSuffix, String[] values, int group, boolean or) {\n        final String groupId = String.valueOf(group) + SUFFIX_GROUP;\n\n        map.put(groupId + \".\" + predicate, predicateValue);\n\n        int count = 1;\n        for (final String value : values) {\n            final String predicateId = predicate;\n            final String predicateSuffixId = count + \"_\" + predicateSuffix;\n            map.put(groupId + \".\" + predicateId + \".\" + predicateSuffixId, StringUtils.trim(value));\n            count++;\n        }\n\n        map.put(groupId + SUFFIX_P_OR, String.valueOf(or));\n\n        return map;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param map", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.String.valueOf", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.Map.put", "java.lang.StringBuilder.append", "org.apache.commons.lang.StringUtils.trim", "java.lang.String.valueOf"], "call_func_parameter": [[""], ["int"], ["java.lang.String"], [""], ["java.lang.Object", "java.lang.Object"], ["int"], ["java.lang.String"], ["boolean"]], "passed_comments": "/"}, {"index": "1030", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/viewhandler/GQLToQueryBuilderConverter.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.isPage", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "public static boolean isPage(final SlingHttpServletRequest request) {\n        if (has(request, CF_TYPE)) {\n            String nodeType = get(request, CF_TYPE);\n            return StringUtils.equals(nodeType, NameConstants.NT_PAGE);\n        }\n        return false;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks of the query param node type is that of a CQ Page", "call_func_name": ["com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.has", "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.get", "org.apache.commons.lang.StringUtils.equals"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest", "java.lang.String"], ["org.apache.sling.api.SlingHttpServletRequest", "java.lang.String"], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.has": "Checks if the provided key has ANY values (1 or more)"}, {"com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.get": "Returns a single value for a query parameter key"}]}, {"index": "1031", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/viewhandler/GQLToQueryBuilderConverter.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.isAsset", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "public static boolean isAsset(final SlingHttpServletRequest request) {\n        if (has(request, CF_TYPE)) {\n            String nodeType = get(request, CF_TYPE);\n            return StringUtils.equals(nodeType, DamConstants.NT_DAM_ASSET);\n        }\n        return false;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks of the query param node type is that of a DAM Asset", "call_func_name": ["com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.has", "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.get", "org.apache.commons.lang.StringUtils.equals"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest", "java.lang.String"], ["org.apache.sling.api.SlingHttpServletRequest", "java.lang.String"], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.has": "Checks if the provided key has ANY values (1 or more)"}, {"com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.get": "Returns a single value for a query parameter key"}]}, {"index": "1032", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/viewhandler/GQLToQueryBuilderConverter.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.getLimit", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "public static int getLimit(final SlingHttpServletRequest request) {\n        if (has(request, CF_LIMIT)) {\n            final String value = get(request, CF_LIMIT);\n            final String[] limits = StringUtils.split(value, \"..\");\n\n            if (value.matches(\"^(\\\\d)+\\\\.\\\\.(\\\\d)+$\")) {\n                // 10..20\n                return Integer.parseInt(limits[1]) - Integer.parseInt(limits[0]);\n            } else if (value.matches(\"^\\\\.\\\\.(\\\\d)+$\")) {\n                // ..20\n                return Integer.parseInt(limits[0]);\n            } else if (value.matches(\"^(\\\\d)+\\\\.\\\\.$\")) {\n                // 20..\n                // Not upper limit\n                return DEFAULT_LIMIT;\n            }\n            log.info(\"Could not find valid LIMIT for QueryBuilder-based ContentFinder: {}\", value);\n        } else {\n            log.info(\"Could not find any LIMIT for QueryBuilder-based ContentFinder\");\n        }\n\n        return DEFAULT_LIMIT;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#InfixExpression#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)InfixExpression)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)IfStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extract the query limit from the ContentFinder Query Parameter notation", "call_func_name": ["com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.has", "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.get", "org.apache.commons.lang.StringUtils.split", "java.lang.String.matches", "java.lang.Integer.parseInt", "org.slf4j.Logger.info", "org.slf4j.Logger.info"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest", "java.lang.String"], ["org.apache.sling.api.SlingHttpServletRequest", "java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.Object"], ["java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.has": "Checks if the provided key has ANY values (1 or more)"}, {"com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.get": "Returns a single value for a query parameter key"}]}, {"index": "1033", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/viewhandler/GQLToQueryBuilderConverter.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.getOffset", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "public static int getOffset(final SlingHttpServletRequest request) {\n        if (has(request, CF_LIMIT)) {\n            final String value = get(request, CF_LIMIT);\n            final String[] offsets = StringUtils.split(value, \"..\");\n\n            if (value.matches(\"^(\\\\d)+\\\\.\\\\.(\\\\d)+$\") // 10..20\n                    || value.matches(\"^\\\\.\\\\.(\\\\d)+$\") // ..20\n                    || value.matches(\"^(\\\\d)+\\\\.\\\\.$\") ) { // 20..\n                return Integer.parseInt(offsets[0]);\n            }\n            log.info(\"Could not find valid OFFSET for QueryBuilder-based ContentFinder: {}\", value);\n        } else {\n            log.info(\"Could not find any OFFSET for QueryBuilder-based ContentFinder\");\n        }\n\n        return DEFAULT_OFFSET;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extract the query offset from the ContentFinder Query Parameter notation", "call_func_name": ["com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.has", "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.get", "org.apache.commons.lang.StringUtils.split", "java.lang.String.matches", "java.lang.Integer.parseInt", "org.slf4j.Logger.info", "org.slf4j.Logger.info"], "call_func_parameter": [["org.apache.sling.api.SlingHttpServletRequest", "java.lang.String"], ["org.apache.sling.api.SlingHttpServletRequest", "java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.Object"], ["java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.has": "Checks if the provided key has ANY values (1 or more)"}, {"com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.get": "Returns a single value for a query parameter key"}]}, {"index": "1034", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/viewhandler/QueryBuilderViewQuery.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.QueryBuilderViewQuery.createHit", "methodParameterType": "Hit#", "methodParameterName": "hit#", "methodBody": "private com.day.cq.wcm.core.contentfinder.Hit createHit(final Hit hit) throws RepositoryException {\n        final Map<String, Object> map = ContentFinderHitBuilder.buildGenericResult(hit);\n        final com.day.cq.wcm.core.contentfinder.Hit cfHit = new com.day.cq.wcm.core.contentfinder.Hit();\n\n        for (final Map.Entry<String, Object> entry : map.entrySet()) {\n            cfHit.set(entry.getKey(), entry.getValue());\n        }\n\n        return cfHit;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "ViewQuery integration.", "call_func_name": ["com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.buildGenericResult", "com.day.cq.wcm.core.contentfinder.Hit.<init>", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.day.cq.wcm.core.contentfinder.Hit.set"], "call_func_parameter": [["com.day.cq.search.result.Hit"], [""], [""], [""], [""], [""], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.contentfinder.querybuilder.impl.ContentFinderHitBuilder.buildGenericResult": "Builds the result object that will representing a CF view record for the provided hit. <p> This method will generate the result object data points based on if the hit is: 1) a Page 2) an Asset 3) Other"}]}, {"index": "1035", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/contentfinder/querybuilder/impl/viewhandler/QueryBuilderViewHandler.java", "methodName": "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.QueryBuilderViewHandler.getQueryBuilderParams", "methodParameterType": "SlingHttpServletRequest#String#", "methodParameterName": "request#queryString#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    private Map<String, String> getQueryBuilderParams(final SlingHttpServletRequest request, final String queryString) {\n        Map<String, String> map = new LinkedHashMap<String, String>();\n\n        for (final String key : (Set<String>) request.getParameterMap().keySet()) {\n            // Skip known content finder parameters that are unused for QueryBuilder\n            if (!ArrayUtils.contains(ContentFinderConstants.QUERYBUILDER_BLACKLIST, key)) {\n                final String val = request.getParameter(key);\n                if (StringUtils.isNotBlank(val)) {\n                    map.put(key, val);\n                }\n            } else {\n                log.debug(\"Rejecting property [ {} ] due to blacklist match\", key);\n            }\n        }\n\n        map = GQLToQueryBuilderConverter.addFulltext(request, map, queryString);\n        map = GQLToQueryBuilderConverter.addLimitAndOffset(request, map);\n\n        return map;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#CastExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#PrefixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)CastExpression(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Assume query should be treated as a QueryBuilder query, rather than a GQL query <p> This intelligently converts default Fulltext and Limit parameters to QueryBuilder equivalents", "call_func_name": ["java.util.LinkedHashMap.<init>", "org.apache.sling.api.SlingHttpServletRequest.getParameterMap", "java.util.Map.keySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.commons.lang.ArrayUtils.contains", "org.apache.sling.api.SlingHttpServletRequest.getParameter", "org.apache.commons.lang.StringUtils.isNotBlank", "java.util.Map.put", "org.slf4j.Logger.debug", "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.addFulltext", "com.adobe.acs.commons.contentfinder.querybuilder.impl.viewhandler.GQLToQueryBuilderConverter.addLimitAndOffset"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["java.lang.Object[]", "java.lang.Object"], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.Object"], ["org.apache.sling.api.SlingHttpServletRequest", "java.util.Map", "java.lang.String"], ["org.apache.sling.api.SlingHttpServletRequest", "java.util.Map"]], "passed_comments": "/"}, {"index": "1036", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/WorkflowPackageManager.java", "methodName": "com.adobe.acs.commons.workflow.WorkflowPackageManager.create", "methodParameterType": "ResourceResolver#String#String#String#", "methodParameterName": "resourceResolver#bucketSegment#name#paths#", "methodBody": "Page create(ResourceResolver resourceResolver, String bucketSegment, String name,\n                String... paths) throws WCMException, RepositoryException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Creates a Workflow Package for the provided paths. The Workflow Page will include the provided paths and any jcr:content sub-structure. Stores all workflow packages under /etc/workflow/packages/{bucketSegment}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1037", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/WorkflowPackageManager.java", "methodName": "com.adobe.acs.commons.workflow.WorkflowPackageManager.create", "methodParameterType": "ResourceResolver#String#String#", "methodParameterName": "resourceResolver#name#paths#", "methodBody": "Page create(ResourceResolver resourceResolver, String name, String... paths) throws WCMException,\n            RepositoryException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Creates a Workflow Package for the provided paths. The Workflow Page will include the provided paths and any jcr:content sub-structure. Stores all workflow packages under /etc/workflow/packages", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1038", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/WorkflowPackageManager.java", "methodName": "com.adobe.acs.commons.workflow.WorkflowPackageManager.getPaths", "methodParameterType": "ResourceResolver#String#", "methodParameterName": "resourceResolver#workflowPackagePath#", "methodBody": "List<String> getPaths(ResourceResolver resourceResolver, String workflowPackagePath) throws RepositoryException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Gets the payload paths in the Workflow Package. This method will always return a List. - If the path does not resolve to a resource > an empty list - If the path does not resolve to a Workflow Package > a List of one item; the param path - If the path does resolve to a Workflow Package > a List of all resources in the Workflow Package but not the WF Package itself.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1039", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/WorkflowPackageManager.java", "methodName": "com.adobe.acs.commons.workflow.WorkflowPackageManager.getPaths", "methodParameterType": "ResourceResolver#String#String[]#", "methodParameterName": "resourceResolver#workflowPackagePath#nodeTypes#", "methodBody": "List<String> getPaths(ResourceResolver resourceResolver, String workflowPackagePath, String[] nodeTypes) throws RepositoryException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Gets the payload paths in the Workflow Package. This method will always return a List. - If the path does not resolve to a resource > an empty list - If the path does not resolve to a Workflow Package > a List of one item; the param path - If the path does resolve to a Workflow Package > a List of all resources in the Workflow Package but not the WF Package itself.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1040", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/WorkflowPackageManager.java", "methodName": "com.adobe.acs.commons.workflow.WorkflowPackageManager.delete", "methodParameterType": "ResourceResolver#String#", "methodParameterName": "resourceResolver#workflowPackagePath#", "methodBody": "void delete(ResourceResolver resourceResolver, String workflowPackagePath) throws RepositoryException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Deletes the specified Workflow Package.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1041", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/WorkflowPackageManager.java", "methodName": "com.adobe.acs.commons.workflow.WorkflowPackageManager.isWorkflowPackage", "methodParameterType": "ResourceResolver#String#", "methodParameterName": "resourceResolver#path#", "methodBody": "boolean isWorkflowPackage(ResourceResolver resourceResolver, String path);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Checks if the resource at the specified path is a Workflow Package Page.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1042", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/removal/WorkflowInstanceRemover.java", "methodName": "com.adobe.acs.commons.workflow.bulk.removal.WorkflowInstanceRemover.removeWorkflowInstances", "methodParameterType": "ResourceResolver#Collection<String>#Collection<String>#Collection<Pattern>#Calendar#", "methodParameterName": "resourceResolver#modelIds#statuses#payloads#olderThan#", "methodBody": "int removeWorkflowInstances(final ResourceResolver resourceResolver,\n                                final Collection<String> modelIds,\n                                final Collection<String> statuses,\n                                final Collection<Pattern> payloads,\n                                final Calendar olderThan) throws PersistenceException, WorkflowRemovalException, InterruptedException, WorkflowRemovalForceQuitException;", "AST": "Javadoc#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Removes workflow instances that match the parameter criteria.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1043", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/removal/WorkflowInstanceRemover.java", "methodName": "com.adobe.acs.commons.workflow.bulk.removal.WorkflowInstanceRemover.removeWorkflowInstances", "methodParameterType": "ResourceResolver#Collection<String>#Collection<String>#Collection<Pattern>#Calendar#int#", "methodParameterName": "resourceResolver#modelIds#statuses#payloads#olderThan#batchSize#", "methodBody": "int removeWorkflowInstances(final ResourceResolver resourceResolver,\n                                final Collection<String> modelIds,\n                                final Collection<String> statuses,\n                                final Collection<Pattern> payloads,\n                                final Calendar olderThan,\n                                final int batchSize) throws PersistenceException, WorkflowRemovalException, InterruptedException, WorkflowRemovalForceQuitException;", "AST": "Javadoc#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Removes workflow instances that match the parameter criteria.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1044", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/removal/WorkflowInstanceRemover.java", "methodName": "com.adobe.acs.commons.workflow.bulk.removal.WorkflowInstanceRemover.removeWorkflowInstances", "methodParameterType": "ResourceResolver#Collection<String>#Collection<String>#Collection<Pattern>#Calendar#int#int#", "methodParameterName": "resourceResolver#modelIds#statuses#payloads#olderThan#batchSize#maxDurationInMins#", "methodBody": "int removeWorkflowInstances(final ResourceResolver resourceResolver,\n                                final Collection<String> modelIds,\n                                final Collection<String> statuses,\n                                final Collection<Pattern> payloads,\n                                final Calendar olderThan,\n                                final int batchSize,\n                                final int maxDurationInMins) throws PersistenceException, WorkflowRemovalException,\n            InterruptedException, WorkflowRemovalForceQuitException;", "AST": "Javadoc#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Removes workflow instances that match the parameter criteria.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1045", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/removal/WorkflowInstanceRemover.java", "methodName": "com.adobe.acs.commons.workflow.bulk.removal.WorkflowInstanceRemover.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "WorkflowRemovalStatus getStatus();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets the Workflow Remover's status.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1046", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/removal/WorkflowInstanceRemover.java", "methodName": "com.adobe.acs.commons.workflow.bulk.removal.WorkflowInstanceRemover.forceQuit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void forceQuit();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Forces an interruption of the Workflow removal process. Any uncommited changes will be lost.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1047", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/removal/impl/WorkflowInstanceRemoverImpl.java", "methodName": "com.adobe.acs.commons.workflow.bulk.removal.impl.WorkflowInstanceRemoverImpl.getStatus", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public WorkflowRemovalStatus getStatus() {\n        return this.status.get();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.util.concurrent.atomic.AtomicReference.get"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1048", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/removal/impl/WorkflowInstanceRemoverImpl.java", "methodName": "com.adobe.acs.commons.workflow.bulk.removal.impl.WorkflowInstanceRemoverImpl.forceQuit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void forceQuit() {\n        this.forceQuit.set(true);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.util.concurrent.atomic.AtomicBoolean.set"], "call_func_parameter": [["boolean"]], "passed_comments": "/"}, {"index": "1049", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/removal/impl/WorkflowInstanceRemoverImpl.java", "methodName": "com.adobe.acs.commons.workflow.bulk.removal.impl.WorkflowInstanceRemoverImpl.removeWorkflowInstances", "methodParameterType": "ResourceResolver#Collection<String>#Collection<String>#Collection<Pattern>#Calendar#", "methodParameterName": "resourceResolver#modelIds#statuses#payloads#olderThan#", "methodBody": "public int removeWorkflowInstances(final ResourceResolver resourceResolver,\n                                       final Collection<String> modelIds,\n                                       final Collection<String> statuses,\n                                       final Collection<Pattern> payloads,\n                                       final Calendar olderThan)\n            throws PersistenceException, WorkflowRemovalException, InterruptedException, WorkflowRemovalForceQuitException {\n        return removeWorkflowInstances(resourceResolver, modelIds, statuses, payloads, olderThan, BATCH_SIZE);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["com.adobe.acs.commons.workflow.bulk.removal.impl.WorkflowInstanceRemoverImpl.removeWorkflowInstances"], "call_func_parameter": [["org.apache.sling.api.resource.ResourceResolver", "java.util.Collection", "java.util.Collection", "java.util.Collection", "java.util.Calendar", "int"]], "passed_comments": [{"com.adobe.acs.commons.workflow.bulk.removal.impl.WorkflowInstanceRemoverImpl.removeWorkflowInstances": "{@inheritDoc}"}]}, {"index": "1050", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/removal/impl/WorkflowInstanceRemoverImpl.java", "methodName": "com.adobe.acs.commons.workflow.bulk.removal.impl.WorkflowInstanceRemoverImpl.removeWorkflowInstances", "methodParameterType": "ResourceResolver#Collection<String>#Collection<String>#Collection<Pattern>#Calendar#int#", "methodParameterName": "resourceResolver#modelIds#statuses#payloads#olderThan#batchSize#", "methodBody": "public int removeWorkflowInstances(final ResourceResolver resourceResolver,\n                                       final Collection<String> modelIds,\n                                       final Collection<String> statuses,\n                                       final Collection<Pattern> payloads,\n                                       final Calendar olderThan,\n                                       final int batchSize)\n            throws PersistenceException, WorkflowRemovalException, InterruptedException, WorkflowRemovalForceQuitException {\n        return removeWorkflowInstances(resourceResolver, modelIds, statuses, payloads, olderThan, batchSize, -1);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#PrefixExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["com.adobe.acs.commons.workflow.bulk.removal.impl.WorkflowInstanceRemoverImpl.removeWorkflowInstances"], "call_func_parameter": [["org.apache.sling.api.resource.ResourceResolver", "java.util.Collection", "java.util.Collection", "java.util.Collection", "java.util.Calendar", "int", "int"]], "passed_comments": [{"com.adobe.acs.commons.workflow.bulk.removal.impl.WorkflowInstanceRemoverImpl.removeWorkflowInstances": "{@inheritDoc}"}]}, {"index": "1051", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/removal/impl/WorkflowInstanceRemoverImpl.java", "methodName": "com.adobe.acs.commons.workflow.bulk.removal.impl.WorkflowInstanceRemoverImpl.removeWorkflowInstances", "methodParameterType": "ResourceResolver#Collection<String>#Collection<String>#Collection<Pattern>#Calendar#int#int#", "methodParameterName": "resourceResolver#modelIds#statuses#payloads#olderThan#batchSize#maxDurationInMins#", "methodBody": "@SuppressWarnings({\"squid:S3776\", \"squid:S1141\"})\n    public int removeWorkflowInstances(final ResourceResolver resourceResolver,\n                                       final Collection<String> modelIds,\n                                       final Collection<String> statuses,\n                                       final Collection<Pattern> payloads,\n                                       final Calendar olderThan,\n                                       final int batchSize,\n                                       final int maxDurationInMins)\n            throws PersistenceException, WorkflowRemovalException, InterruptedException, WorkflowRemovalForceQuitException {\n\n        final long start = System.currentTimeMillis();\n        long end = -1;\n\n        int count = 0;\n        int checkedCount = 0;\n        int workflowRemovedCount = 0;\n\n        if (maxDurationInMins > 0) {\n            // Max duration has been requested (greater than 0)\n\n            // Convert minutes to milliseconds\n            long maxDurationInMs = maxDurationInMins * MS_IN_ONE_MINUTE;\n\n            // Compute the end time\n            end = start + maxDurationInMs;\n        }\n        \n        try {\n            this.start(resourceResolver);\n\n            final List<Resource> containerFolders = this.getWorkflowInstanceFolders(resourceResolver);\n\n            for (Resource containerFolder : containerFolders) {\n                log.debug(\"Checking [ {} ] for workflow instances to remove\", containerFolder.getPath());\n\n                final Collection<Resource> sortedFolders = this.getSortedAndFilteredFolders(containerFolder);\n\n                for (final Resource folder : sortedFolders) {\n\n                    int remaining = 0;\n\n                    for (final Resource instance : folder.getChildren()) {\n\n                        if (this.forceQuit.get()) {\n                            throw new WorkflowRemovalForceQuitException();\n                        } else if (end > 0 && System.currentTimeMillis() >= end) {\n                            throw new WorkflowRemovalMaxDurationExceededException();\n                        }\n\n                        final ValueMap properties = instance.getValueMap();\n\n                        if (!StringUtils.equals(NT_CQ_WORKFLOW,\n                                properties.get(JcrConstants.JCR_PRIMARYTYPE, String.class))) {\n\n                            // Only process cq:Workflow's\n                            remaining++;\n                            continue;\n                        }\n\n                        checkedCount++;\n\n                        final String instanceStatus = getStatus(instance);\n                        final String model = properties.get(PN_MODEL_ID, String.class);\n                        final Calendar startTime = properties.get(PN_START_TIME, properties.get(PN_STARTED_AT, Calendar.class));\n                        final String payload = properties.get(PAYLOAD_PATH, String.class);\n\n                        if (StringUtils.isBlank(payload)) {\n                            log.warn(\"Unable to find payload for Workflow instance [ {} ]\", instance.getPath());\n                            remaining++;\n                            continue;\n                        } else if (CollectionUtils.isNotEmpty(statuses) && !statuses.contains(instanceStatus)) {\n                            log.trace(\"Workflow instance [ {} ] has non-matching status of [ {} ]\", instance.getPath(), instanceStatus);\n                            remaining++;\n                            continue;\n                        } else if (CollectionUtils.isNotEmpty(modelIds) && !modelIds.contains(model)) {\n                            log.trace(\"Workflow instance [ {} ] has non-matching model of [ {} ]\", instance.getPath(), model);\n                            remaining++;\n                            continue;\n                        } else if (olderThan != null && startTime != null && startTime.after(olderThan)) {\n                            log.trace(\"Workflow instance [ {} ] has non-matching start time of [ {} ]\", instance.getPath(),\n                                    startTime);\n                            remaining++;\n                            continue;\n                        } else {\n\n                            if (CollectionUtils.isNotEmpty(payloads)) {\n                                // Only evaluate payload patterns if they are provided\n\n                                boolean match = false;\n\n                                if (StringUtils.isNotEmpty(payload)) {\n                                    for (final Pattern pattern : payloads) {\n                                        if (payload.matches(pattern.pattern())) {\n                                            // payload matches a pattern\n                                            match = true;\n                                            break;\n                                        }\n                                    }\n\n                                    if (!match) {\n                                        // Not a match; skip to next workflow instance\n                                        log.trace(\"Workflow instance [ {} ] has non-matching payload path [ {} ]\",\n                                                instance.getPath(), payload);\n                                        remaining++;\n                                        continue;\n                                    }\n                                }\n                            }\n\n                            // Only remove matching\n\n                            try {\n                                instance.adaptTo(Node.class).remove();\n                                log.debug(\"Removed workflow instance at [ {} ]\", instance.getPath());\n\n                                workflowRemovedCount++;\n                                count++;\n                            } catch (RepositoryException e) {\n                                log.error(\"Could not remove workflow instance at [ {} ]. Continuing...\",\n                                        instance.getPath(), e);\n                            }\n\n                            if (count % batchSize == 0) {\n                                this.batchComplete(resourceResolver, checkedCount, workflowRemovedCount);\n\n                                log.info(\"Removed a running total of [ {} ] workflow instances\", count);\n                            }\n                        }\n                    }\n\n                    if (remaining == 0\n                            && isWorkflowDatedFolder(folder)\n                            && !StringUtils.startsWith(folder.getName(), new SimpleDateFormat(WORKFLOW_FOLDER_FORMAT).format(new Date()))) {\n                        // Dont remove folders w items and dont remove any of \"today's\" folders\n                        // MUST match the YYYY-MM-DD(.*) pattern; do not try to remove root folders\n                        try {\n                            folder.adaptTo(Node.class).remove();\n                            log.debug(\"Removed empty workflow folder node [ {} ]\", folder.getPath());\n                            // Incrementing only count to trigger batch save and not total since is not a WF\n                            count++;\n                        } catch (RepositoryException e) {\n                            log.error(\"Could not remove workflow folder at [ {} ]\", folder.getPath(), e);\n                        }\n                    }\n                }\n\n                // Save final batch if needed, and update tracking nodes\n                this.complete(resourceResolver, checkedCount, workflowRemovedCount);\n            }\n\n        } catch (PersistenceException e) {\n            this.forceQuit.set(false);\n            log.error(\"Error persisting changes with Workflow Removal\", e);\n            this.error();\n            throw e;\n        } catch (WorkflowRemovalException e) {\n            this.forceQuit.set(false);\n            log.error(\"Error with Workflow Removal\", e);\n            this.error();\n            throw e;\n        } catch (InterruptedException e) {\n            this.forceQuit.set(false);\n            log.error(\"Errors in persistence retries during Workflow Removal\", e);\n            this.error();\n            throw e;\n        }  catch (WorkflowRemovalForceQuitException e) {\n            this.forceQuit.set(false);\n            // Uncommon instance of using Exception to control flow; Force quitting is an extreme condition.\n            log.warn(\"Workflow removal was force quit. The removal state is unknown.\");\n            this.internalForceQuit();\n            throw e;\n        }  catch (WorkflowRemovalMaxDurationExceededException e) {\n            // Uncommon instance of using Exception to control flow; Exceeding max duration extreme condition.\n            log.warn(\"Workflow removal exceeded max duration of [ {} ] minutes. Final removal commit initiating...\", maxDurationInMins);\n            this.complete(resourceResolver, checkedCount, count);\n        }\n\n        if (log.isInfoEnabled()) {\n            log.info(\"Workflow Removal Process Finished! \"\n                    + \"Removed a total of [ {} ] workflow instances in [ {} ] ms\",\n                    count,\n                    System.currentTimeMillis() - start);\n        }\n\n        return count;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#StringLiteral#ArrayInitializer#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#PrefixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#PostfixExpression#ExpressionStatement#ContinueStatement#Block#IfStatement#SimpleName#PostfixExpression#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#ContinueStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#ContinueStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#ContinueStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#ContinueStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#BreakStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#ContinueStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#InfixExpression#NumberLiteral#InfixExpression#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#Block#EnhancedForStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#EnhancedForStatement#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)MethodInvocation)PrefixExpression(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ContinueStatement)ContinueStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ContinueStatement)ContinueStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ContinueStatement)ContinueStatement)Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ContinueStatement)ContinueStatement)Block(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)EnhancedForStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)MethodInvocation)PrefixExpression)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.lang.System.currentTimeMillis", "com.adobe.acs.commons.workflow.bulk.removal.impl.WorkflowInstanceRemoverImpl.start", "com.adobe.acs.commons.workflow.bulk.removal.impl.WorkflowInstanceRemoverImpl.getWorkflowInstanceFolders", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.debug", "com.adobe.acs.commons.workflow.bulk.removal.impl.WorkflowInstanceRemoverImpl.getSortedAndFilteredFolders", "java.util.Collection.iterator", "org.apache.sling.api.resource.Resource.getChildren", "java.lang.Iterable.iterator", "java.util.concurrent.atomic.AtomicBoolean.get", "com.adobe.acs.commons.workflow.bulk.removal.WorkflowRemovalForceQuitException.<init>", "com.adobe.acs.commons.workflow.bulk.removal.WorkflowRemovalMaxDurationExceededException.<init>", "org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.get", "org.apache.commons.lang.StringUtils.equals", "com.adobe.acs.commons.workflow.bulk.removal.impl.WorkflowInstanceRemoverImpl.getStatus", "org.apache.sling.api.resource.ValueMap.get", "org.apache.commons.lang.StringUtils.isBlank", "org.slf4j.Logger.warn", "org.apache.commons.collections.CollectionUtils.isNotEmpty", "java.util.Collection.contains", "org.slf4j.Logger.trace", "java.util.Calendar.after", "org.apache.commons.lang.StringUtils.isNotEmpty", "java.util.regex.Pattern.pattern", "java.lang.String.matches", "org.apache.sling.api.resource.Resource.adaptTo", "javax.jcr.Node.remove", "org.slf4j.Logger.error", "com.adobe.acs.commons.workflow.bulk.removal.impl.WorkflowInstanceRemoverImpl.batchComplete", "java.lang.Integer.valueOf", "org.slf4j.Logger.info", "com.adobe.acs.commons.workflow.bulk.removal.impl.WorkflowInstanceRemoverImpl.isWorkflowDatedFolder", "org.apache.sling.api.resource.Resource.getName", "java.text.SimpleDateFormat.<init>", "java.util.Date.<init>", "java.text.SimpleDateFormat.format", "org.apache.commons.lang.StringUtils.startsWith", "com.adobe.acs.commons.workflow.bulk.removal.impl.WorkflowInstanceRemoverImpl.complete", "java.util.concurrent.atomic.AtomicBoolean.set", "org.slf4j.Logger.error", "com.adobe.acs.commons.workflow.bulk.removal.impl.WorkflowInstanceRemoverImpl.error", "org.slf4j.Logger.warn", "com.adobe.acs.commons.workflow.bulk.removal.impl.WorkflowInstanceRemoverImpl.internalForceQuit", "org.slf4j.Logger.isInfoEnabled", "java.lang.Long.valueOf", "org.slf4j.Logger.info"], "call_func_parameter": [[""], ["org.apache.sling.api.resource.ResourceResolver"], ["org.apache.sling.api.resource.ResourceResolver"], [""], [""], [""], [""], ["java.lang.String", "java.lang.Object"], ["org.apache.sling.api.resource.Resource"], [""], [""], [""], [""], [""], [""], [""], ["java.lang.String", "java.lang.Class"], ["java.lang.String", "java.lang.String"], ["org.apache.sling.api.resource.Resource"], ["java.lang.String", "java.lang.Object"], ["java.lang.String"], ["java.lang.String", "java.lang.Object"], ["java.util.Collection"], ["java.lang.Object"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.Object"], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.Class"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["org.apache.sling.api.resource.ResourceResolver", "int", "int"], ["int"], ["java.lang.String", "java.lang.Object"], ["org.apache.sling.api.resource.Resource"], [""], ["java.lang.String"], [""], ["java.util.Date"], ["java.lang.String", "java.lang.String"], ["org.apache.sling.api.resource.ResourceResolver", "int", "int"], ["boolean"], ["java.lang.String", "java.lang.Throwable"], [""], ["java.lang.String"], [""], [""], ["long"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1052", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/removal/impl/WorkflowInstanceFolderComparator.java", "methodName": "com.adobe.acs.commons.workflow.bulk.removal.impl.WorkflowInstanceFolderComparator.compare", "methodParameterType": "Resource#Resource#", "methodParameterName": "workflowFolder1#workflowFolder2#", "methodBody": "@Override\n    public final int compare(final Resource workflowFolder1, final Resource workflowFolder2) {\n\n        final String[] segments1 = StringUtils.split(workflowFolder1.getName(), \"-_\");\n        final String[] segments2 = StringUtils.split(workflowFolder2.getName(), \"-_\");\n\n        int result = 0;\n\n        for (int i = 0; i < MAX_SEGMENTS; i++) {\n            String seg1 = \"-1\";\n            String seg2 = \"-1\";\n\n            if (i < segments1.length) {\n                seg1 = segments1[i];\n            }\n\n            if (i < segments2.length) {\n                seg2 = segments2[i];\n            }\n\n            result = this.compare(seg1, seg2);\n\n            if (result != 0) {\n                return result;\n            }\n        }\n\n        return result;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Compares resource names that are in the format YYYY-MM-DD_N where _N is an optional positive integer. Sorts in an ascending order.", "call_func_name": ["org.apache.sling.api.resource.Resource.getName", "org.apache.commons.lang.StringUtils.split", "com.adobe.acs.commons.workflow.bulk.removal.impl.WorkflowInstanceFolderComparator.compare"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "1053", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/model/Config.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.model.Config.setInterval", "methodParameterType": "int#", "methodParameterName": "interval#", "methodBody": "public void setInterval(int interval) {\n        if (interval < 1) {\n            interval = 0;\n        }\n\n        this.interval = interval;\n        properties.put(\"interval\", this.interval);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Setters", "call_func_name": ["java.lang.Integer.valueOf", "org.apache.sling.api.resource.ModifiableValueMap.put"], "call_func_parameter": [["int"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1054", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/model/Config.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.model.Config.commit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void commit() throws PersistenceException {\n        if (this.getResourceResolver().hasChanges()) {\n            this.getResourceResolver().commit();\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Commit", "call_func_name": ["com.adobe.acs.commons.workflow.bulk.execution.model.Config.getResourceResolver", "org.apache.sling.api.resource.ResourceResolver.hasChanges", "org.apache.sling.api.resource.ResourceResolver.commit"], "call_func_parameter": [[""], [""], [""]], "passed_comments": "/"}, {"index": "1055", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/model/Payload.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.model.Payload.setStatus", "methodParameterType": "Status#", "methodParameterName": "newStatus#", "methodBody": "public void setStatus(Status newStatus) {\n        this.status = newStatus.toString();\n        properties.put(PN_STATUS, this.status);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Setters", "call_func_name": ["com.adobe.acs.commons.workflow.bulk.execution.model.Status.toString", "org.apache.sling.api.resource.ModifiableValueMap.put"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1056", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/model/Payload.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.model.Payload.toJSON", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public JsonObject toJSON() {\n        JsonObject json = new JsonObject();\n        json.addProperty(PN_STATUS, getStatus().toString());\n        json.addProperty(PN_PATH, getPayloadPath());\n        return json;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Renditions", "call_func_name": ["com.google.gson.JsonObject.<init>", "com.adobe.acs.commons.workflow.bulk.execution.model.Payload.getStatus", "com.adobe.acs.commons.workflow.bulk.execution.model.Status.toString", "com.google.gson.JsonObject.addProperty", "com.adobe.acs.commons.workflow.bulk.execution.model.Payload.getPayloadPath"], "call_func_parameter": [[""], [""], [""], ["java.lang.String", "java.lang.String"], [""]], "passed_comments": "/"}, {"index": "1057", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/model/PayloadGroup.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.model.PayloadGroup.getPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPath() {\n        return this.resource.getPath();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the JCR path of the PayloadGroup resource.", "call_func_name": ["org.apache.sling.api.resource.Resource.getPath"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1058", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/model/PayloadGroup.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.model.PayloadGroup.getWorkspace", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Workspace getWorkspace() {\n        return resource.getParent().adaptTo(Workspace.class);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the Workspace this payload group belongs to.", "call_func_name": ["org.apache.sling.api.resource.Resource.getParent", "org.apache.sling.api.resource.Resource.adaptTo"], "call_func_parameter": [[""], ["java.lang.Class"]], "passed_comments": "/"}, {"index": "1059", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/model/PayloadGroup.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.model.PayloadGroup.getNextPayloadGroup", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public PayloadGroup getNextPayloadGroup() {\n        if (next == null) {\n            return null;\n        }\n\n        Resource r = resource.getResourceResolver().getResource(getNext());\n\n        if (r == null) {\n            return null;\n        }\n\n        return r.adaptTo(PayloadGroup.class);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the next payload group to process. null if no more payload groups to process left.", "call_func_name": ["org.apache.sling.api.resource.Resource.getResourceResolver", "com.adobe.acs.commons.workflow.bulk.execution.model.PayloadGroup.getNext", "org.apache.sling.api.resource.ResourceResolver.getResource", "org.apache.sling.api.resource.Resource.adaptTo"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["java.lang.Class"]], "passed_comments": "/"}, {"index": "1060", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/model/PayloadGroup.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.model.PayloadGroup.getPayloads", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<Payload> getPayloads() {\n        List<Payload> payloads = new ArrayList<Payload>();\n\n        for (Resource r : resource.getChildren()) {\n            Payload payload = r.adaptTo(Payload.class);\n            if (payload != null) {\n                payloads.add(payload);\n            }\n        }\n\n        return payloads;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return list of all the Payloads in the PayloadGroup.", "call_func_name": ["java.util.ArrayList.<init>", "org.apache.sling.api.resource.Resource.getChildren", "java.lang.Iterable.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.sling.api.resource.Resource.adaptTo", "java.util.List.add"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.lang.Class"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "1061", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/model/PayloadGroup.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.model.PayloadGroup.getNextPayload", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Payload getNextPayload() {\n        for (Resource r : resource.getChildren()) {\n            Payload payload = r.adaptTo(Payload.class);\n            if (payload != null && !payload.isOnboarded()) {\n                return payload;\n            }\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the next payload eligible for processing. null if none exist.", "call_func_name": ["org.apache.sling.api.resource.Resource.getChildren", "java.lang.Iterable.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.sling.api.resource.Resource.adaptTo", "com.adobe.acs.commons.workflow.bulk.execution.model.Payload.isOnboarded"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.Class"], [""]], "passed_comments": "/"}, {"index": "1062", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/model/PayloadGroup.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.model.PayloadGroup.isLast", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isLast() {\n        return getNextPayloadGroup() == null;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return true if this is the last PayloadGroup", "call_func_name": ["com.adobe.acs.commons.workflow.bulk.execution.model.PayloadGroup.getNextPayloadGroup"], "call_func_parameter": [[""]], "passed_comments": [{"com.adobe.acs.commons.workflow.bulk.execution.model.PayloadGroup.getNextPayloadGroup": "@return the next payload group to process. null if no more payload groups to process left."}]}, {"index": "1063", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/model/Workspace.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.model.Workspace.getCompletedAt", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Calendar getCompletedAt() {\n        return completedAt;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Getters", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1064", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/model/Workspace.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.model.Workspace.setStatus", "methodParameterType": "Status#", "methodParameterName": "status#", "methodBody": "public void setStatus(Status status) {\n        this.status = status.toString();\n        properties.put(PN_STATUS, this.status);\n        // Clear subStatus\n        subStatus = null;\n        properties.remove(PN_SUB_STATUS);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Setters", "call_func_name": ["com.adobe.acs.commons.workflow.bulk.execution.model.Status.toString", "org.apache.sling.api.resource.ModifiableValueMap.put", "org.apache.sling.api.resource.ModifiableValueMap.remove"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "1065", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/model/Workspace.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.model.Workspace.addActivePayload", "methodParameterType": "Payload#", "methodParameterName": "payload#", "methodBody": "public void addActivePayload(Payload payload) {\n        if (!ArrayUtils.contains(activePayloads, payload.getDereferencedPath())) {\n            activePayloads = (String[]) ArrayUtils.add(activePayloads, payload.getDereferencedPath());\n            properties.put(PN_ACTIVE_PAYLOADS, activePayloads);\n\n            addActivePayloadGroup(payload.getPayloadGroup());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Internal logic proxies", "call_func_name": ["com.adobe.acs.commons.workflow.bulk.execution.model.Payload.getDereferencedPath", "org.apache.commons.lang.ArrayUtils.contains", "org.apache.commons.lang.ArrayUtils.add", "org.apache.sling.api.resource.ModifiableValueMap.put", "com.adobe.acs.commons.workflow.bulk.execution.model.Payload.getPayloadGroup", "com.adobe.acs.commons.workflow.bulk.execution.model.Workspace.addActivePayloadGroup"], "call_func_parameter": [[""], ["java.lang.Object[]", "java.lang.Object"], ["java.lang.Object[]", "java.lang.Object"], ["java.lang.Object", "java.lang.Object"], [""], ["com.adobe.acs.commons.workflow.bulk.execution.model.PayloadGroup"]], "passed_comments": [{"com.adobe.acs.commons.workflow.bulk.execution.model.Workspace.addActivePayloadGroup": "Adds the payload group to the list of active payload groups."}]}, {"index": "1066", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/model/Workspace.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.model.Workspace.getActivePayloads", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<Payload> getActivePayloads() {\n        List<Payload> payloads = new ArrayList<Payload>();\n\n        for (String path : activePayloads) {\n            Resource r = resourceResolver.getResource(Payload.reference(path));\n            if (r != null) {\n                Payload p = r.adaptTo(Payload.class);\n                if (p != null) {\n                    payloads.add(p);\n                }\n            }\n        }\n\n        return payloads;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return a list of the payloads that are being actively processed by bulk workflow manager.", "call_func_name": ["java.util.ArrayList.<init>", "com.adobe.acs.commons.workflow.bulk.execution.model.Payload.reference", "org.apache.sling.api.resource.ResourceResolver.getResource", "org.apache.sling.api.resource.Resource.adaptTo", "java.util.List.add"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], ["java.lang.Class"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "1067", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/model/Workspace.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.model.Workspace.getActivePayloadGroups", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<PayloadGroup> getActivePayloadGroups() {\n        List<PayloadGroup> payloadGroups = new ArrayList<PayloadGroup>();\n\n        if (activePayloadGroups != null) {\n            for (String path : activePayloadGroups) {\n                Resource r = resourceResolver.getResource(PayloadGroup.reference(path));\n                if (r == null) {\n                    continue;\n                }\n                PayloadGroup pg = r.adaptTo(PayloadGroup.class);\n                if (pg == null) {\n                    continue;\n                }\n                payloadGroups.add(pg);\n            }\n        }\n\n        return payloadGroups;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return a list of the payload groups that have atleast 1 payload being process by bulk workflow manager.", "call_func_name": ["java.util.ArrayList.<init>", "com.adobe.acs.commons.workflow.bulk.execution.model.PayloadGroup.reference", "org.apache.sling.api.resource.ResourceResolver.getResource", "org.apache.sling.api.resource.Resource.adaptTo", "java.util.List.add"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], ["java.lang.Class"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "1068", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/model/Workspace.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.model.Workspace.addActivePayloadGroup", "methodParameterType": "PayloadGroup#", "methodParameterName": "payloadGroup#", "methodBody": "public void addActivePayloadGroup(PayloadGroup payloadGroup) {\n        if (payloadGroup != null && !ArrayUtils.contains(activePayloadGroups, payloadGroup.getDereferencedPath())) {\n            activePayloadGroups = (String[]) ArrayUtils.add(activePayloadGroups, payloadGroup.getDereferencedPath());\n            properties.put(PN_ACTIVE_PAYLOAD_GROUPS, activePayloadGroups);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Adds the payload group to the list of active payload groups.", "call_func_name": ["com.adobe.acs.commons.workflow.bulk.execution.model.PayloadGroup.getDereferencedPath", "org.apache.commons.lang.ArrayUtils.contains", "org.apache.commons.lang.ArrayUtils.add", "org.apache.sling.api.resource.ModifiableValueMap.put"], "call_func_parameter": [[""], ["java.lang.Object[]", "java.lang.Object"], ["java.lang.Object[]", "java.lang.Object"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1069", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/model/Workspace.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.model.Workspace.removeActivePayloadGroup", "methodParameterType": "PayloadGroup#", "methodParameterName": "payloadGroup#", "methodBody": "public void removeActivePayloadGroup(PayloadGroup payloadGroup) {\n        if (payloadGroup != null && ArrayUtils.contains(activePayloadGroups, payloadGroup.getDereferencedPath())) {\n            activePayloadGroups = (String[]) ArrayUtils.removeElement(activePayloadGroups, payloadGroup.getDereferencedPath());\n            properties.put(PN_ACTIVE_PAYLOAD_GROUPS, activePayloadGroups);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Removes the payload group from the list of active payload groups.", "call_func_name": ["com.adobe.acs.commons.workflow.bulk.execution.model.PayloadGroup.getDereferencedPath", "org.apache.commons.lang.ArrayUtils.contains", "org.apache.commons.lang.ArrayUtils.removeElement", "org.apache.sling.api.resource.ModifiableValueMap.put"], "call_func_parameter": [[""], ["java.lang.Object[]", "java.lang.Object"], ["java.lang.Object[]", "java.lang.Object"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1070", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/model/Workspace.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.model.Workspace.commit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void commit() throws PersistenceException {\n        config.commit();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Commit the changes for this bulk workflow manager execution.", "call_func_name": ["com.adobe.acs.commons.workflow.bulk.execution.model.Config.commit"], "call_func_parameter": [[""]], "passed_comments": [{"com.adobe.acs.commons.workflow.bulk.execution.model.Config.commit": "Commit"}]}, {"index": "1071", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/BulkWorkflowEngine.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.BulkWorkflowEngine.initialize", "methodParameterType": "Config#", "methodParameterName": "config#", "methodBody": "void initialize(Config config) throws PersistenceException,\n            RepositoryException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Initialize the Bulk Workflow Manager jcr:content node and build out the batch structure.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1072", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/BulkWorkflowEngine.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.BulkWorkflowEngine.start", "methodParameterType": "Config#", "methodParameterName": "config#", "methodBody": "void start(Config config) throws PersistenceException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Start bulk workflow process.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1073", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/BulkWorkflowEngine.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.BulkWorkflowEngine.stop", "methodParameterType": "Config#", "methodParameterName": "config#", "methodBody": "void stop(Config config) throws PersistenceException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Stop bulk workflow process.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1074", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/BulkWorkflowEngine.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.BulkWorkflowEngine.stopping", "methodParameterType": "Config#", "methodParameterName": "config#", "methodBody": "void stopping(Config config) throws PersistenceException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Stopping bulk workflow process.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1075", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/BulkWorkflowEngine.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.BulkWorkflowEngine.resume", "methodParameterType": "Config#", "methodParameterName": "config#", "methodBody": "void resume(Config config) throws PersistenceException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Resume as stopped bulk workflow process.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1076", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/BulkWorkflowRunner.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.BulkWorkflowRunner.getRunnable", "methodParameterType": "Config#", "methodParameterName": "config#", "methodBody": "Runnable getRunnable(Config config);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "@param config the Config", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1077", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/BulkWorkflowRunner.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.BulkWorkflowRunner.getOptions", "methodParameterType": "Config#", "methodParameterName": "config#", "methodBody": "ScheduleOptions getOptions(Config config);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "If a non-null value is returned, the result of run(..) will be scheduled to run w these options. If null the job will be immediately run in the same thread.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1078", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/BulkWorkflowRunner.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.BulkWorkflowRunner.initialize", "methodParameterType": "QueryHelper#Config#", "methodParameterName": "queryHelper#config#", "methodBody": "void initialize(QueryHelper queryHelper, Config config) throws PersistenceException,\n            RepositoryException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Collects and initializes the Workspace JCR structure with the payload nodes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1079", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/BulkWorkflowRunner.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.BulkWorkflowRunner.initialize", "methodParameterType": "Workspace#int#", "methodParameterName": "workspace#totalCount#", "methodBody": "void initialize(Workspace workspace, int totalCount) throws PersistenceException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Initialize the Bulk Workflow Manager workspace w the total count of items to process.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1080", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/BulkWorkflowRunner.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.BulkWorkflowRunner.start", "methodParameterType": "Workspace#", "methodParameterName": "workspace#", "methodBody": "void start(Workspace workspace) throws PersistenceException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Starts work on the Workspace.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1081", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/BulkWorkflowRunner.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.BulkWorkflowRunner.stopping", "methodParameterType": "Workspace#", "methodParameterName": "workspace#", "methodBody": "void stopping(Workspace workspace) throws PersistenceException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Used to request stop of a Workspace however workspace may still continue to run in order to allow active payloads to complete.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1082", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/BulkWorkflowRunner.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.BulkWorkflowRunner.stop", "methodParameterType": "Workspace#", "methodParameterName": "workspace#", "methodBody": "void stop(Workspace workspace) throws PersistenceException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Stops (or pauses) work in the Workspace.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1083", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/BulkWorkflowRunner.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.BulkWorkflowRunner.stop", "methodParameterType": "Workspace#SubStatus#", "methodParameterName": "workspace#subStatus#", "methodBody": "void stop(Workspace workspace, SubStatus subStatus) throws PersistenceException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Stops (or pauses) work in the Workspace.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1084", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/BulkWorkflowRunner.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.BulkWorkflowRunner.stopWithError", "methodParameterType": "Workspace#", "methodParameterName": "workspace#", "methodBody": "void stopWithError(Workspace workspace) throws PersistenceException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Stops (or pauses) work in the Workspace due to Error.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1085", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/BulkWorkflowRunner.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.BulkWorkflowRunner.complete", "methodParameterType": "Workspace#", "methodParameterName": "workspace#", "methodBody": "void complete(Workspace workspace) throws PersistenceException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Marks a Workspace as being complete, indicating all work has been processed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1086", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/BulkWorkflowRunner.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.BulkWorkflowRunner.complete", "methodParameterType": "Workspace#Payload#", "methodParameterName": "workspace#payload#", "methodBody": "@SuppressWarnings(\"squid:S00112\")\n    void complete(Workspace workspace, Payload payload) throws Exception;", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Marks a payload as being completed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1087", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/BulkWorkflowRunner.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.BulkWorkflowRunner.run", "methodParameterType": "Workspace#Payload#", "methodParameterName": "workspace#payload#", "methodBody": "void run(Workspace workspace, Payload payload);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Processes a payload under the Workspace.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1088", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/BulkWorkflowRunner.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.BulkWorkflowRunner.forceTerminate", "methodParameterType": "Workspace#Payload#", "methodParameterName": "workspace#payload#", "methodBody": "@SuppressWarnings(\"squid:S00112\")\n    void forceTerminate(Workspace workspace, Payload payload) throws Exception;", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Marks a payload being force terminated.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1089", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/impl/runners/AbstractWorkflowRunner.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.impl.runners.AbstractWorkflowRunner.initialize", "methodParameterType": "QueryHelper#Config#", "methodParameterName": "queryHelper#config#", "methodBody": "@Override\n    public void initialize(QueryHelper queryHelper, Config config) throws\n            PersistenceException, RepositoryException {\n\n        // Query for all candidate resources\n        final ResourceResolver resourceResolver = config.getResourceResolver();\n        final List<Resource> resources = queryHelper.findResources(resourceResolver,\n                config.getQueryType(),\n                config.getQueryStatement(),\n                config.getRelativePath());\n\n        int total = 0;\n\n        // Create Workspace Node\n        Node workspace = JcrUtils.getOrAddNode(config.getResource().adaptTo(Node.class), Workspace.NN_WORKSPACE, Workspace.NT_UNORDERED);\n        // Create the PayloadGroups Launchpad node; this simply points to the first to process\n        Node currentPayloadGroup = JcrUtils.getOrCreateByPath(workspace, Workspace.NN_PAYLOADS_LAUNCHPAD, true, Workspace.NT_UNORDERED, Workspace.NT_UNORDERED, false);\n        // Set the first Payload Group to be the launchpad node\n        JcrUtil.setProperty(workspace, Workspace.PN_ACTIVE_PAYLOAD_GROUPS, new String[]{PayloadGroup.dereference(currentPayloadGroup.getPath())});\n\n\n        // No begin populating the actual PayloadGroup nodes\n        ListIterator<Resource> itr = resources.listIterator();\n\n        while (itr.hasNext()) {\n            // Increment to a new PayloadGroup as needed\n            if (total % config.getBatchSize() == 0 && itr.hasNext()) {\n                // payload group is complete; save...\n                Node nextPayloadGroup = JcrUtils.getOrCreateByPath(workspace, Workspace.NN_PAYLOADS, true, Workspace.NT_UNORDERED, Workspace.NT_UNORDERED, false);\n                JcrUtil.setProperty(currentPayloadGroup, PayloadGroup.PN_NEXT, PayloadGroup.dereference(nextPayloadGroup.getPath()));\n                currentPayloadGroup = nextPayloadGroup;\n            }\n\n            // Process the payload\n            Resource payload = itr.next();\n            Node payloadNode = JcrUtils.getOrCreateByPath(currentPayloadGroup, Payload.NN_PAYLOAD, true, Workspace.NT_UNORDERED, Workspace.NT_UNORDERED, false);\n            JcrUtil.setProperty(payloadNode, \"path\", Payload.dereference(payload.getPath()));\n            log.debug(\"Created payload with search result [ {} ]\", payload.getPath());\n\n            if (++total % SAVE_THRESHOLD == 0 || !itr.hasNext()) {\n                resourceResolver.commit();\n            }\n        } // while\n\n        if (total > 0) {\n            config.getWorkspace().getRunner().initialize(config.getWorkspace(), total);\n            config.commit();\n\n            log.info(\"Completed initialization of Bulk Workflow Manager\");\n        } else {\n            throw new IllegalArgumentException(\"Query returned zero results.\");\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ArrayInitializer#ArrayCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#PrefixExpression#SimpleName#InfixExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#WhileStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ArrayInitializer)ArrayCreation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)WhileStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["com.adobe.acs.commons.workflow.bulk.execution.model.Config.getResourceResolver", "com.adobe.acs.commons.workflow.bulk.execution.model.Config.getQueryType", "com.adobe.acs.commons.workflow.bulk.execution.model.Config.getQueryStatement", "com.adobe.acs.commons.workflow.bulk.execution.model.Config.getRelativePath", "com.adobe.acs.commons.util.QueryHelper.findResources", "com.adobe.acs.commons.workflow.bulk.execution.model.Config.getResource", "org.apache.sling.api.resource.Resource.adaptTo", "org.apache.jackrabbit.commons.JcrUtils.getOrAddNode", "org.apache.jackrabbit.commons.JcrUtils.getOrCreateByPath", "javax.jcr.Node.getPath", "com.adobe.acs.commons.workflow.bulk.execution.model.PayloadGroup.dereference", "com.day.cq.commons.jcr.JcrUtil.setProperty", "java.util.List.listIterator", "java.util.ListIterator.hasNext", "com.adobe.acs.commons.workflow.bulk.execution.model.Config.getBatchSize", "java.util.ListIterator.next", "org.apache.sling.api.resource.Resource.getPath", "com.adobe.acs.commons.workflow.bulk.execution.model.Payload.dereference", "org.slf4j.Logger.debug", "org.apache.sling.api.resource.ResourceResolver.commit", "com.adobe.acs.commons.workflow.bulk.execution.model.Config.getWorkspace", "com.adobe.acs.commons.workflow.bulk.execution.model.Workspace.getRunner", "com.adobe.acs.commons.workflow.bulk.execution.BulkWorkflowRunner.initialize", "com.adobe.acs.commons.workflow.bulk.execution.model.Config.commit", "org.slf4j.Logger.info", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [[""], [""], [""], [""], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String", "java.lang.String", "java.lang.String"], [""], ["java.lang.Class"], ["javax.jcr.Node", "java.lang.String", "java.lang.String"], ["javax.jcr.Node", "java.lang.String", "boolean", "java.lang.String", "java.lang.String", "boolean"], [""], ["java.lang.String"], ["javax.jcr.Node", "java.lang.String", "java.lang.Object"], [""], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Object"], [""], [""], [""], ["com.adobe.acs.commons.workflow.bulk.execution.model.Workspace", "int"], [""], ["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.util.QueryHelper.findResources": "@param resourceResolver the resourceResolver providing access into the JCR"}, {"com.adobe.acs.commons.workflow.bulk.execution.BulkWorkflowRunner.initialize": "Initialize the Bulk Workflow Manager workspace w the total count of items to process."}, {"com.adobe.acs.commons.workflow.bulk.execution.model.Config.commit": "Commit"}]}, {"index": "1090", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/impl/runners/AEMWorkflowRunnerImpl.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.impl.runners.AEMWorkflowRunnerImpl.getRunnable", "methodParameterType": "Config#", "methodParameterName": "config#", "methodBody": "@Override\n    public Runnable getRunnable(final Config config) {\n        return new AEMWorkflowRunnable(config, scheduler, resourceResolverFactory, workflowService);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1091", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/impl/runners/FastActionManagerRunnerImpl.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.impl.runners.FastActionManagerRunnerImpl.getRunnable", "methodParameterType": "Config#", "methodParameterName": "config#", "methodBody": "@Override\n    public final Runnable getRunnable(final Config config) {\n        return new FastActionManagerRunnable(config, resourceResolverFactoryRef, queryHelperRef, actionManagerFactoryRef, syntheticWorkflowRunnerRef);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1092", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/bulk/execution/impl/runners/AEMTransientWorkflowRunnerImpl.java", "methodName": "com.adobe.acs.commons.workflow.bulk.execution.impl.runners.AEMTransientWorkflowRunnerImpl.getRunnable", "methodParameterType": "Config#", "methodParameterName": "config#", "methodBody": "@Override\n    public Runnable getRunnable(final Config config) {\n        return new AEMTransientWorkflowRunnable(config, scheduler, resourceResolverFactory, workflowService, throttledTaskRunner, jobManager);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1093", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/impl/WorkflowPackageManagerImpl.java", "methodName": "com.adobe.acs.commons.workflow.impl.WorkflowPackageManagerImpl.create", "methodParameterType": "ResourceResolver#String#String#", "methodParameterName": "resourceResolver#name#paths#", "methodBody": "public final Page create(final ResourceResolver resourceResolver,\n                             final String name, final String... paths) throws WCMException,\n            RepositoryException {\n        return this.create(resourceResolver, null, name, paths);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1094", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/impl/WorkflowPackageManagerImpl.java", "methodName": "com.adobe.acs.commons.workflow.impl.WorkflowPackageManagerImpl.create", "methodParameterType": "ResourceResolver#String#String#String#", "methodParameterName": "resourceResolver#bucketSegment#name#paths#", "methodBody": "public final Page create(final ResourceResolver resourceResolver, String bucketSegment,\n                             final String name, final String... paths) throws WCMException,\n            RepositoryException {\n        final Session session = resourceResolver.adaptTo(Session.class);\n        final PageManager pageManager = resourceResolver.adaptTo(PageManager.class);\n\n        \n\n        if (StringUtils.isNotBlank(bucketSegment)) {\n            bucketPath += \"/\" + bucketSegment;\n        }\n\n        final Node shardNode = JcrUtils.getOrCreateByPath(bucketPath,\n                NT_SLING_FOLDER, NT_SLING_FOLDER, session, false);\n        final Page page = pageManager.create(shardNode.getPath(), JcrUtil.createValidName(name),\n                WORKFLOW_PACKAGE_TEMPLATE, name, false);\n        final Resource contentResource = page.getContentResource();\n\n        Node node = JcrUtil.createPath(contentResource.getPath() + \"/\" + NN_VLT_DEFINITION, NT_VLT_DEFINITION, session);\n        node = JcrUtil.createPath(node.getPath() + \"/filter\", JcrConstants.NT_UNSTRUCTURED, session);\n        JcrUtil.setProperty(node, SLING_RESOURCE_TYPE, FILTER_RESOURCE_TYPE);\n\n        int i = 0;\n        Node resourceNode = null;\n        for (final String path : paths) {\n            if (path != null) {\n                resourceNode = JcrUtil.createPath(node.getPath() + \"/resource_\" + i++,\n                        JcrConstants.NT_UNSTRUCTURED, session);\n                JcrUtil.setProperty(resourceNode, \"root\", path);\n                JcrUtil.setProperty(resourceNode, \"rules\", this.getIncludeRules(path));\n                JcrUtil.setProperty(resourceNode, SLING_RESOURCE_TYPE, FILTER_RESOURCE_RESOURCE_TYPE);\n            }\n        }\n\n        session.save();\n\n        return page;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#PostfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#ThisExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(PostfixExpression(SimpleName)SimpleName)PostfixExpression)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1095", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/impl/WorkflowPackageManagerImpl.java", "methodName": "com.adobe.acs.commons.workflow.impl.WorkflowPackageManagerImpl.getPaths", "methodParameterType": "ResourceResolver#String#", "methodParameterName": "resourceResolver#path#", "methodBody": "public final List<String> getPaths(final ResourceResolver resourceResolver,\n                                       final String path) throws RepositoryException {\n        return getPaths(resourceResolver,path, workflowPackageTypes);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["com.adobe.acs.commons.workflow.impl.WorkflowPackageManagerImpl.getPaths"], "call_func_parameter": [["org.apache.sling.api.resource.ResourceResolver", "java.lang.String", "java.lang.String[]"]], "passed_comments": [{"com.adobe.acs.commons.workflow.impl.WorkflowPackageManagerImpl.getPaths": "{@inheritDoc}"}]}, {"index": "1096", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/impl/WorkflowPackageManagerImpl.java", "methodName": "com.adobe.acs.commons.workflow.impl.WorkflowPackageManagerImpl.getPaths", "methodParameterType": "ResourceResolver#String#String[]#", "methodParameterName": "resourceResolver#path#nodeTypes#", "methodBody": "public final List<String> getPaths(final ResourceResolver resourceResolver,\n            final String path, final String[] nodeTypes) throws RepositoryException {\n        final List<String> collectionPaths = new ArrayList<String>();\n\n        final Resource resource = resourceResolver.getResource(path);\n\n        if (resource == null) {\n            log.warn(\"Requesting paths for a non-existent Resource [ {} ]; returning empty results.\", path);\n            return Collections.emptyList();\n\n        } else if (!isWorkflowPackage(resourceResolver, path)) {\n            log.debug(\"Requesting paths for a non-Resource Collection  [ {} ]; returning provided path.\", path);\n            return Arrays.asList(new String[]{ path });\n\n        } else {\n            final PageManager pageManager = resourceResolver.adaptTo(PageManager.class);\n            final Page page = pageManager.getContainingPage(path);\n\n            if (page != null && page.getContentResource() != null) {\n                final Node node = page.getContentResource().adaptTo(Node.class);\n\n                final ResourceCollection resourceCollection = getResourceCollection(node);\n\n                if (resourceCollection != null) {\n                    final List<Node> members = resourceCollection.list(nodeTypes);\n                    for (final Node member : members) {\n                        collectionPaths.add(member.getPath());\n                    }\n                    return collectionPaths;\n                }\n            }\n\n            return Arrays.asList(new String[]{ path });\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayInitializer#ArrayCreation#MethodInvocation#ReturnStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayInitializer#ArrayCreation#MethodInvocation#ReturnStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName)ArrayInitializer)ArrayCreation)MethodInvocation)ReturnStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName)ArrayInitializer)ArrayCreation)MethodInvocation)ReturnStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.util.ArrayList.<init>", "org.apache.sling.api.resource.ResourceResolver.getResource", "org.slf4j.Logger.warn", "java.util.Collections.emptyList", "com.adobe.acs.commons.workflow.impl.WorkflowPackageManagerImpl.isWorkflowPackage", "org.slf4j.Logger.debug", "java.util.Arrays.asList", "org.apache.sling.api.resource.ResourceResolver.adaptTo", "com.day.cq.wcm.api.PageManager.getContainingPage", "com.day.cq.wcm.api.Page.getContentResource", "org.apache.sling.api.resource.Resource.adaptTo", "com.adobe.acs.commons.workflow.impl.WorkflowPackageManagerImpl.getResourceCollection", "com.day.cq.workflow.collection.ResourceCollection.list", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "javax.jcr.Node.getPath", "java.util.List.add"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String", "java.lang.Object"], [""], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String"], ["java.lang.String", "java.lang.Object"], ["java.lang.Object[]"], ["java.lang.Class"], ["java.lang.String"], [""], ["java.lang.Class"], ["javax.jcr.Node"], ["java.lang.String[]"], [""], [""], [""], [""], ["java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.workflow.impl.WorkflowPackageManagerImpl.isWorkflowPackage": "{@inheritDoc}"}]}, {"index": "1097", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/impl/WorkflowPackageManagerImpl.java", "methodName": "com.adobe.acs.commons.workflow.impl.WorkflowPackageManagerImpl.delete", "methodParameterType": "ResourceResolver#String#", "methodParameterName": "resourceResolver#path#", "methodBody": "public final void delete(final ResourceResolver resourceResolver, final String path) throws RepositoryException {\n        final Resource resource = resourceResolver.getResource(path);\n\n        if (resource == null) {\n            log.error(\"Requesting to delete a non-existent Workflow Package [ {} ]\", path);\n            return;\n        }\n\n        final Node node = resource.adaptTo(Node.class);\n        if (node != null) {\n            node.remove();\n            node.getSession().save();\n        } else {\n            log.error(\"Trying to delete a wf resource [ {} ] that does not resolve to a node.\", resource.getPath());\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.sling.api.resource.ResourceResolver.getResource", "org.slf4j.Logger.error", "org.apache.sling.api.resource.Resource.adaptTo", "javax.jcr.Node.remove", "javax.jcr.Node.getSession", "javax.jcr.Session.save", "org.apache.sling.api.resource.Resource.getPath"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.Object"], ["java.lang.Class"], [""], [""], [""], [""]], "passed_comments": "/"}, {"index": "1098", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/impl/WorkflowPackageManagerImpl.java", "methodName": "com.adobe.acs.commons.workflow.impl.WorkflowPackageManagerImpl.isWorkflowPackage", "methodParameterType": "ResourceResolver#String#", "methodParameterName": "resourceResolver#path#", "methodBody": "public final boolean isWorkflowPackage(final ResourceResolver resourceResolver, final String path) {\n        final PageManager pageManager = resourceResolver.adaptTo(PageManager.class);\n        final Page workflowPackagesPage = pageManager.getPage(path);\n        if (workflowPackagesPage == null) {\n            return false;\n        }\n\n        final Resource contentResource = workflowPackagesPage.getContentResource();\n        if (contentResource == null) {\n            return false;\n        }\n\n        if (!contentResource.isResourceType(WORKFLOW_PAGE_RESOURCE_TYPE)) {\n            return false;\n        }\n\n        if (contentResource.getChild(NN_VLT_DEFINITION) == null) {\n            return false;\n        }\n\n        return true;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.sling.api.resource.ResourceResolver.adaptTo", "com.day.cq.wcm.api.PageManager.getPage", "com.day.cq.wcm.api.Page.getContentResource", "org.apache.sling.api.resource.Resource.isResourceType", "org.apache.sling.api.resource.Resource.getChild"], "call_func_parameter": [["java.lang.Class"], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "1099", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/impl/WorkflowPackageManagerImpl.java", "methodName": "com.adobe.acs.commons.workflow.impl.WorkflowPackageManagerImpl.getIncludeRules", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "private String[] getIncludeRules(final String path) {\n        String[] rules;\n\n        final String rootInclude = \"include:\" + path;\n        final String contentInclude = \"include:\" + path + \"/jcr:content(/.*)?\";\n\n        rules = new String[]{rootInclude, contentInclude};\n\n        return rules;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#ArrayInitializer#ArrayCreation#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName(SimpleName)SimpleName)ArrayInitializer)ArrayCreation)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates the Workflow Page Resource's include rules.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "1100", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/synthetic/SyntheticWorkflowModel.java", "methodName": "com.adobe.acs.commons.workflow.synthetic.SyntheticWorkflowModel.getWorkflowProcessNames", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String[] getWorkflowProcessNames();", "AST": "Javadoc#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1101", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/synthetic/SyntheticWorkflowModel.java", "methodName": "com.adobe.acs.commons.workflow.synthetic.SyntheticWorkflowModel.getSyntheticWorkflowModelData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Map<String, Map<String, Object>> getSyntheticWorkflowModelData();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1102", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/synthetic/SyntheticWorkflowRunner.java", "methodName": "com.adobe.acs.commons.workflow.synthetic.SyntheticWorkflowRunner.execute", "methodParameterType": "ResourceResolver#String#String[]#", "methodParameterName": "resourceResolver#payloadPath#workflowProcessLabels#", "methodBody": "void execute(ResourceResolver resourceResolver,\n                 String payloadPath,\n                 String[] workflowProcessLabels) throws WorkflowException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Process a payload path using using the provided Workflow Processes. Convenience method for calling: > execute(resourceResolver, payloadPath, workflowProcessLabels, null, false, false);", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1103", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/synthetic/SyntheticWorkflowRunner.java", "methodName": "com.adobe.acs.commons.workflow.synthetic.SyntheticWorkflowRunner.execute", "methodParameterType": "ResourceResolver#String#SyntheticWorkflowModel#boolean#boolean#", "methodParameterName": "resourceResolver#payloadPath#syntheticWorkflowModel#autoSaveAfterEachWorkflowProcess#autoSaveAtEnd#", "methodBody": "void execute(ResourceResolver resourceResolver,\n                 String payloadPath,\n                 SyntheticWorkflowModel syntheticWorkflowModel,\n                 boolean autoSaveAfterEachWorkflowProcess,\n                 boolean autoSaveAtEnd) throws WorkflowException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Execute the provided Synthetic Workflow Model in the context of Synthetic Workflow.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1104", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/synthetic/SyntheticWorkflowRunner.java", "methodName": "com.adobe.acs.commons.workflow.synthetic.SyntheticWorkflowRunner.getSyntheticWorkflowModel", "methodParameterType": "ResourceResolver#String#boolean#", "methodParameterName": "resourceResolver#workflowModelId#ignoreIncompatibleTypes#", "methodBody": "SyntheticWorkflowModel getSyntheticWorkflowModel(ResourceResolver resourceResolver,\n                                                     String workflowModelId,\n                                                     boolean ignoreIncompatibleTypes) throws WorkflowException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Generates the SyntheticWorkflowModel that represents the AEM Workflow Model to execute in the context of Synthetic Workflow.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1105", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/synthetic/SyntheticWorkflowRunner.java", "methodName": "com.adobe.acs.commons.workflow.synthetic.SyntheticWorkflowRunner.getSyntheticWorkflowStep", "methodParameterType": "String#WorkflowProcessIdType#", "methodParameterName": "id#type#", "methodBody": "SyntheticWorkflowStep getSyntheticWorkflowStep(String id, WorkflowProcessIdType type);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Gets the Synthetic Workflow Step that represents the label. This method sets the MetadataMap to empty.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1106", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/synthetic/SyntheticWorkflowRunner.java", "methodName": "com.adobe.acs.commons.workflow.synthetic.SyntheticWorkflowRunner.getSyntheticWorkflowStep", "methodParameterType": "String#WorkflowProcessIdType#Map<String,Object>#", "methodParameterName": "id#type#metadataMap#", "methodBody": "SyntheticWorkflowStep getSyntheticWorkflowStep(String id, WorkflowProcessIdType type, Map<String, Object> metadataMap);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Gets the Synthetic Workflow Step that represents the label.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1107", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/synthetic/impl/SyntheticWorkflowRunnerImpl.java", "methodName": "com.adobe.acs.commons.workflow.synthetic.impl.SyntheticWorkflowRunnerImpl.convertToSyntheticWorkflowSteps", "methodParameterType": "String[]#WorkflowProcessIdType#Map<String,Map<String,Object>>#", "methodParameterName": "workflowProcessIds#idType#processArgs#", "methodBody": "private List<SyntheticWorkflowStep> convertToSyntheticWorkflowSteps(String[] workflowProcessIds,\n                                                                        WorkflowProcessIdType idType,\n                                                                        Map<String, Map<String, Object>> processArgs) {\n        final List<SyntheticWorkflowStep> workflowSteps = new ArrayList<>();\n\n        for (String workflowProcessId : workflowProcessIds) {\n            workflowSteps.add(getSyntheticWorkflowStep(workflowProcessId, idType, processArgs.get(workflowProcessId)));\n        }\n\n        return workflowSteps;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts the legacy Workflow Process IDs and Process Args maps into the SyntheticWorkflowStep abstraction that allows for multiple Processes of the same type to be executed in the same WF.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1108", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/synthetic/impl/SyntheticWorkflowRunnerImpl.java", "methodName": "com.adobe.acs.commons.workflow.synthetic.impl.SyntheticWorkflowRunnerImpl.start", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public final void start() throws WorkflowException {\n        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION_MESSAGE);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Unsupported operation.", "call_func_name": ["java.lang.UnsupportedOperationException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "1109", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/synthetic/impl/SyntheticWorkflowRunnerImpl.java", "methodName": "com.adobe.acs.commons.workflow.synthetic.impl.SyntheticWorkflowRunnerImpl.stop", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public final void stop() {\n        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION_MESSAGE);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Unsupported operation.", "call_func_name": ["java.lang.UnsupportedOperationException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "1110", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/synthetic/impl/SyntheticWorkflowRunnerImpl.java", "methodName": "com.adobe.acs.commons.workflow.synthetic.impl.SyntheticWorkflowRunnerImpl.getWorkflowSession", "methodParameterType": "Session#", "methodParameterName": "session#", "methodBody": "@Override\n    public final WorkflowSession getWorkflowSession(final Session session) {\n        return getCqWorkflowSession(session);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deprecated. Please use getCqWorkflowSession(..) Creates a Synthetic Workflow Session from a JCR Session.", "call_func_name": ["com.adobe.acs.commons.workflow.synthetic.impl.SyntheticWorkflowRunnerImpl.getCqWorkflowSession"], "call_func_parameter": [["javax.jcr.Session"]], "passed_comments": [{"com.adobe.acs.commons.workflow.synthetic.impl.SyntheticWorkflowRunnerImpl.getCqWorkflowSession": "Creates a CQ Synthetic Workflow Session from a JCR Session."}]}, {"index": "1111", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/synthetic/impl/SyntheticWorkflowRunnerImpl.java", "methodName": "com.adobe.acs.commons.workflow.synthetic.impl.SyntheticWorkflowRunnerImpl.getCqWorkflowSession", "methodParameterType": "Session#", "methodParameterName": "session#", "methodBody": "public final WorkflowSession getCqWorkflowSession(final Session session) {\n        return new SyntheticWorkflowSession(this, session);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a CQ Synthetic Workflow Session from a JCR Session.", "call_func_name": ["com.adobe.acs.commons.workflow.synthetic.impl.cq.SyntheticWorkflowSession.<init>"], "call_func_parameter": [["com.adobe.acs.commons.workflow.synthetic.impl.SyntheticWorkflowRunnerImpl", "javax.jcr.Session"]], "passed_comments": "/"}, {"index": "1112", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/synthetic/impl/SyntheticWorkflowRunnerImpl.java", "methodName": "com.adobe.acs.commons.workflow.synthetic.impl.SyntheticWorkflowRunnerImpl.getGraniteWorkflowSession", "methodParameterType": "Session#", "methodParameterName": "session#", "methodBody": "public final com.adobe.acs.commons.workflow.synthetic.impl.granite.SyntheticWorkflowSession getGraniteWorkflowSession(final Session session) {\n        return new com.adobe.acs.commons.workflow.synthetic.impl.granite.SyntheticWorkflowSession(this, session);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ThisExpression#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(ThisExpression)ThisExpression(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a Granite Synthetic Workflow Session from a JCR Session.", "call_func_name": ["com.adobe.acs.commons.workflow.synthetic.impl.granite.SyntheticWorkflowSession.<init>"], "call_func_parameter": [["com.adobe.acs.commons.workflow.synthetic.impl.SyntheticWorkflowRunnerImpl", "javax.jcr.Session"]], "passed_comments": "/"}, {"index": "1113", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/synthetic/impl/SyntheticWorkflowRunnerImpl.java", "methodName": "com.adobe.acs.commons.workflow.synthetic.impl.SyntheticWorkflowRunnerImpl.getAEMWorkflowService", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final WorkflowService getAEMWorkflowService() {\n        return this.aemWorkflowService;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Getter for the AEM Workflow Service; This is only available at the Impl level and not part of the public SyntheticWorkflowRunner interface. The use of this service should be well understand as to prevent potential overhead of the the non-synthetic aspects of WF.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1114", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/synthetic/impl/SyntheticWorkflowData.java", "methodName": "com.adobe.acs.commons.workflow.synthetic.impl.SyntheticWorkflowData.getMetaData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    @Deprecated\n    @SuppressWarnings(\"squid:S1149\")\n    public final Dictionary<String, String> getMetaData() {\n        final Dictionary<String, String> dictionary = new Hashtable<String, String>();\n\n        for (String key : this.getMetaDataMap().keySet()) {\n            dictionary.put(key, this.getMetaDataMap().get(key, String.class));\n        }\n\n        return dictionary;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#MarkerAnnotation#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated deprecated in interface", "call_func_name": ["java.util.Hashtable.<init>", "com.adobe.acs.commons.workflow.synthetic.impl.SyntheticWorkflowData.getMetaDataMap", "com.adobe.acs.commons.workflow.synthetic.impl.SyntheticMetaDataMap.keySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.adobe.acs.commons.workflow.synthetic.impl.SyntheticMetaDataMap.get", "java.util.Dictionary.put"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["java.lang.String", "java.lang.Class"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1115", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/synthetic/impl/granite/SyntheticWorkItem.java", "methodName": "com.adobe.acs.commons.workflow.synthetic.impl.granite.SyntheticWorkItem.getMetaDataMap", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public final MetaDataMap getMetaDataMap() {\n        return this.metaDataMap;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This metadata map is local to this Workflow Item. This Map will change with each WorkflowProcess step.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1116", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/synthetic/impl/cq/SyntheticWorkflowSession.java", "methodName": "com.adobe.acs.commons.workflow.synthetic.impl.cq.SyntheticWorkflowSession.startWorkflow", "methodParameterType": "WorkflowModel#WorkflowData#Dictionary<String,String>#", "methodParameterName": "workflowModel#workflowData#stringStringDictionary#", "methodBody": "@Deprecated\n    @Override\n    public final Workflow startWorkflow(final WorkflowModel workflowModel, final WorkflowData workflowData,\n                                        final Dictionary<String, String> stringStringDictionary)\n            throws WorkflowException {\n        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION_MESSAGE);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "@deprecated deprecated in interface", "call_func_name": ["java.lang.UnsupportedOperationException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "1117", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/synthetic/impl/cq/SyntheticWorkflow.java", "methodName": "com.adobe.acs.commons.workflow.synthetic.impl.cq.SyntheticWorkflow.getMetaData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    @Override\n    @SuppressWarnings(\"squid:S1149\")\n    public final Dictionary<String, String> getMetaData() {\n        final Dictionary<String, String> dictionary = new Hashtable<String, String>();\n\n        for (String key : this.getMetaDataMap().keySet()) {\n            dictionary.put(key, this.getMetaDataMap().get(key, String.class));\n        }\n\n        return dictionary;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#MarkerAnnotation#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated deprecated in interface", "call_func_name": ["java.util.Hashtable.<init>", "com.adobe.acs.commons.workflow.synthetic.impl.cq.SyntheticWorkflow.getMetaDataMap", "com.day.cq.workflow.metadata.MetaDataMap.keySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.day.cq.workflow.metadata.MetaDataMap.get", "java.util.Dictionary.put"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["java.lang.String", "java.lang.Class"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1118", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/synthetic/impl/cq/SyntheticWorkItem.java", "methodName": "com.adobe.acs.commons.workflow.synthetic.impl.cq.SyntheticWorkItem.getMetaData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    @Override\n    @SuppressWarnings(\"squid:S1149\")\n    public final Dictionary<String, String> getMetaData() {\n        final Dictionary<String, String> dictionary = new Hashtable<String, String>();\n\n        for (String key : this.getMetaDataMap().keySet()) {\n            dictionary.put(key, this.getMetaDataMap().get(key, String.class));\n        }\n\n        return dictionary;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#MarkerAnnotation#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated deprecated in interface", "call_func_name": ["java.util.Hashtable.<init>", "com.adobe.acs.commons.workflow.synthetic.impl.cq.SyntheticWorkItem.getMetaDataMap", "com.day.cq.workflow.metadata.MetaDataMap.keySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.day.cq.workflow.metadata.MetaDataMap.get", "java.util.Dictionary.put"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["java.lang.String", "java.lang.Class"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.workflow.synthetic.impl.cq.SyntheticWorkItem.getMetaDataMap": "This metadata map is local to this Workflow Item. This Map will change with each WorkflowProcess step."}]}, {"index": "1119", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/workflow/synthetic/impl/cq/SyntheticWorkItem.java", "methodName": "com.adobe.acs.commons.workflow.synthetic.impl.cq.SyntheticWorkItem.getMetaDataMap", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public final MetaDataMap getMetaDataMap() {\n        return this.metaDataMap;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This metadata map is local to this Workflow Item. This Map will change with each WorkflowProcess step.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1120", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/exporters/impl/tags/TagsExportServlet.java", "methodName": "com.adobe.acs.commons.exporters.impl.tags.TagsExportServlet.doGet", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "request#response#", "methodBody": "@Override\n    public void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws IOException, ServletException {\n      ResourceResolver rr = request.getResourceResolver();\n      Parameters params = new Parameters(request);\n\n      if (params.containsPath()) {\n        Writer writer = response.getWriter();\n        response.setContentType(\"text/csv\");\n        response.setCharacterEncoding(\"UTF-8\");\n\n        if (params.isLocalized()) {\n          writer.write(tagsExportService.exportLocalizedTagsForPath(params.getPath(), rr, params.getDefaultLocalization()));\n        } else {\n          writer.write(tagsExportService.exportNonLocalizedTagsForPath(params.getPath(), rr));\n        }\n      } else {\n        log.warn(\"Cannot generate tag CSV file, missing 'path' parameter in request.\");\n      }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Generates a CSV file representing tag structure under passed in request path.", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getResourceResolver", "com.adobe.acs.commons.exporters.impl.tags.Parameters.<init>", "com.adobe.acs.commons.exporters.impl.tags.Parameters.containsPath", "org.apache.sling.api.SlingHttpServletResponse.getWriter", "org.apache.sling.api.SlingHttpServletResponse.setContentType", "org.apache.sling.api.SlingHttpServletResponse.setCharacterEncoding", "com.adobe.acs.commons.exporters.impl.tags.Parameters.isLocalized", "java.lang.Boolean.booleanValue", "com.adobe.acs.commons.exporters.impl.tags.Parameters.getPath", "com.adobe.acs.commons.exporters.impl.tags.Parameters.getDefaultLocalization", "com.adobe.acs.commons.exporters.impl.tags.TagsExportService.exportLocalizedTagsForPath", "java.io.Writer.write", "com.adobe.acs.commons.exporters.impl.tags.TagsExportService.exportNonLocalizedTagsForPath", "org.slf4j.Logger.warn"], "call_func_parameter": [[""], ["org.apache.sling.api.SlingHttpServletRequest"], [""], [""], ["java.lang.String"], ["java.lang.String"], [""], [""], [""], [""], ["java.lang.String", "org.apache.sling.api.resource.ResourceResolver", "java.lang.String"], ["java.lang.String"], ["java.lang.String", "org.apache.sling.api.resource.ResourceResolver"], ["java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.exporters.impl.tags.TagsExportService.exportLocalizedTagsForPath": "Export all tags under passed root path in localized structure ex. 'es[Produtos] fr[Products in french] en[Products] {{products}}'"}, {"com.adobe.acs.commons.exporters.impl.tags.TagsExportService.exportNonLocalizedTagsForPath": "Export all tags under passed root path in non-localized structure ex. 'product {{product}}'"}]}, {"index": "1121", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/exporters/impl/tags/TagsExportService.java", "methodName": "com.adobe.acs.commons.exporters.impl.tags.TagsExportService.exportNonLocalizedTagsForPath", "methodParameterType": "String#ResourceResolver#", "methodParameterName": "path#rr#", "methodBody": "public String exportNonLocalizedTagsForPath(String path, ResourceResolver rr) {\n    return exportTagsForPath(path, rr, DEFAULT_LANGUAGE, TagExportMode.NON_LOCALIZED);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Export all tags under passed root path in non-localized structure ex. 'product {{product}}'", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1122", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/exporters/impl/tags/TagsExportService.java", "methodName": "com.adobe.acs.commons.exporters.impl.tags.TagsExportService.exportLocalizedTagsForPath", "methodParameterType": "String#ResourceResolver#", "methodParameterName": "path#rr#", "methodBody": "public String exportLocalizedTagsForPath(String path, ResourceResolver rr) {\n    return exportLocalizedTagsForPath(path, rr, DEFAULT_LANGUAGE);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Export all tags under passed root path in localized structure ex. 'es[Produtos] fr[Products in french] en[Products] {{products}}' If tag does not contain assigned localization as default is used 'en'", "call_func_name": ["com.adobe.acs.commons.exporters.impl.tags.TagsExportService.exportLocalizedTagsForPath"], "call_func_parameter": [["java.lang.String", "org.apache.sling.api.resource.ResourceResolver", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.exporters.impl.tags.TagsExportService.exportLocalizedTagsForPath": "Export all tags under passed root path in localized structure ex. 'es[Produtos] fr[Products in french] en[Products] {{products}}'"}]}, {"index": "1123", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/exporters/impl/tags/TagsExportService.java", "methodName": "com.adobe.acs.commons.exporters.impl.tags.TagsExportService.exportLocalizedTagsForPath", "methodParameterType": "String#ResourceResolver#String#", "methodParameterName": "path#rr#lang#", "methodBody": "public String exportLocalizedTagsForPath(String path, ResourceResolver rr, String lang) {\n    return exportTagsForPath(path, rr, lang, TagExportMode.LOCALIZED);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Export all tags under passed root path in localized structure ex. 'es[Produtos] fr[Products in french] en[Products] {{products}}'", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1124", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/exporters/impl/users/UsersInitServlet.java", "methodName": "com.adobe.acs.commons.exporters.impl.users.UsersInitServlet.doGet", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "request#response#", "methodBody": "public void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws IOException, ServletException {\n        response.setContentType(\"application/json\");\n        response.setCharacterEncoding(\"UTF-8\");\n\n        final JsonObject json = new JsonObject();\n        final JsonObject existing = new JsonObject();\n        final JsonObject options = new JsonObject();\n\n        try {\n            options.add(GROUPS, getGroupOptions(request.getResourceResolver()));\n            options.add(GROUP_FILTERS, getGroupFilterOptions());\n\n            final Parameters parameters = new Parameters(request.getResource());\n            existing.addProperty(GROUP_FILTER, parameters.getGroupFilter());\n            existing.add(GROUPS, new Gson().toJsonTree(Arrays.asList(parameters.getGroups())));\n            existing.add(CUSTOM_PROPERTIES, parameters.getCustomPropertiesAsJSON());\n\n            json.add(\"options\", options);\n            json.add(\"form\", existing);\n\n        } catch (RepositoryException e) {\n            throw new ServletException(e);\n        }\n\n        response.getWriter().write(json.toString());\n        response.getWriter().flush();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Returns a JSON containing the options available to the form, and any prior saved data that should pre-populate the form.", "call_func_name": ["org.apache.sling.api.SlingHttpServletResponse.setContentType", "org.apache.sling.api.SlingHttpServletResponse.setCharacterEncoding", "com.google.gson.JsonObject.<init>", "org.apache.sling.api.SlingHttpServletRequest.getResourceResolver", "com.adobe.acs.commons.exporters.impl.users.UsersInitServlet.getGroupOptions", "com.google.gson.JsonObject.add", "com.adobe.acs.commons.exporters.impl.users.UsersInitServlet.getGroupFilterOptions", "org.apache.sling.api.SlingHttpServletRequest.getResource", "com.adobe.acs.commons.exporters.impl.users.Parameters.<init>", "com.adobe.acs.commons.exporters.impl.users.Parameters.getGroupFilter", "com.google.gson.JsonObject.addProperty", "com.google.gson.Gson.<init>", "com.adobe.acs.commons.exporters.impl.users.Parameters.getGroups", "java.util.Arrays.asList", "com.google.gson.Gson.toJsonTree", "com.adobe.acs.commons.exporters.impl.users.Parameters.getCustomPropertiesAsJSON", "javax.servlet.ServletException.<init>", "org.apache.sling.api.SlingHttpServletResponse.getWriter", "com.google.gson.JsonObject.toString", "java.io.PrintWriter.write", "java.io.PrintWriter.flush"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], [""], [""], ["org.apache.sling.api.resource.ResourceResolver"], ["java.lang.String", "com.google.gson.JsonElement"], [""], [""], ["org.apache.sling.api.resource.Resource"], [""], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.Object[]"], ["java.lang.Object"], [""], ["java.lang.Throwable"], [""], [""], ["java.lang.String"], [""]], "passed_comments": [{"com.adobe.acs.commons.exporters.impl.users.UsersInitServlet.getGroupOptions": "Creates a JSON array of the User Groups principals in the system."}, {"com.adobe.acs.commons.exporters.impl.users.UsersInitServlet.getGroupFilterOptions": "Creates a list of options for the Group Filter list."}]}, {"index": "1125", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/exporters/impl/users/UsersInitServlet.java", "methodName": "com.adobe.acs.commons.exporters.impl.users.UsersInitServlet.getGroupOptions", "methodParameterType": "ResourceResolver#", "methodParameterName": "resourceResolver#", "methodBody": "private JsonArray getGroupOptions(ResourceResolver resourceResolver) throws RepositoryException {\n        final JsonArray jsonArray = new JsonArray();\n        final QueryManager queryManager = resourceResolver.adaptTo(Session.class).getWorkspace().getQueryManager();\n        final Query query = queryManager.createQuery(QUERY, Query.JCR_SQL2);\n        final NodeIterator nodeIter = query.execute().getNodes();\n\n        while (nodeIter.hasNext()) {\n            Resource resource = resourceResolver.getResource(nodeIter.nextNode().getPath());\n            jsonArray.add(new JsonPrimitive(resource.getValueMap().get(\"rep:principalName\", \"Unknown\")));\n        }\n\n        return jsonArray;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)WhileStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a JSON array of the User Groups principals in the system.", "call_func_name": ["com.google.gson.JsonArray.<init>", "org.apache.sling.api.resource.ResourceResolver.adaptTo", "javax.jcr.Session.getWorkspace", "javax.jcr.Workspace.getQueryManager", "javax.jcr.query.QueryManager.createQuery", "javax.jcr.query.Query.execute", "javax.jcr.query.QueryResult.getNodes", "javax.jcr.NodeIterator.hasNext", "javax.jcr.NodeIterator.nextNode", "javax.jcr.Node.getPath", "org.apache.sling.api.resource.ResourceResolver.getResource", "org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.get", "com.google.gson.JsonPrimitive.<init>", "com.google.gson.JsonArray.add"], "call_func_parameter": [[""], ["java.lang.Class"], [""], [""], ["java.lang.String", "java.lang.String"], [""], [""], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String"], ["com.google.gson.JsonElement"]], "passed_comments": "/"}, {"index": "1126", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/exporters/impl/users/UsersInitServlet.java", "methodName": "com.adobe.acs.commons.exporters.impl.users.UsersInitServlet.getGroupFilterOptions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private JsonArray getGroupFilterOptions() {\n        JsonObject both = new JsonObject();\n        both.addProperty(KEY_TEXT, \"Direct or Indirect Membership\");\n        both.addProperty(KEY_VALUE, GROUP_FILTER_BOTH);\n\n        JsonObject direct = new JsonObject();\n        direct.addProperty(KEY_TEXT, \"Direct Membership\");\n        direct.addProperty(KEY_VALUE, GROUP_FILTER_DIRECT);\n\n\n        JsonObject indirect = new JsonObject();\n        indirect.addProperty(KEY_TEXT, \"Indirect Membership\");\n        indirect.addProperty(KEY_VALUE, GROUP_FILTER_INDIRECT);\n\n        JsonArray jsonArray = new JsonArray();\n        jsonArray.add(direct);\n        jsonArray.add(indirect);\n        jsonArray.add(both);\n\n        return jsonArray;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a list of options for the Group Filter list.", "call_func_name": ["com.google.gson.JsonObject.<init>", "com.google.gson.JsonObject.addProperty", "com.google.gson.JsonArray.<init>", "com.google.gson.JsonArray.add"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""], ["com.google.gson.JsonElement"]], "passed_comments": "/"}, {"index": "1127", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/exporters/impl/users/UsersExportServlet.java", "methodName": "com.adobe.acs.commons.exporters.impl.users.UsersExportServlet.doGet", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "request#response#", "methodBody": "public void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws IOException, ServletException {\n        response.setContentType(\"text/csv\");\n        response.setCharacterEncoding(\"UTF-8\");\n\n        final Parameters parameters = new Parameters(request);\n\n        log.debug(\"Users to CSV Export Parameters: {}\", parameters.toString());\n\n        final Csv csv = new Csv();\n        final Writer writer = response.getWriter();\n        csv.writeInit(writer);\n        \n        final Iterator<Resource> resources = request.getResourceResolver().findResources(QUERY, Query.JCR_SQL2);\n\n        // Using a HashMap to satisfy issue with duplicate results in AEM 6.1 GA\n        HashMap<String, CsvUser> csvUsers = new LinkedHashMap<String, CsvUser>();\n\n        while (resources.hasNext()) {\n            try {\n                Resource resource = resources.next();\n                CsvUser csvUser = new CsvUser(resource);\n\n                if (!csvUsers.containsKey(csvUser.getPath())\n                        && checkGroups(parameters.getGroups(), parameters.getGroupFilter(), csvUser)) {\n                    csvUsers.put(csvUser.getPath(), csvUser);\n                }\n\n            } catch (RepositoryException e) {\n                log.error(\"Unable to extract a user from resource.\", e);\n            }\n        }\n\n        List<String> columns = new ArrayList<String>();\n        columns.add(\"Path\");\n        columns.add(\"User ID\");\n        columns.add(\"First Name\");\n        columns.add(\"Last Name\");\n        columns.add(\"E-mail Address\");\n        columns.add(\"Created Date\");\n        columns.add(\"Last Modified Date\");\n\n        for (String customProperty : parameters.getCustomProperties()) {\n            columns.add(customProperty);\n        }\n\n        columns.add(\"All Groups\");\n        columns.add(\"Direct Groups\");\n        columns.add(\"Indirect Groups\");\n\n        csv.writeRow(columns.toArray(new String[columns.size()]));\n\n        for (final CsvUser csvUser : csvUsers.values()) {\n            List<String> values = new ArrayList<String>();\n            try {\n                values.add(csvUser.getPath());\n                values.add(csvUser.getID());\n                values.add(csvUser.getFirstName());\n                values.add(csvUser.getLastName());\n                values.add(csvUser.getEmail());\n                values.add(csvUser.getCreatedDate());\n                values.add(csvUser.getLastModifiedDate());\n\n                for (String customProperty : parameters.getCustomProperties()) {\n                    values.add(csvUser.getCustomProperty(customProperty));\n                }\n\n                values.add(StringUtils.join(csvUser.getAllGroups(), GROUP_DELIMITER));\n                values.add(StringUtils.join(csvUser.getDeclaredGroups(), GROUP_DELIMITER));\n                values.add(StringUtils.join(csvUser.getTransitiveGroups(), GROUP_DELIMITER));\n\n                csv.writeRow(values.toArray(new String[values.size()]));\n            } catch (RepositoryException e) {\n                log.error(\"Unable to export user to CSV report\", e);\n            }\n        }\n\n        csv.close();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#WhileStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)WhileStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Generates a CSV file representing the User Data.", "call_func_name": ["org.apache.sling.api.SlingHttpServletResponse.setContentType", "org.apache.sling.api.SlingHttpServletResponse.setCharacterEncoding", "com.adobe.acs.commons.exporters.impl.users.Parameters.<init>", "java.lang.Object.toString", "org.slf4j.Logger.debug", "com.day.text.csv.Csv.<init>", "org.apache.sling.api.SlingHttpServletResponse.getWriter", "com.day.text.csv.Csv.writeInit", "org.apache.sling.api.SlingHttpServletRequest.getResourceResolver", "org.apache.sling.api.resource.ResourceResolver.findResources", "java.util.LinkedHashMap.<init>", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.HashMap.containsKey", "com.adobe.acs.commons.exporters.impl.users.Parameters.getGroups", "com.adobe.acs.commons.exporters.impl.users.Parameters.getGroupFilter", "java.util.HashMap.put", "org.slf4j.Logger.error", "java.util.ArrayList.<init>", "java.util.List.add", "com.adobe.acs.commons.exporters.impl.users.Parameters.getCustomProperties", "java.util.List.size", "java.util.List.toArray", "com.day.text.csv.Csv.writeRow", "java.util.HashMap.values", "java.util.Collection.iterator", "org.apache.commons.lang.StringUtils.join", "com.day.text.csv.Csv.close"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["org.apache.sling.api.SlingHttpServletRequest"], [""], ["java.lang.String", "java.lang.Object"], [""], [""], ["java.io.Writer"], [""], ["java.lang.String", "java.lang.String"], [""], [""], [""], ["java.lang.Object"], [""], [""], ["java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.Throwable"], [""], ["java.lang.Object"], [""], [""], ["java.lang.Object[]"], ["java.lang.String[]"], [""], [""], ["java.util.Collection", "java.lang.String"], [""]], "passed_comments": "/"}, {"index": "1128", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/exporters/impl/users/UsersExportServlet.java", "methodName": "com.adobe.acs.commons.exporters.impl.users.UsersExportServlet.checkGroups", "methodParameterType": "String[]#String#CsvUser#", "methodParameterName": "groups#groupFilter#csvUser#", "methodBody": "protected boolean checkGroups(String[] groups, String groupFilter, CsvUser csvUser) throws RepositoryException {\n        log.debug(\"Group Filter: {}\", groupFilter);\n        if (!ArrayUtils.isEmpty(groups)) {\n            if (GROUP_FILTER_DIRECT.equals(groupFilter) && csvUser.isInDirectGroup(groups)) {\n                log.debug(\"Adding [ {} ] via [ Direct ] membership\", csvUser.getID());\n                return true;\n            } else if (GROUP_FILTER_INDIRECT.equals(groupFilter) && csvUser.isInIndirectGroup(groups)) {\n                log.debug(\"Adding [ {} ] via [ Indirect ] membership\", csvUser.getID());\n                return true;\n            } else if (GROUP_FILTER_BOTH.equals(groupFilter)\n                    && (csvUser.isInDirectGroup(groups) || csvUser.isInIndirectGroup(groups))) {\n                log.debug(\"Adding [ {} ] via [ Direct OR Indirect ] membership\", csvUser.getID());\n                return true;\n            }\n\n            return false;\n        }\n\n        log.debug(\"Adding [ {} ] as no groups were specified to specify membership filtering.\", csvUser.getID());\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)IfStatement)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines if the user should be included based on the specified group filter type, and requested groups.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1129", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/exporters/impl/users/UsersSaveServlet.java", "methodName": "com.adobe.acs.commons.exporters.impl.users.UsersSaveServlet.doPost", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "request#response#", "methodBody": "public void doPost(SlingHttpServletRequest request, SlingHttpServletResponse response) throws IOException, ServletException {\n        response.setContentType(\"application/json\");\n        response.setCharacterEncoding(\"UTF-8\");\n\n        final ValueMap properties = request.getResource().adaptTo(ModifiableValueMap.class);\n\n        final Parameters parameters = new Parameters(request);\n        properties.put(GROUP_FILTER, parameters.getGroupFilter());\n        properties.put(GROUPS, parameters.getGroups());\n        properties.put(CUSTOM_PROPERTIES, parameters.getCustomProperties());\n        request.getResourceResolver().commit();\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Persists the Users to CSV form data to the underlying jcr:content node.", "call_func_name": ["org.apache.sling.api.SlingHttpServletResponse.setContentType", "org.apache.sling.api.SlingHttpServletResponse.setCharacterEncoding", "org.apache.sling.api.SlingHttpServletRequest.getResource", "org.apache.sling.api.resource.Resource.adaptTo", "com.adobe.acs.commons.exporters.impl.users.Parameters.<init>", "com.adobe.acs.commons.exporters.impl.users.Parameters.getGroupFilter", "org.apache.sling.api.resource.ValueMap.put", "com.adobe.acs.commons.exporters.impl.users.Parameters.getGroups", "com.adobe.acs.commons.exporters.impl.users.Parameters.getCustomProperties", "org.apache.sling.api.SlingHttpServletRequest.getResourceResolver", "org.apache.sling.api.resource.ResourceResolver.commit"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], [""], ["java.lang.Class"], ["org.apache.sling.api.SlingHttpServletRequest"], [""], ["java.lang.Object", "java.lang.Object"], [""], [""], [""], [""]], "passed_comments": "/"}, {"index": "1130", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/social/linkedin/LinkedInApi20.java", "methodName": "com.adobe.acs.commons.social.linkedin.LinkedInApi20.LinkedInApi20", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public LinkedInApi20() {\n        this(SecureRandomStringUtils.randomAlphanumeric(DEFAULT_STATE_LENGTH));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Create an API instance with a random state and no scopes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1131", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/social/linkedin/LinkedInApi20.java", "methodName": "com.adobe.acs.commons.social.linkedin.LinkedInApi20.LinkedInApi20", "methodParameterType": "String#", "methodParameterName": "state#", "methodBody": "public LinkedInApi20(String state) {\n        this.state = state;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create an API instance with the specified state and permissions.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1132", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/social/linkedin/LinkedInApi20.java", "methodName": "com.adobe.acs.commons.social.linkedin.LinkedInApi20.createService", "methodParameterType": "OAuthConfig#", "methodParameterName": "config#", "methodBody": "@Override\n    public OAuthService createService(OAuthConfig config) {\n        return new LinkedIn20Service(this, config);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1133", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/social/linkedin/LinkedInApi20.java", "methodName": "com.adobe.acs.commons.social.linkedin.LinkedInApi20.getAccessTokenEndpoint", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getAccessTokenEndpoint() {\n        return ACCESS_TOKEN_URL;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1134", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/social/linkedin/LinkedInApi20.java", "methodName": "com.adobe.acs.commons.social.linkedin.LinkedInApi20.getAccessTokenExtractor", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public AccessTokenExtractor getAccessTokenExtractor() {\n        return new JsonTokenExtractor();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.scribe.extractors.JsonTokenExtractor.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1135", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/social/linkedin/LinkedInApi20.java", "methodName": "com.adobe.acs.commons.social.linkedin.LinkedInApi20.getAccessTokenVerb", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Verb getAccessTokenVerb() {\n        return Verb.POST;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1136", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/social/linkedin/LinkedInApi20.java", "methodName": "com.adobe.acs.commons.social.linkedin.LinkedInApi20.getAuthorizationUrl", "methodParameterType": "OAuthConfig#", "methodParameterName": "config#", "methodBody": "@Override\n    public String getAuthorizationUrl(OAuthConfig config) {\n        Preconditions.checkValidUrl(config.getCallback(),\n                \"Must provide a valid url as callback. LinkedIn does not support Out Of Band Auth.\");\n        // Append scope if present\n        if (config.hasScope()) {\n            return String.format(SCOPED_AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(state),\n                    OAuthEncoder.encode(config.getCallback()), OAuthEncoder.encode(config.getScope()));\n        } else {\n            return String.format(AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(state),\n                    OAuthEncoder.encode(config.getCallback()));\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.scribe.model.OAuthConfig.getCallback", "org.scribe.utils.Preconditions.checkValidUrl", "org.scribe.model.OAuthConfig.hasScope", "org.scribe.model.OAuthConfig.getApiKey", "org.scribe.utils.OAuthEncoder.encode", "org.scribe.model.OAuthConfig.getScope", "java.lang.String.format"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "1137", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/social/linkedin/LinkedInApi20.java", "methodName": "com.adobe.acs.commons.social.linkedin.LinkedInApi20.getState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getState() {\n        return state;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Obtain the state value configured for this API instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1138", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/search/CloseableQueryBuilder.java", "methodName": "com.adobe.acs.commons.search.CloseableQueryBuilder.createQuery", "methodParameterType": "PredicateGroup#ResourceResolver#", "methodParameterName": "predicates#resourceResolver#", "methodBody": "CloseableQuery createQuery(final PredicateGroup predicates, final ResourceResolver resourceResolver);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create a closeable query around the provided predicate group.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1139", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/search/CloseableQueryBuilder.java", "methodName": "com.adobe.acs.commons.search.CloseableQueryBuilder.createQuery", "methodParameterType": "ResourceResolver#", "methodParameterName": "resourceResolver#", "methodBody": "CloseableQuery createQuery(final ResourceResolver resourceResolver);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create a closeable query.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1140", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/search/CloseableQueryBuilder.java", "methodName": "com.adobe.acs.commons.search.CloseableQueryBuilder.createQuery", "methodParameterType": "PredicateGroup#Session#", "methodParameterName": "predicates#session#", "methodBody": "CloseableQuery createQuery(final PredicateGroup predicates, final Session session);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create a closeable query around the provided predicate group.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1141", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/search/CloseableQueryBuilder.java", "methodName": "com.adobe.acs.commons.search.CloseableQueryBuilder.createQuery", "methodParameterType": "Session#", "methodParameterName": "session#", "methodBody": "CloseableQuery createQuery(final Session session);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create a closeable query.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1142", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/search/CloseableQueryBuilder.java", "methodName": "com.adobe.acs.commons.search.CloseableQueryBuilder.loadQuery", "methodParameterType": "String#ResourceResolver#", "methodParameterName": "path#resourceResolver#", "methodBody": "CloseableQuery loadQuery(final String path, final ResourceResolver resourceResolver) throws RepositoryException, IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Load a CQ Search query from a properties file located at the specified path. If the specified path does not exist, returns null.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1143", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/search/CloseableQueryBuilder.java", "methodName": "com.adobe.acs.commons.search.CloseableQueryBuilder.loadQuery", "methodParameterType": "String#Session#", "methodParameterName": "path#session#", "methodBody": "CloseableQuery loadQuery(final String path, final Session session) throws RepositoryException, IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Load a CQ Search query from a properties file located at the specified path. If the specified path does not exist, returns null.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1144", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/search/CloseableQueryBuilder.java", "methodName": "com.adobe.acs.commons.search.CloseableQueryBuilder.storeQuery", "methodParameterType": "Query#String#boolean#ResourceResolver#", "methodParameterName": "query#path#createFile#resourceResolver#", "methodBody": "void storeQuery(final Query query,\n                    final String path,\n                    final boolean createFile,\n                    final ResourceResolver resourceResolver) throws RepositoryException, IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Saves the query predicates to a properties file in the repository at the specified path.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1145", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/search/CloseableQueryBuilder.java", "methodName": "com.adobe.acs.commons.search.CloseableQueryBuilder.storeQuery", "methodParameterType": "Query#String#boolean#Session#", "methodParameterName": "query#path#createFile#session#", "methodBody": "void storeQuery(final Query query,\n                    final String path,\n                    final boolean createFile,\n                    final Session session) throws RepositoryException, IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Saves the query predicates to a properties file in the repository at the specified path.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1146", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/search/CloseableQueryBuilder.java", "methodName": "com.adobe.acs.commons.search.CloseableQueryBuilder.clearFacetCache", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void clearFacetCache();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Clears the QueryBuilder facet cache, in case you need to do that.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1147", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/search/impl/NodeExistsPredicateEvaluator.java", "methodName": "com.adobe.acs.commons.search.impl.NodeExistsPredicateEvaluator.isFiltering", "methodParameterType": "Predicate#EvaluationContext#", "methodParameterName": "predicate#context#", "methodBody": "@Override\n    @Deprecated\n    public final boolean isFiltering(final Predicate predicate, final EvaluationContext context) {\n        // .canFilter(..) has replaced isFiltering(..)\n        return this.canFilter(predicate, context);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated", "call_func_name": ["com.adobe.acs.commons.search.impl.NodeExistsPredicateEvaluator.canFilter"], "call_func_parameter": [["com.day.cq.search.Predicate", "com.day.cq.search.eval.EvaluationContext"]], "passed_comments": "/"}, {"index": "1148", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/search/impl/SessionLogoutGuardFactory.java", "methodName": "com.adobe.acs.commons.search.impl.SessionLogoutGuardFactory.useBestWrapper", "methodParameterType": "Session#", "methodParameterName": "session#", "methodBody": "public static Session useBestWrapper(final Session session) {\n        if (session instanceof JackrabbitWrapper || session instanceof JcrWrapper) {\n            return session;\n        } else if (session instanceof JackrabbitSession) {\n            return new JackrabbitWrapper((JackrabbitSession) session);\n        } else if (session != null) {\n            return new JcrWrapper(session);\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#InfixExpression#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#CastExpression#ClassInstanceCreation#ReturnStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ClassInstanceCreation)ReturnStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)IfStatement)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the best wrapped version of the provided session.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1149", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/search/impl/CloseableQueryBuilderImpl.java", "methodName": "com.adobe.acs.commons.search.impl.CloseableQueryBuilderImpl.getAdapter", "methodParameterType": "Object#Class<AdapterType>#", "methodParameterName": "adaptable#adapterType#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    @CheckForNull\n    @Override\n    public <AdapterType> AdapterType getAdapter(@Nonnull final Object adaptable,\n                                                @Nonnull final Class<AdapterType> adapterType) {\n        if (adaptable instanceof ResourceResolver && adapterType.isAssignableFrom(CloseableQueryBuilder.class)) {\n            return (AdapterType) this;\n        } else {\n            return null;\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#MarkerAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleType#ThisExpression#CastExpression#ReturnStatement#Block#NullLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)InfixExpression(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression)CastExpression)ReturnStatement)Block(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Implementation of  {@link AdapterFactory} to mirror how {@link QueryBuilder} is adaptable from{@link ResourceResolver} instances in the same way, even if it isn't really a straightforward relationshipbetween the two types.", "call_func_name": ["java.lang.Class.isAssignableFrom"], "call_func_parameter": [["java.lang.Class"]], "passed_comments": "/"}, {"index": "1150", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/notifications/InboxNotification.java", "methodName": "com.adobe.acs.commons.notifications.InboxNotification.getTitle", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract String getTitle();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the notification title.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1151", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/notifications/InboxNotification.java", "methodName": "com.adobe.acs.commons.notifications.InboxNotification.setTitle", "methodParameterType": "String#", "methodParameterName": "title#", "methodBody": "public abstract void setTitle(String title);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets the notification title.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1152", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/notifications/InboxNotification.java", "methodName": "com.adobe.acs.commons.notifications.InboxNotification.getContentPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract String getContentPath();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the notifications associated content path.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1153", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/notifications/InboxNotification.java", "methodName": "com.adobe.acs.commons.notifications.InboxNotification.setContentPath", "methodParameterType": "String#", "methodParameterName": "contentPath#", "methodBody": "public abstract void setContentPath(String contentPath);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets the content path.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1154", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/notifications/InboxNotification.java", "methodName": "com.adobe.acs.commons.notifications.InboxNotification.getAssignee", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract String getAssignee();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the principal name of the notification recipient", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1155", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/notifications/InboxNotification.java", "methodName": "com.adobe.acs.commons.notifications.InboxNotification.setAssignee", "methodParameterType": "String#", "methodParameterName": "assignee#", "methodBody": "public abstract void setAssignee(String assignee);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets the assignee.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1156", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/notifications/InboxNotification.java", "methodName": "com.adobe.acs.commons.notifications.InboxNotification.getMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract String getMessage();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the notification message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1157", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/notifications/InboxNotification.java", "methodName": "com.adobe.acs.commons.notifications.InboxNotification.setMessage", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public abstract void setMessage(String message);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets the message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1158", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/notifications/InboxNotification.java", "methodName": "com.adobe.acs.commons.notifications.InboxNotification.getNotificationActions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract String[] getNotificationActions();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets the notification's actions.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1159", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/notifications/InboxNotification.java", "methodName": "com.adobe.acs.commons.notifications.InboxNotification.setNotificationActions", "methodParameterType": "String#", "methodParameterName": "notificationActions#", "methodBody": "public abstract void setNotificationActions(String... notificationActions);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets the notification's actions.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1160", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/notifications/InboxNotification.java", "methodName": "com.adobe.acs.commons.notifications.InboxNotification.getInstructions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract String getInstructions();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the notification's instructions.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1161", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/notifications/InboxNotification.java", "methodName": "com.adobe.acs.commons.notifications.InboxNotification.setInstructions", "methodParameterType": "String#", "methodParameterName": "instructions#", "methodBody": "public abstract void setInstructions(String instructions);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets the notification's instructions.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1162", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/notifications/InboxNotificationSender.java", "methodName": "com.adobe.acs.commons.notifications.InboxNotificationSender.sendInboxNotification", "methodParameterType": "ResourceResolver#InboxNotification#", "methodParameterName": "resourceResolver#inboxNotification#", "methodBody": "void sendInboxNotification(ResourceResolver resourceResolver,\n            InboxNotification inboxNotification) throws TaskManagerException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sends a AEM inbox Notification.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1163", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/notifications/InboxNotificationSender.java", "methodName": "com.adobe.acs.commons.notifications.InboxNotificationSender.sendInboxNotifications", "methodParameterType": "ResourceResolver#List<InboxNotification>#", "methodParameterName": "resourceResolver#inboxNotifications#", "methodBody": "void sendInboxNotifications(ResourceResolver resourceResolver,\n            List<InboxNotification> inboxNotifications)\n            throws TaskManagerException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sends multiple AEM inbox notifications.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1164", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/notifications/InboxNotificationSender.java", "methodName": "com.adobe.acs.commons.notifications.InboxNotificationSender.buildInboxNotification", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "InboxNotification buildInboxNotification();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Builds an InboxNotifcation object that can be populate prior to sending.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1165", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/EnsureServiceUser.java", "methodName": "com.adobe.acs.commons.users.impl.EnsureServiceUser.getOperation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Operation getOperation() {\n        return operation;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the Operation this OSGi Config represents", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1166", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/EnsureServiceUser.java", "methodName": "com.adobe.acs.commons.users.impl.EnsureServiceUser.getAuthorizable", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public ServiceUser getAuthorizable() {\n        return serviceUser;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the Service User this OSGi Config represents", "call_func_name": ["com.adobe.acs.commons.users.impl.EnsureServiceUser.getAuthorizable"], "call_func_parameter": [[""]], "passed_comments": [{"com.adobe.acs.commons.users.impl.EnsureServiceUser.getAuthorizable": "@return the Service User this OSGi Config represents"}]}, {"index": "1167", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/EnsureServiceUser.java", "methodName": "com.adobe.acs.commons.users.impl.EnsureServiceUser.ensure", "methodParameterType": "Operation#AbstractAuthorizable#", "methodParameterName": "operation#serviceUser#", "methodBody": "@Override\n    public void ensure(Operation operation, AbstractAuthorizable serviceUser) throws EnsureAuthorizableException {\n        final long start = System.currentTimeMillis();\n\n        try (ResourceResolver resourceResolver = resourceResolverFactory.getServiceResourceResolver(AUTH_INFO)){\n            if (Operation.ADD.equals(operation)) {\n                ensureExistance(resourceResolver, (ServiceUser) serviceUser);\n            } else if (Operation.REMOVE.equals(operation)) {\n                ensureRemoval(resourceResolver, (ServiceUser) serviceUser);\n            } else {\n                throw new EnsureAuthorizableException(\n                        \"Unable to determine Ensure Service User operation Could not create or locate value system user (it is null).\");\n            }\n\n            if (resourceResolver.hasChanges()) {\n                resourceResolver.commit();\n                log.debug(\"Persisted change to Service User [ {} ]\", serviceUser.getPrincipalName());\n            } else {\n                log.debug(\"No changes required for Service User [ {} ]. Skipping...\", serviceUser.getPrincipalName());\n            }\n\n            log.info(\n                    \"Successfully ensured [ {} ] of Service User [ {} ] in [ {} ms ]\",\n                    operation.toString(), getAuthorizable().getPrincipalName(),\n                            String.valueOf(System.currentTimeMillis() - start));\n        } catch (Exception e) {\n            throw new EnsureAuthorizableException(String.format(\"Failed to ensure [ %s ] of Service User [ %s ]\",\n                    operation.toString(), serviceUser.getPrincipalName()), e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Entry point for Ensuring a System User.", "call_func_name": ["java.lang.System.currentTimeMillis", "org.apache.sling.api.resource.ResourceResolverFactory.getServiceResourceResolver", "com.adobe.acs.commons.users.impl.Operation.equals", "com.adobe.acs.commons.users.impl.EnsureServiceUser.ensureExistance", "com.adobe.acs.commons.users.impl.EnsureServiceUser.ensureRemoval", "com.adobe.acs.commons.users.impl.EnsureAuthorizableException.<init>", "org.apache.sling.api.resource.ResourceResolver.hasChanges", "org.apache.sling.api.resource.ResourceResolver.commit", "com.adobe.acs.commons.users.impl.AbstractAuthorizable.getPrincipalName", "org.slf4j.Logger.debug", "com.adobe.acs.commons.users.impl.Operation.toString", "com.adobe.acs.commons.users.impl.EnsureServiceUser.getAuthorizable", "com.adobe.acs.commons.users.impl.ServiceUser.getPrincipalName", "java.lang.String.valueOf", "org.slf4j.Logger.info", "org.apache.sling.api.resource.ResourceResolver.close", "java.lang.Throwable.addSuppressed", "java.lang.String.format", "com.adobe.acs.commons.users.impl.EnsureAuthorizableException.<init>"], "call_func_parameter": [[""], ["java.util.Map"], ["java.lang.Object"], ["org.apache.sling.api.resource.ResourceResolver", "com.adobe.acs.commons.users.impl.ServiceUser"], ["org.apache.sling.api.resource.ResourceResolver", "com.adobe.acs.commons.users.impl.ServiceUser"], ["java.lang.String"], [""], [""], [""], ["java.lang.String", "java.lang.Object"], [""], [""], [""], ["long"], ["java.lang.String", "java.lang.Object[]"], [""], ["java.lang.Throwable"], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String", "java.lang.Exception"]], "passed_comments": [{"com.adobe.acs.commons.users.impl.EnsureServiceUser.ensureExistance": "Ensures that the provided ServiceUser and configured ACEs exist. Any extra ACEs will be removed, and any missing ACEs added."}, {"com.adobe.acs.commons.users.impl.EnsureServiceUser.ensureRemoval": "Ensures that the provided ServiceUser and any of its ACEs are removed."}, {"com.adobe.acs.commons.users.impl.EnsureServiceUser.getAuthorizable": "@return the Service User this OSGi Config represents"}]}, {"index": "1168", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/EnsureServiceUser.java", "methodName": "com.adobe.acs.commons.users.impl.EnsureServiceUser.ensureExistance", "methodParameterType": "ResourceResolver#ServiceUser#", "methodParameterName": "resourceResolver#serviceUser#", "methodBody": "@SuppressWarnings(\"squid:S2583\")\n    protected void ensureExistance(ResourceResolver resourceResolver, ServiceUser serviceUser)\n            throws RepositoryException, EnsureAuthorizableException {\n        final User systemUser = ensureSystemUser(resourceResolver, serviceUser);\n\n        if (systemUser != null) {\n            ensureAce.ensureAces(resourceResolver, systemUser, serviceUser);\n        } else {\n            log.error(\"Could not create or locate System User with principal name [ {} ]\",\n                    serviceUser.getPrincipalName());\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Ensures that the provided ServiceUser and configured ACEs exist. Any extra ACEs will be removed, and any missing ACEs added.", "call_func_name": ["com.adobe.acs.commons.users.impl.EnsureServiceUser.ensureSystemUser", "com.adobe.acs.commons.users.impl.EnsureAce.ensureAces", "com.adobe.acs.commons.users.impl.ServiceUser.getPrincipalName", "org.slf4j.Logger.error"], "call_func_parameter": [["org.apache.sling.api.resource.ResourceResolver", "com.adobe.acs.commons.users.impl.ServiceUser"], ["org.apache.sling.api.resource.ResourceResolver", "org.apache.jackrabbit.api.security.user.Authorizable", "com.adobe.acs.commons.users.impl.AbstractAuthorizable"], [""], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.users.impl.EnsureServiceUser.ensureSystemUser": "Ensures a System User exists with the principal name provided by the Service User configuration."}, {"com.adobe.acs.commons.users.impl.EnsureAce.ensureAces": "Ensures the ACEs for the Service User exists. Any extra ACEs for the Service User will be removed."}]}, {"index": "1169", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/EnsureServiceUser.java", "methodName": "com.adobe.acs.commons.users.impl.EnsureServiceUser.ensureRemoval", "methodParameterType": "ResourceResolver#ServiceUser#", "methodParameterName": "resourceResolver#serviceUser#", "methodBody": "private void ensureRemoval(ResourceResolver resourceResolver, ServiceUser serviceUser) throws RepositoryException,\n            EnsureAuthorizableException {\n        final User systemUser = findSystemUser(resourceResolver, serviceUser.getPrincipalName());\n\n        ensureAce.removeAces(resourceResolver, systemUser, serviceUser);\n\n        if (systemUser != null) {\n            systemUser.remove();\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Ensures that the provided ServiceUser and any of its ACEs are removed.", "call_func_name": ["com.adobe.acs.commons.users.impl.ServiceUser.getPrincipalName", "com.adobe.acs.commons.users.impl.EnsureServiceUser.findSystemUser", "com.adobe.acs.commons.users.impl.EnsureAce.removeAces", "org.apache.jackrabbit.api.security.user.User.remove"], "call_func_parameter": [[""], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String"], ["org.apache.sling.api.resource.ResourceResolver", "org.apache.jackrabbit.api.security.user.Authorizable", "com.adobe.acs.commons.users.impl.AbstractAuthorizable"], [""]], "passed_comments": [{"com.adobe.acs.commons.users.impl.EnsureServiceUser.findSystemUser": "Locates a System User by principal name, or null. Note, if a rep:User can be found but it is NOT a system user, this method will throw an exception."}, {"com.adobe.acs.commons.users.impl.EnsureAce.removeAces": "Removes all ACEs for the Service User principal (except those that live beneath the System User's rep:User node)"}]}, {"index": "1170", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/EnsureServiceUser.java", "methodName": "com.adobe.acs.commons.users.impl.EnsureServiceUser.ensureSystemUser", "methodParameterType": "ResourceResolver#ServiceUser#", "methodParameterName": "resourceResolver#serviceUser#", "methodBody": "private User ensureSystemUser(ResourceResolver resourceResolver, ServiceUser serviceUser)\n            throws RepositoryException, EnsureAuthorizableException {\n        User user = findSystemUser(resourceResolver, serviceUser.getPrincipalName());\n\n        if (user == null) {\n            final UserManager userManager = resourceResolver.adaptTo(UserManager.class);\n\n            // No principal found with this name; create the system user\n            log.debug(\"Requesting creation of system user [ {} ] at [ {} ]\", serviceUser.getPrincipalName(),\n                    serviceUser.getIntermediatePath());\n            user = userManager.createSystemUser(serviceUser.getPrincipalName(), serviceUser.getIntermediatePath());\n            log.debug(\"Created system user at [ {} ]\", user.getPath());\n        }\n\n        return user;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Ensures a System User exists with the principal name provided by the Service User configuration.", "call_func_name": ["com.adobe.acs.commons.users.impl.ServiceUser.getPrincipalName", "com.adobe.acs.commons.users.impl.EnsureServiceUser.findSystemUser", "org.apache.sling.api.resource.ResourceResolver.adaptTo", "com.adobe.acs.commons.users.impl.ServiceUser.getIntermediatePath", "org.slf4j.Logger.debug", "org.apache.jackrabbit.api.security.user.UserManager.createSystemUser", "org.apache.jackrabbit.api.security.user.User.getPath", "org.slf4j.Logger.debug"], "call_func_parameter": [[""], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String"], ["java.lang.Class"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.users.impl.EnsureServiceUser.findSystemUser": "Locates a System User by principal name, or null. Note, if a rep:User can be found but it is NOT a system user, this method will throw an exception."}]}, {"index": "1171", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/EnsureServiceUser.java", "methodName": "com.adobe.acs.commons.users.impl.EnsureServiceUser.findSystemUser", "methodParameterType": "ResourceResolver#String#", "methodParameterName": "resourceResolver#principalName#", "methodBody": "private User findSystemUser(ResourceResolver resourceResolver, String principalName) throws RepositoryException,\n            EnsureAuthorizableException {\n        UserManager userManager = resourceResolver.adaptTo(UserManager.class);\n        User user = null;\n\n        // Handle the actual user creation\n\n        Authorizable authorizable = userManager.getAuthorizable(principalName);\n\n        if (authorizable != null) {\n            // Am authorizable was found with this name; check if this is a system user\n            if (authorizable instanceof User) {\n                user = (User) authorizable;\n                if (!user.isSystemUser()) {\n                    throw new EnsureAuthorizableException(String.format(\n                            \"User [ %s ] ensureExistance at [ %s ] but is NOT a system user\", principalName,\n                            user.getPath()));\n                }\n            } else {\n                throw new EnsureAuthorizableException(String.format(\"Authorizable [ %s ] at [ %s ] is not a user\",\n                        principalName, authorizable.getPath()));\n            }\n        }\n\n        return user;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Locates a System User by principal name, or null. Note, if a rep:User can be found but it is NOT a system user, this method will throw an exception.", "call_func_name": ["org.apache.sling.api.resource.ResourceResolver.adaptTo", "org.apache.jackrabbit.api.security.user.UserManager.getAuthorizable", "org.apache.jackrabbit.api.security.user.User.isSystemUser", "org.apache.jackrabbit.api.security.user.User.getPath", "java.lang.String.format", "com.adobe.acs.commons.users.impl.EnsureAuthorizableException.<init>", "org.apache.jackrabbit.api.security.user.Authorizable.getPath"], "call_func_parameter": [["java.lang.Class"], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "1172", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/EnsureAce.java", "methodName": "com.adobe.acs.commons.users.impl.EnsureAce.ensureAces", "methodParameterType": "ResourceResolver#Authorizable#AbstractAuthorizable#", "methodParameterName": "resourceResolver#jcrAuthorizable#authorizable#", "methodBody": "@SuppressWarnings(\"squid:S3776\")\n    public int ensureAces(ResourceResolver resourceResolver, Authorizable jcrAuthorizable,\n            AbstractAuthorizable authorizable) throws RepositoryException {\n        int failures = 0;\n        final Session session = resourceResolver.adaptTo(Session.class);\n\n        final JackrabbitAccessControlManager accessControlManager =\n                (JackrabbitAccessControlManager) session.getAccessControlManager();\n        final List<JackrabbitAccessControlList> acls =\n                findAcls(resourceResolver, authorizable.getPrincipalName(), accessControlManager);\n\n        // For each rep:policy (ACL) this service user participates in ...\n        for (final JackrabbitAccessControlList acl : acls) {\n            final JackrabbitAccessControlEntry[] aces = (JackrabbitAccessControlEntry[]) acl.getAccessControlEntries();\n            final boolean serviceUserCoversThisPath = authorizable.hasAceAt(acl.getPath());\n\n            for (final JackrabbitAccessControlEntry ace : aces) {\n\n                if (!StringUtils.equals(authorizable.getPrincipalName(), ace.getPrincipal().getName())) {\n                    // Only care about ACEs that this service user participates in\n                    continue;\n                }\n\n                // Pertains to this service user\n                if (StringUtils.startsWith(acl.getPath(), jcrAuthorizable.getPath())) {\n                    // Skip the corner case of ACL's under the system user itself; Do nothing to these.\n\n                } else if (!serviceUserCoversThisPath) {\n                    // Remove all ACE's for this user from this ACL since this Service User is not configured to cover\n                    // this path\n                    log.debug(\"Service user does NOT cover the path yet has an ACE; ensure removal of the ace! {}\",\n                            ace.toString());\n                    acl.removeAccessControlEntry(ace);\n\n                } else {\n                    final Ace serviceUserAce = authorizable.getAce(ace, acl.getPath());\n                    if (serviceUserAce == null) {\n                        acl.removeAccessControlEntry(ace);\n                        log.debug(\"Removed System ACE as it doesn't exist in Service User [ {} ] configuration\",\n                                authorizable.getPrincipalName());\n                    } else {\n                        serviceUserAce.setExists(true);\n                        log.debug(\"No-op on System ACE as it already matches Service User [ {} ] configuration\",\n                                authorizable.getPrincipalName());\n\n                    }\n                }\n            }\n\n            accessControlManager.setPolicy(acl.getPath(), acl);\n        }\n\n        // Create an ACEs that do not yet exist\n        for (Ace ace : authorizable.getMissingAces()) {\n            if (resourceResolver.getResource(ace.getContentPath()) == null) {\n                log.warn(\n                        \"Unable to apply Service User [ {} ] privileges due to missing path at [ {} ]. Please create the path and re-ensure this service user.\",\n                        authorizable.getPrincipalName(), ace.getContentPath());\n                failures++;\n                continue;\n            }\n\n            final JackrabbitAccessControlList acl =\n                    AccessControlUtils.getAccessControlList(session, ace.getContentPath());\n            final Map<String, Value> restrictions = new HashMap<String, Value>();\n            final Map<String, Value[]> multiRestrictions = new HashMap<String, Value[]>();\n\n            final ValueFactory valueFactory = session.getValueFactory();\n\n            // Add rep:glob restriction\n            if (ace.hasRepGlob()) {\n                restrictions.put(AccessControlConstants.REP_GLOB,\n                        valueFactory.createValue(ace.getRepGlob(), PropertyType.STRING));\n            }\n\n            // Add rep:ntNames restriction\n            if (ace.hasRepNtNames()) {\n                multiRestrictions.put(AccessControlConstants.REP_NT_NAMES,\n                        getMultiValues(valueFactory, ace.getRepNtNames(), PropertyType.NAME));\n            }\n\n            // Add rep:itemNames\n            if (ace.hasRepItemNames()) {\n                multiRestrictions.put(AccessControlConstants.REP_ITEM_NAMES,\n                        getMultiValues(valueFactory, ace.getRepItemNames(), PropertyType.NAME));\n            }\n\n            // Add rep:prefixes\n            if (ace.hasRepPrefixes()) {\n                multiRestrictions.put(AccessControlConstants.REP_PREFIXES,\n                        getMultiValues(valueFactory, ace.getRepPrefixes(), PropertyType.STRING));\n            }\n\n            // Add ACE to the ACL\n            acl.addEntry(jcrAuthorizable.getPrincipal(),\n                    ace.getPrivileges(accessControlManager).toArray(new Privilege[] {}), ace.isAllow(), restrictions,\n                    multiRestrictions);\n\n            // Update the ACL on the content\n            accessControlManager.setPolicy(ace.getContentPath(), acl);\n\n            log.debug(\"Added Service User ACE for [ {} ] to [ {} ]\", authorizable.getPrincipalName(),\n                    ace.getContentPath());\n        }\n\n        return failures;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Block#SimpleName#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#ContinueStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#Dimension#ArrayType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#Dimension#ArrayType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#ArrayInitializer#ArrayCreation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block)Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer)ArrayInitializer)ArrayCreation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Ensures the ACEs for the Service User exists. Any extra ACEs for the Service User will be removed.", "call_func_name": ["org.apache.sling.api.resource.ResourceResolver.adaptTo", "javax.jcr.Session.getAccessControlManager", "com.adobe.acs.commons.users.impl.AbstractAuthorizable.getPrincipalName", "com.adobe.acs.commons.users.impl.EnsureAce.findAcls", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.jackrabbit.api.security.JackrabbitAccessControlList.getAccessControlEntries", "org.apache.jackrabbit.api.security.JackrabbitAccessControlList.getPath", "com.adobe.acs.commons.users.impl.AbstractAuthorizable.hasAceAt", "org.apache.jackrabbit.api.security.JackrabbitAccessControlEntry.getPrincipal", "java.security.Principal.getName", "org.apache.commons.lang.StringUtils.equals", "org.apache.jackrabbit.api.security.user.Authorizable.getPath", "org.apache.commons.lang.StringUtils.startsWith", "java.lang.Object.toString", "org.slf4j.Logger.debug", "org.apache.jackrabbit.api.security.JackrabbitAccessControlList.removeAccessControlEntry", "com.adobe.acs.commons.users.impl.AbstractAuthorizable.getAce", "com.adobe.acs.commons.users.impl.Ace.setExists", "org.apache.jackrabbit.api.security.JackrabbitAccessControlManager.setPolicy", "com.adobe.acs.commons.users.impl.AbstractAuthorizable.getMissingAces", "com.adobe.acs.commons.users.impl.Ace.getContentPath", "org.apache.sling.api.resource.ResourceResolver.getResource", "org.slf4j.Logger.warn", "org.apache.jackrabbit.commons.jackrabbit.authorization.AccessControlUtils.getAccessControlList", "java.util.HashMap.<init>", "javax.jcr.Session.getValueFactory", "com.adobe.acs.commons.users.impl.Ace.hasRepGlob", "com.adobe.acs.commons.users.impl.Ace.getRepGlob", "javax.jcr.ValueFactory.createValue", "java.util.Map.put", "com.adobe.acs.commons.users.impl.Ace.hasRepNtNames", "com.adobe.acs.commons.users.impl.Ace.getRepNtNames", "com.adobe.acs.commons.users.impl.EnsureAce.getMultiValues", "com.adobe.acs.commons.users.impl.Ace.hasRepItemNames", "com.adobe.acs.commons.users.impl.Ace.getRepItemNames", "com.adobe.acs.commons.users.impl.Ace.hasRepPrefixes", "com.adobe.acs.commons.users.impl.Ace.getRepPrefixes", "org.apache.jackrabbit.api.security.user.Authorizable.getPrincipal", "com.adobe.acs.commons.users.impl.Ace.getPrivileges", "java.util.List.toArray", "com.adobe.acs.commons.users.impl.Ace.isAllow", "org.apache.jackrabbit.api.security.JackrabbitAccessControlList.addEntry", "org.slf4j.Logger.debug"], "call_func_parameter": [["java.lang.Class"], [""], [""], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String", "org.apache.jackrabbit.api.security.JackrabbitAccessControlManager"], [""], [""], [""], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.Object"], ["javax.jcr.security.AccessControlEntry"], ["org.apache.jackrabbit.api.security.JackrabbitAccessControlEntry", "java.lang.String"], ["boolean"], ["java.lang.String", "javax.jcr.security.AccessControlPolicy"], [""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["javax.jcr.Session", "java.lang.String"], [""], [""], [""], [""], ["java.lang.String", "int"], ["java.lang.Object", "java.lang.Object"], [""], [""], ["javax.jcr.ValueFactory", "java.util.List", "int"], [""], [""], [""], [""], [""], ["javax.jcr.security.AccessControlManager"], ["java.lang.Object[]"], [""], ["java.security.Principal", "javax.jcr.security.Privilege[]", "boolean", "java.util.Map", "java.util.Map"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.users.impl.EnsureAce.findAcls": "Locates by query all the ACLs that the principal participates in."}, {"com.adobe.acs.commons.users.impl.Ace.getRepGlob": "rep:glob"}, {"com.adobe.acs.commons.users.impl.Ace.getRepNtNames": "rep:ntNames"}, {"com.adobe.acs.commons.users.impl.EnsureAce.getMultiValues": "Helper function that returns a list of Strings into an Array of Value's"}, {"com.adobe.acs.commons.users.impl.Ace.getRepItemNames": "rep:itemNames"}, {"com.adobe.acs.commons.users.impl.Ace.getRepPrefixes": "rep:prefixes"}]}, {"index": "1173", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/EnsureAce.java", "methodName": "com.adobe.acs.commons.users.impl.EnsureAce.removeAces", "methodParameterType": "ResourceResolver#Authorizable#AbstractAuthorizable#", "methodParameterName": "resourceResolver#jcrAuthorizable#authorizable#", "methodBody": "public void removeAces(ResourceResolver resourceResolver, Authorizable jcrAuthorizable,\n            AbstractAuthorizable authorizable) throws RepositoryException {\n        final Session session = resourceResolver.adaptTo(Session.class);\n\n        final JackrabbitAccessControlManager accessControlManager =\n                (JackrabbitAccessControlManager) session.getAccessControlManager();\n        final List<JackrabbitAccessControlList> acls =\n                findAcls(resourceResolver, authorizable.getPrincipalName(), accessControlManager);\n\n        for (final JackrabbitAccessControlList acl : acls) {\n            final JackrabbitAccessControlEntry[] aces = (JackrabbitAccessControlEntry[]) acl.getAccessControlEntries();\n\n            // Check all the existing ACEs in the ACL\n            for (JackrabbitAccessControlEntry ace : aces) {\n                if (StringUtils.equals(authorizable.getPrincipalName(), ace.getPrincipal().getName())) {\n                    if (jcrAuthorizable != null && StringUtils.startsWith(acl.getPath(), jcrAuthorizable.getPath())) {\n                        // Skip! Don't ensureRemoval ACE's from the system user itself!\n                    } else {\n                        acl.removeAccessControlEntry(ace);\n                    }\n                }\n            }\n\n            accessControlManager.setPolicy(acl.getPath(), acl);\n            log.debug(\"Removed ACE from ACL at [ {} ] for [ {} ]\", acl.getPath(), authorizable.getPrincipalName());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Removes all ACEs for the Service User principal (except those that live beneath the System User's rep:User node)", "call_func_name": ["org.apache.sling.api.resource.ResourceResolver.adaptTo", "javax.jcr.Session.getAccessControlManager", "com.adobe.acs.commons.users.impl.AbstractAuthorizable.getPrincipalName", "com.adobe.acs.commons.users.impl.EnsureAce.findAcls", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.jackrabbit.api.security.JackrabbitAccessControlList.getAccessControlEntries", "org.apache.jackrabbit.api.security.JackrabbitAccessControlEntry.getPrincipal", "java.security.Principal.getName", "org.apache.commons.lang.StringUtils.equals", "org.apache.jackrabbit.api.security.JackrabbitAccessControlList.getPath", "org.apache.jackrabbit.api.security.user.Authorizable.getPath", "org.apache.commons.lang.StringUtils.startsWith", "org.apache.jackrabbit.api.security.JackrabbitAccessControlList.removeAccessControlEntry", "org.apache.jackrabbit.api.security.JackrabbitAccessControlManager.setPolicy", "org.slf4j.Logger.debug"], "call_func_parameter": [["java.lang.Class"], [""], [""], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String", "org.apache.jackrabbit.api.security.JackrabbitAccessControlManager"], [""], [""], [""], [""], [""], [""], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], ["javax.jcr.security.AccessControlEntry"], ["java.lang.String", "javax.jcr.security.AccessControlPolicy"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.users.impl.EnsureAce.findAcls": "Locates by query all the ACLs that the principal participates in."}]}, {"index": "1174", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/EnsureAce.java", "methodName": "com.adobe.acs.commons.users.impl.EnsureAce.findAcls", "methodParameterType": "ResourceResolver#String#JackrabbitAccessControlManager#", "methodParameterName": "resourceResolver#principalName#accessControlManager#", "methodBody": "private List<JackrabbitAccessControlList> findAcls(ResourceResolver resourceResolver, String principalName,\n            JackrabbitAccessControlManager accessControlManager) {\n        final Set<String> paths = new HashSet<String>();\n        final List<JackrabbitAccessControlList> acls = new ArrayList<JackrabbitAccessControlList>();\n\n        final Map<String, String> params = new HashMap<String, String>();\n\n        params.put(\"type\", AccessControlConstants.NT_REP_ACE);\n        params.put(\"property\", AccessControlConstants.REP_PRINCIPAL_NAME);\n        params.put(\"property.value\", principalName);\n        params.put(\"p.limit\", \"-1\");\n\n        try (CloseableQuery query = queryBuilder.createQuery(PredicateGroup.create(params), resourceResolver)) {\n            for (final Hit hit : query.getResult().getHits()) {\n                try {\n                    final Resource aceResource = resourceResolver.getResource(hit.getPath());\n\n                    // first parent is the rep:policy node\n                    // second parent (grand-parent) is the content node this ACE controls\n                    // that is the node we need to use the JackrabbitAccessControlManager api\n                    final Resource contentResource = aceResource.getParent().getParent();\n\n                    if (!paths.contains(contentResource.getPath())) {\n                        paths.add(contentResource.getPath());\n                        for (AccessControlPolicy policy : accessControlManager.getPolicies(contentResource.getPath())) {\n                            if (policy instanceof JackrabbitAccessControlList) {\n                                acls.add((JackrabbitAccessControlList) policy);\n                                break;\n                            }\n                        }\n                    }\n                } catch (RepositoryException e) {\n                    log.error(\"Failed to get resource for query result.\", e);\n                }\n            }\n        }\n\n        return acls;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#BreakStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#Block#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement)Block)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Locates by query all the ACLs that the principal participates in.", "call_func_name": ["java.util.HashSet.<init>", "java.util.ArrayList.<init>", "java.util.HashMap.<init>", "java.util.Map.put", "com.day.cq.search.PredicateGroup.create", "com.adobe.acs.commons.search.CloseableQueryBuilder.createQuery", "com.adobe.acs.commons.search.CloseableQuery.getResult", "com.day.cq.search.result.SearchResult.getHits", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.day.cq.search.result.Hit.getPath", "org.apache.sling.api.resource.ResourceResolver.getResource", "org.apache.sling.api.resource.Resource.getParent", "org.apache.sling.api.resource.Resource.getPath", "java.util.Set.contains", "java.util.Set.add", "org.apache.jackrabbit.api.security.JackrabbitAccessControlManager.getPolicies", "java.util.List.add", "org.slf4j.Logger.error", "com.adobe.acs.commons.search.CloseableQuery.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [[""], [""], [""], ["java.lang.Object", "java.lang.Object"], ["java.util.Map"], ["com.day.cq.search.PredicateGroup", "org.apache.sling.api.resource.ResourceResolver"], [""], [""], [""], [""], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String", "java.lang.Throwable"], [""], ["java.lang.Throwable"]], "passed_comments": [{"com.adobe.acs.commons.search.CloseableQueryBuilder.createQuery": "Create a closeable query around the provided predicate group."}]}, {"index": "1175", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/EnsureAce.java", "methodName": "com.adobe.acs.commons.users.impl.EnsureAce.getMultiValues", "methodParameterType": "ValueFactory#List<String>#int#", "methodParameterName": "valueFactory#valueStrs#propertyType#", "methodBody": "private Value[] getMultiValues(ValueFactory valueFactory, List<String> valueStrs, int propertyType)\n            throws ValueFormatException {\n        final List<Value> result = new ArrayList<Value>();\n\n        for (final String valueStr : valueStrs) {\n            result.add(valueFactory.createValue(valueStr, propertyType));\n        }\n\n        return result.toArray(new Value[result.size()]);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Helper function that returns a list of Strings into an Array of Value's", "call_func_name": ["java.util.ArrayList.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "javax.jcr.ValueFactory.createValue", "java.util.List.add", "java.util.List.size", "java.util.List.toArray"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String", "int"], ["java.lang.Object"], [""], ["java.lang.Object[]"]], "passed_comments": "/"}, {"index": "1176", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/EnsureGroup.java", "methodName": "com.adobe.acs.commons.users.impl.EnsureGroup.getOperation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Operation getOperation() {\n        return operation;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the Operation this OSGi Config represents", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1177", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/EnsureGroup.java", "methodName": "com.adobe.acs.commons.users.impl.EnsureGroup.getAuthorizable", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Group getAuthorizable() {\n        return group;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the Service User this OSGi Config represents", "call_func_name": ["com.adobe.acs.commons.users.impl.EnsureGroup.getAuthorizable"], "call_func_parameter": [[""]], "passed_comments": [{"com.adobe.acs.commons.users.impl.EnsureGroup.getAuthorizable": "@return the Service User this OSGi Config represents"}]}, {"index": "1178", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/EnsureGroup.java", "methodName": "com.adobe.acs.commons.users.impl.EnsureGroup.ensure", "methodParameterType": "Operation#AbstractAuthorizable#", "methodParameterName": "operation#group#", "methodBody": "@Override\n    public void ensure(Operation operation, AbstractAuthorizable group) throws EnsureAuthorizableException {\n        final long start = System.currentTimeMillis();\n\n        try (ResourceResolver resourceResolver = resourceResolverFactory.getServiceResourceResolver(AUTH_INFO)){\n\n            if (Operation.ADD.equals(operation)) {\n                ensureExistance(resourceResolver, (Group) group);\n            } else if (Operation.REMOVE.equals(operation)) {\n                ensureRemoval(resourceResolver, (Group) group);\n            } else {\n                throw new EnsureAuthorizableException(\n                        \"Unable to determine Ensure Group operation Could not create or locate value group (it is null).\");\n            }\n\n            if (resourceResolver.hasChanges()) {\n                resourceResolver.commit();\n                log.debug(\"Persisted change to Group [ {} ]\", group.getPrincipalName());\n            } else {\n                log.debug(\"No changes required for Group [ {} ]. Skipping...\", group.getPrincipalName());\n            }\n\n            log.info(\"Successfully ensured [ {} ] of Group [ {} ] in [ {} ms ]\", operation.toString(),\n                    getAuthorizable().getPrincipalName(), String.valueOf(System.currentTimeMillis() - start));\n        } catch (Exception e) {\n            throw new EnsureAuthorizableException(String.format(\"Failed to ensure [ %s ] of Group [ %s ]\",\n                    operation.toString(), group.getPrincipalName()), e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Entry point for Ensuring a Group.", "call_func_name": ["java.lang.System.currentTimeMillis", "org.apache.sling.api.resource.ResourceResolverFactory.getServiceResourceResolver", "com.adobe.acs.commons.users.impl.Operation.equals", "com.adobe.acs.commons.users.impl.EnsureGroup.ensureExistance", "com.adobe.acs.commons.users.impl.EnsureGroup.ensureRemoval", "com.adobe.acs.commons.users.impl.EnsureAuthorizableException.<init>", "org.apache.sling.api.resource.ResourceResolver.hasChanges", "org.apache.sling.api.resource.ResourceResolver.commit", "com.adobe.acs.commons.users.impl.AbstractAuthorizable.getPrincipalName", "org.slf4j.Logger.debug", "com.adobe.acs.commons.users.impl.Operation.toString", "com.adobe.acs.commons.users.impl.EnsureGroup.getAuthorizable", "com.adobe.acs.commons.users.impl.Group.getPrincipalName", "java.lang.String.valueOf", "org.slf4j.Logger.info", "org.apache.sling.api.resource.ResourceResolver.close", "java.lang.Throwable.addSuppressed", "java.lang.String.format", "com.adobe.acs.commons.users.impl.EnsureAuthorizableException.<init>"], "call_func_parameter": [[""], ["java.util.Map"], ["java.lang.Object"], ["org.apache.sling.api.resource.ResourceResolver", "com.adobe.acs.commons.users.impl.Group"], ["org.apache.sling.api.resource.ResourceResolver", "com.adobe.acs.commons.users.impl.Group"], ["java.lang.String"], [""], [""], [""], ["java.lang.String", "java.lang.Object"], [""], [""], [""], ["long"], ["java.lang.String", "java.lang.Object[]"], [""], ["java.lang.Throwable"], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String", "java.lang.Exception"]], "passed_comments": [{"com.adobe.acs.commons.users.impl.EnsureGroup.ensureExistance": "Ensures that the provided Group and configured ACEs exist. Any extra ACEs will be removed, and any missing ACEs added."}, {"com.adobe.acs.commons.users.impl.EnsureGroup.ensureRemoval": "Ensures that the provided Group and any of its ACEs are removed."}, {"com.adobe.acs.commons.users.impl.EnsureGroup.getAuthorizable": "@return the Service User this OSGi Config represents"}]}, {"index": "1179", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/EnsureGroup.java", "methodName": "com.adobe.acs.commons.users.impl.EnsureGroup.ensureExistance", "methodParameterType": "ResourceResolver#Group#", "methodParameterName": "resourceResolver#group#", "methodBody": "@SuppressWarnings(\"squid:S2583\")\n    protected void ensureExistance(ResourceResolver resourceResolver, Group group) throws RepositoryException,\n            EnsureAuthorizableException {\n        final org.apache.jackrabbit.api.security.user.Group jcrGroup = ensureGroup(resourceResolver, group);\n\n        if (jcrGroup != null) {\n            ensureAce.ensureAces(resourceResolver, jcrGroup, group);\n            ensureMembership(resourceResolver, jcrGroup, group);\n        } else {\n            log.error(\"Could not create or locate Group with principal name [ {} ]\", group.getPrincipalName());\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Ensures that the provided Group and configured ACEs exist. Any extra ACEs will be removed, and any missing ACEs added.", "call_func_name": ["com.adobe.acs.commons.users.impl.EnsureGroup.ensureGroup", "com.adobe.acs.commons.users.impl.EnsureAce.ensureAces", "com.adobe.acs.commons.users.impl.EnsureGroup.ensureMembership", "com.adobe.acs.commons.users.impl.Group.getPrincipalName", "org.slf4j.Logger.error"], "call_func_parameter": [["org.apache.sling.api.resource.ResourceResolver", "com.adobe.acs.commons.users.impl.Group"], ["org.apache.sling.api.resource.ResourceResolver", "org.apache.jackrabbit.api.security.user.Authorizable", "com.adobe.acs.commons.users.impl.AbstractAuthorizable"], ["org.apache.sling.api.resource.ResourceResolver", "org.apache.jackrabbit.api.security.user.Group", "com.adobe.acs.commons.users.impl.Group"], [""], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.users.impl.EnsureGroup.ensureGroup": "Ensures a Group exists with the principal name provided by the Group configuration."}, {"com.adobe.acs.commons.users.impl.EnsureAce.ensureAces": "Ensures the ACEs for the Service User exists. Any extra ACEs for the Service User will be removed."}, {"com.adobe.acs.commons.users.impl.EnsureGroup.ensureMembership": "Ensure the group is direct member of all groups listed in the Ensure Group config. Any extra memberships are removed."}]}, {"index": "1180", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/EnsureGroup.java", "methodName": "com.adobe.acs.commons.users.impl.EnsureGroup.ensureRemoval", "methodParameterType": "ResourceResolver#Group#", "methodParameterName": "resourceResolver#group#", "methodBody": "@SuppressWarnings(\"squid:S2589\")\n    private void ensureRemoval(ResourceResolver resourceResolver, Group group) throws RepositoryException,\n            EnsureAuthorizableException {\n        org.apache.jackrabbit.api.security.user.Group jcrGroup = findGroup(resourceResolver, group.getPrincipalName());\n\n        ensureAce.removeAces(resourceResolver, jcrGroup, group);\n\n        if (jcrGroup != null) {\n            ensureRemoveMembership(jcrGroup);\n            jcrGroup.remove();\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Ensures that the provided Group and any of its ACEs are removed.", "call_func_name": ["com.adobe.acs.commons.users.impl.Group.getPrincipalName", "com.adobe.acs.commons.users.impl.EnsureGroup.findGroup", "com.adobe.acs.commons.users.impl.EnsureAce.removeAces", "com.adobe.acs.commons.users.impl.EnsureGroup.ensureRemoveMembership", "org.apache.jackrabbit.api.security.user.Group.remove"], "call_func_parameter": [[""], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String"], ["org.apache.sling.api.resource.ResourceResolver", "org.apache.jackrabbit.api.security.user.Authorizable", "com.adobe.acs.commons.users.impl.AbstractAuthorizable"], ["org.apache.jackrabbit.api.security.user.Group"], [""]], "passed_comments": [{"com.adobe.acs.commons.users.impl.EnsureGroup.findGroup": "Locates a Group by principal name, or null."}, {"com.adobe.acs.commons.users.impl.EnsureAce.removeAces": "Removes all ACEs for the Service User principal (except those that live beneath the System User's rep:User node)"}, {"com.adobe.acs.commons.users.impl.EnsureGroup.ensureRemoveMembership": "Remove the group from all groups it belongs to."}]}, {"index": "1181", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/EnsureGroup.java", "methodName": "com.adobe.acs.commons.users.impl.EnsureGroup.ensureGroup", "methodParameterType": "ResourceResolver#Group#", "methodParameterName": "resourceResolver#group#", "methodBody": "private org.apache.jackrabbit.api.security.user.Group ensureGroup(ResourceResolver resourceResolver, Group group)\n            throws RepositoryException, EnsureAuthorizableException {\n        org.apache.jackrabbit.api.security.user.Group jcrGroup = findGroup(resourceResolver, group.getPrincipalName());\n\n        if (jcrGroup == null) {\n            final UserManager userManager = resourceResolver.adaptTo(UserManager.class);\n\n            // No principal found with this name; create the group\n            log.debug(\"Requesting creation of group [ {} ] at [ {} ]\", group.getPrincipalName(),\n                    group.getIntermediatePath());\n\n            jcrGroup = userManager.createGroup(new PrincipalImpl(group.getPrincipalName()), group.getIntermediatePath());\n            log.debug(\"Created group at [ {} ]\", jcrGroup.getPath());\n        }\n\n        return jcrGroup;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Ensures a Group exists with the principal name provided by the Group configuration.", "call_func_name": ["com.adobe.acs.commons.users.impl.Group.getPrincipalName", "com.adobe.acs.commons.users.impl.EnsureGroup.findGroup", "org.apache.sling.api.resource.ResourceResolver.adaptTo", "com.adobe.acs.commons.users.impl.Group.getIntermediatePath", "org.slf4j.Logger.debug", "org.apache.jackrabbit.oak.spi.security.principal.PrincipalImpl.<init>", "org.apache.jackrabbit.api.security.user.UserManager.createGroup", "org.apache.jackrabbit.api.security.user.Group.getPath", "org.slf4j.Logger.debug"], "call_func_parameter": [[""], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String"], ["java.lang.Class"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.String"], ["java.security.Principal", "java.lang.String"], [""], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.users.impl.EnsureGroup.findGroup": "Locates a Group by principal name, or null."}]}, {"index": "1182", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/EnsureGroup.java", "methodName": "com.adobe.acs.commons.users.impl.EnsureGroup.findGroup", "methodParameterType": "ResourceResolver#String#", "methodParameterName": "resourceResolver#principalName#", "methodBody": "private org.apache.jackrabbit.api.security.user.Group findGroup(ResourceResolver resourceResolver,\n            String principalName) throws RepositoryException, EnsureAuthorizableException {\n        UserManager userManager = resourceResolver.adaptTo(UserManager.class);\n        org.apache.jackrabbit.api.security.user.Group jcrGroup = null;\n\n        Authorizable authorizable = userManager.getAuthorizable(principalName);\n\n        if (authorizable != null) {\n            // Am authorizable was found with this name; check if this is a group\n            if (authorizable instanceof org.apache.jackrabbit.api.security.user.Group) {\n                jcrGroup = (org.apache.jackrabbit.api.security.user.Group) authorizable;\n            } else {\n                throw new EnsureAuthorizableException(String.format(\"Authorizable [ %s ] at [ %s ] is not a group\",\n                        principalName, authorizable.getPath()));\n            }\n        }\n\n        return jcrGroup;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#CastExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)InstanceofExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Locates a Group by principal name, or null.", "call_func_name": ["org.apache.sling.api.resource.ResourceResolver.adaptTo", "org.apache.jackrabbit.api.security.user.UserManager.getAuthorizable", "org.apache.jackrabbit.api.security.user.Authorizable.getPath", "java.lang.String.format", "com.adobe.acs.commons.users.impl.EnsureAuthorizableException.<init>"], "call_func_parameter": [["java.lang.Class"], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "1183", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/EnsureGroup.java", "methodName": "com.adobe.acs.commons.users.impl.EnsureGroup.ensureMembership", "methodParameterType": "ResourceResolver#org.apache.jackrabbit.api.security.user.Group#Group#", "methodParameterName": "resourceResolver#jcrGroup#group#", "methodBody": "private void ensureMembership(ResourceResolver resourceResolver,\n            org.apache.jackrabbit.api.security.user.Group jcrGroup, Group group) throws EnsureAuthorizableException,\n            RepositoryException {\n        UserManager userManager = resourceResolver.adaptTo(UserManager.class);\n\n        List<String> memberOf = group.getMemberOf();\n        Iterator<org.apache.jackrabbit.api.security.user.Group> groupIterator = jcrGroup.declaredMemberOf();\n        // for each group this group is a member of, check if it should be per config, if not remove it. if yes,\n        // mark it as already added\n        while (groupIterator.hasNext()) {\n            org.apache.jackrabbit.api.security.user.Group next = groupIterator.next();\n            String groupName = next.getPrincipal().getName();\n            if (!memberOf.contains(groupName)) {\n                // remove\n                next.removeMember(jcrGroup);\n            } else {\n                // mark as satisfied\n                group.addMembership(groupName);\n            }\n        }\n\n        for (String groupName : group.getMissingMemberOf()) {\n            Authorizable authorizable = userManager.getAuthorizable(groupName);\n            if (authorizable != null) {\n                if (authorizable instanceof org.apache.jackrabbit.api.security.user.Group) {\n                    org.apache.jackrabbit.api.security.user.Group groupToAdd =\n                            (org.apache.jackrabbit.api.security.user.Group) authorizable;\n                    groupToAdd.addMember(jcrGroup);\n                } else {\n                    throw new EnsureAuthorizableException(String.format(\n                            \"Authorizable [ %s ] at [ %s ] is not a group\", groupName, authorizable.getPath()));\n                }\n            }\n        }\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#WhileStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#InstanceofExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)WhileStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Ensure the group is direct member of all groups listed in the Ensure Group config. Any extra memberships are removed.", "call_func_name": ["org.apache.sling.api.resource.ResourceResolver.adaptTo", "com.adobe.acs.commons.users.impl.Group.getMemberOf", "org.apache.jackrabbit.api.security.user.Group.declaredMemberOf", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.jackrabbit.api.security.user.Group.getPrincipal", "java.security.Principal.getName", "java.util.List.contains", "org.apache.jackrabbit.api.security.user.Group.removeMember", "com.adobe.acs.commons.users.impl.Group.addMembership", "com.adobe.acs.commons.users.impl.Group.getMissingMemberOf", "java.util.List.iterator", "org.apache.jackrabbit.api.security.user.UserManager.getAuthorizable", "org.apache.jackrabbit.api.security.user.Group.addMember", "org.apache.jackrabbit.api.security.user.Authorizable.getPath", "java.lang.String.format", "com.adobe.acs.commons.users.impl.EnsureAuthorizableException.<init>"], "call_func_parameter": [["java.lang.Class"], [""], [""], [""], [""], [""], [""], ["java.lang.Object"], ["org.apache.jackrabbit.api.security.user.Authorizable"], ["java.lang.String"], [""], [""], ["java.lang.String"], ["org.apache.jackrabbit.api.security.user.Authorizable"], [""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "1184", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/EnsureGroup.java", "methodName": "com.adobe.acs.commons.users.impl.EnsureGroup.ensureRemoveMembership", "methodParameterType": "org.apache.jackrabbit.api.security.user.Group#", "methodParameterName": "jcrGroup#", "methodBody": "private void ensureRemoveMembership(org.apache.jackrabbit.api.security.user.Group jcrGroup)\n            throws RepositoryException {\n        Iterator<org.apache.jackrabbit.api.security.user.Group> groupIterator = jcrGroup.declaredMemberOf();\n        while (groupIterator.hasNext()) {\n            org.apache.jackrabbit.api.security.user.Group next = groupIterator.next();\n            // remove\n            next.removeMember(jcrGroup);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement)Block)MethodDeclaration", "methodDoc": "Remove the group from all groups it belongs to.", "call_func_name": ["org.apache.jackrabbit.api.security.user.Group.declaredMemberOf", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.jackrabbit.api.security.user.Group.removeMember"], "call_func_parameter": [[""], [""], [""], ["org.apache.jackrabbit.api.security.user.Authorizable"]], "passed_comments": "/"}, {"index": "1185", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/Ace.java", "methodName": "com.adobe.acs.commons.users.impl.Ace.getRepGlob", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRepGlob() {\n        return repGlob;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "rep:glob", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1186", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/Ace.java", "methodName": "com.adobe.acs.commons.users.impl.Ace.getRepNtNames", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<String> getRepNtNames() {\n        return repNtNames;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "rep:ntNames", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1187", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/Ace.java", "methodName": "com.adobe.acs.commons.users.impl.Ace.getRepItemNames", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<String> getRepItemNames() {\n        return repItemNames;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "rep:itemNames", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1188", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/Ace.java", "methodName": "com.adobe.acs.commons.users.impl.Ace.getRepPrefixes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<String> getRepPrefixes() {\n        return repPrefixes;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "rep:prefixes", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1189", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/users/impl/Ace.java", "methodName": "com.adobe.acs.commons.users.impl.Ace.isSameAs", "methodParameterType": "JackrabbitAccessControlEntry#", "methodParameterName": "actual#", "methodBody": "public boolean isSameAs(JackrabbitAccessControlEntry actual) throws RepositoryException {\n        // Allow vs Deny\n        if (actual.isAllow() != this.isAllow()) {\n            return false;\n        }\n\n        // Privileges\n        final List<String> actualPrivileges = Arrays.asList(AccessControlUtils.namesFromPrivileges(actual.getPrivileges()));\n        if (!CollectionUtils.isEqualCollection(actualPrivileges, getPrivilegeNames())) {\n            return false;\n        }\n\n        // rep:glob\n\n        // We are converting the single value RepGlob into a List for convenience\n        if(!isRestrictionValid(this.hasRepGlob(), actual.getRestrictions(AccessControlConstants.REP_GLOB), Arrays.asList(new String[]{this.getRepGlob()}))) {\n            return false;\n        }\n\n        // rep:ntNames\n        if(!isRestrictionValid(this.hasRepNtNames(), actual.getRestrictions(AccessControlConstants.REP_NT_NAMES), this.getRepNtNames())) {\n            return false;\n        }\n\n        // rep:itemNames\n        if(!isRestrictionValid(this.hasRepItemNames(), actual.getRestrictions(AccessControlConstants.REP_ITEM_NAMES), this.getRepItemNames())) {\n            return false;\n        }\n\n        // rep:prefixes\n        if(!isRestrictionValid(this.hasRepPrefixes(), actual.getRestrictions(AccessControlConstants.REP_PREFIXES), this.getRepPrefixes())) {\n            return false;\n        }\n\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ThisExpression#SimpleName#MethodInvocation#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#ThisExpression#SimpleName#MethodInvocation#ArrayInitializer#ArrayCreation#MethodInvocation#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ThisExpression#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ThisExpression#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ThisExpression#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ArrayInitializer)ArrayCreation)MethodInvocation)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines if the configured ACE is the same as the actual ACE in the JCR.", "call_func_name": ["org.apache.jackrabbit.api.security.JackrabbitAccessControlEntry.isAllow", "com.adobe.acs.commons.users.impl.Ace.isAllow", "org.apache.jackrabbit.api.security.JackrabbitAccessControlEntry.getPrivileges", "org.apache.jackrabbit.commons.jackrabbit.authorization.AccessControlUtils.namesFromPrivileges", "java.util.Arrays.asList", "com.adobe.acs.commons.users.impl.Ace.getPrivilegeNames", "org.apache.commons.collections.CollectionUtils.isEqualCollection", "com.adobe.acs.commons.users.impl.Ace.hasRepGlob", "org.apache.jackrabbit.api.security.JackrabbitAccessControlEntry.getRestrictions", "com.adobe.acs.commons.users.impl.Ace.getRepGlob", "com.adobe.acs.commons.users.impl.Ace.isRestrictionValid", "com.adobe.acs.commons.users.impl.Ace.hasRepNtNames", "com.adobe.acs.commons.users.impl.Ace.getRepNtNames", "com.adobe.acs.commons.users.impl.Ace.hasRepItemNames", "com.adobe.acs.commons.users.impl.Ace.getRepItemNames", "com.adobe.acs.commons.users.impl.Ace.hasRepPrefixes", "com.adobe.acs.commons.users.impl.Ace.getRepPrefixes"], "call_func_parameter": [[""], [""], [""], ["javax.jcr.security.Privilege[]"], ["java.lang.Object[]"], [""], ["java.util.Collection", "java.util.Collection"], [""], ["java.lang.String"], [""], ["boolean", "javax.jcr.Value[]", "java.util.List"], [""], [""], [""], [""], [""], [""]], "passed_comments": [{"com.adobe.acs.commons.users.impl.Ace.getRepGlob": "rep:glob"}, {"com.adobe.acs.commons.users.impl.Ace.getRepNtNames": "rep:ntNames"}, {"com.adobe.acs.commons.users.impl.Ace.getRepItemNames": "rep:itemNames"}, {"com.adobe.acs.commons.users.impl.Ace.getRepPrefixes": "rep:prefixes"}]}, {"index": "1190", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/tags/PlaceholderTag.java", "methodName": "com.adobe.acs.commons.wcm.tags.PlaceholderTag.doStartTag", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public int doStartTag() throws JspException {\n        SlingHttpServletRequest request = TagUtil.getRequest(pageContext);\n        if (ModeUtil.isEdit(request)) {\n            return EVAL_BODY_BUFFERED;\n        } else {\n            return SKIP_BODY;\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.sling.scripting.jsp.util.TagUtil.getRequest", "com.adobe.acs.commons.util.ModeUtil.isEdit"], "call_func_parameter": [["javax.servlet.jsp.PageContext"], ["org.apache.sling.api.SlingHttpServletRequest"]], "passed_comments": [{"com.adobe.acs.commons.util.ModeUtil.isEdit": "Checks if the request is in mode  {@link WCMMode#EDIT}"}]}, {"index": "1191", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/tags/PlaceholderTag.java", "methodName": "com.adobe.acs.commons.wcm.tags.PlaceholderTag.doEndTag", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public int doEndTag() throws JspException {\n        SlingHttpServletRequest request = TagUtil.getRequest(pageContext);\n        Component component = WCMUtils.getComponent(request.getResource());\n        if (ModeUtil.isEdit(request)) {\n            JspWriter writer = pageContext.getOut();\n            String placeholder;\n\n            String bodyContentString = bodyContent != null ? bodyContent.getString() : null;\n            if (StringUtils.isNotBlank(bodyContentString)) {\n                // use the body content as the default placeholder\n                placeholder = Placeholder.getDefaultPlaceholder(request, component, bodyContentString, getDdClass());\n            } else {\n                String classicUIPlaceholder = componentHelper.generateClassicUIPlaceholder(getAllClassNames(), null);\n                placeholder = Placeholder.getDefaultPlaceholder(request, component, classicUIPlaceholder, getDdClass());\n            }\n\n            try {\n                writer.print(placeholder);\n            } catch (IOException e) {\n                throw new JspException(e);\n            }\n\n        }\n        reset();\n        return EVAL_PAGE;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.sling.scripting.jsp.util.TagUtil.getRequest", "org.apache.sling.api.SlingHttpServletRequest.getResource", "com.day.cq.wcm.commons.WCMUtils.getComponent", "com.adobe.acs.commons.util.ModeUtil.isEdit", "javax.servlet.jsp.PageContext.getOut", "javax.servlet.jsp.tagext.BodyContent.getString", "org.apache.commons.lang.StringUtils.isNotBlank", "com.adobe.acs.commons.wcm.tags.PlaceholderTag.getDdClass", "com.day.cq.wcm.foundation.Placeholder.getDefaultPlaceholder", "com.adobe.acs.commons.wcm.tags.PlaceholderTag.getAllClassNames", "com.adobe.acs.commons.wcm.ComponentHelper.generateClassicUIPlaceholder", "javax.servlet.jsp.JspWriter.print", "javax.servlet.jsp.JspException.<init>", "com.adobe.acs.commons.wcm.tags.PlaceholderTag.reset"], "call_func_parameter": [["javax.servlet.jsp.PageContext"], [""], ["org.apache.sling.api.resource.Resource"], ["org.apache.sling.api.SlingHttpServletRequest"], [""], [""], ["java.lang.String"], [""], ["javax.servlet.ServletRequest", "com.day.cq.wcm.api.components.Component", "java.lang.String", "java.lang.String[]"], [""], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.Throwable"], [""]], "passed_comments": [{"com.adobe.acs.commons.util.ModeUtil.isEdit": "Checks if the request is in mode  {@link WCMMode#EDIT}"}, {"com.adobe.acs.commons.wcm.ComponentHelper.generateClassicUIPlaceholder": "Build the placeholder image HTML for the Classic UI."}]}, {"index": "1192", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/tags/PlaceholderTag.java", "methodName": "com.adobe.acs.commons.wcm.tags.PlaceholderTag.release", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void release() {\n        super.release();\n        reset();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SuperMethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName)SuperMethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["javax.servlet.jsp.tagext.BodyTagSupport.release", "com.adobe.acs.commons.wcm.tags.PlaceholderTag.reset"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "1193", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/tags/wcmmode/SetWCMMode.java", "methodName": "com.adobe.acs.commons.wcm.tags.wcmmode.SetWCMMode.doStartTag", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public int doStartTag() throws JspException {\n        final WCMMode toSet = WCMMode.valueOf(mode);\n        final ServletRequest request = pageContext.getRequest();\n        this.oldMode = WCMMode.fromRequest(request);\n        toSet.toRequest(request);\n        return EVAL_BODY_INCLUDE;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["com.day.cq.wcm.api.WCMMode.valueOf", "javax.servlet.jsp.PageContext.getRequest", "com.day.cq.wcm.api.WCMMode.fromRequest", "com.day.cq.wcm.api.WCMMode.toRequest"], "call_func_parameter": [["java.lang.String"], [""], ["javax.servlet.ServletRequest"], ["javax.servlet.ServletRequest"]], "passed_comments": "/"}, {"index": "1194", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/tags/wcmmode/SetWCMMode.java", "methodName": "com.adobe.acs.commons.wcm.tags.wcmmode.SetWCMMode.doEndTag", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public int doEndTag() throws JspException {\n        if (restore) {\n            if (oldMode != null) {\n                oldMode.toRequest(pageContext.getRequest());\n            } else {\n                WCMMode.DISABLED.toRequest(pageContext.getRequest());\n            }\n        }\n        reset();\n        return EVAL_PAGE;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["javax.servlet.jsp.PageContext.getRequest", "com.day.cq.wcm.api.WCMMode.toRequest", "com.adobe.acs.commons.wcm.tags.wcmmode.SetWCMMode.reset"], "call_func_parameter": [[""], ["javax.servlet.ServletRequest"], [""]], "passed_comments": "/"}, {"index": "1195", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/tags/wcmmode/SetWCMMode.java", "methodName": "com.adobe.acs.commons.wcm.tags.wcmmode.SetWCMMode.release", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void release() {\n        super.release();\n        reset();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SuperMethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName)SuperMethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["javax.servlet.jsp.tagext.TagSupport.release", "com.adobe.acs.commons.wcm.tags.wcmmode.SetWCMMode.reset"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "1196", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/tags/wcmmode/WCMModeFunctions.java", "methodName": "com.adobe.acs.commons.wcm.tags.wcmmode.WCMModeFunctions.isDesign", "methodParameterType": "PageContext#", "methodParameterName": "pageContext#", "methodBody": "public static boolean isDesign(PageContext pageContext) {\n        if (pageContext == null) {\n            return false;\n        }\n        final ServletRequest request = pageContext.getRequest();\n        if (request == null) {\n            return false;\n        }\n        return WCMMode.fromRequest(request) == WCMMode.DESIGN;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine if the current WCMMode is design mode.", "call_func_name": ["javax.servlet.jsp.PageContext.getRequest", "com.day.cq.wcm.api.WCMMode.fromRequest"], "call_func_parameter": [[""], ["javax.servlet.ServletRequest"]], "passed_comments": "/"}, {"index": "1197", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/tags/wcmmode/WCMModeFunctions.java", "methodName": "com.adobe.acs.commons.wcm.tags.wcmmode.WCMModeFunctions.isDisabled", "methodParameterType": "PageContext#", "methodParameterName": "pageContext#", "methodBody": "public static boolean isDisabled(PageContext pageContext) {\n        if (pageContext == null) {\n            return true;\n        }\n        final ServletRequest request = pageContext.getRequest();\n        if (request == null) {\n            return true;\n        }\n        return WCMMode.fromRequest(request) == WCMMode.DISABLED;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine if the current WCMMode is disabled mode.", "call_func_name": ["javax.servlet.jsp.PageContext.getRequest", "com.day.cq.wcm.api.WCMMode.fromRequest"], "call_func_parameter": [[""], ["javax.servlet.ServletRequest"]], "passed_comments": "/"}, {"index": "1198", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/tags/wcmmode/WCMModeFunctions.java", "methodName": "com.adobe.acs.commons.wcm.tags.wcmmode.WCMModeFunctions.isEdit", "methodParameterType": "PageContext#", "methodParameterName": "pageContext#", "methodBody": "public static boolean isEdit(PageContext pageContext) {\n        if (pageContext == null) {\n            return false;\n        }\n        final ServletRequest request = pageContext.getRequest();\n        if (request == null) {\n            return false;\n        }\n        return WCMMode.fromRequest(request) == WCMMode.EDIT;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine if the current WCMMode is edit mode.", "call_func_name": ["javax.servlet.jsp.PageContext.getRequest", "com.day.cq.wcm.api.WCMMode.fromRequest"], "call_func_parameter": [[""], ["javax.servlet.ServletRequest"]], "passed_comments": "/"}, {"index": "1199", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/tags/wcmmode/WCMModeFunctions.java", "methodName": "com.adobe.acs.commons.wcm.tags.wcmmode.WCMModeFunctions.isPreview", "methodParameterType": "PageContext#", "methodParameterName": "pageContext#", "methodBody": "public static boolean isPreview(PageContext pageContext) {\n        if (pageContext == null) {\n            return false;\n        }\n        final ServletRequest request = pageContext.getRequest();\n        if (request == null) {\n            return false;\n        }\n        return WCMMode.fromRequest(request) == WCMMode.PREVIEW;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine if the current WCMMode is preview mode.", "call_func_name": ["javax.servlet.jsp.PageContext.getRequest", "com.day.cq.wcm.api.WCMMode.fromRequest"], "call_func_parameter": [[""], ["javax.servlet.ServletRequest"]], "passed_comments": "/"}, {"index": "1200", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/vanity/VanityURLService.java", "methodName": "com.adobe.acs.commons.wcm.vanity.VanityURLService.dispatch", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "request#response#", "methodBody": "boolean dispatch(SlingHttpServletRequest request, SlingHttpServletResponse response) throws ServletException, IOException, RepositoryException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "This method checks if a given request URI (after performing the Resource Resolver Mapping) is a valid vanity URL, if true it will perform the FORWARD using Request Dispatcher.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1201", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/vanity/impl/VanityURLServiceImpl.java", "methodName": "com.adobe.acs.commons.wcm.vanity.impl.VanityURLServiceImpl.isVanityPath", "methodParameterType": "String#String#SlingHttpServletRequest#", "methodParameterName": "pathScope#vanityPath#request#", "methodBody": "protected boolean isVanityPath(String pathScope, String vanityPath, SlingHttpServletRequest request) throws RepositoryException {\n        final Resource vanityResource = request.getResourceResolver().resolve(vanityPath);\n\n        if (vanityResource != null) {\n            String targetPath = null;\n\n            if (vanityResource.isResourceType(\"sling:redirect\")) {\n                targetPath = vanityResource.getValueMap().get(\"sling:target\", String.class);\n            } else if (!StringUtils.equals(vanityPath, vanityResource.getPath())) {\n                targetPath = vanityResource.getPath();\n            }\n\n            if (targetPath != null && StringUtils.startsWith(targetPath, StringUtils.defaultIfEmpty(pathScope, DEFAULT_PATH_SCOPE))) {\n                log.debug(\"Found vanity resource at [ {} ] for sling:vanityPath [ {} ]\", targetPath, vanityPath);\n                return true;\n            }\n        }\n\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the provided vanity path is a valid redirect", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getResourceResolver", "org.apache.sling.api.resource.ResourceResolver.resolve", "org.apache.sling.api.resource.Resource.isResourceType", "org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.get", "org.apache.sling.api.resource.Resource.getPath", "org.apache.commons.lang3.StringUtils.equals", "org.apache.commons.lang3.StringUtils.defaultIfEmpty", "org.apache.commons.lang3.StringUtils.startsWith", "org.slf4j.Logger.debug"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Class"], [""], ["java.lang.CharSequence", "java.lang.CharSequence"], ["java.lang.CharSequence", "java.lang.CharSequence"], ["java.lang.CharSequence", "java.lang.CharSequence"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1202", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/PageRootProvider.java", "methodName": "com.adobe.acs.commons.wcm.PageRootProvider.getRootPage", "methodParameterType": "Resource#", "methodParameterName": "resource#", "methodBody": "Page getRootPage(Resource resource);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the root page for the provided resource. The root page is selected via the regex(es) provided in the PageRootProviderImpl's OSGi configuration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1203", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/PageRootProvider.java", "methodName": "com.adobe.acs.commons.wcm.PageRootProvider.getRootPagePath", "methodParameterType": "String#", "methodParameterName": "resourcePath#", "methodBody": "String getRootPagePath(String resourcePath);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the root path for the provided resource path. The root path is selected via the regex(es) provided in the PageRootProviderImpl's OSGi configuration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1204", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/ComponentHelper.java", "methodName": "com.adobe.acs.commons.wcm.ComponentHelper.isAuthoringMode", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "boolean isAuthoringMode(SlingHttpServletRequest request);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Checks if the mode equals in an \"Authoring\" mode; Edit or Design.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1205", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/ComponentHelper.java", "methodName": "com.adobe.acs.commons.wcm.ComponentHelper.printEditBlock", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#ComponentEditType.Type#boolean#", "methodParameterName": "request#response#editType#isConfigured#", "methodBody": "boolean printEditBlock(SlingHttpServletRequest request,\n                                         SlingHttpServletResponse response,\n                                         ComponentEditType.Type editType,\n                                         boolean... isConfigured);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Prints the HTML representation of the Component's edit block to the Response. If EditType DropTargets equals specified, Block will created by inspecting the Drop Targets.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1206", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/ComponentHelper.java", "methodName": "com.adobe.acs.commons.wcm.ComponentHelper.printEditBlockOrNothing", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#ComponentEditType.Type#boolean#", "methodParameterName": "request#response#editType#isConfigured#", "methodBody": "boolean printEditBlockOrNothing(SlingHttpServletRequest request,\n                                                  SlingHttpServletResponse response,\n                                                  ComponentEditType.Type editType,\n                                                  boolean... isConfigured);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Wrapper for printEditBlock(...) with special handling for non-Authoring modes. <p> Normal use: inclusion at top of component JSP before any markup is output: <p> <% if(WCMHelper.printEditBlockOrNothing(slingRequest, slingResponse, WCMEditType.NONE, StringUtils.isNotBlank(properties.get(\"foo\", \"\"))) { return; // Stops execution of the JSP; leaving only the Edit Block rendered in Authoring Mode or nothing in non-Authoring Modes } %>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1207", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/ComponentHelper.java", "methodName": "com.adobe.acs.commons.wcm.ComponentHelper.printDDEditBlock", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#String#boolean#", "methodParameterName": "request#response#name#isConfigured#", "methodBody": "boolean printDDEditBlock(SlingHttpServletRequest request,\n                                           SlingHttpServletResponse response,\n                                           String name,\n                                           boolean... isConfigured);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Print the DropTarget Edit Icon to the response. <p> Allow the WCMHelper to automatically derive the placeholder icon based on the DropTarget's Groups and Accepts properties. <p> Only displays if an 'AND' of all 'visible' parameters evaluates to true.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1208", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/ComponentHelper.java", "methodName": "com.adobe.acs.commons.wcm.ComponentHelper.printDDEditBlock", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#String#ComponentEditType.Type#boolean#", "methodParameterName": "request#response#name#editType#isConfigured#", "methodBody": "boolean printDDEditBlock(SlingHttpServletRequest request,\n                                           SlingHttpServletResponse response,\n                                           String name,\n                                           ComponentEditType.Type editType,\n                                           boolean... isConfigured);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Print the DropTarget Edit Icon to the response. <p> Specify the DropTarget Icon to display. <p> Only displays if an 'AND' of all 'visible' parameters evaluates to true.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1209", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/ComponentHelper.java", "methodName": "com.adobe.acs.commons.wcm.ComponentHelper.getEditBlock", "methodParameterType": "SlingHttpServletRequest#ComponentEditType.Type#boolean#", "methodParameterName": "request#editType#isConfigured#", "methodBody": "String getEditBlock(SlingHttpServletRequest request,\n                                      ComponentEditType.Type editType,\n                                      boolean... isConfigured);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Creates a String HTML representation of the Component's edit block. If EditType DropTargets equals specified, Block will created by inspecting the Drop Targets.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1210", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/ComponentHelper.java", "methodName": "com.adobe.acs.commons.wcm.ComponentHelper.getDDEditBlock", "methodParameterType": "SlingHttpServletRequest#String#boolean#", "methodParameterName": "request#name#isConfigured#", "methodBody": "String getDDEditBlock(SlingHttpServletRequest request, String name, boolean... isConfigured);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Convenience wrapper for getDDEditBlock(SlingHttpServletRequest request, String getName, WCMEditType editType, boolean... visible) where editType equals null.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1211", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/ComponentHelper.java", "methodName": "com.adobe.acs.commons.wcm.ComponentHelper.getDDEditBlock", "methodParameterType": "SlingHttpServletRequest#String#ComponentEditType.Type#boolean#", "methodParameterName": "request#name#editType#isConfigured#", "methodBody": "String getDDEditBlock(SlingHttpServletRequest request, String name,\n                                        ComponentEditType.Type editType, boolean... isConfigured);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the HTML for creating DropTarget Edit Icon(s) for a specific (named) DropTargets defined by a Component. <p> Allows the developer to specific the EditType Icon to be used for the Drop Target via editType parameter. If editType equals left null, the edit type will be derived based on the DropTarget's Groups and Accepts properties.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1212", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/ComponentHelper.java", "methodName": "com.adobe.acs.commons.wcm.ComponentHelper.getEditIconImgTag", "methodParameterType": "ComponentEditType.Type#", "methodParameterName": "editType#", "methodBody": "String getEditIconImgTag(ComponentEditType.Type editType);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Get the edit icon HTML img tag (&gt;img ...&lt;) for the specified EditType", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1213", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/ComponentHelper.java", "methodName": "com.adobe.acs.commons.wcm.ComponentHelper.generateClassicUIPlaceholder", "methodParameterType": "String#String#", "methodParameterName": "classNames#title#", "methodBody": "String generateClassicUIPlaceholder(String classNames, String title);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Build the placeholder image HTML for the Classic UI.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1214", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/ComponentErrorHandler.java", "methodName": "com.adobe.acs.commons.wcm.ComponentErrorHandler.suppressComponentErrorHandling", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "void suppressComponentErrorHandling(SlingHttpServletRequest request);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Suppress component error handling for the Request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1215", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/ComponentErrorHandler.java", "methodName": "com.adobe.acs.commons.wcm.ComponentErrorHandler.allowComponentErrorHandling", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "void allowComponentErrorHandling(SlingHttpServletRequest request);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Allow component error handling for the Request. Only useful after suppressComponentErrorHandling has been previously called.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1216", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/datasources/DataSourceBuilder.java", "methodName": "com.adobe.acs.commons.wcm.datasources.DataSourceBuilder.addDataSource", "methodParameterType": "SlingHttpServletRequest#List<DataSourceOption>#", "methodParameterName": "slingRequest#options#", "methodBody": "void addDataSource(SlingHttpServletRequest slingRequest, List<DataSourceOption> options);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create and add a DataSource to the the HTTP Request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1217", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/datasources/DataSourceBuilder.java", "methodName": "com.adobe.acs.commons.wcm.datasources.DataSourceBuilder.writeDataSourceOptions", "methodParameterType": "SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "slingRequest#slingResponse#", "methodBody": "void writeDataSourceOptions(SlingHttpServletRequest slingRequest,\n                                SlingHttpServletResponse slingResponse) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Print the DataSourceOptions out in a JSON format to the response.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1218", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/views/impl/WCMViewsFilter.java", "methodName": "com.adobe.acs.commons.wcm.views.impl.WCMViewsFilter.processChain", "methodParameterType": "ServletRequest#ServletResponse#FilterChain#WCMMode#WCMMode#", "methodParameterName": "request#response#chain#before#after#", "methodBody": "private void processChain(final ServletRequest request,\n                              final ServletResponse response,\n                              final FilterChain chain,\n                              final WCMMode before, final WCMMode after) throws IOException, ServletException {\n\n        before.toRequest(request);\n        chain.doFilter(request, response);\n        after.toRequest(request);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Performs the filter chain inclusion, setting the WCMMode before and after the inclusion.", "call_func_name": ["com.day.cq.wcm.api.WCMMode.toRequest", "javax.servlet.FilterChain.doFilter"], "call_func_parameter": [["javax.servlet.ServletRequest"], ["javax.servlet.ServletRequest", "javax.servlet.ServletResponse"]], "passed_comments": "/"}, {"index": "1219", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/views/impl/WCMViewsFilter.java", "methodName": "com.adobe.acs.commons.wcm.views.impl.WCMViewsFilter.accepts", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "@SuppressWarnings(\"squid:S3776\")\n    private boolean accepts(final SlingHttpServletRequest request) {\n        final PageManager pageManager = request.getResourceResolver().adaptTo(PageManager.class);\n        final Resource resource = request.getResource();\n\n        // Only process requests that match the include path prefixes if any are provided\n        if (ArrayUtils.isEmpty(this.includePathPrefixes)\n                || (!StringUtils.startsWithAny(request.getResource().getPath(), this.includePathPrefixes))) {\n            return false;\n        }\n\n        // If the WCM Views on Request is set to disabled; do not process\n        if (this.getRequestViews(request).contains(WCM_VIEW_DISABLED)) {\n            return false;\n        }\n\n        // Only process resources that are part of a Page\n        if (pageManager.getContainingPage(request.getResource()) == null) {\n            return false;\n        }\n\n        final Node node = request.getResource().adaptTo(Node.class);\n\n        if (node != null) {\n            try {\n                // Do not process cq:Page or cq:PageContent nodes as this will break all sorts of things,\n                // and they dont have dropzone of their own\n                if (node.isNodeType(NameConstants.NT_PAGE) || node.isNodeType(\"cq:PageContent\")  // Do not process Page node inclusions\n                        || JcrConstants.JCR_CONTENT.equals(node.getName())) { // Do not process Page jcr:content nodes (that may not have the cq:PageContent jcr:primaryType)\n                    return false;\n                }\n            } catch (RepositoryException e) {\n                log.error(\"Repository exception prevented WCM Views Filter \"\n                        + \"from determining if the resource is acceptable\", e);\n                return false;\n            }\n        }\n\n        if (CollectionUtils.isNotEmpty(this.resourceTypesIncludes)) {\n            for (final Pattern pattern : this.resourceTypesIncludes) {\n                final Matcher matcher = pattern.matcher(resource.getResourceType());\n\n                if (matcher.matches()) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        return true;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ThisExpression#SimpleName#FieldAccess#MethodInvocation#PrefixExpression#ParenthesizedExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#ThisExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(ParenthesizedExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)PrefixExpression)ParenthesizedExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines if the filter should process this request.", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getResourceResolver", "org.apache.sling.api.resource.ResourceResolver.adaptTo", "org.apache.sling.api.SlingHttpServletRequest.getResource", "org.apache.commons.lang.ArrayUtils.isEmpty", "org.apache.sling.api.resource.Resource.getPath", "org.apache.commons.lang.StringUtils.startsWithAny", "com.adobe.acs.commons.wcm.views.impl.WCMViewsFilter.getRequestViews", "java.util.List.contains", "com.day.cq.wcm.api.PageManager.getContainingPage", "org.apache.sling.api.resource.Resource.adaptTo", "javax.jcr.Node.isNodeType", "javax.jcr.Node.getName", "java.lang.String.equals", "org.slf4j.Logger.error", "org.apache.commons.collections.CollectionUtils.isNotEmpty", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.sling.api.resource.Resource.getResourceType", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches"], "call_func_parameter": [[""], ["java.lang.Class"], [""], ["java.lang.Object[]"], [""], ["java.lang.String", "java.lang.String[]"], ["org.apache.sling.api.SlingHttpServletRequest"], ["java.lang.Object"], ["org.apache.sling.api.resource.Resource"], ["java.lang.Class"], ["java.lang.String"], [""], ["java.lang.Object"], ["java.lang.String", "java.lang.Throwable"], ["java.util.Collection"], [""], [""], [""], [""], ["java.lang.CharSequence"], [""]], "passed_comments": [{"com.adobe.acs.commons.wcm.views.impl.WCMViewsFilter.getRequestViews": "Get the WCM Views from the Request passed by QueryParam."}]}, {"index": "1220", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/views/impl/WCMViewsFilter.java", "methodName": "com.adobe.acs.commons.wcm.views.impl.WCMViewsFilter.getOrSetFirstWCMMode", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "private WCMMode getOrSetFirstWCMMode(final SlingHttpServletRequest request) {\n        WCMMode wcmMode = (WCMMode) request.getAttribute(ATTR_FILTER);\n\n        if (wcmMode == null) {\n            wcmMode = WCMMode.fromRequest(request);\n            request.setAttribute(ATTR_FILTER, wcmMode);\n        }\n\n        return wcmMode;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets or sets and gets the original WCMMode for the Request.", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getAttribute", "com.day.cq.wcm.api.WCMMode.fromRequest", "org.apache.sling.api.SlingHttpServletRequest.setAttribute"], "call_func_parameter": [["java.lang.String"], ["javax.servlet.ServletRequest"], ["java.lang.String", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1221", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/views/impl/WCMViewsFilter.java", "methodName": "com.adobe.acs.commons.wcm.views.impl.WCMViewsFilter.getRequestViews", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "private List<String> getRequestViews(final SlingHttpServletRequest request) {\n        final List<String> views = new ArrayList<String>();\n\n        // Respect Query Parameters first\n\n        final RequestParameter[] requestParameters = request.getRequestParameters(RP_WCM_VIEWS);\n\n        if (requestParameters != null) {\n            for (final RequestParameter requestParameter : requestParameters) {\n                if (StringUtils.isNotBlank(requestParameter.getString())) {\n                    views.add(requestParameter.getString());\n                }\n            }\n        }\n\n        if (CollectionUtils.isNotEmpty(views)) {\n            return views;\n        }\n\n        // If not Query Params can be found, check Cookie\n\n        final Cookie cookie = CookieUtil.getCookie(request, COOKIE_WCM_VIEWS);\n\n        if (cookie != null && StringUtils.isNotBlank(cookie.getValue())) {\n            views.add(cookie.getValue());\n        }\n\n        return views;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the WCM Views from the Request passed by QueryParam.", "call_func_name": ["java.util.ArrayList.<init>", "org.apache.sling.api.SlingHttpServletRequest.getRequestParameters", "org.apache.sling.api.request.RequestParameter.getString", "org.apache.commons.lang.StringUtils.isNotBlank", "java.util.List.add", "org.apache.commons.collections.CollectionUtils.isNotEmpty", "com.adobe.acs.commons.util.CookieUtil.getCookie", "javax.servlet.http.Cookie.getValue"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.Object"], ["java.util.Collection"], ["javax.servlet.http.HttpServletRequest", "java.lang.String"], [""]], "passed_comments": [{"com.adobe.acs.commons.util.CookieUtil.getCookie": "Get the named cookie from the HTTP Request"}]}, {"index": "1222", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/views/impl/WCMViewsFilter.java", "methodName": "com.adobe.acs.commons.wcm.views.impl.WCMViewsFilter.getComponentViews", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "private List<String> getComponentViews(final SlingHttpServletRequest request) {\n        final Set<String> views = new HashSet<String>();\n        final Resource resource = request.getResource();\n\n        if (resource == null) {\n            return new ArrayList<String>(views);\n        }\n\n        final Component component = WCMUtils.getComponent(resource);\n        final ValueMap properties = resource.adaptTo(ValueMap.class);\n\n        if (component != null) {\n            views.addAll(Arrays.asList(component.getProperties().get(PN_WCM_VIEWS, new String[]{})));\n        }\n\n        if (properties != null) {\n            views.addAll(Arrays.asList(properties.get(PN_WCM_VIEWS, new String[]{})));\n        }\n\n        return new ArrayList<String>(views);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#ArrayInitializer#ArrayCreation#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#ArrayInitializer#ArrayCreation#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer)ArrayInitializer)ArrayCreation)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer)ArrayInitializer)ArrayCreation)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the WCM Views for the component; Looks at both the content resource for the special wcmViews property and looks up to the resourceType's cq:Component properties for wcmViews.", "call_func_name": ["java.util.HashSet.<init>", "org.apache.sling.api.SlingHttpServletRequest.getResource", "java.util.ArrayList.<init>", "com.day.cq.wcm.commons.WCMUtils.getComponent", "org.apache.sling.api.resource.Resource.adaptTo", "com.day.cq.wcm.api.components.Component.getProperties", "org.apache.sling.api.resource.ValueMap.get", "java.util.Arrays.asList", "java.util.Set.addAll"], "call_func_parameter": [[""], [""], ["java.util.Collection"], ["org.apache.sling.api.resource.Resource"], ["java.lang.Class"], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.Object[]"], ["java.util.Collection"]], "passed_comments": "/"}, {"index": "1223", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/notifications/SystemNotifications.java", "methodName": "com.adobe.acs.commons.wcm.notifications.SystemNotifications.getNotifications", "methodParameterType": "SlingHttpServletRequest#Resource#", "methodParameterName": "request#notifications#", "methodBody": "List<Resource> getNotifications(SlingHttpServletRequest request, \n                                    Resource notifications);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Gets the activate notifications.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1224", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/notifications/SystemNotifications.java", "methodName": "com.adobe.acs.commons.wcm.notifications.SystemNotifications.getNotificationId", "methodParameterType": "Page#", "methodParameterName": "notificationPage#", "methodBody": "String getNotificationId(Page notificationPage);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Gets the UID identifying this page; UID is based on path and last modified date so will change with modifications and resource moves.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1225", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/notifications/SystemNotifications.java", "methodName": "com.adobe.acs.commons.wcm.notifications.SystemNotifications.getMessage", "methodParameterType": "String#String#String#", "methodParameterName": "message#onTime#offTime#", "methodBody": "String getMessage(String message, String onTime, String offTime);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Gets the notification message injecting the onTime into {{ onTime }} and offTime into {{ offTime }}. Also converts CRLF into <br/>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1226", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/AuthorUIHelper.java", "methodName": "com.adobe.acs.commons.wcm.AuthorUIHelper.isTouchUI", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isTouchUI();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Indicates whether the author experience is using the Touch UI or Classic UI", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1227", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/AuthorUIHelper.java", "methodName": "com.adobe.acs.commons.wcm.AuthorUIHelper.generateEditPageLink", "methodParameterType": "String#boolean#ResourceResolver#", "methodParameterName": "pagePath#absoluteUrl#resolver#", "methodBody": "String generateEditPageLink(String pagePath, boolean absoluteUrl, ResourceResolver resolver);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Generates a URL to edit a page in AEM author environment. Will return a url using either the classic or touch UI url based on configuration properties. Defaults to Touch UI ('/editor.html') appends the '.html' extension to the returned URL String", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1228", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/AuthorUIHelper.java", "methodName": "com.adobe.acs.commons.wcm.AuthorUIHelper.generateEditAssetLink", "methodParameterType": "String#boolean#ResourceResolver#", "methodParameterName": "assetPath#absoluteUrl#resolver#", "methodBody": "String generateEditAssetLink(String assetPath, boolean absoluteUrl, ResourceResolver resolver);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Generates a URL to edit a DAM asset in AEM author environment. Will return a url using either the classic or touch UI url based on configuration properties. Defaults to Touch UI ('/assetdetails.html')", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1229", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/properties/shared/impl/SharedComponentPropertiesPageInfoProvider.java", "methodName": "com.adobe.acs.commons.wcm.properties.shared.impl.SharedComponentPropertiesPageInfoProvider.updatePageInfo", "methodParameterType": "SlingHttpServletRequest#org.apache.sling.commons.json.JSONObject#Resource#", "methodParameterName": "request#info#resource#", "methodBody": "@Override\n    @SuppressWarnings( \"deprecation\" )\n    public void updatePageInfo(SlingHttpServletRequest request, org.apache.sling.commons.json.JSONObject info, Resource resource)\n            throws org.apache.sling.commons.json.JSONException {\n        if (scheduledSharedComponentsMapUpdate > 0 && System.currentTimeMillis() > scheduledSharedComponentsMapUpdate) {\n            scheduledSharedComponentsMapUpdate = -1L;\n            updateSharedComponentsMap();\n        }\n\n        org.apache.sling.commons.json.JSONObject props = new org.apache.sling.commons.json.JSONObject();\n        props.put(\"enabled\", false);\n\n        Page page = pageRootProvider.getRootPage(resource);\n        if (page != null) {\n            Session session = request.getResourceResolver().adaptTo(Session.class);\n            try {\n                AccessControlManager accessControlManager = AccessControlUtil.getAccessControlManager(session);\n                Privilege privilegeAddChild = accessControlManager.privilegeFromName(\"jcr:addChildNodes\");\n                Privilege privilegeModifyProps = accessControlManager.privilegeFromName(\"jcr:modifyProperties\");\n                Privilege[] requiredPrivs = new Privilege[]{privilegeAddChild, privilegeModifyProps};\n\n                if (accessControlManager.hasPrivileges(page.getPath() + \"/jcr:content\", requiredPrivs)) {\n                    props.put(\"enabled\", true);\n                    props.put(\"root\", page.getPath());\n                    props.put(\"components\", Maps.transformValues(componentsWithSharedProperties, (Function<List<Boolean>, Object>) org.apache.sling.commons.json.JSONArray::new));\n                } else {\n                    log.debug(\"User does not have [ {} ] on [ {} ]\", requiredPrivs, page.getPath() + \"/jcr:content\");\n                }\n            } catch (RepositoryException e) {\n                log.error(\"Unexpected error checking permissions to modify shared component properties\", e);\n            }\n        } else {\n            log.debug(\"No Page Root could be found for [ {} ]\", resource.getPath());\n        }\n\n        info.put(\"sharedComponentProperties\", props);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#InfixExpression#SimpleName#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#ArrayInitializer#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#CreationReference#CastExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName(SimpleName)SimpleName)ArrayInitializer)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(CreationReference(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)CreationReference)CastExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add a \"sharedComponentProperties\" section to pageInfo so that JS libs in the authoring interface can determine whether or not to enable shared/global properties for a component on a site.", "call_func_name": ["java.lang.System.currentTimeMillis", "com.adobe.acs.commons.wcm.properties.shared.impl.SharedComponentPropertiesPageInfoProvider.updateSharedComponentsMap", "org.apache.sling.commons.json.JSONObject.<init>", "org.apache.sling.commons.json.JSONObject.put", "com.adobe.acs.commons.wcm.PageRootProvider.getRootPage", "org.apache.sling.api.SlingHttpServletRequest.getResourceResolver", "org.apache.sling.api.resource.ResourceResolver.adaptTo", "org.apache.sling.jcr.base.util.AccessControlUtil.getAccessControlManager", "javax.jcr.security.AccessControlManager.privilegeFromName", "java.lang.StringBuilder.<init>", "com.day.cq.wcm.api.Page.getPath", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "javax.jcr.security.AccessControlManager.hasPrivileges", "org.apache.sling.commons.json.JSONObject.put", "acscommons.com.google.common.base.Function.apply", "acscommons.com.google.common.collect.Maps.transformValues", "org.apache.sling.commons.json.JSONObject.put", "org.slf4j.Logger.debug", "org.slf4j.Logger.error", "org.apache.sling.api.resource.Resource.getPath", "org.slf4j.Logger.debug"], "call_func_parameter": [[""], [""], [""], ["java.lang.String", "boolean"], ["org.apache.sling.api.resource.Resource"], [""], ["java.lang.Class"], ["javax.jcr.Session"], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], ["java.lang.String", "javax.jcr.security.Privilege[]"], ["java.lang.String", "java.lang.Object"], [""], ["java.util.Map", "acscommons.com.google.common.base.Function"], ["java.lang.String", "java.util.Map"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.Throwable"], [""], ["java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.wcm.properties.shared.impl.SharedComponentPropertiesPageInfoProvider.updateSharedComponentsMap": "Traverse the entire set of components in the /apps directory and create a map of all component types that have shared/global config dialogs. This is used by the JS libs in the authoring interface to determine if a component should show the options for editing shared/global configs."}, {"com.adobe.acs.commons.wcm.PageRootProvider.getRootPage": "Returns the root page for the provided resource. The root page is selected via the regex(es) provided in the PageRootProviderImpl's OSGi configuration."}]}, {"index": "1230", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/properties/shared/impl/SharedComponentPropertiesPageInfoProvider.java", "methodName": "com.adobe.acs.commons.wcm.properties.shared.impl.SharedComponentPropertiesPageInfoProvider.onEvent", "methodParameterType": "EventIterator#", "methodParameterName": "eventIterator#", "methodBody": "@Override\n    public void onEvent(EventIterator eventIterator) {\n        while (eventIterator.hasNext()) {\n            Event event = eventIterator.nextEvent();\n            try {\n                String[] pathPieces = event.getPath().split(\"/\");\n                String nodeName = pathPieces[pathPieces.length - 1];\n                switch (nodeName) {\n                    case \"dialogglobal\":\n                    case \"dialogshared\":\n                    case \"dialog_global\":\n                    case \"dialog_shared\":\n                        scheduleSharedComponentsMapUpdate();\n                        break;\n\n                    default:\n                        break;\n                }\n            } catch (Exception e) {\n                log.error(\"Error determining if event affects list of components with shared/global properties\", e);\n            }\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#StringLiteral#SwitchCase#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SwitchCase#BreakStatement#SwitchStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#WhileStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(BreakStatement)BreakStatement)SwitchStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)WhileStatement)Block)MethodDeclaration", "methodDoc": "Listen for add/update/delete of shared dialog nodes, in order to trigger an update of the map of components that have shared property dialogs. Technically a delete may not be caught if a node higher in the ancestry is deleted (thus deleting its children) but having a stale entry in the map does not cause any problems.", "call_func_name": ["javax.jcr.observation.EventIterator.hasNext", "javax.jcr.observation.EventIterator.nextEvent", "javax.jcr.observation.Event.getPath", "java.lang.String.split", "java.lang.String.hashCode", "java.lang.String.equals", "com.adobe.acs.commons.wcm.properties.shared.impl.SharedComponentPropertiesPageInfoProvider.scheduleSharedComponentsMapUpdate", "org.slf4j.Logger.error"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], [""], ["java.lang.Object"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"com.adobe.acs.commons.wcm.properties.shared.impl.SharedComponentPropertiesPageInfoProvider.scheduleSharedComponentsMapUpdate": "Schedule an update of the map of components with shared/global properties to be updated 5 seconds from now. This handles race conditions where the map calculation happens before all nodes are installed, and also prevents stampedes from multiple JCR update events such as during a package installation."}]}, {"index": "1231", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/properties/shared/impl/SharedComponentPropertiesPageInfoProvider.java", "methodName": "com.adobe.acs.commons.wcm.properties.shared.impl.SharedComponentPropertiesPageInfoProvider.scheduleSharedComponentsMapUpdate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void scheduleSharedComponentsMapUpdate() {\n        log.debug(\"Flagging for rebuild of the map of components with shared properties dialogs\");\n        scheduledSharedComponentsMapUpdate = System.currentTimeMillis() + 5000;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Schedule an update of the map of components with shared/global properties to be updated 5 seconds from now. This handles race conditions where the map calculation happens before all nodes are installed, and also prevents stampedes from multiple JCR update events such as during a package installation.", "call_func_name": ["org.slf4j.Logger.debug", "java.lang.System.currentTimeMillis"], "call_func_parameter": [["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "1232", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/properties/shared/impl/SharedComponentPropertiesPageInfoProvider.java", "methodName": "com.adobe.acs.commons.wcm.properties.shared.impl.SharedComponentPropertiesPageInfoProvider.updateSharedComponentsMap", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void updateSharedComponentsMap() {\n        Map<String, Object> authInfo = Collections.singletonMap(ResourceResolverFactory.SUBSERVICE, (Object) SERVICE_NAME);\n        try (ResourceResolver resourceResolver = resourceResolverFactory.getServiceResourceResolver(authInfo)){\n            log.debug(\"Calculating map of components with shared properties dialogs\");\n\n            resourceResolver.refresh();\n            ComponentManager componentManager = resourceResolver.adaptTo(ComponentManager.class);\n            Map<String, List<Boolean>> localComponentsWithSharedProperties = new HashMap<>();\n            for (Component component : componentManager.getComponents()) {\n                if (component.getPath().startsWith(\"/apps\")) {\n                    boolean hasSharedDialogForTouch = componentHasTouchDialog(component, \"dialogshared\");\n                    boolean hasGlobalDialogForTouch = componentHasTouchDialog(component, \"dialogglobal\");\n                    boolean hasSharedDialogForClassic = componentHasClassicDialog(component, \"dialog_shared\");\n                    boolean hasGlobalDialogForClassic = componentHasClassicDialog(component, \"dialog_global\");\n                    if (hasSharedDialogForTouch || hasGlobalDialogForTouch || hasSharedDialogForClassic || hasGlobalDialogForClassic) {\n                        localComponentsWithSharedProperties.put(component.getResourceType(),\n                                Arrays.asList(hasSharedDialogForTouch, hasGlobalDialogForTouch, hasSharedDialogForClassic, hasGlobalDialogForClassic));\n                    }\n                }\n            }\n            componentsWithSharedProperties = Collections.unmodifiableMap(localComponentsWithSharedProperties);\n\n            log.debug(\"Calculated map of components with shared properties dialogs: {}\", componentsWithSharedProperties);\n        } catch (org.apache.sling.api.resource.LoginException e) {\n            log.error(\"Unable to log into service user to determine list of components with shared properties dialogs\", e);\n        } catch (RepositoryException e) {\n            log.error(\"Unexpected error attempting to determine list of components with shared properties dialogs\", e);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Traverse the entire set of components in the /apps directory and create a map of all component types that have shared/global config dialogs. This is used by the JS libs in the authoring interface to determine if a component should show the options for editing shared/global configs.", "call_func_name": ["java.util.Collections.singletonMap", "org.apache.sling.api.resource.ResourceResolverFactory.getServiceResourceResolver", "org.slf4j.Logger.debug", "org.apache.sling.api.resource.ResourceResolver.refresh", "org.apache.sling.api.resource.ResourceResolver.adaptTo", "java.util.HashMap.<init>", "com.day.cq.wcm.api.components.ComponentManager.getComponents", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.day.cq.wcm.api.components.Component.getPath", "java.lang.String.startsWith", "com.adobe.acs.commons.wcm.properties.shared.impl.SharedComponentPropertiesPageInfoProvider.componentHasTouchDialog", "com.adobe.acs.commons.wcm.properties.shared.impl.SharedComponentPropertiesPageInfoProvider.componentHasClassicDialog", "com.day.cq.wcm.api.components.Component.getResourceType", "java.lang.Boolean.valueOf", "java.util.Arrays.asList", "java.util.Map.put", "java.util.Collections.unmodifiableMap", "org.slf4j.Logger.debug", "org.apache.sling.api.resource.ResourceResolver.close", "java.lang.Throwable.addSuppressed", "org.slf4j.Logger.error"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"], ["java.util.Map"], ["java.lang.String"], [""], ["java.lang.Class"], [""], [""], [""], [""], [""], [""], ["java.lang.String"], ["com.day.cq.wcm.api.components.Component", "java.lang.String"], ["com.day.cq.wcm.api.components.Component", "java.lang.String"], [""], ["boolean"], ["java.lang.Object[]"], ["java.lang.Object", "java.lang.Object"], ["java.util.Map"], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"com.adobe.acs.commons.wcm.properties.shared.impl.SharedComponentPropertiesPageInfoProvider.componentHasTouchDialog": "Determine if a component has a Touch UI dialog for shared or global configs."}, {"com.adobe.acs.commons.wcm.properties.shared.impl.SharedComponentPropertiesPageInfoProvider.componentHasClassicDialog": "Determine if a component has a Classic UI dialog for shared or global configs."}]}, {"index": "1233", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/properties/shared/impl/SharedComponentPropertiesPageInfoProvider.java", "methodName": "com.adobe.acs.commons.wcm.properties.shared.impl.SharedComponentPropertiesPageInfoProvider.componentHasClassicDialog", "methodParameterType": "Component#String#", "methodParameterName": "component#dialogName#", "methodBody": "private boolean componentHasClassicDialog(Component component, String dialogName) throws RepositoryException {\n        Resource dialog = component.getLocalResource(dialogName);\n        return dialog != null && dialog.adaptTo(Node.class).isNodeType(\"cq:Dialog\");\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine if a component has a Classic UI dialog for shared or global configs.", "call_func_name": ["com.day.cq.wcm.api.components.Component.getLocalResource", "org.apache.sling.api.resource.Resource.adaptTo", "javax.jcr.Node.isNodeType"], "call_func_parameter": [["java.lang.String"], ["java.lang.Class"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "1234", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/properties/shared/impl/SharedComponentPropertiesPageInfoProvider.java", "methodName": "com.adobe.acs.commons.wcm.properties.shared.impl.SharedComponentPropertiesPageInfoProvider.componentHasTouchDialog", "methodParameterType": "Component#String#", "methodParameterName": "component#dialogName#", "methodBody": "private boolean componentHasTouchDialog(Component component, String dialogName) {\n        Resource dialog = component.getLocalResource(dialogName);\n        return dialog != null && dialog.isResourceType(\"cq/gui/components/authoring/dialog\");\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine if a component has a Touch UI dialog for shared or global configs.", "call_func_name": ["com.day.cq.wcm.api.components.Component.getLocalResource", "org.apache.sling.api.resource.Resource.isResourceType"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "1235", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/impl/PageRootProviderConfig.java", "methodName": "com.adobe.acs.commons.wcm.impl.PageRootProviderConfig.getPageRootPatterns", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<Pattern> getPageRootPatterns() {\n        return this.pageRootPatterns;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves the configured patterns.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1236", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/impl/AbstractWidgetConfigurationServlet.java", "methodName": "com.adobe.acs.commons.wcm.impl.AbstractWidgetConfigurationServlet.underlay", "methodParameterType": "JsonObject#Resource#", "methodParameterName": "config#resource#", "methodBody": "protected final JsonObject underlay(JsonObject config, Resource resource)\n            throws ServletException {\n        JsonObject baseStructure = JsonObjectUtil.toJsonObject(resource);\n        if (baseStructure != null) {\n            config.entrySet().forEach(e -> baseStructure.add(e.getKey(), e.getValue()));\n            return baseStructure;\n        } else {\n            return config;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Load the base configuration and \"underlay\" it under the provided configuration so that the provided configuration overwrites the default configuration.", "call_func_name": ["com.adobe.acs.commons.json.JsonObjectUtil.toJsonObject", "com.google.gson.JsonObject.entrySet", "java.util.function.Consumer.accept", "java.util.Set.forEach"], "call_func_parameter": [["org.apache.sling.api.resource.Resource"], [""], ["com.google.gson.JsonObject"], ["java.util.function.Consumer"]], "passed_comments": "/"}, {"index": "1237", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/impl/PropertyMergePostProcessor.java", "methodName": "com.adobe.acs.commons.wcm.impl.PropertyMergePostProcessor.getPropertyMerges", "methodParameterType": "SlingHttpServletRequest#", "methodParameterName": "request#", "methodBody": "@SuppressWarnings(\"squid:S3776\")\n    private List<PropertyMerge> getPropertyMerges(final SlingHttpServletRequest request) {\n        final RequestParameterMap requestParameters = request.getRequestParameterMap();\n        final HashMap<String, Set<String>> mapping = new HashMap<>();\n        boolean isBulkUpdate = Boolean.valueOf(getParamValue(requestParameters, \"dam:bulkUpdate\"));\n\n        // Collect the Destination / Source mappings\n        requestParameters.forEach((key, values) -> {\n            if (!StringUtils.endsWith(key, AT_SUFFIX)) {\n                // Not a @PropertyMerge request param\n                return;\n            }\n\n            Function<String, String> stripPrefix = (s -> StringUtils.removeStart(StringUtils.stripToNull(s), IGNORE_PREFIX));\n            final String source = stripPrefix.apply(StringUtils.substringBefore(key, AT_SUFFIX));\n\n            Stream.of(values)\n                    .map(RequestParameter::getString)\n                    .map(stripPrefix)\n                    .filter(Objects::nonNull)\n                    .forEach(destination -> {\n                        if (source.equalsIgnoreCase(OPERATION_ALL_TAGS)) {\n                            // if this is a request for merging all tags, look at everyting that might be a tag\n                            trackAllTagsMergeParameters(request, destination, mapping);\n                        } else if (isBulkUpdate) {\n                            // if this is a DAM bulk update, search all request params ending with this value\n                            trackAssetMergeParameters(requestParameters, source, destination, mapping);\n                        } else {\n                            trackMergeParameters(mapping, source, destination);\n                        }\n                    });\n        });\n\n        // Convert the Mappings into PropertyMerge objects\n        return mapping.entrySet().stream().map(\n                entry -> new PropertyMerge(\n                        entry.getKey(),\n                        entry.getValue(),\n                        areDuplicatesAllowed(requestParameters, entry.getKey()),\n                        getFieldTypeHint(requestParameters, entry.getKey())\n                ))\n                .collect(Collectors.toList());\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#LambdaExpression#ParenthesizedExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ParenthesizedExpression(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)LambdaExpression)ParenthesizedExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the corresponding list of PropertyMerge directives from the RequestParams.", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getRequestParameterMap", "java.util.HashMap.<init>", "com.adobe.acs.commons.wcm.impl.PropertyMergePostProcessor.getParamValue", "java.lang.Boolean.valueOf", "java.lang.Boolean.booleanValue", "java.util.function.BiConsumer.accept", "org.apache.sling.api.request.RequestParameterMap.forEach", "java.util.HashMap.entrySet", "java.util.Set.stream", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect"], "call_func_parameter": [[""], [""], ["org.apache.sling.api.request.RequestParameterMap", "java.lang.String"], ["java.lang.String"], [""], ["com.adobe.acs.commons.wcm.impl.PropertyMergePostProcessor", "org.apache.sling.api.SlingHttpServletRequest", "java.util.HashMap", "boolean", "org.apache.sling.api.request.RequestParameterMap"], ["java.util.function.BiConsumer"], [""], [""], ["org.apache.sling.api.request.RequestParameterMap"], ["java.util.function.Function"], [""], ["java.util.stream.Collector"]], "passed_comments": "/"}, {"index": "1238", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/impl/PropertyMergePostProcessor.java", "methodName": "com.adobe.acs.commons.wcm.impl.PropertyMergePostProcessor.merge", "methodParameterType": "Resource#String#Collection<String>#Class<T>#boolean#", "methodParameterName": "resource#destination#sources#typeHint#allowDuplicates#", "methodBody": "protected final <T> Optional<Resource> merge(final Resource resource, final String destination,\n            final Collection<String> sources, final Class<T> typeHint,\n            final boolean allowDuplicates) throws PersistenceException {\n\n        ResourceResolver rr = resource.getResourceResolver();\n\n        // Create an empty array of type T\n        @SuppressWarnings(\"unchecked\")\n        final T[] emptyArray = (T[]) Array.newInstance(typeHint, 0);\n\n        Collection<T> collectedValues;\n\n        if (allowDuplicates) {\n            collectedValues = new ArrayList<>();\n        } else {\n            collectedValues = new LinkedHashSet<>();\n        }\n\n        for (final String source : sources) {\n            Resource sourceProperties = resource;\n            String sourceParam = source;\n            if (source.contains(\"/\")) {\n                sourceParam = StringUtils.substringAfterLast(source, \"/\");\n                sourceProperties = rr.getResource(resource, StringUtils.substringBeforeLast(source, \"/\"));\n            }\n            T[] tmp = sourceProperties.adaptTo(ModifiableValueMap.class).get(sourceParam, emptyArray);\n            collectedValues.addAll(Arrays.asList(tmp));\n        }\n\n        Resource targetResource = resource;\n        String targetProperty = destination;\n        if (destination.contains(\"/\")) {\n            targetProperty = StringUtils.substringAfterLast(destination, \"/\");\n            targetResource = rr.getResource(resource, StringUtils.substringBeforeLast(destination, \"/\"));\n        }\n        ModifiableValueMap targetProperties = targetResource.adaptTo(ModifiableValueMap.class);\n\n        final T[] currentValues = targetProperties.get(targetProperty, emptyArray);\n\n        if (!collectedValues.equals(Arrays.asList(currentValues))) {\n            targetProperties.put(targetProperty, collectedValues.toArray(emptyArray));\n\n            return Optional.of(targetResource);\n        } else {\n            return Optional.empty();\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Merges the values found in the the source properties into the destination property as a multi-value. The values of the source properties and destination properties must all be the same property type. The unique set of properties will be stored in", "call_func_name": ["org.apache.sling.api.resource.Resource.getResourceResolver", "java.lang.reflect.Array.newInstance", "java.util.ArrayList.<init>", "java.util.LinkedHashSet.<init>", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.String.contains", "org.apache.commons.lang.StringUtils.substringAfterLast", "org.apache.commons.lang.StringUtils.substringBeforeLast", "org.apache.sling.api.resource.ResourceResolver.getResource", "org.apache.sling.api.resource.Resource.adaptTo", "org.apache.sling.api.resource.ModifiableValueMap.get", "java.util.Arrays.asList", "java.util.Collection.addAll", "java.util.Collection.equals", "java.util.Collection.toArray", "org.apache.sling.api.resource.ModifiableValueMap.put", "java.util.Optional.of", "java.util.Optional.empty"], "call_func_parameter": [[""], ["java.lang.Class", "int"], [""], [""], [""], [""], [""], ["java.lang.CharSequence"], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String"], ["org.apache.sling.api.resource.Resource", "java.lang.String"], ["java.lang.Class"], ["java.lang.String", "java.lang.Object"], ["java.lang.Object[]"], ["java.util.Collection"], ["java.lang.Object"], ["java.lang.Object[]"], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "1239", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/impl/ComponentHelperImpl.java", "methodName": "com.adobe.acs.commons.wcm.impl.ComponentHelperImpl.getWCMEditType", "methodParameterType": "DropTarget#", "methodParameterName": "dropTarget#", "methodBody": "private ComponentEditType.Type getWCMEditType(DropTarget dropTarget) {\n        if (dropTarget == null) {\n            return ComponentEditType.NONE;\n        }\n        List<String> groups = Arrays.asList(dropTarget.getGroups());\n        List<String> accepts = Arrays.asList(dropTarget.getAccept());\n\n        if (groups.isEmpty() && accepts.isEmpty()) {\n            return ComponentEditType.NONE;\n        }\n\n        if (groups.contains(\"media\")) {\n            if (matches(accepts, \"image\")) {\n                return ComponentEditType.IMAGE;\n            } else if (matches(accepts, \"video\")) {\n                return ComponentEditType.VIDEO;\n            } else if (matches(accepts, \"flash\")) {\n                return ComponentEditType.FLASH;\n            } else if (accepts.size() == 1 && \".*\".equals(accepts.get(0))) {\n                return ComponentEditType.FILE;\n            }\n        } else if (groups.contains(\"page\")) {\n            return ComponentEditType.REFERENCE;\n        } else if (groups.contains(\"paragraph\")) {\n            return ComponentEditType.REFERENCE;\n        }\n\n        return ComponentEditType.TEXT;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#StringLiteral#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)InfixExpression(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement)IfStatement)IfStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "\"Intelligently\" determines the WCMEditType to use based on the DropTarget. <p> Inspects the DropTarget's Groups and Accepts to make this determination. <p> If no match can be found, defaults to TEXT", "call_func_name": ["com.day.cq.wcm.api.components.DropTarget.getGroups", "java.util.Arrays.asList", "com.day.cq.wcm.api.components.DropTarget.getAccept", "java.util.List.isEmpty", "java.util.List.contains", "com.adobe.acs.commons.wcm.impl.ComponentHelperImpl.matches", "java.util.List.size", "java.util.List.get", "java.lang.String.equals"], "call_func_parameter": [[""], ["java.lang.Object[]"], [""], [""], ["java.lang.Object"], ["java.util.List", "java.lang.String"], [""], ["int"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "1240", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/wcm/impl/ComponentHelperImpl.java", "methodName": "com.adobe.acs.commons.wcm.impl.ComponentHelperImpl.getCssStyle", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private String getCssStyle() {\n        String css = \"\";\n        css += \"<style>\";\n        css += \".\" + CSS_EDIT_MODE + \" { border:dashed 2px #ccc; color:#ccc; padding:1em; }\";\n        css += \".\" + CSS_EDIT_MODE + \" dt { font-weight: bold; }\";\n        css += \".\" + CSS_EDIT_MODE + \" dd { display:list-item; list-style-type:disc; margin-left:1.5em; }\";\n        css += \"</style>\";\n        return css;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#StringLiteral#Assignment#ExpressionStatement#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#StringLiteral#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Inline CSS style used for edit blocks. Ideally this would be a external CSS however for portability this exist in this Java class.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "1241", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/http/headers/impl/AbstractDispatcherCacheHeaderFilter.java", "methodName": "com.adobe.acs.commons.http.headers.impl.AbstractDispatcherCacheHeaderFilter.getHeaderName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected abstract String getHeaderName();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the value to place in the Cache-Control header.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1242", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/http/headers/impl/AbstractDispatcherCacheHeaderFilter.java", "methodName": "com.adobe.acs.commons.http.headers.impl.AbstractDispatcherCacheHeaderFilter.getHeaderValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected abstract String getHeaderValue();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the value to place in the Cache-Control header.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1243", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/http/headers/impl/AbstractExpiresHeaderFilter.java", "methodName": "com.adobe.acs.commons.http.headers.impl.AbstractExpiresHeaderFilter.adjustExpires", "methodParameterType": "Calendar#", "methodParameterName": "nextExpiration#", "methodBody": "protected abstract void adjustExpires(Calendar nextExpiration);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sublcass implementations will adjust the date of the specified calendar to the  next point at which content should expire. The calendar passed will be the set to the correct time the current day. Concrete implementations are required to update the Calendar to the correct <i>next</i> expiration time.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1244", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/http/HttpClientFactory.java", "methodName": "com.adobe.acs.commons.http.HttpClientFactory.getExecutor", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Executor getExecutor();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the configured Executor object from this factory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1245", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/http/HttpClientFactory.java", "methodName": "com.adobe.acs.commons.http.HttpClientFactory.get", "methodParameterType": "String#", "methodParameterName": "partialUrl#", "methodBody": "Request get(String partialUrl);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create a GET request using the base hostname and port defined in the factory configuration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1246", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/http/HttpClientFactory.java", "methodName": "com.adobe.acs.commons.http.HttpClientFactory.put", "methodParameterType": "String#", "methodParameterName": "partialUrl#", "methodBody": "Request put(String partialUrl);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create a PUT request using the base hostname and port defined in the factory configuration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1247", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/http/HttpClientFactory.java", "methodName": "com.adobe.acs.commons.http.HttpClientFactory.post", "methodParameterType": "String#", "methodParameterName": "partialUrl#", "methodBody": "Request post(String partialUrl);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create a POST request using the base hostname and port defined in the factory configuration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1248", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/http/HttpClientFactory.java", "methodName": "com.adobe.acs.commons.http.HttpClientFactory.delete", "methodParameterType": "String#", "methodParameterName": "partialUrl#", "methodBody": "Request delete(String partialUrl);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create a DELETE request using the base hostname and port defined in the factory configuration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1249", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/http/HttpClientFactory.java", "methodName": "com.adobe.acs.commons.http.HttpClientFactory.options", "methodParameterType": "String#", "methodParameterName": "partialUrl#", "methodBody": "Request options(String partialUrl);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create a OPTIONS request using the base hostname and port defined in the factory configuration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1250", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/i18n/I18nProvider.java", "methodName": "com.adobe.acs.commons.i18n.I18nProvider.translate", "methodParameterType": "String#Resource#", "methodParameterName": "key#resource#", "methodBody": "String translate(String key, Resource resource);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Provides the translated value based on resource", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1251", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/i18n/I18nProvider.java", "methodName": "com.adobe.acs.commons.i18n.I18nProvider.translate", "methodParameterType": "String#Locale#", "methodParameterName": "key#locale#", "methodBody": "String translate(String key, Locale locale);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Provides the translated value based on resource", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1252", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/i18n/I18nProvider.java", "methodName": "com.adobe.acs.commons.i18n.I18nProvider.translate", "methodParameterType": "String#HttpServletRequest#", "methodParameterName": "key#request#", "methodBody": "String translate(String key, HttpServletRequest request);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Provides the translated value based on request", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1253", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/i18n/I18nProvider.java", "methodName": "com.adobe.acs.commons.i18n.I18nProvider.i18n", "methodParameterType": "Resource#", "methodParameterName": "resource#", "methodBody": "I18n i18n(Resource resource);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Provides the i18n map based on the underlying resource", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1254", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/i18n/I18nProvider.java", "methodName": "com.adobe.acs.commons.i18n.I18nProvider.i18n", "methodParameterType": "Locale#", "methodParameterName": "locale#", "methodBody": "I18n i18n(Locale locale);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Provides the i18n map based on the underlying resource", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1255", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/i18n/I18nProvider.java", "methodName": "com.adobe.acs.commons.i18n.I18nProvider.i18n", "methodParameterType": "HttpServletRequest#", "methodParameterName": "request#", "methodBody": "I18n i18n(HttpServletRequest request);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Provides the i18n map based on the request", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1256", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/Synthesizer.java", "methodName": "com.adobe.acs.commons.synth.Synthesizer.buildResource", "methodParameterType": "ResourceResolver#String#Map<String,Object>#", "methodParameterName": "resourceResolver#resourceType#properties#", "methodBody": "public static Resource buildResource(ResourceResolver resourceResolver, String resourceType,\n                                         Map<String, Object> properties) {\n\n        SynthesizedResource synthesizedResource = new SynthesizedResource(resourceResolver, SOME_PATH, resourceType,\n                properties);\n\n        return synthesizedResource;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a synthesized resource intended for \"one-off usage\".", "call_func_name": ["com.adobe.acs.commons.synth.impl.SynthesizedResource.<init>"], "call_func_parameter": [["org.apache.sling.api.resource.ResourceResolver", "java.lang.String", "java.lang.String", "java.util.Map"]], "passed_comments": "/"}, {"index": "1257", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/Synthesizer.java", "methodName": "com.adobe.acs.commons.synth.Synthesizer.render", "methodParameterType": "String#Map<String,Object>#SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "resourceType#properties#request#response#", "methodBody": "public static String render(String resourceType, Map<String, Object> properties,\n                                SlingHttpServletRequest request, SlingHttpServletResponse response)\n            throws ServletException, IOException {\n\n        Resource synthesizedResource = buildResource(request.getResourceResolver(), resourceType, properties);\n\n        return doRender(synthesizedResource, SynthesizedSlingHttpServletRequest.METHOD_GET, \"html\", request, response);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Renders a \"one-off\" resource with the given resourceType and properties.", "call_func_name": ["org.apache.sling.api.SlingHttpServletRequest.getResourceResolver", "com.adobe.acs.commons.synth.Synthesizer.buildResource", "com.adobe.acs.commons.synth.Synthesizer.doRender"], "call_func_parameter": [[""], ["org.apache.sling.api.resource.ResourceResolver", "java.lang.String", "java.util.Map"], ["org.apache.sling.api.resource.Resource", "java.lang.String", "java.lang.String", "org.apache.sling.api.SlingHttpServletRequest", "org.apache.sling.api.SlingHttpServletResponse"]], "passed_comments": [{"com.adobe.acs.commons.synth.Synthesizer.buildResource": "Builds a synthesized resource intended for \"one-off usage\"."}]}, {"index": "1258", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/Synthesizer.java", "methodName": "com.adobe.acs.commons.synth.Synthesizer.render", "methodParameterType": "Resource#SlingHttpServletRequest#SlingHttpServletResponse#", "methodParameterName": "resource#request#response#", "methodBody": "public static String render(Resource resource, SlingHttpServletRequest request, SlingHttpServletResponse response)\n            throws ServletException, IOException {\n\n        return doRender(resource, SynthesizedSlingHttpServletRequest.METHOD_GET, \"html\", request, response);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Renders \"GET {resource}.html\"", "call_func_name": ["com.adobe.acs.commons.synth.Synthesizer.doRender"], "call_func_parameter": [["org.apache.sling.api.resource.Resource", "java.lang.String", "java.lang.String", "org.apache.sling.api.SlingHttpServletRequest", "org.apache.sling.api.SlingHttpServletResponse"]], "passed_comments": "/"}, {"index": "1259", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/impl/SynthesizedSlingHttpServletRequest.java", "methodName": "com.adobe.acs.commons.synth.impl.SynthesizedSlingHttpServletRequest.setMethod", "methodParameterType": "String#", "methodParameterName": "method#", "methodBody": "public SynthesizedSlingHttpServletRequest setMethod(String method) {\n        this.method = method;\n\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Explicitly overwrites the request method", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1260", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/impl/SynthesizedSlingHttpServletRequest.java", "methodName": "com.adobe.acs.commons.synth.impl.SynthesizedSlingHttpServletRequest.setResource", "methodParameterType": "Resource#", "methodParameterName": "resource#", "methodBody": "public SynthesizedSlingHttpServletRequest setResource(Resource resource) {\n        this.resource = resource;\n\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Explicitly overwrites the resource being request, but keeps the request resource path", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1261", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/impl/SynthesizedSlingHttpServletRequest.java", "methodName": "com.adobe.acs.commons.synth.impl.SynthesizedSlingHttpServletRequest.setResourcePath", "methodParameterType": "String#", "methodParameterName": "resourcePath#", "methodBody": "public SynthesizedSlingHttpServletRequest setResourcePath(String resourcePath) {\n        this.resourcePath = resourcePath;\n        this.isResourcePathOverridden = true;\n\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Explicitly overwrites the request resource path, but keeps the resource", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1262", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/impl/SynthesizedSlingHttpServletRequest.java", "methodName": "com.adobe.acs.commons.synth.impl.SynthesizedSlingHttpServletRequest.setExtension", "methodParameterType": "String#", "methodParameterName": "extension#", "methodBody": "public SynthesizedSlingHttpServletRequest setExtension(String extension) {\n        this.extension = extension;\n        this.isExtensionOverridden = true;\n\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Explicitly overwrites the request extension", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1263", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/impl/SynthesizedSlingHttpServletRequest.java", "methodName": "com.adobe.acs.commons.synth.impl.SynthesizedSlingHttpServletRequest.setSuffix", "methodParameterType": "String#", "methodParameterName": "suffix#", "methodBody": "public SynthesizedSlingHttpServletRequest setSuffix(String suffix) {\n        this.suffix = suffix;\n        this.isSuffixOverridden = true;\n\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Explicitly overwrites the request suffix", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1264", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/impl/SynthesizedSlingHttpServletRequest.java", "methodName": "com.adobe.acs.commons.synth.impl.SynthesizedSlingHttpServletRequest.clearSelectors", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SynthesizedSlingHttpServletRequest clearSelectors() {\n        this.selectors = new String[] {};\n        this.isSelectorOverridden = true;\n\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#Dimension#ArrayType#ArrayInitializer#ArrayCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer)ArrayInitializer)ArrayCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Explicitly clears all request selectors", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1265", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/impl/SynthesizedSlingHttpServletRequest.java", "methodName": "com.adobe.acs.commons.synth.impl.SynthesizedSlingHttpServletRequest.setSelectors", "methodParameterType": "String[]#", "methodParameterName": "selectors#", "methodBody": "public SynthesizedSlingHttpServletRequest setSelectors(String[] selectors) {\n        if (selectors == null) {\n            this.selectors = null;\n        } else {\n            this.selectors = Arrays.copyOf(selectors, selectors.length);\n        }\n        this.isSelectorOverridden = true;\n\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#NullLiteral#Assignment#ExpressionStatement#Block#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Explicitly sets the request selectors", "call_func_name": ["java.util.Arrays.copyOf"], "call_func_parameter": [["java.lang.Object[]", "int"]], "passed_comments": "/"}, {"index": "1266", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/ChildrenAsPropertyResource.java", "methodName": "com.adobe.acs.commons.synth.children.ChildrenAsPropertyResource.ChildrenAsPropertyResource", "methodParameterType": "Resource#", "methodParameterName": "resource#", "methodBody": "public ChildrenAsPropertyResource(Resource resource) throws InvalidDataFormatException {\n        this(resource, DEFAULT_PROPERTY_NAME, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "ResourceWrapper that allows resource children to be modeled in data stored into a property using the default property name of \"children\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1267", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/ChildrenAsPropertyResource.java", "methodName": "com.adobe.acs.commons.synth.children.ChildrenAsPropertyResource.ChildrenAsPropertyResource", "methodParameterType": "Resource#String#", "methodParameterName": "resource#propertyName#", "methodBody": "public ChildrenAsPropertyResource(Resource resource, String propertyName) throws InvalidDataFormatException {\n        this(resource, propertyName, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "ResourceWrapper that allows resource children to be modeled in data stored into a property.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1268", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/ChildrenAsPropertyResource.java", "methodName": "com.adobe.acs.commons.synth.children.ChildrenAsPropertyResource.ChildrenAsPropertyResource", "methodParameterType": "Resource#String#Comparator<Resource>#", "methodParameterName": "resource#propertyName#comparator#", "methodBody": "public ChildrenAsPropertyResource(Resource resource, String propertyName, Comparator<Resource> comparator)\n            throws InvalidDataFormatException {\n        super(resource);\n\n        this.resource = resource;\n        this.propertyName = propertyName;\n        this.comparator = comparator;\n\n        if (this.comparator == null) {\n            this.orderedCache = new LinkedHashSet<Resource>();\n        } else {\n            this.orderedCache = new TreeSet<Resource>(this.comparator);\n        }\n\n        this.lookupCache = new HashMap<String, Resource>();\n\n        for (SyntheticChildAsPropertyResource r : this.deserialize()) {\n            this.orderedCache.add(r);\n            this.lookupCache.put(r.getName(), r);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ThisExpression#SimpleName#FieldAccess#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#MethodInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "ResourceWrapper that allows resource children to be modeled in data stored into a property.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1269", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/ChildrenAsPropertyResource.java", "methodName": "com.adobe.acs.commons.synth.children.ChildrenAsPropertyResource.listChildren", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public final Iterator<Resource> listChildren() {\n        return IteratorUtils.getIterator(this.orderedCache);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.commons.collections.IteratorUtils.getIterator"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "1270", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/ChildrenAsPropertyResource.java", "methodName": "com.adobe.acs.commons.synth.children.ChildrenAsPropertyResource.getChildren", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public final Iterable<Resource> getChildren() {\n        return this.orderedCache;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1271", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/ChildrenAsPropertyResource.java", "methodName": "com.adobe.acs.commons.synth.children.ChildrenAsPropertyResource.getChild", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "@Override\n    public final Resource getChild(String name) {\n        return this.lookupCache.get(name);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.util.Map.get"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "1272", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/ChildrenAsPropertyResource.java", "methodName": "com.adobe.acs.commons.synth.children.ChildrenAsPropertyResource.getParent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public final Resource getParent() {\n        return this.resource;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1273", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/ChildrenAsPropertyResource.java", "methodName": "com.adobe.acs.commons.synth.children.ChildrenAsPropertyResource.delete", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public final void delete(String name) throws RepositoryException {\n        if (this.lookupCache.containsKey(name)) {\n            Resource tmp = this.lookupCache.get(name);\n            this.orderedCache.remove(tmp);\n            this.lookupCache.remove(name);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Deletes the named child. Requires subsequent call to persist().", "call_func_name": ["java.util.Map.containsKey", "java.util.Map.get", "java.util.Set.remove", "java.util.Map.remove"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "1274", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/ChildrenAsPropertyResource.java", "methodName": "com.adobe.acs.commons.synth.children.ChildrenAsPropertyResource.deleteAll", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final void deleteAll() throws InvalidDataFormatException {\n        // Clear the caches; requires serialize\n        if (this.comparator == null) {\n            this.orderedCache = new LinkedHashSet<Resource>();\n        } else {\n            this.orderedCache = new TreeSet<Resource>(this.comparator);\n        }\n\n        this.lookupCache = new HashMap<String, Resource>();\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ThisExpression#SimpleName#FieldAccess#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delete all children. Requires subsequent call to persist().", "call_func_name": ["java.util.LinkedHashSet.<init>", "java.util.TreeSet.<init>", "java.util.HashMap.<init>"], "call_func_parameter": [[""], ["java.util.Comparator"], [""]], "passed_comments": "/"}, {"index": "1275", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/ChildrenAsPropertyResource.java", "methodName": "com.adobe.acs.commons.synth.children.ChildrenAsPropertyResource.persist", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final void persist() throws RepositoryException {\n        this.serialize();\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Persist changes to the underlying valuemap so they are available for persisting to the JCR.", "call_func_name": ["com.adobe.acs.commons.synth.children.ChildrenAsPropertyResource.serialize"], "call_func_parameter": [[""]], "passed_comments": [{"com.adobe.acs.commons.synth.children.ChildrenAsPropertyResource.serialize": "Serializes all children data as JSON to the resource's propertyName."}]}, {"index": "1276", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/ChildrenAsPropertyResource.java", "methodName": "com.adobe.acs.commons.synth.children.ChildrenAsPropertyResource.serialize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void serialize() throws InvalidDataFormatException {\n        final long start = System.currentTimeMillis();\n\n        final ModifiableValueMap modifiableValueMap = this.resource.adaptTo(ModifiableValueMap.class);\n        JsonObject childrenJSON = new JsonObject();\n\n        try {\n            // Add the new entries to the JSON\n            for (Resource childResource : this.orderedCache) {\n                childrenJSON.add(childResource.getName(), this.serializeToJSON(childResource));\n            }\n\n            if (childrenJSON.entrySet().size() > 0) {\n                // Persist the JSON back to the Node\n                modifiableValueMap.put(this.propertyName, childrenJSON.toString());\n            } else {\n                // Nothing to persist; delete the property\n                modifiableValueMap.remove(this.propertyName);\n            }\n\n            log.debug(\"Persist operation for [ {} ] in [ {} ms ]\",\n                    this.resource.getPath() + \"/\" + this.propertyName,\n                    System.currentTimeMillis() - start);\n\n        } catch (NoSuchMethodException e) {\n            throw new InvalidDataFormatException(this.resource, this.propertyName, childrenJSON.toString());\n        } catch (IllegalAccessException e) {\n            throw new InvalidDataFormatException(this.resource, this.propertyName, childrenJSON.toString());\n        } catch (InvocationTargetException e) {\n            throw new InvalidDataFormatException(this.resource, this.propertyName, childrenJSON.toString());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ThisExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#StringLiteral#ThisExpression#SimpleName#FieldAccess#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Serializes all children data as JSON to the resource's propertyName.", "call_func_name": ["java.lang.System.currentTimeMillis", "org.apache.sling.api.resource.Resource.adaptTo", "com.google.gson.JsonObject.<init>", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.sling.api.resource.Resource.getName", "com.adobe.acs.commons.synth.children.ChildrenAsPropertyResource.serializeToJSON", "com.google.gson.JsonObject.add", "com.google.gson.JsonObject.entrySet", "java.util.Set.size", "com.google.gson.JsonObject.toString", "org.apache.sling.api.resource.ModifiableValueMap.put", "org.apache.sling.api.resource.ModifiableValueMap.remove", "java.lang.StringBuilder.<init>", "org.apache.sling.api.resource.Resource.getPath", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.Long.valueOf", "org.slf4j.Logger.debug", "com.adobe.acs.commons.synth.children.InvalidDataFormatException.<init>"], "call_func_parameter": [[""], ["java.lang.Class"], [""], [""], [""], [""], [""], ["org.apache.sling.api.resource.Resource"], ["java.lang.String", "com.google.gson.JsonElement"], [""], [""], [""], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object"], [""], [""], ["java.lang.String"], [""], ["long"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["org.apache.sling.api.resource.Resource", "java.lang.String", "java.lang.String"]], "passed_comments": [{"com.adobe.acs.commons.synth.children.ChildrenAsPropertyResource.serializeToJSON": "Converts a list of SyntheticChildAsPropertyResource to their JSON representation, keeping the provided order."}]}, {"index": "1277", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/ChildrenAsPropertyResource.java", "methodName": "com.adobe.acs.commons.synth.children.ChildrenAsPropertyResource.deserialize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private List<SyntheticChildAsPropertyResource> deserialize() throws InvalidDataFormatException {\n        final long start = System.currentTimeMillis();\n\n        final String propertyData = this.resource.getValueMap().get(this.propertyName, EMPTY_JSON);\n\n        List<SyntheticChildAsPropertyResource> resources;\n\n        resources = deserializeToSyntheticChildResources(JsonObjectUtil.toJsonObject(propertyData));\n\n        if (this.comparator != null) {\n            Collections.sort(resources, this.comparator);\n        }\n\n        log.debug(\"Get operation for [ {} ] in [ {} ms ]\",\n                this.resource.getPath() + \"/\" + this.propertyName,\n                System.currentTimeMillis() - start);\n\n        return resources;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#StringLiteral#ThisExpression#SimpleName#FieldAccess#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convert the serialized JSON data found in the node property to Resources.", "call_func_name": ["java.lang.System.currentTimeMillis", "org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.get", "com.adobe.acs.commons.json.JsonObjectUtil.toJsonObject", "com.adobe.acs.commons.synth.children.ChildrenAsPropertyResource.deserializeToSyntheticChildResources", "java.util.Collections.sort", "java.lang.StringBuilder.<init>", "org.apache.sling.api.resource.Resource.getPath", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.Long.valueOf", "org.slf4j.Logger.debug"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String"], ["com.google.gson.JsonObject"], ["java.util.List", "java.util.Comparator"], [""], [""], ["java.lang.String"], [""], ["long"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.synth.children.ChildrenAsPropertyResource.deserializeToSyntheticChildResources": "Converts a JSONObject to the list of SyntheticChildAsPropertyResources."}]}, {"index": "1278", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/ChildrenAsPropertyResource.java", "methodName": "com.adobe.acs.commons.synth.children.ChildrenAsPropertyResource.serializeToJSON", "methodParameterType": "Resource#", "methodParameterName": "resourceToSerialize#", "methodBody": "protected final JsonObject serializeToJSON(final Resource resourceToSerialize)\n            throws IllegalAccessException, NoSuchMethodException, InvocationTargetException {\n\n        final DateTimeFormatter dtf = ISODateTimeFormat.dateTime();\n        final Map<String, Object> serializedData = new HashMap<String, Object>();\n\n        for (Map.Entry<String, Object> entry : resourceToSerialize.getValueMap().entrySet()) {\n            if (entry.getValue() instanceof Calendar) {\n                final Calendar cal = (Calendar) entry.getValue();\n                serializedData.put(entry.getKey(), dtf.print(cal.getTimeInMillis()));\n            } else if (entry.getValue() instanceof Date) {\n                final Date date = (Date) entry.getValue();\n                serializedData.put(entry.getKey(), dtf.print(date.getTime()));\n            } else {\n                serializedData.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        Gson gson = new Gson();\n        return gson.toJsonTree(serializedData).getAsJsonObject();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)EnhancedForStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts a list of SyntheticChildAsPropertyResource to their JSON representation, keeping the provided order.", "call_func_name": ["org.joda.time.format.ISODateTimeFormat.dateTime", "java.util.HashMap.<init>", "org.apache.sling.api.resource.Resource.getValueMap", "org.apache.sling.api.resource.ValueMap.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.Calendar.getTimeInMillis", "org.joda.time.format.DateTimeFormatter.print", "java.util.Map.put", "java.util.Date.getTime", "com.google.gson.Gson.<init>", "com.google.gson.Gson.toJsonTree", "com.google.gson.JsonElement.getAsJsonObject"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], [""], [""], ["long"], ["java.lang.Object", "java.lang.Object"], [""], [""], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "1279", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/ChildrenAsPropertyResource.java", "methodName": "com.adobe.acs.commons.synth.children.ChildrenAsPropertyResource.deserializeToSyntheticChildResources", "methodParameterType": "JsonObject#", "methodParameterName": "jsonObject#", "methodBody": "protected final List<SyntheticChildAsPropertyResource> deserializeToSyntheticChildResources(JsonObject jsonObject) {\n        final List<SyntheticChildAsPropertyResource> resources = new ArrayList<>();\n\n        for (Entry<String, JsonElement> elem : jsonObject.entrySet()) {\n            final String nodeName = elem.getKey();\n            JsonObject entryJSON = elem.getValue().getAsJsonObject();\n\n            if (entryJSON == null) {\n                continue;\n            }\n\n            final ValueMap properties = new ValueMapDecorator(new HashMap<>());\n            for (Entry<String, JsonElement> prop : entryJSON.entrySet()) {\n                final String propName = prop.getKey();\n                properties.put(propName, prop.getValue().getAsString());\n            }\n\n            resources.add(new SyntheticChildAsPropertyResource(this.getParent(), nodeName, properties));\n        }\n\n        return resources;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ContinueStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts a JSONObject to the list of SyntheticChildAsPropertyResources.", "call_func_name": ["java.util.ArrayList.<init>", "com.google.gson.JsonObject.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.google.gson.JsonElement.getAsJsonObject", "java.util.HashMap.<init>", "org.apache.sling.api.wrappers.ValueMapDecorator.<init>", "com.google.gson.JsonElement.getAsString", "org.apache.sling.api.resource.ValueMap.put", "com.adobe.acs.commons.synth.children.ChildrenAsPropertyResource.getParent", "com.adobe.acs.commons.synth.children.SyntheticChildAsPropertyResource.<init>", "java.util.List.add"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], [""], ["java.util.Map"], [""], ["java.lang.Object", "java.lang.Object"], [""], ["org.apache.sling.api.resource.Resource", "java.lang.String", "java.util.Map"], ["java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.synth.children.ChildrenAsPropertyResource.getParent": "{@inheritDoc}"}]}, {"index": "1280", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/impl/JSONModifiableValueMapDecorator.java", "methodName": "com.adobe.acs.commons.synth.children.impl.JSONModifiableValueMapDecorator.JSONModifiableValueMapDecorator", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public JSONModifiableValueMapDecorator() {\n        super(new HashMap<String, Object>());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates an empty JSONModifiableValueMapDecorator.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1281", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/impl/JSONModifiableValueMapDecorator.java", "methodName": "com.adobe.acs.commons.synth.children.impl.JSONModifiableValueMapDecorator.JSONModifiableValueMapDecorator", "methodParameterType": "Map<String,Object>#", "methodParameterName": "base#", "methodBody": "public JSONModifiableValueMapDecorator(final Map<String, Object> base) {\n        super(base);\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates an pre-populated JSONModifiableValueMapDecorator.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1282", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/impl/JSONModifiableValueMapDecorator.java", "methodName": "com.adobe.acs.commons.synth.children.impl.JSONModifiableValueMapDecorator.get", "methodParameterType": "String#Class<T>#", "methodParameterName": "name#type#", "methodBody": "@Override\n    public <T> T get(String name, Class<T> type) {\n        try {\n            if (Calendar.class.equals(type)) {\n                return (T) getCalendar(name);\n            } else if (Date.class.equals(type)) {\n                return (T) getDate(name);\n            } else if (BigDecimal.class.equals(type)) {\n                return (T) getBigDecimal(name);\n            } else if (Integer.class.equals(type)) {\n                return (T) getInteger(name);\n            } else {\n                return super.get(name, type);\n            }\n        } catch (Exception e) {\n            log.warn(\"Unable to get property [ {} ] as [ {} ]. Returning null.\", name, type);\n            return null;\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SuperMethodInvocation#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block(Block(ReturnStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)ReturnStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}<p> Special implementation of get to handle Date and Calendar interoperability, BigDecimals and Integers.", "call_func_name": ["java.lang.Object.equals", "com.adobe.acs.commons.synth.children.impl.JSONModifiableValueMapDecorator.getCalendar", "com.adobe.acs.commons.synth.children.impl.JSONModifiableValueMapDecorator.getDate", "com.adobe.acs.commons.synth.children.impl.JSONModifiableValueMapDecorator.getBigDecimal", "com.adobe.acs.commons.synth.children.impl.JSONModifiableValueMapDecorator.getInteger", "org.apache.sling.api.wrappers.ModifiableValueMapDecorator.get", "org.slf4j.Logger.warn"], "call_func_parameter": [["java.lang.Object"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.Class"], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": [{"com.adobe.acs.commons.synth.children.impl.JSONModifiableValueMapDecorator.getCalendar": "Coerces the value at  {@param name} to a Calendar object."}, {"com.adobe.acs.commons.synth.children.impl.JSONModifiableValueMapDecorator.getDate": "Coerces the value at  {@param name} to a Date object."}, {"com.adobe.acs.commons.synth.children.impl.JSONModifiableValueMapDecorator.getBigDecimal": "Coerces the value at  {@param name} to a BigDecimal object."}, {"com.adobe.acs.commons.synth.children.impl.JSONModifiableValueMapDecorator.getInteger": "Coerces the value at  {@param name} to a Integer object."}]}, {"index": "1283", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/impl/JSONModifiableValueMapDecorator.java", "methodName": "com.adobe.acs.commons.synth.children.impl.JSONModifiableValueMapDecorator.get", "methodParameterType": "String#T#", "methodParameterName": "name#defaultValue#", "methodBody": "@Override\n    public <T> T get(String name, T defaultValue) {\n        if (defaultValue == null) {\n            return (T) this.get(name);\n        }\n\n        Class<T> type = (Class<T>) defaultValue.getClass();\n\n        T value = get(name, type);\n        if (value == null) {\n            value = defaultValue;\n        }\n\n        return value;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1284", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/impl/JSONModifiableValueMapDecorator.java", "methodName": "com.adobe.acs.commons.synth.children.impl.JSONModifiableValueMapDecorator.getCalendar", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "private Calendar getCalendar(String name) {\n        Object obj = super.get(name);\n        if (obj instanceof Calendar) {\n            return (Calendar) obj;\n        } else if (obj instanceof Date) {\n            Calendar cal = Calendar.getInstance();\n            cal.setTime((Date) obj);\n            return cal;\n        } else {\n            String tmp = super.get(name, String.class);\n            final DateTime dateTime = ISODateTimeFormat.dateTime().parseDateTime(tmp);\n            if (dateTime != null) {\n                final Calendar cal = Calendar.getInstance();\n                cal.setTime(dateTime.toDate());\n                return cal;\n            } else {\n                return null;\n            }\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SuperMethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SuperMethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#NullLiteral#ReturnStatement#Block#IfStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)SuperMethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Coerces the value at  {@param name} to a Calendar object.", "call_func_name": ["org.apache.sling.api.wrappers.ModifiableValueMapDecorator.get", "java.util.Calendar.getInstance", "java.util.Calendar.setTime", "org.apache.sling.api.wrappers.ModifiableValueMapDecorator.get", "org.joda.time.format.ISODateTimeFormat.dateTime", "org.joda.time.format.DateTimeFormatter.parseDateTime", "org.joda.time.DateTime.toDate"], "call_func_parameter": [["java.lang.Object"], [""], ["java.util.Date"], ["java.lang.String", "java.lang.Class"], [""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "1285", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/impl/JSONModifiableValueMapDecorator.java", "methodName": "com.adobe.acs.commons.synth.children.impl.JSONModifiableValueMapDecorator.getDate", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "private Date getDate(String name) {\n        Object obj = super.get(name);\n        if (obj instanceof Date) {\n            return (Date) obj;\n        } else if (obj instanceof Calendar) {\n            Calendar cal = (Calendar) obj;\n            return cal.getTime();\n        } else {\n            String tmp = super.get(name, String.class);\n            final DateTime dateTime = ISODateTimeFormat.dateTime().parseDateTime(tmp);\n            if (dateTime != null) {\n                return dateTime.toDate();\n            } else {\n                return null;\n            }\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SuperMethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SuperMethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#NullLiteral#ReturnStatement#Block#IfStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)SuperMethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Coerces the value at  {@param name} to a Date object.", "call_func_name": ["org.apache.sling.api.wrappers.ModifiableValueMapDecorator.get", "java.util.Calendar.getTime", "org.apache.sling.api.wrappers.ModifiableValueMapDecorator.get", "org.joda.time.format.ISODateTimeFormat.dateTime", "org.joda.time.format.DateTimeFormatter.parseDateTime", "org.joda.time.DateTime.toDate"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.String", "java.lang.Class"], [""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "1286", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/impl/JSONModifiableValueMapDecorator.java", "methodName": "com.adobe.acs.commons.synth.children.impl.JSONModifiableValueMapDecorator.getInteger", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "private Integer getInteger(String name) {\n        Object obj = super.get(name);\n        if (obj instanceof Integer) {\n            return (Integer) obj;\n        } else if (obj instanceof Double) {\n            Double tmp = (Double) obj;\n            return tmp.intValue();\n        } else if (obj instanceof Long) {\n            Long tmp = (Long) obj;\n            return tmp.intValue();\n        } else {\n            String tmp = super.get(name, String.class);\n            return Integer.parseInt(tmp);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SuperMethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SuperMethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)SuperMethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Coerces the value at  {@param name} to a Integer object.", "call_func_name": ["org.apache.sling.api.wrappers.ModifiableValueMapDecorator.get", "java.lang.Double.intValue", "java.lang.Integer.valueOf", "java.lang.Long.intValue", "org.apache.sling.api.wrappers.ModifiableValueMapDecorator.get", "java.lang.Integer.parseInt"], "call_func_parameter": [["java.lang.Object"], [""], ["int"], [""], ["java.lang.String", "java.lang.Class"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "1287", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/impl/JSONModifiableValueMapDecorator.java", "methodName": "com.adobe.acs.commons.synth.children.impl.JSONModifiableValueMapDecorator.getBigDecimal", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "private BigDecimal getBigDecimal(String name) {\n        Object obj = super.get(name);\n        if (obj instanceof BigDecimal) {\n            return (BigDecimal) obj;\n        } else if (obj instanceof Double) {\n            return BigDecimal.valueOf((Double) obj);\n        } else if (obj instanceof Long) {\n            return BigDecimal.valueOf((Long) obj);\n        } else if (obj instanceof Integer) {\n            return BigDecimal.valueOf((Integer) obj);\n        } else {\n            String tmp = super.get(name, String.class);\n            return new BigDecimal(tmp);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SuperMethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SuperMethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)SuperMethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Coerces the value at  {@param name} to a BigDecimal object.", "call_func_name": ["org.apache.sling.api.wrappers.ModifiableValueMapDecorator.get", "java.lang.Double.doubleValue", "java.math.BigDecimal.valueOf", "java.lang.Long.longValue", "java.math.BigDecimal.valueOf", "java.lang.Integer.intValue", "org.apache.sling.api.wrappers.ModifiableValueMapDecorator.get", "java.math.BigDecimal.<init>"], "call_func_parameter": [["java.lang.Object"], [""], ["double"], [""], ["long"], [""], ["java.lang.String", "java.lang.Class"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "1288", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/SyntheticChildAsPropertyResource.java", "methodName": "com.adobe.acs.commons.synth.children.SyntheticChildAsPropertyResource.SyntheticChildAsPropertyResource", "methodParameterType": "Resource#String#", "methodParameterName": "parent#nodeName#", "methodBody": "public SyntheticChildAsPropertyResource(Resource parent, String nodeName) {\n        super(parent.getResourceResolver(), parent.getPath() + \"/\" + nodeName, RESOURCE_TYPE);\n        this.data = new JSONModifiableValueMapDecorator();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#SimpleName#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SyntheticChildAsPropertyResource.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1289", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/SyntheticChildAsPropertyResource.java", "methodName": "com.adobe.acs.commons.synth.children.SyntheticChildAsPropertyResource.SyntheticChildAsPropertyResource", "methodParameterType": "Resource#String#Map<String,Object>#", "methodParameterName": "parent#nodeName#data#", "methodBody": "public SyntheticChildAsPropertyResource(Resource parent, String nodeName, Map<String, Object> data) {\n        super(parent.getResourceResolver(), parent.getPath() + \"/\" + nodeName, RESOURCE_TYPE);\n        if (data != null) {\n            this.data = new JSONModifiableValueMapDecorator(data);\n        } else {\n            this.data = new JSONModifiableValueMapDecorator();\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#SimpleName#SuperConstructorInvocation#SimpleName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)SuperConstructorInvocation(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new SyntheticChildAsPropertyResource.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1290", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/SyntheticChildAsPropertyResource.java", "methodName": "com.adobe.acs.commons.synth.children.SyntheticChildAsPropertyResource.getValueMap", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public final ValueMap getValueMap() {\n        return this.data;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1291", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/synth/children/SyntheticChildAsPropertyResource.java", "methodName": "com.adobe.acs.commons.synth.children.SyntheticChildAsPropertyResource.adaptTo", "methodParameterType": "Class<AdapterType>#", "methodParameterName": "type#", "methodBody": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public final <AdapterType> AdapterType adaptTo(Class<AdapterType> type) {\n        if (type == ValueMap.class\n                || type == ModifiableValueMap.class) {\n            return (AdapterType) this.data;\n        }\n\n        return super.adaptTo(type);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#TypeLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#TypeLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#CastExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SuperMethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)CastExpression)ReturnStatement)Block)IfStatement(ReturnStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.sling.api.resource.SyntheticResource.adaptTo"], "call_func_parameter": [["java.lang.Class"]], "passed_comments": "/"}, {"index": "1292", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/version/EvolutionContext.java", "methodName": "com.adobe.acs.commons.version.EvolutionContext.getEvolutionItems", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<Evolution> getEvolutionItems();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return List of resource evolutions with artificial \"Latest\" evolution.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1293", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/version/EvolutionContext.java", "methodName": "com.adobe.acs.commons.version.EvolutionContext.getVersions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<Evolution> getVersions();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return List of resource evolutions.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1294", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/version/EvolutionAnalyser.java", "methodName": "com.adobe.acs.commons.version.EvolutionAnalyser.getEvolutionContext", "methodParameterType": "Resource#", "methodParameterName": "resource#", "methodBody": "public EvolutionContext getEvolutionContext(Resource resource);", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Generate an EvolutionContext for a particular resource.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1295", "file": "/root/repos/repos24/acs-aem-commons/bundle/src/main/java/com/adobe/acs/commons/version/Evolution.java", "methodName": "com.adobe.acs.commons.version.Evolution.getVersionEntries", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<EvolutionEntry> getVersionEntries();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the list of individual entries in this evolution from the prior version.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}]