[{"index": "0", "file": "/root/repos/repos16/args4j/args4j/examples/SampleStarter.java", "methodName": ".SampleStarter.xrun", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void xrun() {\n\t\tSystem.out.println(\"SampleStarter.run()\");\n\t\tSystem.out.println(this);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "First try is to run this <tt>run()</tt> method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1", "file": "/root/repos/repos16/args4j/args4j/examples/SampleStarter.java", "methodName": ".SampleStarter.run", "methodParameterType": "String[]#", "methodParameterName": "args#", "methodBody": "public void run(String[] args) {\n\t\tSystem.out.println(\"SampleStarter.run(String[])\");\n\t\tSystem.out.println(\"- args.length: \" + args.length);\n\t\tfor (String arg : args) System.out.println(\"  - \" + arg);\n\t\tSystem.out.println(this);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#EnhancedForStatement#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)EnhancedForStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "If you want to get the args-Array from the command line use the signature <tt>run(String[] args)</tt>. But then there must  not be a run() because that is executed prior to this.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/MapOptionHandler.java", "methodName": "org.kohsuke.args4j.spi.MapOptionHandler.createNewCollection", "methodParameterType": "Class<? extends Map>#", "methodParameterName": "type#", "methodBody": "protected Map createNewCollection(Class<? extends Map> type) {\n        return new HashMap();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance of the collection.", "call_func_name": ["java.util.HashMap.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "3", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/MapOptionHandler.java", "methodName": "org.kohsuke.args4j.spi.MapOptionHandler.addToMap", "methodParameterType": "String#Map#", "methodParameterName": "argument#m#", "methodBody": "protected void addToMap(String argument, Map m) throws CmdLineException {\n    \tif (String.valueOf(argument).indexOf('=') == -1) {\n    \t\tthrow new CmdLineException(owner,Messages.FORMAT_ERROR_FOR_MAP);\n    \t}\n\n\t\tString mapKey;\n\t\tString mapValue;\n\n\t\t//Splitting off the key from the value\n        int idx = argument.indexOf('=');\n        if (idx>=0) {\n            mapKey = argument.substring(0, idx);\n            mapValue = argument.substring(idx + 1);\n            if (mapValue.length()==0)\n                // Kohsuke: I think this is a bad choice, but this is needed to remain backward compatible\n                mapValue = null;\n        } else {\n            mapKey = argument;\n            mapValue = null;\n        }\n\n    \tif (mapKey.length()==0) {\n    \t\tthrow new CmdLineException(owner,Messages.MAP_HAS_NO_KEY);\n    \t}\n\n        addToMap(m, mapKey, mapValue);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#CharacterLiteral#MethodInvocation#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#NullLiteral#Assignment#ExpressionStatement#IfStatement#Block#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)IfStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Encapsulates how a single string argument gets converted into key and value.", "call_func_name": ["java.lang.String.valueOf", "java.lang.String.indexOf", "org.kohsuke.args4j.CmdLineException.<init>", "java.lang.String.substring", "java.lang.String.substring", "java.lang.String.length", "org.kohsuke.args4j.spi.MapOptionHandler.addToMap"], "call_func_parameter": [["java.lang.Object"], ["int"], ["org.kohsuke.args4j.CmdLineParser", "org.kohsuke.args4j.Localizable", "java.lang.String[]"], ["int", "int"], ["int"], [""], ["java.util.Map", "java.lang.String", "java.lang.String"]], "passed_comments": [{"org.kohsuke.args4j.spi.MapOptionHandler.addToMap": "This is the opportunity to convert values to some typed objects."}]}, {"index": "4", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/MapOptionHandler.java", "methodName": "org.kohsuke.args4j.spi.MapOptionHandler.addToMap", "methodParameterType": "Map#String#String#", "methodParameterName": "m#key#value#", "methodBody": "protected void addToMap(Map m, String key, String value) {\n        m.put(key,value);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "This is the opportunity to convert values to some typed objects.", "call_func_name": ["java.util.Map.put"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "5", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/Parameters.java", "methodName": "org.kohsuke.args4j.spi.Parameters.getParameter", "methodParameterType": "int#", "methodParameterName": "idx#", "methodBody": "String getParameter(int idx) throws CmdLineException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Gets the additional parameter to this option.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "6", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/Parameters.java", "methodName": "org.kohsuke.args4j.spi.Parameters.size", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int size();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Number of remaining tokens.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "7", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/Getter.java", "methodName": "org.kohsuke.args4j.spi.Getter.getValueList", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<T> getValueList();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets the current value of the property. <p> A  {@link Getter} object has an implicit knowledge about the property it's getting,and the instance of the option bean.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "8", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/OneArgumentOptionHandler.java", "methodName": "org.kohsuke.args4j.spi.OneArgumentOptionHandler.parse", "methodParameterType": "String#", "methodParameterName": "argument#", "methodBody": "protected abstract T parse(String argument) throws NumberFormatException, CmdLineException;", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Parses a string to a real value of Type &lt;T&gt;.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "9", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/ConfigElement.java", "methodName": "org.kohsuke.args4j.spi.ConfigElement.isInvalid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isInvalid() {\n\t\treturn field == null && method == null || field != null && method != null;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Ensures that only a field XOR a method is set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "10", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/OptionHandler.java", "methodName": "org.kohsuke.args4j.spi.OptionHandler.parseArguments", "methodParameterType": "Parameters#", "methodParameterName": "params#", "methodBody": "public abstract int parseArguments( Parameters params ) throws CmdLineException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Called if the option that this owner recognizes is found.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "11", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/OptionHandler.java", "methodName": "org.kohsuke.args4j.spi.OptionHandler.getDefaultMetaVariable", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract String getDefaultMetaVariable();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets the default meta variable name used to print the usage screen. The value returned by this method can be a reference in the {@code ResourceBundle}, if one was passed to {@link CmdLineParser}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "12", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/OptionHandler.java", "methodName": "org.kohsuke.args4j.spi.OptionHandler.getNameAndMeta", "methodParameterType": "ResourceBundle#", "methodParameterName": "rb#", "methodBody": "public final String getNameAndMeta(ResourceBundle rb) {\n        return getNameAndMeta(rb, ParserProperties.defaults());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get string representing usage for this option, of the form \"name metaval\", e.g. \"-foo VALUE\" or \"--foo VALUE\"", "call_func_name": ["org.kohsuke.args4j.ParserProperties.defaults", "org.kohsuke.args4j.spi.OptionHandler.getNameAndMeta"], "call_func_parameter": [[""], ["java.util.ResourceBundle", "org.kohsuke.args4j.ParserProperties"]], "passed_comments": [{"org.kohsuke.args4j.ParserProperties.defaults": "Returns an instance of the default parser properties. This instance can be manipulated with the  {@code withXXX()} methodsin this class."}, {"org.kohsuke.args4j.spi.OptionHandler.getNameAndMeta": "Get string representing usage for this option, of the form \"name metaval\" or \"name=metaval, e.g. \"--foo VALUE\" or \"--foo=VALUE\""}]}, {"index": "13", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/OptionHandler.java", "methodName": "org.kohsuke.args4j.spi.OptionHandler.getNameAndMeta", "methodParameterType": "ResourceBundle#ParserProperties#", "methodParameterName": "rb#properties#", "methodBody": "public final String getNameAndMeta(ResourceBundle rb, ParserProperties properties) {\n    \tString str = option.isArgument() ? \"\" : option.toString();\n    \tString meta = getMetaVariable(rb);\n    \tif (meta != null) {\n    \t\tif (str.length() > 0) {\n    \t\t\tstr += properties.getOptionValueDelimiter();\n    \t\t}\n    \t\tstr += meta;\n    \t}\n    \treturn str;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get string representing usage for this option, of the form \"name metaval\" or \"name=metaval, e.g. \"--foo VALUE\" or \"--foo=VALUE\"", "call_func_name": ["org.kohsuke.args4j.OptionDef.isArgument", "org.kohsuke.args4j.OptionDef.toString", "org.kohsuke.args4j.spi.OptionHandler.getMetaVariable", "java.lang.String.length", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.kohsuke.args4j.ParserProperties.getOptionValueDelimiter", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], ["java.util.ResourceBundle"], [""], [""], ["java.lang.String"], [""], [""]], "passed_comments": "/"}, {"index": "14", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/OptionHandler.java", "methodName": "org.kohsuke.args4j.spi.OptionHandler.print", "methodParameterType": "T#", "methodParameterName": "v#", "methodBody": "protected String print(T v) {\n        return String.valueOf(v);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The opposite of the parse operation. This method is used to print the usage screen.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "15", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/OptionHandler.java", "methodName": "org.kohsuke.args4j.spi.OptionHandler.printDefaultValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String printDefaultValue() {\n        if (setter instanceof Getter) {\n            Getter getter = (Getter)setter;\n            List<T> defaultValues = getter.getValueList();\n            if (defaultValues != null && !defaultValues.isEmpty()) {\n                StringBuilder buf = new StringBuilder();\n                if (defaultValues.size()>1) {\n                    for (T v : defaultValues) {\n                        buf.append( buf.length()==0 ? '[' : ',' );\n                        buf.append(print(v));\n                    }\n                    buf.append(']');\n                } else {\n                    buf.append(print(defaultValues.get(0)));\n                }\n                return buf.toString();\n            }\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#CharacterLiteral#CharacterLiteral#ConditionalExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(CharacterLiteral)CharacterLiteral(CharacterLiteral)CharacterLiteral)ConditionalExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Prints the default value by introspecting the current setter as  {@link Getter}.", "call_func_name": ["org.kohsuke.args4j.spi.Getter.getValueList", "java.util.List.isEmpty", "java.lang.StringBuilder.<init>", "java.util.List.size", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.StringBuilder.length", "java.lang.StringBuilder.append", "org.kohsuke.args4j.spi.OptionHandler.print", "java.lang.StringBuilder.append", "java.util.List.get", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], [""], [""], ["char"], ["java.lang.Object"], ["java.lang.String"], ["int"], [""]], "passed_comments": [{"org.kohsuke.args4j.spi.Getter.getValueList": "Gets the current value of the property. <p> A  {@link Getter} object has an implicit knowledge about the property it's getting,and the instance of the option bean."}]}, {"index": "16", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/ArrayFieldSetter.java", "methodName": "org.kohsuke.args4j.spi.ArrayFieldSetter.trySetDefault", "methodParameterType": "Object#", "methodParameterName": "bean1#", "methodBody": "private void trySetDefault(Object bean1) throws IllegalAccessError {\n        try {\n            doSetDefault(bean1);\n        } catch (IllegalAccessException ex) {\n            try {\n                // try again\n                f.setAccessible(true);\n                doSetDefault(bean1);\n            }catch (IllegalAccessException ex1) {\n                throw new IllegalAccessError(ex1.getMessage());\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Remember default so we throw away the default when adding user values.", "call_func_name": ["org.kohsuke.args4j.spi.ArrayFieldSetter.doSetDefault", "java.lang.reflect.Field.setAccessible", "java.lang.IllegalAccessException.getMessage", "java.lang.IllegalAccessError.<init>"], "call_func_parameter": [["java.lang.Object"], ["boolean"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "17", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/StringArrayOptionHandler.java", "methodName": "org.kohsuke.args4j.spi.StringArrayOptionHandler.getDefaultMetaVariable", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n\tpublic String getDefaultMetaVariable() {\n            return Messages.DEFAULT_META_STRING_ARRAY_OPTION_HANDLER.format();            \n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns  {@code \"STRING[]\"}.", "call_func_name": ["org.kohsuke.args4j.spi.Messages.format"], "call_func_parameter": [["java.lang.Object[]"]], "passed_comments": "/"}, {"index": "18", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/StringArrayOptionHandler.java", "methodName": "org.kohsuke.args4j.spi.StringArrayOptionHandler.parseArguments", "methodParameterType": "Parameters#", "methodParameterName": "params#", "methodBody": "@Override\n\tpublic int parseArguments(Parameters params) throws CmdLineException {\n        int counter=0;\n\t\tfor (; counter<params.size(); counter++) {\n\t\t\tString param = params.getParameter(counter);\n\n            if(param.startsWith(\"-\")) {\n\t\t\t\tbreak;\n\t\t\t}\n\n            for (String p : param.split(\" \")) {\n                setter.addValue(p);\n            }\n\t\t}\n\n        return counter;\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#BreakStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(BreakStatement)BreakStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tries to parse  {@code String[]} argument from {@link Parameters}.", "call_func_name": ["org.kohsuke.args4j.spi.Parameters.size", "org.kohsuke.args4j.spi.Parameters.getParameter", "java.lang.String.startsWith", "java.lang.String.split", "org.kohsuke.args4j.spi.Setter.addValue"], "call_func_parameter": [[""], ["int"], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object"]], "passed_comments": [{"org.kohsuke.args4j.spi.Parameters.size": "Number of remaining tokens."}, {"org.kohsuke.args4j.spi.Parameters.getParameter": "Gets the additional parameter to this option."}]}, {"index": "19", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/DelimitedOptionHandler.java", "methodName": "org.kohsuke.args4j.spi.DelimitedOptionHandler.printDefaultValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String printDefaultValue() {\n        if (setter instanceof Getter) {\n            Getter getter = (Getter)setter;\n            List<T> defaultValues = getter.getValueList();\n\n            StringBuilder buf = new StringBuilder();\n            for (T v : defaultValues) {\n                if (buf.length()>0)     buf.append(delimiter);\n                buf.append(print(v));\n            }\n            return buf.toString();\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Prints the default value by introspecting the current setter as  {@link Getter}.", "call_func_name": ["org.kohsuke.args4j.spi.Getter.getValueList", "java.lang.StringBuilder.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.StringBuilder.length", "java.lang.StringBuilder.append", "org.kohsuke.args4j.spi.DelimitedOptionHandler.print", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.Object"], [""]], "passed_comments": [{"org.kohsuke.args4j.spi.Getter.getValueList": "Gets the current value of the property. <p> A  {@link Getter} object has an implicit knowledge about the property it's getting,and the instance of the option bean."}]}, {"index": "20", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/Setter.java", "methodName": "org.kohsuke.args4j.spi.Setter.addValue", "methodParameterType": "T#", "methodParameterName": "value#", "methodBody": "void addValue(T value) throws CmdLineException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Adds/sets a value to the property of the option bean. <p> A  {@link Setter} object has an implicit knowledge about the property it's setting,and the instance of the option bean.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "21", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/Setter.java", "methodName": "org.kohsuke.args4j.spi.Setter.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Class<T> getType();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets the type of the underlying method/field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "22", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/Setter.java", "methodName": "org.kohsuke.args4j.spi.Setter.isMultiValued", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isMultiValued();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Whether this setter is intrinsically multi-valued. <p> When parsing arguments (instead of options), intrinsically multi-valued setters consume all the remaining arguments. So, if the setter can store multiple values,  this method should return  {@code true}. <p> This characteristics of a setter doesn't affect option parsing at all; any options can be specified multiple times.  In many cases, this is a no-op--but when your shell script expands multiple environment variables (each of which may contain options), tolerating such  redundant options can be useful.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "23", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/Setter.java", "methodName": "org.kohsuke.args4j.spi.Setter.asFieldSetter", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "FieldSetter asFieldSetter();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "If this setter encapsulates a field, return the direct access to that field as {@link FieldSetter}. This method serves two purposes: <ol> <li>This lets  {@link OptionHandler}s bypass the collection/array handling of fields. This is useful if you're defining an option handler that produces array or collection from a single argument.</li> <li>The other is to retrieve the current value of the field (via  {@link FieldSetter#getValueList()}).</li> </ol>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "24", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/spi/Setter.java", "methodName": "org.kohsuke.args4j.spi.Setter.asAnnotatedElement", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AnnotatedElement asAnnotatedElement();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the  {@link AnnotatedElement} by which you can access annotations written on this setter.This is the same  {@link AnnotatedElement} that had {@link Option}/ {@link Argument}. <p> This enables  {@link OptionHandler} to further tweak its behavior based on additional annotations.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "25", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/Utilities.java", "methodName": "org.kohsuke.args4j.Utilities.checkNonNull", "methodParameterType": "Object#String#", "methodParameterName": "obj#name#", "methodBody": "static void checkNonNull(Object obj, String name) {\n        if (obj == null) {\n            throw new NullPointerException(name+\" is null\");\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "This method is similar to  {@code Objects.requireNonNull()}. But this one is available for JDK 1.6 which is the current target of args4j. I didn't want to break compatibility with JDK 1.6.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.NullPointerException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "26", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/ParserProperties.java", "methodName": "org.kohsuke.args4j.ParserProperties.defaults", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static ParserProperties defaults() {\n        return new ParserProperties();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an instance of the default parser properties. This instance can be manipulated with the  {@code withXXX()} methodsin this class.", "call_func_name": ["org.kohsuke.args4j.ParserProperties.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "27", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/ParserProperties.java", "methodName": "org.kohsuke.args4j.ParserProperties.withAtSyntax", "methodParameterType": "boolean#", "methodParameterName": "atSyntax#", "methodBody": "public ParserProperties withAtSyntax(boolean atSyntax) {\n        this.atSyntax = atSyntax;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Toggles the parsing of @-prefixes in values. If a command line value starts with @, it is interpreted as being a file, loaded, and interpreted as if the file content would have been passed to the command line.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "28", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/ParserProperties.java", "methodName": "org.kohsuke.args4j.ParserProperties.getAtSyntax", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean getAtSyntax() {\n        return atSyntax;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets whether @-prefix-parsing is enabled.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "29", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/ParserProperties.java", "methodName": "org.kohsuke.args4j.ParserProperties.withShowDefaults", "methodParameterType": "boolean#", "methodParameterName": "showDefaults#", "methodBody": "public ParserProperties withShowDefaults(boolean showDefaults) {\n        this.showDefaults = showDefaults;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Toggles the showing of default values in the command line help.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "30", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/ParserProperties.java", "methodName": "org.kohsuke.args4j.ParserProperties.getShowDefaults", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean getShowDefaults() {\n        return showDefaults;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets whether show defaults is enabled.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "31", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/ParserProperties.java", "methodName": "org.kohsuke.args4j.ParserProperties.withUsageWidth", "methodParameterType": "int#", "methodParameterName": "usageWidth#", "methodBody": "public ParserProperties withUsageWidth(int usageWidth) {\n        if (usageWidth < 0)\n            throw new IllegalArgumentException(\"Usage width is negative\");\n        this.usageWidth = usageWidth;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets the width of a usage line. If the usage message is longer than this value, the parser wraps the line. Defaults to  {@code 80}.", "call_func_name": ["java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "32", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/ParserProperties.java", "methodName": "org.kohsuke.args4j.ParserProperties.getUsageWidth", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getUsageWidth() {\n        return usageWidth;\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the width of a usage line.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "33", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/ParserProperties.java", "methodName": "org.kohsuke.args4j.ParserProperties.withOptionSorter", "methodParameterType": "Comparator<OptionHandler>#", "methodParameterName": "sorter#", "methodBody": "public ParserProperties withOptionSorter(Comparator<OptionHandler> sorter) {\n        this.optionSorter = sorter;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Controls how options are sorted in the usage screen.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "34", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/ParserProperties.java", "methodName": "org.kohsuke.args4j.ParserProperties.getOptionSorter", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Comparator<OptionHandler> getOptionSorter() {\n        return optionSorter;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return {@code null} if options are left unsorted and should be listed by their discovery order.Otherwise the returned comparator is used to sort options. The default value is a comparator that sorts options alphabetically.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "35", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/ParserProperties.java", "methodName": "org.kohsuke.args4j.ParserProperties.withOptionValueDelimiter", "methodParameterType": "String#", "methodParameterName": "v#", "methodBody": "public ParserProperties withOptionValueDelimiter(String v) {\n        this.optionValueDelimiter = v;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets the string used to separate option name and its value (such as --foo=bar vs --foo bar) Default to whitespace. Note that the tokens separated in the argument array (such as '-foo','bar') is always recognized as a valid name/value separator.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "36", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.CmdLineParser", "methodParameterType": "Object#", "methodParameterName": "bean#", "methodBody": "public CmdLineParser(Object bean) {\n        // for display purposes, we like the arguments in argument order, but the options in alphabetical order\n        this(bean, ParserProperties.defaults());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new command line owner that parses arguments/options and set them into the given object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "37", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.CmdLineParser", "methodParameterType": "Object#ParserProperties#", "methodParameterName": "bean#parserProperties#", "methodBody": "public CmdLineParser(Object bean, ParserProperties parserProperties) {\n        this.parserProperties = parserProperties;\n        // A 'return' in the constructor just skips the rest of the implementation\n        // and returns the new object directly.\n        if (bean==null) return;\n\n        // Parse the metadata and create the setters\n        new ClassParser().parse(bean,this);\n\n        if (parserProperties.getOptionSorter()!=null) {\n            Collections.sort(options, parserProperties.getOptionSorter());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#ReturnStatement#IfStatement#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement)ReturnStatement)IfStatement(ExpressionStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new command line owner that parses arguments/options and set them into the given object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "38", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.addArgument", "methodParameterType": "Setter#Argument#", "methodParameterName": "setter#a#", "methodBody": "public void addArgument(Setter setter, Argument a) {\n        checkNonNull(setter, \"Setter\");\n        checkNonNull(a, \"Argument\");\n        \n        OptionHandler h = createOptionHandler(new OptionDef(a,setter.isMultiValued()),setter);\n    \tint index = a.index();\n    \t// make sure the argument will fit in the list\n    \twhile (index >= arguments.size()) {\n    \t\targuments.add(null);\n    \t}\n    \tif(arguments.get(index)!=null) {\n            throw new IllegalAnnotationError(Messages.MULTIPLE_USE_OF_ARGUMENT.format(index));\n        }\n    \targuments.set(index, h);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)WhileStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Programmatically defines an argument (instead of reading it from annotations as normal).", "call_func_name": ["org.kohsuke.args4j.Utilities.checkNonNull", "org.kohsuke.args4j.spi.Setter.isMultiValued", "org.kohsuke.args4j.OptionDef.<init>", "org.kohsuke.args4j.CmdLineParser.createOptionHandler", "org.kohsuke.args4j.Argument.index", "java.util.List.size", "java.util.List.add", "java.util.List.get", "java.lang.Integer.valueOf", "org.kohsuke.args4j.Messages.format", "org.kohsuke.args4j.IllegalAnnotationError.<init>", "java.util.List.set"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], [""], ["org.kohsuke.args4j.Argument", "boolean"], ["org.kohsuke.args4j.OptionDef", "org.kohsuke.args4j.spi.Setter"], [""], [""], ["java.lang.Object"], ["int"], ["int"], ["java.lang.Object[]"], ["java.lang.String"], ["int", "java.lang.Object"]], "passed_comments": [{"org.kohsuke.args4j.Utilities.checkNonNull": "This method is similar to  {@code Objects.requireNonNull()}. But this one is available for JDK 1.6 which is the current target of args4j. I didn't want to break compatibility with JDK 1.6."}, {"org.kohsuke.args4j.spi.Setter.isMultiValued": "Whether this setter is intrinsically multi-valued. <p> When parsing arguments (instead of options), intrinsically multi-valued setters consume all the remaining arguments. So, if the setter can store multiple values,  this method should return  {@code true}. <p> This characteristics of a setter doesn't affect option parsing at all; any options can be specified multiple times.  In many cases, this is a no-op--but when your shell script expands multiple environment variables (each of which may contain options), tolerating such  redundant options can be useful."}, {"org.kohsuke.args4j.CmdLineParser.createOptionHandler": "Creates an  {@link OptionHandler} that handles the given {@link Option} annotationand the  {@link Setter} instance."}]}, {"index": "39", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.addOption", "methodParameterType": "Setter#Option#", "methodParameterName": "setter#o#", "methodBody": "public void addOption(Setter setter, Option o) {\n        checkNonNull(setter, \"Setter\");\n        checkNonNull(o, \"Option\");\n    \n        checkOptionNotInMap(o.name());\n        for (String alias : o.aliases()) {\n        \tcheckOptionNotInMap(alias);\n        }\n        options.add(createOptionHandler(new NamedOptionDef(o), setter));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Programmatically defines an option (instead of reading it from annotations as normal).", "call_func_name": ["org.kohsuke.args4j.Utilities.checkNonNull", "org.kohsuke.args4j.Option.name", "org.kohsuke.args4j.CmdLineParser.checkOptionNotInMap", "org.kohsuke.args4j.Option.aliases", "org.kohsuke.args4j.NamedOptionDef.<init>", "org.kohsuke.args4j.CmdLineParser.createOptionHandler", "java.util.List.add"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], [""], ["java.lang.String"], [""], ["org.kohsuke.args4j.Option"], ["org.kohsuke.args4j.OptionDef", "org.kohsuke.args4j.spi.Setter"], ["java.lang.Object"]], "passed_comments": [{"org.kohsuke.args4j.Utilities.checkNonNull": "This method is similar to  {@code Objects.requireNonNull()}. But this one is available for JDK 1.6 which is the current target of args4j. I didn't want to break compatibility with JDK 1.6."}, {"org.kohsuke.args4j.CmdLineParser.createOptionHandler": "Creates an  {@link OptionHandler} that handles the given {@link Option} annotationand the  {@link Setter} instance."}]}, {"index": "40", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.getArguments", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<OptionHandler> getArguments() {\n        return arguments;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Lists up all the defined arguments in the order.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "41", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.getOptions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<OptionHandler> getOptions() {\n        return options;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Lists up all the defined options.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "42", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.createOptionHandler", "methodParameterType": "OptionDef#Setter#", "methodParameterName": "o#setter#", "methodBody": "protected OptionHandler createOptionHandler(OptionDef o, Setter setter) {\n        checkNonNull(o, \"OptionDef\");\n        checkNonNull(setter, \"Setter\");\n        return OptionHandlerRegistry.getRegistry().createOptionHandler(this, o, setter);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates an  {@link OptionHandler} that handles the given {@link Option} annotationand the  {@link Setter} instance.", "call_func_name": ["org.kohsuke.args4j.Utilities.checkNonNull", "org.kohsuke.args4j.OptionHandlerRegistry.getRegistry", "org.kohsuke.args4j.OptionHandlerRegistry.createOptionHandler"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], [""], ["org.kohsuke.args4j.CmdLineParser", "org.kohsuke.args4j.OptionDef", "org.kohsuke.args4j.spi.Setter"]], "passed_comments": [{"org.kohsuke.args4j.Utilities.checkNonNull": "This method is similar to  {@code Objects.requireNonNull()}. But this one is available for JDK 1.6 which is the current target of args4j. I didn't want to break compatibility with JDK 1.6."}, {"org.kohsuke.args4j.OptionHandlerRegistry.getRegistry": "Gets the option handler registry singleton instance."}, {"org.kohsuke.args4j.OptionHandlerRegistry.createOptionHandler": "Creates an  {@link OptionHandler} that handles the given {@link Option} annotationand the  {@link Setter} instance."}]}, {"index": "43", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.printExample", "methodParameterType": "OptionHandlerFilter#", "methodParameterName": "filter#", "methodBody": "public String printExample(OptionHandlerFilter filter) {\n        return printExample(filter, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Formats a command line example into a string. See  {@link #printExample(OptionHandlerFilter,ResourceBundle)} for more details.", "call_func_name": ["org.kohsuke.args4j.CmdLineParser.printExample"], "call_func_parameter": [["org.kohsuke.args4j.OptionHandlerFilter", "java.util.ResourceBundle"]], "passed_comments": [{"org.kohsuke.args4j.CmdLineParser.printExample": "Formats a command line example into a string. <p> This method produces a string like <code> -d &lt;dir&gt; -v -b</code>. This is useful for printing a command line example (perhaps as a part of the usage screen)."}]}, {"index": "44", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.printExample", "methodParameterType": "ExampleMode#", "methodParameterName": "mode#", "methodBody": "public String printExample(ExampleMode mode) {\n        return printExample(mode, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated Use  {@link #printExample(OptionHandlerFilter)}", "call_func_name": ["org.kohsuke.args4j.CmdLineParser.printExample"], "call_func_parameter": [["org.kohsuke.args4j.ExampleMode", "java.util.ResourceBundle"]], "passed_comments": [{"org.kohsuke.args4j.CmdLineParser.printExample": "@deprecated Use  {@link #printExample(OptionHandlerFilter,ResourceBundle)}"}]}, {"index": "45", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.printExample", "methodParameterType": "OptionHandlerFilter#ResourceBundle#", "methodParameterName": "mode#rb#", "methodBody": "public String printExample(OptionHandlerFilter mode, ResourceBundle rb) {\n        StringBuilder buf = new StringBuilder();\n\n        checkNonNull(mode, \"mode\");\n        \n        for (OptionHandler h : options) {\n            OptionDef option = h.option;\n            if(option.usage().length()==0)  continue;   // ignore\n            if(!mode.select(h))             continue;\n\n            buf.append(' ');\n            buf.append(h.getNameAndMeta(rb, parserProperties));\n        }\n\n        return buf.toString();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ContinueStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ContinueStatement#IfStatement#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(ContinueStatement)ContinueStatement)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ContinueStatement)ContinueStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Formats a command line example into a string. <p> This method produces a string like <code> -d &lt;dir&gt; -v -b</code>. This is useful for printing a command line example (perhaps as a part of the usage screen).", "call_func_name": ["java.lang.StringBuilder.<init>", "org.kohsuke.args4j.Utilities.checkNonNull", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.kohsuke.args4j.OptionDef.usage", "java.lang.String.length", "org.kohsuke.args4j.OptionHandlerFilter.select", "java.lang.StringBuilder.append", "org.kohsuke.args4j.spi.OptionHandler.getNameAndMeta", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.String"], [""], [""], [""], [""], [""], ["org.kohsuke.args4j.spi.OptionHandler"], ["char"], ["java.util.ResourceBundle", "org.kohsuke.args4j.ParserProperties"], ["java.lang.String"], [""]], "passed_comments": [{"org.kohsuke.args4j.Utilities.checkNonNull": "This method is similar to  {@code Objects.requireNonNull()}. But this one is available for JDK 1.6 which is the current target of args4j. I didn't want to break compatibility with JDK 1.6."}, {"org.kohsuke.args4j.OptionHandlerFilter.select": "@param o Never  {@code null}. Internally options (like <code>-r</code>) and arguments (others) are treated uniformly as  {@link OptionHandler}.  See  {@link OptionDef#isArgument()} to distinguish them."}, {"org.kohsuke.args4j.spi.OptionHandler.getNameAndMeta": "Get string representing usage for this option, of the form \"name metaval\" or \"name=metaval, e.g. \"--foo VALUE\" or \"--foo=VALUE\""}]}, {"index": "46", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.printExample", "methodParameterType": "ExampleMode#ResourceBundle#", "methodParameterName": "mode#rb#", "methodBody": "public String printExample(ExampleMode mode, ResourceBundle rb) {\n        return printExample((OptionHandlerFilter) mode, rb);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated Use  {@link #printExample(OptionHandlerFilter,ResourceBundle)}", "call_func_name": ["org.kohsuke.args4j.CmdLineParser.printExample"], "call_func_parameter": [["org.kohsuke.args4j.OptionHandlerFilter", "java.util.ResourceBundle"]], "passed_comments": [{"org.kohsuke.args4j.CmdLineParser.printExample": "Formats a command line example into a string. <p> This method produces a string like <code> -d &lt;dir&gt; -v -b</code>. This is useful for printing a command line example (perhaps as a part of the usage screen)."}]}, {"index": "47", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.printUsage", "methodParameterType": "OutputStream#", "methodParameterName": "out#", "methodBody": "public void printUsage(OutputStream out) {\n        printUsage(new OutputStreamWriter(out),null);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#NullLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Prints the list of options and their usages to the screen. <p> This is a convenience method for calling  {@code printUsage(new OutputStreamWriter(out),null)}so that you can do  {@code printUsage(System.err)}.", "call_func_name": ["java.io.OutputStreamWriter.<init>", "org.kohsuke.args4j.CmdLineParser.printUsage"], "call_func_parameter": [["java.io.OutputStream"], ["java.io.Writer", "java.util.ResourceBundle"]], "passed_comments": [{"org.kohsuke.args4j.CmdLineParser.printUsage": "Prints the list of all the non-hidden options and their usages to the screen. <p> Short for  {@code printUsage(out,rb,OptionHandlerFilter.PUBLIC)}"}]}, {"index": "48", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.printUsage", "methodParameterType": "Writer#ResourceBundle#", "methodParameterName": "out#rb#", "methodBody": "public void printUsage(Writer out, ResourceBundle rb) {\n        printUsage(out, rb, OptionHandlerFilter.PUBLIC);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Prints the list of all the non-hidden options and their usages to the screen. <p> Short for  {@code printUsage(out,rb,OptionHandlerFilter.PUBLIC)}", "call_func_name": ["org.kohsuke.args4j.CmdLineParser.printUsage"], "call_func_parameter": [["java.io.Writer", "java.util.ResourceBundle", "org.kohsuke.args4j.OptionHandlerFilter"]], "passed_comments": [{"org.kohsuke.args4j.CmdLineParser.printUsage": "Prints the list of all the non-hidden options and their usages to the screen."}]}, {"index": "49", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.printUsage", "methodParameterType": "Writer#ResourceBundle#OptionHandlerFilter#", "methodParameterName": "out#rb#filter#", "methodBody": "public void printUsage(Writer out, ResourceBundle rb, OptionHandlerFilter filter) {\n        PrintWriter w = new PrintWriter(out);\n        // determine the length of the option + metavar first\n        int len = 0;\n        for (OptionHandler h : arguments) {\n            int curLen = getPrefixLen(h, rb);\n            len = Math.max(len,curLen);\n        }\n        for (OptionHandler h: options) {\n            int curLen = getPrefixLen(h, rb);\n            len = Math.max(len,curLen);\n        }\n\n        // then print\n        for (OptionHandler h : arguments) {\n        \tprintOption(w, h, len, rb, filter);\n        }\n        for (OptionHandler h : options) {\n        \tprintOption(w, h, len, rb, filter);\n        }\n\n        w.flush();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Prints the list of all the non-hidden options and their usages to the screen.", "call_func_name": ["java.io.PrintWriter.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.kohsuke.args4j.CmdLineParser.getPrefixLen", "java.lang.Math.max", "org.kohsuke.args4j.CmdLineParser.printOption", "java.io.PrintWriter.flush"], "call_func_parameter": [["java.io.Writer"], [""], [""], [""], ["org.kohsuke.args4j.spi.OptionHandler", "java.util.ResourceBundle"], ["int", "int"], ["java.io.PrintWriter", "org.kohsuke.args4j.spi.OptionHandler", "int", "java.util.ResourceBundle", "org.kohsuke.args4j.OptionHandlerFilter"], [""]], "passed_comments": [{"org.kohsuke.args4j.CmdLineParser.printOption": "Prints usage information for a given option. <p> Subtypes may override this method and determine which options get printed (or other things), based on  {@link OptionHandler} (perhaps by using {@code handler.setter.asAnnotatedElement()})."}]}, {"index": "50", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.printOption", "methodParameterType": "PrintWriter#OptionHandler#int#ResourceBundle#OptionHandlerFilter#", "methodParameterName": "out#handler#len#rb#filter#", "methodBody": "protected void printOption(PrintWriter out, OptionHandler handler, int len, ResourceBundle rb, OptionHandlerFilter filter) {\n    \t// Hiding options without usage information\n    \tif (handler.option.usage() == null ||\n            handler.option.usage().length() == 0 ||\n            !filter.select(handler)) {\n    \t\treturn;\n    \t}\n\n    \t// What is the width of the two data columns\n        int totalUsageWidth = parserProperties.getUsageWidth();\n    \tint widthMetadata = Math.min(len, (totalUsageWidth - 4) / 2);\n    \tint widthUsage    = totalUsageWidth - 4 - widthMetadata;\n\n        String defaultValuePart = createDefaultValuePart(handler);\n        \n    \t// Line wrapping\n        // the 'left' side\n    \tList<String> namesAndMetas = wrapLines(handler.getNameAndMeta(rb, parserProperties), widthMetadata);\n        // the 'right' side\n    \tList<String> usages        = wrapLines(localize(handler.option.usage(),rb) + defaultValuePart, widthUsage);\n\n    \t// Output\n    \tfor(int i=0; i<Math.max(namesAndMetas.size(), usages.size()); i++) {\n    \t\tString nameAndMeta = (i >= namesAndMetas.size()) ? \"\" : namesAndMetas.get(i);\n\t\t\tString usage       = (i >= usages.size())        ? \"\" : usages.get(i);\n\t\t\tString format      = ((nameAndMeta.length() > 0) && (i == 0))\n\t\t\t                   ? \" %1$-\" + widthMetadata + \"s : %2$-1s\"\n\t\t\t                   : \" %1$-\" + widthMetadata + \"s   %2$-1s\";\n\t\t\tString output = String.format(format, nameAndMeta, usage);\n                                                \n\t\t\tout.println(output);\n    \t}\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#NumberLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#StringLiteral#SimpleName#StringLiteral#InfixExpression#StringLiteral#SimpleName#StringLiteral#InfixExpression#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Prints usage information for a given option. <p> Subtypes may override this method and determine which options get printed (or other things), based on  {@link OptionHandler} (perhaps by using {@code handler.setter.asAnnotatedElement()}).", "call_func_name": ["org.kohsuke.args4j.OptionDef.usage", "java.lang.String.length", "org.kohsuke.args4j.OptionHandlerFilter.select", "org.kohsuke.args4j.ParserProperties.getUsageWidth", "java.lang.Math.min", "org.kohsuke.args4j.CmdLineParser.createDefaultValuePart", "org.kohsuke.args4j.spi.OptionHandler.getNameAndMeta", "org.kohsuke.args4j.CmdLineParser.wrapLines", "java.lang.StringBuilder.<init>", "org.kohsuke.args4j.CmdLineParser.localize", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.List.size", "java.lang.Math.max", "java.util.List.get", "java.lang.StringBuilder.append", "java.lang.String.format", "java.io.PrintWriter.println"], "call_func_parameter": [[""], [""], ["org.kohsuke.args4j.spi.OptionHandler"], [""], ["int", "int"], ["org.kohsuke.args4j.spi.OptionHandler"], ["java.util.ResourceBundle", "org.kohsuke.args4j.ParserProperties"], ["java.lang.String", "int"], [""], ["java.lang.String", "java.util.ResourceBundle"], ["java.lang.String"], [""], [""], ["int", "int"], ["int"], ["int"], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String"]], "passed_comments": [{"org.kohsuke.args4j.OptionHandlerFilter.select": "@param o Never  {@code null}. Internally options (like <code>-r</code>) and arguments (others) are treated uniformly as  {@link OptionHandler}.  See  {@link OptionDef#isArgument()} to distinguish them."}, {"org.kohsuke.args4j.ParserProperties.getUsageWidth": "@return the width of a usage line."}, {"org.kohsuke.args4j.spi.OptionHandler.getNameAndMeta": "Get string representing usage for this option, of the form \"name metaval\" or \"name=metaval, e.g. \"--foo VALUE\" or \"--foo=VALUE\""}, {"org.kohsuke.args4j.CmdLineParser.wrapLines": "Wraps a line so that the resulting parts are not longer than a given maximum length."}]}, {"index": "51", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.wrapLines", "methodParameterType": "String#int#", "methodParameterName": "line#maxLength#", "methodBody": "private List<String> wrapLines(String line, final int maxLength) {\n    \tList<String> rv = new ArrayList<String>();\n        for (String restOfLine : line.split(\"\\\\n\")) {\n            while (restOfLine.length() > maxLength) {\n                // try to wrap at space, but don't try too hard as some languages don't even have whitespaces.\n                int lineLength;\n                String candidate = restOfLine.substring(0, maxLength);\n                int sp=candidate.lastIndexOf(' ');\n                if(sp>maxLength*3/5)    lineLength=sp;\n                else                    lineLength=maxLength;\n                rv.add(restOfLine.substring(0, lineLength));\n                restOfLine = restOfLine.substring(lineLength).trim();\n            }\n            rv.add(restOfLine);\n        }\n    \treturn rv;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(WhileStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Wraps a line so that the resulting parts are not longer than a given maximum length.", "call_func_name": ["java.util.ArrayList.<init>", "java.lang.String.split", "java.lang.String.length", "java.lang.String.substring", "java.lang.String.lastIndexOf", "java.util.List.add", "java.lang.String.substring", "java.lang.String.trim"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["int", "int"], ["int"], ["java.lang.Object"], ["int"], [""]], "passed_comments": "/"}, {"index": "52", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.parseArgument", "methodParameterType": "Collection<String>#", "methodParameterName": "args#", "methodBody": "public void parseArgument(Collection<String> args) throws CmdLineException {\n        parseArgument(args.toArray(new String[args.size()]));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Same as  {@link #parseArgument(String[])}", "call_func_name": ["java.util.Collection.size", "java.util.Collection.toArray", "org.kohsuke.args4j.CmdLineParser.parseArgument"], "call_func_parameter": [[""], ["java.lang.Object[]"], ["java.lang.String[]"]], "passed_comments": "/"}, {"index": "53", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.parseArgument", "methodParameterType": "String#", "methodParameterName": "args#", "methodBody": "public void parseArgument(final String... args) throws CmdLineException {\n        \n        checkNonNull(args, \"args\");\n        \n        String expandedArgs[] = args;\n        if (parserProperties.getAtSyntax()) {\n            expandedArgs = expandAtFiles(args);\n        }\n        CmdLineImpl cmdLine = new CmdLineImpl(expandedArgs);\n\n        Set<OptionHandler> present = new HashSet<OptionHandler>();\n        int argIndex = 0;\n\n        while( cmdLine.hasMore() ) {\n            String arg = cmdLine.getCurrentToken();\n            if( isOption(arg) ) {\n                // '=' is for historical compatibility fallback\n                boolean isKeyValuePair = arg.contains(parserProperties.getOptionValueDelimiter()) || arg.indexOf('=')!=-1;\n\n                // parse this as an option.\n                currentOptionHandler = isKeyValuePair ? findOptionHandler(arg) : findOptionByName(arg);\n\n                if(currentOptionHandler==null) {\n                    // TODO: insert dynamic handler processing\n                    throw new CmdLineException(this, Messages.UNDEFINED_OPTION, arg);\n                }\n\n                // known option; skip its name\n                if (isKeyValuePair) {\n                    cmdLine.splitToken();\n                } else {\n                    cmdLine.proceed(1);\n                }\n            } else {\n            \tif (argIndex >= arguments.size()) {\n            \t\tMessages msg = arguments.size() == 0 ? Messages.NO_ARGUMENT_ALLOWED : Messages.TOO_MANY_ARGUMENTS;\n                    throw new CmdLineException(this, msg, arg);\n            \t}\n\n            \t// known argument\n            \tcurrentOptionHandler = arguments.get(argIndex);\n                if (currentOptionHandler==null) // this is a programmer error. arg index should be continuous\n                    throw new IllegalStateException(\"@Argument with index=\"+argIndex+\" is undefined\");\n\n            \tif (!currentOptionHandler.option.isMultiValued())\n            \t\targIndex++;\n            }\n        \tint diff = currentOptionHandler.parseArguments(cmdLine);\n        \tcmdLine.proceed(diff);\n        \tpresent.add(currentOptionHandler);\n        }\n\n        // check whether a help option is set\n        boolean helpSet = false;\n        for (OptionHandler handler : options) {\n            if(handler.option.help() && present.contains(handler)) {\n                helpSet = true;\n            }\n        }\n\n        if (!helpSet) {\n            checkRequiredOptionsAndArguments(present);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#Dimension#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#NumberLiteral#PrefixExpression#InfixExpression#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#QualifiedName#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#PostfixExpression#ExpressionStatement#IfStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(Dimension)Dimension(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(IfStatement(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)IfStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Parses the command line arguments and set them to the option bean given in the constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "54", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.expandAtFiles", "methodParameterType": "String#", "methodParameterName": "args#", "methodBody": "private String[] expandAtFiles(String args[]) throws CmdLineException {\n        List<String> result = new ArrayList<String>();\n        for (String arg : args) {\n            if (arg.startsWith(\"@\")) {\n                File file = new File(arg.substring(1));\n                if (!file.exists())\n                    throw new CmdLineException(this,Messages.NO_SUCH_FILE,file.getPath());\n                try {\n                    result.addAll(readAllLines(file));\n                } catch (IOException ex) {\n                    throw new CmdLineException(this, \"Failed to parse \"+file,ex);\n                }\n            } else {\n                result.add(arg);\n            }\n        }\n        return result.toArray(new String[result.size()]);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#Dimension#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#StringLiteral#SimpleName#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Dimension)Dimension)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)IfStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Expands every entry prefixed with the AT sign by reading the file. The AT sign is used to reference another file that contains command line options separated by line breaks.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "55", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.readAllLines", "methodParameterType": "File#", "methodParameterName": "f#", "methodBody": "private static List<String> readAllLines(File f) throws IOException {\n        BufferedReader r = new BufferedReader(new FileReader(f));\n        try {\n            List<String> result = new ArrayList<String>();\n            String line;\n            while ((line = r.readLine()) != null) {\n                result.add(line);\n            }\n            return result;\n        }  finally {\n            r.close();\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ParenthesizedExpression#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ParenthesizedExpression(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Reads all lines of a file with the platform encoding.", "call_func_name": ["java.io.FileReader.<init>", "java.io.BufferedReader.<init>", "java.util.ArrayList.<init>", "java.io.BufferedReader.readLine", "java.util.List.add", "java.io.BufferedReader.close"], "call_func_parameter": [["java.io.File"], ["java.io.Reader"], [""], [""], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "56", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.isHandlerHasHisOptions", "methodParameterType": "NamedOptionDef#Set<OptionHandler>#", "methodParameterName": "option#present#", "methodBody": "private boolean isHandlerHasHisOptions(NamedOptionDef option, Set<OptionHandler> present) {\n        for (String depend : option.depends()) {\n            if (!present.contains(findOptionHandler(depend)))\n                return false;\n        }\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return {@code true} if all options required by {@code option} are present, {@code false} otherwise", "call_func_name": ["org.kohsuke.args4j.NamedOptionDef.depends", "org.kohsuke.args4j.CmdLineParser.findOptionHandler", "java.util.Set.contains"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "57", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.isHandlerAllowOtherOptions", "methodParameterType": "NamedOptionDef#Set<OptionHandler>#", "methodParameterName": "option#present#", "methodBody": "private boolean isHandlerAllowOtherOptions(NamedOptionDef option, Set<OptionHandler> present) {\n        for (String forbid : option.forbids()) {\n            if (present.contains(findOptionHandler(forbid)))\n                return false;\n        }\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#BooleanLiteral#ReturnStatement#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return {@code true} if all options forbid by {@code option} are not present, {@code false} otherwise", "call_func_name": ["org.kohsuke.args4j.NamedOptionDef.forbids", "org.kohsuke.args4j.CmdLineParser.findOptionHandler", "java.util.Set.contains"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "58", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.findOptionByName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "private OptionHandler findOptionByName(String name) {\n\t\tfor (OptionHandler h : options) {\n\t\t\tNamedOptionDef option = (NamedOptionDef)h.option;\n\t\t\tif (name.equals(option.name())) {\n\t\t\t\treturn h;\n\t\t\t}\n\t\t\tfor (String alias : option.aliases()) {\n\t\t\t\tif (name.equals(alias)) {\n\t\t\t\t\treturn h;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#Block#EnhancedForStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement)Block)EnhancedForStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Finds a registered  {@code OptionHandler} by its name or its alias.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.kohsuke.args4j.NamedOptionDef.name", "java.lang.String.equals", "org.kohsuke.args4j.NamedOptionDef.aliases"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "59", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.isOption", "methodParameterType": "String#", "methodParameterName": "arg#", "methodBody": "protected boolean isOption(String arg) {\n        checkNonNull(arg, \"arg\");\n        \n        return parsingOptions && arg.startsWith(\"-\");\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns  {@code true} if the given token is an option(as opposed to an argument).", "call_func_name": ["org.kohsuke.args4j.Utilities.checkNonNull", "java.lang.String.startsWith"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], ["java.lang.String"]], "passed_comments": [{"org.kohsuke.args4j.Utilities.checkNonNull": "This method is similar to  {@code Objects.requireNonNull()}. But this one is available for JDK 1.6 which is the current target of args4j. I didn't want to break compatibility with JDK 1.6."}]}, {"index": "60", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.registerHandler", "methodParameterType": "Class#Class<? extends OptionHandler>#", "methodParameterName": "valueType#handlerClass#", "methodBody": "public static void registerHandler( Class valueType, Class<? extends OptionHandler> handlerClass ) {\n        checkNonNull(valueType, \"valueType\");\n        checkNonNull(handlerClass, \"handlerClass\");\n\n        OptionHandlerRegistry.getRegistry().registerHandler(valueType, handlerClass);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Registers a user-defined  {@link OptionHandler} class with args4j.<p> This method allows users to extend the behavior of args4j by writing their own  {@link OptionHandler} implementation.", "call_func_name": ["org.kohsuke.args4j.Utilities.checkNonNull", "org.kohsuke.args4j.OptionHandlerRegistry.getRegistry", "org.kohsuke.args4j.OptionHandlerRegistry.registerHandler"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], [""], ["java.lang.Class", "java.lang.Class"]], "passed_comments": [{"org.kohsuke.args4j.Utilities.checkNonNull": "This method is similar to  {@code Objects.requireNonNull()}. But this one is available for JDK 1.6 which is the current target of args4j. I didn't want to break compatibility with JDK 1.6."}, {"org.kohsuke.args4j.OptionHandlerRegistry.getRegistry": "Gets the option handler registry singleton instance."}, {"org.kohsuke.args4j.OptionHandlerRegistry.registerHandler": "Registers a user-defined  {@link OptionHandler} class with args4j.<p> This method allows users to extend the behavior of args4j by writing their own  {@link OptionHandler} implementation."}]}, {"index": "61", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.setUsageWidth", "methodParameterType": "int#", "methodParameterName": "usageWidth#", "methodBody": "public void setUsageWidth(int usageWidth) {\n        parserProperties.withUsageWidth(usageWidth);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the width of the usage output.", "call_func_name": ["org.kohsuke.args4j.ParserProperties.withUsageWidth"], "call_func_parameter": [["int"]], "passed_comments": [{"org.kohsuke.args4j.ParserProperties.withUsageWidth": "Sets the width of a usage line. If the usage message is longer than this value, the parser wraps the line. Defaults to  {@code 80}."}]}, {"index": "62", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.stopOptionParsing", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void stopOptionParsing() {\n\t\tparsingOptions = false;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Signals the parser that parsing the options has finished. <p> Everything seen after this call is treated as an argument as opposed to an option.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "63", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.printSingleLineUsage", "methodParameterType": "OutputStream#", "methodParameterName": "out#", "methodBody": "public void printSingleLineUsage(OutputStream out) {\n        checkNonNull(out, \"OutputStream\");\n        \n\t\tprintSingleLineUsage(new OutputStreamWriter(out), null);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#NullLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Prints a single-line usage to the screen. <p> This is a convenience method for calling  {@code printUsage(new OutputStreamWriter(out),null)}so that you can do  {@code printUsage(System.err)}.", "call_func_name": ["org.kohsuke.args4j.Utilities.checkNonNull", "java.io.OutputStreamWriter.<init>", "org.kohsuke.args4j.CmdLineParser.printSingleLineUsage"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], ["java.io.OutputStream"], ["java.io.Writer", "java.util.ResourceBundle"]], "passed_comments": [{"org.kohsuke.args4j.Utilities.checkNonNull": "This method is similar to  {@code Objects.requireNonNull()}. But this one is available for JDK 1.6 which is the current target of args4j. I didn't want to break compatibility with JDK 1.6."}, {"org.kohsuke.args4j.CmdLineParser.printSingleLineUsage": "Prints a single-line usage to the screen."}]}, {"index": "64", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineParser.java", "methodName": "org.kohsuke.args4j.CmdLineParser.printSingleLineUsage", "methodParameterType": "Writer#ResourceBundle#", "methodParameterName": "w#rb#", "methodBody": "// TODO test this!\n\tpublic void printSingleLineUsage(Writer w, ResourceBundle rb) {\n        checkNonNull(w, \"Writer\");\n        \n\t\tPrintWriter pw = new PrintWriter(w);\n\t\tfor (OptionHandler h : arguments) {\n\t\t\tprintSingleLineOption(pw, h, rb);\n\t\t}\n\t\tfor (OptionHandler h : options) {\n\t\t\tprintSingleLineOption(pw, h, rb);\n\t\t}\n\t\tpw.flush();\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Prints a single-line usage to the screen.", "call_func_name": ["org.kohsuke.args4j.Utilities.checkNonNull", "java.io.PrintWriter.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.kohsuke.args4j.CmdLineParser.printSingleLineOption", "java.io.PrintWriter.flush"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], ["java.io.Writer"], [""], [""], [""], ["java.io.PrintWriter", "org.kohsuke.args4j.spi.OptionHandler", "java.util.ResourceBundle"], [""]], "passed_comments": [{"org.kohsuke.args4j.Utilities.checkNonNull": "This method is similar to  {@code Objects.requireNonNull()}. But this one is available for JDK 1.6 which is the current target of args4j. I didn't want to break compatibility with JDK 1.6."}]}, {"index": "65", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/Config.java", "methodName": "org.kohsuke.args4j.Config.parse", "methodParameterType": "InputSource#", "methodParameterName": "xml#", "methodBody": "public static Config parse(InputSource xml) throws IOException, SAXException {\n\t\tConfig rv = new Config();\n\t\tXMLReader reader = XMLReaderFactory.createXMLReader();\n\t\tConfigHandler handler = rv.new ConfigHandler(rv);\n\t\treader.setContentHandler(handler);\n\t\treader.parse(xml);\n\t\treturn rv;\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Parses a XML file and returns a Config object holding the information.", "call_func_name": ["org.kohsuke.args4j.Config.<init>", "org.xml.sax.helpers.XMLReaderFactory.createXMLReader", "java.lang.Object.getClass", "org.xml.sax.XMLReader.setContentHandler", "org.xml.sax.XMLReader.parse"], "call_func_parameter": [[""], [""], [""], ["org.xml.sax.ContentHandler"], ["org.xml.sax.InputSource"]], "passed_comments": "/"}, {"index": "66", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/Localizable.java", "methodName": "org.kohsuke.args4j.Localizable.formatWithLocale", "methodParameterType": "Locale#Object#", "methodParameterName": "locale#args#", "methodBody": "public String formatWithLocale( Locale locale, Object... args );", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Format the implicitly given message by  {@code this} object with the given locale.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "67", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/Localizable.java", "methodName": "org.kohsuke.args4j.Localizable.format", "methodParameterType": "Object#", "methodParameterName": "args#", "methodBody": "public String format( Object... args );", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Format the implicitly given message by  {@code this} object with the default locale.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "68", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/OptionDef.java", "methodName": "org.kohsuke.args4j.OptionDef.hidden", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean hidden() {\n\t\treturn hidden;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Value from  {@link Option#hidden()} or {@link Argument#hidden()}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "69", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineException.java", "methodName": "org.kohsuke.args4j.CmdLineException.CmdLineException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public CmdLineException(String message) {\n        super(message);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@deprecated Use  {@link #CmdLineException(CmdLineParser,String)}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "70", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineException.java", "methodName": "org.kohsuke.args4j.CmdLineException.CmdLineException", "methodParameterType": "String#Throwable#", "methodParameterName": "message#cause#", "methodBody": "public CmdLineException(String message, Throwable cause) {\n        super(message, cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@deprecated Use  {@link #CmdLineException(CmdLineParser,String,Throwable)}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "71", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineException.java", "methodName": "org.kohsuke.args4j.CmdLineException.CmdLineException", "methodParameterType": "Throwable#", "methodParameterName": "cause#", "methodBody": "public CmdLineException(Throwable cause) {\n        super(cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@deprecated Use  {@link #CmdLineException(CmdLineParser,Throwable)}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "72", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineException.java", "methodName": "org.kohsuke.args4j.CmdLineException.CmdLineException", "methodParameterType": "CmdLineParser#String#", "methodParameterName": "parser#message#", "methodBody": "public CmdLineException(CmdLineParser parser, String message) {\n        super(message);\n        this.parser = parser;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@deprecated Use  {@link #CmdLineException(org.kohsuke.args4j.CmdLineParser,Localizable,java.lang.String) }", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "73", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/CmdLineException.java", "methodName": "org.kohsuke.args4j.CmdLineException.getParser", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CmdLineParser getParser() {\n        return parser;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Obtains the  {@link CmdLineParser} that triggered an exception.<p> Unless you have legacy  {@link OptionHandler} that doesn't pass in this informationwhen it throws an exception, this method should always return a non-null value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "74", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/OptionHandlerFilter.java", "methodName": "org.kohsuke.args4j.OptionHandlerFilter.select", "methodParameterType": "OptionHandler#", "methodParameterName": "o#", "methodBody": "boolean select(OptionHandler o);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "@param o Never  {@code null}. Internally options (like <code>-r</code>) and arguments (others) are treated uniformly as  {@link OptionHandler}.  See  {@link OptionDef#isArgument()} to distinguish them.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "75", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/OptionHandlerRegistry.java", "methodName": "org.kohsuke.args4j.OptionHandlerRegistry.getRegistry", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public synchronized static OptionHandlerRegistry getRegistry() {\n        if (instance == null) {\n            instance = new OptionHandlerRegistry();\n        }\n        return instance;\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the option handler registry singleton instance.", "call_func_name": ["org.kohsuke.args4j.OptionHandlerRegistry.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "76", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/OptionHandlerRegistry.java", "methodName": "org.kohsuke.args4j.OptionHandlerRegistry.OptionHandlerRegistry", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private OptionHandlerRegistry() {\n        initHandlers();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs an option handler manager with the default handlers initialized.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "77", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/OptionHandlerRegistry.java", "methodName": "org.kohsuke.args4j.OptionHandlerRegistry.initHandlers", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void initHandlers() {\n        registerHandler(Boolean.class,BooleanOptionHandler.class);\n        registerHandler(boolean.class,BooleanOptionHandler.class);\n        registerHandler(File.class,FileOptionHandler.class);\n        registerHandler(URL.class, URLOptionHandler.class);\n        registerHandler(URI.class, URIOptionHandler.class);\n        registerHandler(Integer.class,IntOptionHandler.class);\n        registerHandler(int.class,IntOptionHandler.class);\n        registerHandler(Double.class, DoubleOptionHandler.class);\n        registerHandler(double.class,DoubleOptionHandler.class);\n        registerHandler(String.class,StringOptionHandler.class);\n        registerHandler(Byte.class, ByteOptionHandler.class);\n        registerHandler(byte.class, ByteOptionHandler.class);\n        registerHandler(Character.class, CharOptionHandler.class);\n        registerHandler(char.class, CharOptionHandler.class);\n        registerHandler(Float.class, FloatOptionHandler.class);\n        registerHandler(float.class, FloatOptionHandler.class);\n        registerHandler(Long.class, LongOptionHandler.class);\n        registerHandler(long.class, LongOptionHandler.class);\n        registerHandler(Short.class, ShortOptionHandler.class);\n        registerHandler(short.class, ShortOptionHandler.class);\n        registerHandler(InetAddress.class, InetAddressOptionHandler.class);\n        registerHandler(Pattern.class, PatternOptionHandler.class);\n        // enum is a special case\n        registerHandler(Map.class,MapOptionHandler.class);\n\n        try {\n            Class p = Class.forName(\"java.nio.file.Path\");\n            registerHandler(p, PathOptionHandler.class);\n        } catch (ClassNotFoundException e) {\n            // running in Java6 or earlier\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#PrimitiveType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#PrimitiveType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#PrimitiveType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#PrimitiveType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#PrimitiveType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#PrimitiveType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#PrimitiveType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#PrimitiveType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Registers the default handlers.", "call_func_name": ["org.kohsuke.args4j.OptionHandlerRegistry.registerHandler", "java.lang.Class.forName"], "call_func_parameter": [["java.lang.Class", "java.lang.Class"], ["java.lang.String"]], "passed_comments": [{"org.kohsuke.args4j.OptionHandlerRegistry.registerHandler": "Registers a user-defined  {@link OptionHandler} class with args4j.<p> This method allows users to extend the behavior of args4j by writing their own  {@link OptionHandler} implementation."}]}, {"index": "78", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/OptionHandlerRegistry.java", "methodName": "org.kohsuke.args4j.OptionHandlerRegistry.getConstructor", "methodParameterType": "Class<? extends OptionHandler>#", "methodParameterName": "handlerClass#", "methodBody": "private static Constructor<? extends OptionHandler> getConstructor(Class<? extends OptionHandler> handlerClass) {\n        try {\n            return handlerClass.getConstructor(CmdLineParser.class, OptionDef.class, Setter.class);\n        } catch (NoSuchMethodException e) {\n            throw new IllegalArgumentException(Messages.NO_CONSTRUCTOR_ON_HANDLER.format(handlerClass));\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Finds the constructor for an option handler.", "call_func_name": ["java.lang.Class.getConstructor", "org.kohsuke.args4j.Messages.format", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.Class[]"], ["java.lang.Object[]"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "79", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/OptionHandlerRegistry.java", "methodName": "org.kohsuke.args4j.OptionHandlerRegistry.registerHandler", "methodParameterType": "Class#Class<? extends OptionHandler>#", "methodParameterName": "valueType#handlerClass#", "methodBody": "public void registerHandler( Class valueType, Class<? extends OptionHandler> handlerClass ) {\n        checkNonNull(valueType, \"valueType\");\n        checkNonNull(handlerClass, \"handlerClass\");\n\n        if(!OptionHandler.class.isAssignableFrom(handlerClass))\n            throw new IllegalArgumentException(Messages.NO_OPTIONHANDLER.format());\n\n        handlers.put(valueType, new DefaultConstructorHandlerFactory(handlerClass));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Registers a user-defined  {@link OptionHandler} class with args4j.<p> This method allows users to extend the behavior of args4j by writing their own  {@link OptionHandler} implementation.", "call_func_name": ["org.kohsuke.args4j.Utilities.checkNonNull", "java.lang.Class.isAssignableFrom", "org.kohsuke.args4j.Messages.format", "java.lang.IllegalArgumentException.<init>", "java.util.Map.put"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], ["java.lang.Class"], ["java.lang.Object[]"], ["java.lang.String"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.kohsuke.args4j.Utilities.checkNonNull": "This method is similar to  {@code Objects.requireNonNull()}. But this one is available for JDK 1.6 which is the current target of args4j. I didn't want to break compatibility with JDK 1.6."}]}, {"index": "80", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/OptionHandlerRegistry.java", "methodName": "org.kohsuke.args4j.OptionHandlerRegistry.registerHandler", "methodParameterType": "Class#OptionHandlerFactory#", "methodParameterName": "valueType#factory#", "methodBody": "public void registerHandler(Class valueType, OptionHandlerFactory factory) {\n        checkNonNull(valueType, \"valueType\");\n        checkNonNull(factory, \"factory\");\n\n        handlers.put(valueType, factory);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Registers a user-defined  {@link OptionHandler} class with args4j.<p> This method allows users to extend the behavior of args4j by writing their own  {@link OptionHandler} implementation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "81", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/OptionHandlerRegistry.java", "methodName": "org.kohsuke.args4j.OptionHandlerRegistry.createOptionHandler", "methodParameterType": "CmdLineParser#OptionDef#Setter#", "methodParameterName": "parser#o#setter#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    protected OptionHandler createOptionHandler(CmdLineParser parser, OptionDef o, Setter setter) {\n        checkNonNull(o, \"CmdLineParser\");\n        checkNonNull(o, \"OptionDef\");\n        checkNonNull(setter, \"Setter\");\n\n        Class<? extends OptionHandler> h = o.handler();\n        if(h==OptionHandler.class) {\n            // infer the type\n            Class<?> t = setter.getType();\n\n            // enum is the special case\n            if(Enum.class.isAssignableFrom(t))\n                return new EnumOptionHandler(parser,o,setter,t);\n\n            OptionHandlerFactory factory = handlers.get(t);\n            if (factory==null)\n                throw new IllegalAnnotationError(Messages.UNKNOWN_HANDLER.format(t));\n\n            return factory.getHandler(parser, o, setter);\n        } else {\n            // explicit handler specified\n            return new DefaultConstructorHandlerFactory(h).getHandler(parser, o, setter);\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#InfixExpression#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates an  {@link OptionHandler} that handles the given {@link Option} annotationand the  {@link Setter} instance.", "call_func_name": ["org.kohsuke.args4j.Utilities.checkNonNull", "org.kohsuke.args4j.OptionDef.handler", "org.kohsuke.args4j.spi.Setter.getType", "java.lang.Class.isAssignableFrom", "org.kohsuke.args4j.spi.EnumOptionHandler.<init>", "java.util.Map.get", "org.kohsuke.args4j.Messages.format", "org.kohsuke.args4j.IllegalAnnotationError.<init>"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], [""], [""], ["java.lang.Class"], ["org.kohsuke.args4j.CmdLineParser", "org.kohsuke.args4j.OptionDef", "org.kohsuke.args4j.spi.Setter", "java.lang.Class"], ["java.lang.Object"], ["java.lang.Object[]"], ["java.lang.String"]], "passed_comments": [{"org.kohsuke.args4j.Utilities.checkNonNull": "This method is similar to  {@code Objects.requireNonNull()}. But this one is available for JDK 1.6 which is the current target of args4j. I didn't want to break compatibility with JDK 1.6."}, {"org.kohsuke.args4j.spi.Setter.getType": "Gets the type of the underlying method/field."}]}, {"index": "82", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/NamedOptionDef.java", "methodName": "org.kohsuke.args4j.NamedOptionDef.NamedOptionDef", "methodParameterType": "Option#boolean#", "methodParameterName": "o#forceMultiValued#", "methodBody": "public NamedOptionDef(Option o, boolean forceMultiValued) {\n    \tthis(o);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@deprecated multi-valuedness as option definition does not make sense. It's driven by the setter.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "83", "file": "/root/repos/repos16/args4j/args4j/src/org/kohsuke/args4j/XmlParser.java", "methodName": "org.kohsuke.args4j.XmlParser.findMethodOrField", "methodParameterType": "Object#String#String#", "methodParameterName": "bean#field#method#", "methodBody": "private AccessibleObject findMethodOrField(Object bean, String field, String method) throws SecurityException, NoSuchFieldException, NoSuchMethodException, ClassNotFoundException {\n\t\tAccessibleObject rv;\n\t\tif (field != null) {\n\t\t\trv = bean.getClass().getDeclaredField(field);\n\t\t} else {\n\t\t\tString methodName = method.substring(0, method.indexOf(\"(\"));\n\t\t\tString[] params = method.substring(method.indexOf(\"(\")+1, method.indexOf(\")\")).split(\",\");\n\t\t\tClass[] paramTypes = new Class[params.length];\n\t\t\tfor(int i=0; i<params.length; i++) {\n\t\t\t\tString className = params[i];\n\t\t\t\tif (className.indexOf('.') < 0) {\n\t\t\t\t\tclassName = \"java.lang.\" + className;\n\t\t\t\t}\n\t\t\t\tparamTypes[i] = Class.forName(className);\n\t\t\t}\n\t\t\trv = bean.getClass().getMethod(methodName, paramTypes);\n\t\t}\n\t\treturn rv;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#StringLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)ForStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Finds a  {@link java.lang.reflect.Method} or {@link java.lang.reflect.Method} in the beaninstance with the requested name.", "call_func_name": ["java.lang.Object.getClass", "java.lang.Class.getDeclaredField", "java.lang.String.indexOf", "java.lang.String.substring", "java.lang.String.split", "java.lang.String.indexOf", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.Class.forName", "java.lang.Class.getMethod"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], ["int", "int"], ["java.lang.String"], ["int"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Class[]"]], "passed_comments": "/"}, {"index": "84", "file": "/root/repos/repos16/args4j/args4j-tools/src/org/kohsuke/args4j/apt/AnnotationVisitor.java", "methodName": "org.kohsuke.args4j.apt.AnnotationVisitor.onOption", "methodParameterType": "String#String#", "methodParameterName": "name#usage#", "methodBody": "@Deprecated\n    void onOption( String name, String usage );", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "@deprecated as of 2.0.17 use {@link #onOption(OptionWithUsage)}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}]